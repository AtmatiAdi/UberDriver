
Uber_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005740  08005740  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005740  08005740  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  08005754  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005754  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ab  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a9  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018760  00000000  00000000  00034ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011609  00000000  00000000  0004d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd20  00000000  00000000  0005e911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000ec684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005700 	.word	0x08005700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005700 	.word	0x08005700

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	af00      	add	r7, sp, #0
 8000152:	f107 0c08 	add.w	ip, r7, #8
 8000156:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DRV_Init+0x3c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f107 0308 	add.w	r3, r7, #8
 8000162:	2258      	movs	r2, #88	; 0x58
 8000164:	4619      	mov	r1, r3
 8000166:	f005 fab5 	bl	80056d4 <memcpy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	2104      	movs	r1, #4
 800016e:	4807      	ldr	r0, [pc, #28]	; (800018c <DRV_Init+0x40>)
 8000170:	f002 fc2e 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000174:	2001      	movs	r0, #1
 8000176:	f001 fb15 	bl	80017a4 <HAL_Delay>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000182:	b004      	add	sp, #16
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000028 	.word	0x20000028
 800018c:	40010c00 	.word	0x40010c00

08000190 <DRV_Write>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
	return res;
}

uint8_t DRV_Write(uint8_t addr, uint16_t data){
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	460a      	mov	r2, r1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	4613      	mov	r3, r2
 800019e:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2] = {(uint8_t)(data), ( addr << 3) + (uint8_t)(data >> 8)};
 80001a0:	88bb      	ldrh	r3, [r7, #4]
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	733b      	strb	r3, [r7, #12]
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	00db      	lsls	r3, r3, #3
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	88bb      	ldrh	r3, [r7, #4]
 80001ae:	0a1b      	lsrs	r3, r3, #8
 80001b0:	b29b      	uxth	r3, r3
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	4413      	add	r3, r2
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	737b      	strb	r3, [r7, #13]
	uint8_t ret[2];
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2104      	movs	r1, #4
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <DRV_Write+0x6c>)
 80001c0:	f002 fc06 	bl	80029d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001c4:	2001      	movs	r0, #1
 80001c6:	f001 faed 	bl	80017a4 <HAL_Delay>
	uint8_t res = HAL_SPI_TransmitReceive(&DRV_spi, buf, ret, 1, 100);
 80001ca:	f107 0208 	add.w	r2, r7, #8
 80001ce:	f107 010c 	add.w	r1, r7, #12
 80001d2:	2364      	movs	r3, #100	; 0x64
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	4809      	ldr	r0, [pc, #36]	; (8000200 <DRV_Write+0x70>)
 80001da:	f003 f97f 	bl	80034dc <HAL_SPI_TransmitReceive>
 80001de:	4603      	mov	r3, r0
 80001e0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80001e2:	2001      	movs	r0, #1
 80001e4:	f001 fade 	bl	80017a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2104      	movs	r1, #4
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <DRV_Write+0x6c>)
 80001ee:	f002 fbef 	bl	80029d0 <HAL_GPIO_WritePin>
	return res;
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	20000028 	.word	0x20000028

08000204 <HAL_UART_RxCpltCallback>:
uint8_t Break = 0;
uint8_t IsRunning = 0;
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800020c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000210:	4816      	ldr	r0, [pc, #88]	; (800026c <HAL_UART_RxCpltCallback+0x68>)
 8000212:	f002 fbf5 	bl	8002a00 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(huart, rx_buffer, 2);		// Chcemy obierac dalej
 8000216:	4b16      	ldr	r3, [pc, #88]	; (8000270 <HAL_UART_RxCpltCallback+0x6c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2202      	movs	r2, #2
 800021c:	4915      	ldr	r1, [pc, #84]	; (8000274 <HAL_UART_RxCpltCallback+0x70>)
 800021e:	4618      	mov	r0, r3
 8000220:	f004 fcec 	bl	8004bfc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(huart, ToSend, 1);			// Odsylamy warrtosc obrotow
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <HAL_UART_RxCpltCallback+0x6c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2201      	movs	r2, #1
 800022a:	4913      	ldr	r1, [pc, #76]	; (8000278 <HAL_UART_RxCpltCallback+0x74>)
 800022c:	4618      	mov	r0, r3
 800022e:	f004 fc79 	bl	8004b24 <HAL_UART_Transmit_DMA>
	ToSend[0] = 0;										// resetujemy zmienna obrotow
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <HAL_UART_RxCpltCallback+0x74>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
	Function = rx_buffer[0];
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <HAL_UART_RxCpltCallback+0x70>)
 800023a:	781a      	ldrb	r2, [r3, #0]
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <HAL_UART_RxCpltCallback+0x78>)
 800023e:	701a      	strb	r2, [r3, #0]
	Power = rx_buffer[1];
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <HAL_UART_RxCpltCallback+0x70>)
 8000242:	785a      	ldrb	r2, [r3, #1]
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_UART_RxCpltCallback+0x7c>)
 8000246:	701a      	strb	r2, [r3, #0]
	if ((Function == 0) || Power == 0){		// Zatrzymanie awaryjne
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <HAL_UART_RxCpltCallback+0x78>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d003      	beq.n	8000258 <HAL_UART_RxCpltCallback+0x54>
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_UART_RxCpltCallback+0x7c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d105      	bne.n	8000264 <HAL_UART_RxCpltCallback+0x60>
		SetFloating_A();
 8000258:	f000 f98a 	bl	8000570 <SetFloating_A>
		SetFloating_B();
 800025c:	f000 f99a 	bl	8000594 <SetFloating_B>
		SetFloating_C();
 8000260:	f000 f9aa 	bl	80005b8 <SetFloating_C>
	}
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010800 	.word	0x40010800
 8000270:	20000080 	.word	0x20000080
 8000274:	20000084 	.word	0x20000084
 8000278:	20000088 	.word	0x20000088
 800027c:	20000089 	.word	0x20000089
 8000280:	2000008a 	.word	0x2000008a

08000284 <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	//memcpy(&huart, &_huart, sizeof(_huart)); // This shit does not work
	huart = _huart;
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <Application_Init+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 2);
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <Application_Init+0x24>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2202      	movs	r2, #2
 8000298:	4904      	ldr	r1, [pc, #16]	; (80002ac <Application_Init+0x28>)
 800029a:	4618      	mov	r0, r3
 800029c:	f004 fcae 	bl	8004bfc <HAL_UART_Receive_DMA>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000084 	.word	0x20000084

080002b0 <Application_Update>:
		IsRunning = 0;
		ticks = MIN_TICKS;
	}
}

void Application_Update(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	else if(NORMAL_CONTROL){
		NormalControl();
	}
	else {

		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <Application_Update+0x20>)
 80002ba:	f002 fb89 	bl	80029d0 <HAL_GPIO_WritePin>
		SetZero_A();
 80002be:	f000 f8d7 	bl	8000470 <SetZero_A>
		SetZero_B();
 80002c2:	f000 f8e7 	bl	8000494 <SetZero_B>
		SetZero_C();
 80002c6:	f000 f8f7 	bl	80004b8 <SetZero_C>
	}
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40011400 	.word	0x40011400

080002d4 <Test_Sequence_01>:

void Test_Sequence_01(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
	int cnt = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
	int val = 8;
 80002de:	2308      	movs	r3, #8
 80002e0:	60bb      	str	r3, [r7, #8]
	int Speed;
	Speed = 0x00070000;
 80002e2:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80002e6:	607b      	str	r3, [r7, #4]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 80002e8:	e016      	b.n	8000318 <Test_Sequence_01+0x44>
		SixStep(Speed, val);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	b292      	uxth	r2, r2
 80002f0:	4611      	mov	r1, r2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f974 	bl	80005e0 <SixStep>
		++cnt;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
		if (cnt == 4){
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d104      	bne.n	800030e <Test_Sequence_01+0x3a>
			++val;
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	3301      	adds	r3, #1
 8000308:	60bb      	str	r3, [r7, #8]
			cnt = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000314:	3b1f      	subs	r3, #31
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800031e:	dce4      	bgt.n	80002ea <Test_Sequence_01+0x16>
		}
	}

	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000320:	e00a      	b.n	8000338 <Test_Sequence_01+0x64>
		SixStep(Speed, val);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	b292      	uxth	r2, r2
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f958 	bl	80005e0 <SixStep>
	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800033e:	dcf0      	bgt.n	8000322 <Test_Sequence_01+0x4e>
	}
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <HAL_ADC_ConvCpltCallback>:

uint16_t Value = 8;



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	// Collect data
	uint8_t div = 1;
 8000354:	2301      	movs	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
			//TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(htim1);
			//TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(htim2);
			tim_num++;
		}
	}
	IsNewVal = 1;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <HAL_ADC_ConvCpltCallback+0x28>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
	cnt ++;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	200000ae 	.word	0x200000ae
 8000378:	200000b0 	.word	0x200000b0

0800037c <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <Control_Init+0x68>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <Control_Init+0x6c>)
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <Control_Init+0x70>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 800039c:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <Control_Init+0x74>)
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <Control_Init+0x78>)
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2101      	movs	r1, #1
 80003ac:	4812      	ldr	r0, [pc, #72]	; (80003f8 <Control_Init+0x7c>)
 80003ae:	f002 fb0f 	bl	80029d0 <HAL_GPIO_WritePin>
	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 7);
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <Control_Init+0x78>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2207      	movs	r2, #7
 80003b8:	4910      	ldr	r1, [pc, #64]	; (80003fc <Control_Init+0x80>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 faee 	bl	800199c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <Control_Init+0x68>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2108      	movs	r1, #8
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fc64 	bl	8003c94 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 3);
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <Control_Init+0x68>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2203      	movs	r2, #3
 80003d4:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_Delay(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f001 f9e4 	bl	80017a4 <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000008c 	.word	0x2000008c
 80003e8:	20000090 	.word	0x20000090
 80003ec:	20000094 	.word	0x20000094
 80003f0:	20000098 	.word	0x20000098
 80003f4:	2000009c 	.word	0x2000009c
 80003f8:	40011400 	.word	0x40011400
 80003fc:	200000a0 	.word	0x200000a0

08000400 <StartPWM>:

void StartPWM(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <StartPWM+0x60>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fba0 	bl	8003b50 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <StartPWM+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fb9a 	bl	8003b50 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <StartPWM+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2104      	movs	r1, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f003 fb94 	bl	8003b50 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <StartPWM+0x68>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2108      	movs	r1, #8
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb8e 	bl	8003b50 <HAL_TIM_PWM_Start>

	htim1->Instance->CNT = 0;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <StartPWM+0x68>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <StartPWM+0x60>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <StartPWM+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(htim4);
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <StartPWM+0x6c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fad8 	bl	8003a0c <HAL_TIM_Base_Start>
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000090 	.word	0x20000090
 8000464:	20000094 	.word	0x20000094
 8000468:	2000008c 	.word	0x2000008c
 800046c:	20000098 	.word	0x20000098

08000470 <SetZero_A>:

void SetZero_A(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <SetZero_A+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	2108      	movs	r1, #8
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <SetZero_A+0x20>)
 8000484:	f002 faa4 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000090 	.word	0x20000090
 8000490:	40010c00 	.word	0x40010c00

08000494 <SetZero_B>:

void SetZero_B(){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SetZero_B+0x1c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2200      	movs	r2, #0
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2120      	movs	r1, #32
 80004a6:	4803      	ldr	r0, [pc, #12]	; (80004b4 <SetZero_B+0x20>)
 80004a8:	f002 fa92 	bl	80029d0 <HAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000094 	.word	0x20000094
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <SetZero_C>:

void SetZero_C(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SetZero_C+0x20>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2200      	movs	r2, #0
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SetZero_C+0x24>)
 80004ce:	f002 fa7f 	bl	80029d0 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000008c 	.word	0x2000008c
 80004dc:	40010800 	.word	0x40010800

080004e0 <SetPulse_AH>:

void SetPulse_AH(uint8_t value){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <SetPulse_AH+0x28>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	79fa      	ldrb	r2, [r7, #7]
 80004f2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <SetPulse_AH+0x2c>)
 80004fa:	f002 fa69 	bl	80029d0 <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000090 	.word	0x20000090
 800050c:	40010c00 	.word	0x40010c00

08000510 <SetPulse_BH>:

void SetPulse_BH(uint8_t value){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <SetPulse_BH+0x28>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	79fa      	ldrb	r2, [r7, #7]
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <SetPulse_BH+0x2c>)
 800052a:	f002 fa51 	bl	80029d0 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000094 	.word	0x20000094
 800053c:	40010c00 	.word	0x40010c00

08000540 <SetPulse_CH>:

void SetPulse_CH(uint8_t value){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <SetPulse_CH+0x28>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <SetPulse_CH+0x2c>)
 800055c:	f002 fa38 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000008c 	.word	0x2000008c
 800056c:	40010800 	.word	0x40010800

08000570 <SetFloating_A>:

void SetFloating_A(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <SetFloating_A+0x1c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <SetFloating_A+0x20>)
 8000584:	f002 fa24 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000090 	.word	0x20000090
 8000590:	40010c00 	.word	0x40010c00

08000594 <SetFloating_B>:

void SetFloating_B(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <SetFloating_B+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2200      	movs	r2, #0
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <SetFloating_B+0x20>)
 80005a8:	f002 fa12 	bl	80029d0 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000094 	.word	0x20000094
 80005b4:	40010c00 	.word	0x40010c00

080005b8 <SetFloating_C>:

void SetFloating_C(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SetFloating_C+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SetFloating_C+0x24>)
 80005ce:	f002 f9ff 	bl	80029d0 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	40010800 	.word	0x40010800

080005e0 <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff75 	bl	80004e0 <SetPulse_AH>
	SetZero_B();
 80005f6:	f7ff ff4d 	bl	8000494 <SetZero_B>
	SetFloating_C();
 80005fa:	f7ff ffdd 	bl	80005b8 <SetFloating_C>
	Delay_Tick(Speed);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f840 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_AH(Value);
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff69 	bl	80004e0 <SetPulse_AH>
	SetFloating_B();
 800060e:	f7ff ffc1 	bl	8000594 <SetFloating_B>
	SetZero_C();
 8000612:	f7ff ff51 	bl	80004b8 <SetZero_C>
	Delay_Tick(Speed);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f834 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_A();
 800061c:	f7ff ffa8 	bl	8000570 <SetFloating_A>
	SetPulse_BH(Value);
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff73 	bl	8000510 <SetPulse_BH>
	SetZero_C();
 800062a:	f7ff ff45 	bl	80004b8 <SetZero_C>
	Delay_Tick(Speed);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f828 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_A();
 8000634:	f7ff ff1c 	bl	8000470 <SetZero_A>
	SetPulse_BH(Value);
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff67 	bl	8000510 <SetPulse_BH>
	SetFloating_C();
 8000642:	f7ff ffb9 	bl	80005b8 <SetFloating_C>
	Delay_Tick(Speed);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f81c 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_A();
 800064c:	f7ff ff10 	bl	8000470 <SetZero_A>
	SetFloating_B();
 8000650:	f7ff ffa0 	bl	8000594 <SetFloating_B>
	SetPulse_CH(Value);
 8000654:	887b      	ldrh	r3, [r7, #2]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff71 	bl	8000540 <SetPulse_CH>
	Delay_Tick(Speed);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f810 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_A();
 8000664:	f7ff ff84 	bl	8000570 <SetFloating_A>
	SetZero_B();
 8000668:	f7ff ff14 	bl	8000494 <SetZero_B>
	SetPulse_CH(Value);
 800066c:	887b      	ldrh	r3, [r7, #2]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff65 	bl	8000540 <SetPulse_CH>
	Delay_Tick(Speed);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f804 	bl	8000684 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Delay_Tick>:
		SixStep(Speed, Value);
	}
}


void Delay_Tick(uint32_t val){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim4,0);
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <Delay_Tick+0x6c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
	if (val > MAX_TICKS) val = MAX_TICKS;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800069c:	d315      	bcc.n	80006ca <Delay_Tick+0x46>
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <Delay_Tick+0x70>)
 80006a0:	607b      	str	r3, [r7, #4]
	while(val > 0x00007fff){
 80006a2:	e012      	b.n	80006ca <Delay_Tick+0x46>
		val -= 0x00007fff;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80006aa:	3b7f      	subs	r3, #127	; 0x7f
 80006ac:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(htim4) < 0x7fff);
 80006ae:	bf00      	nop
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <Delay_Tick+0x6c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80006bc:	4293      	cmp	r3, r2
 80006be:	d9f7      	bls.n	80006b0 <Delay_Tick+0x2c>
		__HAL_TIM_SET_COUNTER(htim4,0);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <Delay_Tick+0x6c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d0:	d2e8      	bcs.n	80006a4 <Delay_Tick+0x20>
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
 80006d2:	bf00      	nop
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <Delay_Tick+0x6c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d8f8      	bhi.n	80006d4 <Delay_Tick+0x50>
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000098 	.word	0x20000098
 80006f4:	000fffff 	.word	0x000fffff

080006f8 <HAL_TIM_TriggerCallback>:

uint8_t test = 0;
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	test = __HAL_TIM_GET_COUNTER(htim1);
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_TIM_TriggerCallback+0x50>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_TIM_TriggerCallback+0x54>)
 800070c:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM1){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <HAL_TIM_TriggerCallback+0x58>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d111      	bne.n	800073c <HAL_TIM_TriggerCallback+0x44>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7f1b      	ldrb	r3, [r3, #28]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d10d      	bne.n	800073c <HAL_TIM_TriggerCallback+0x44>
			test = __HAL_TIM_GET_COUNTER(htim1);
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_TIM_TriggerCallback+0x50>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_TIM_TriggerCallback+0x54>)
 800072c:	701a      	strb	r2, [r3, #0]
			test = __HAL_TIM_GET_COUNTER(htim1);
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_TIM_TriggerCallback+0x50>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_TIM_TriggerCallback+0x54>)
 800073a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	200000b4 	.word	0x200000b4
 8000750:	40012c00 	.word	0x40012c00

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b093      	sub	sp, #76	; 0x4c
 8000758:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 ffc1 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f855 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fbb5 	bl	8000ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 fb85 	bl	8000e74 <MX_DMA_Init>
  MX_ADC1_Init();
 800076a:	f000 f8a7 	bl	80008bc <MX_ADC1_Init>
  MX_SPI1_Init();
 800076e:	f000 f939 	bl	80009e4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000772:	f000 f96f 	bl	8000a54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000776:	f000 fa8f 	bl	8000c98 <MX_TIM3_Init>
  MX_TIM2_Init();
 800077a:	f000 fa19 	bl	8000bb0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800077e:	f000 fb4f 	bl	8000e20 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000782:	f000 faff 	bl	8000d84 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <main+0x94>)
 800078e:	f002 f91f 	bl	80029d0 <HAL_GPIO_WritePin>

	DRV_Init(hspi1);
 8000792:	4c16      	ldr	r4, [pc, #88]	; (80007ec <main+0x98>)
 8000794:	4668      	mov	r0, sp
 8000796:	f104 0310 	add.w	r3, r4, #16
 800079a:	2248      	movs	r2, #72	; 0x48
 800079c:	4619      	mov	r1, r3
 800079e:	f004 ff99 	bl	80056d4 <memcpy>
 80007a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007a6:	f7ff fcd1 	bl	800014c <DRV_Init>
	DRV_Write(SHUNT_AMPLIFIER_CONTROL,
 80007aa:	213f      	movs	r1, #63	; 0x3f
 80007ac:	200a      	movs	r0, #10
 80007ae:	f7ff fcef 	bl	8000190 <DRV_Write>
			(GAIN_CS1 & 0xffff) +
			(GAIN_CS2 & 0xffff) +
			(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <main+0x9c>)
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <main+0xa0>)
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <main+0xa4>)
 80007ba:	4910      	ldr	r1, [pc, #64]	; (80007fc <main+0xa8>)
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <main+0xac>)
 80007be:	f7ff fddd 	bl	800037c <Control_Init>
	Application_Init(&huart1);
 80007c2:	4810      	ldr	r0, [pc, #64]	; (8000804 <main+0xb0>)
 80007c4:	f7ff fd5e 	bl	8000284 <Application_Init>

	StartPWM();
 80007c8:	f7ff fe1a 	bl	8000400 <StartPWM>

	HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 ffe9 	bl	80017a4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2101      	movs	r1, #1
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <main+0xb4>)
 80007d8:	f002 f8fa 	bl	80029d0 <HAL_GPIO_WritePin>
	Test_Sequence_01();
 80007dc:	f7ff fd7a 	bl	80002d4 <Test_Sequence_01>
while (1){
	Application_Update();
 80007e0:	f7ff fd66 	bl	80002b0 <Application_Update>
 80007e4:	e7fc      	b.n	80007e0 <main+0x8c>
 80007e6:	bf00      	nop
 80007e8:	40010800 	.word	0x40010800
 80007ec:	200002d0 	.word	0x200002d0
 80007f0:	2000018c 	.word	0x2000018c
 80007f4:	200000b8 	.word	0x200000b8
 80007f8:	20000100 	.word	0x20000100
 80007fc:	20000328 	.word	0x20000328
 8000800:	20000288 	.word	0x20000288
 8000804:	20000200 	.word	0x20000200
 8000808:	40011400 	.word	0x40011400

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	2228      	movs	r2, #40	; 0x28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 ff68 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2310      	movs	r3, #16
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800084c:	2300      	movs	r3, #0
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000850:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f8ea 	bl	8002a34 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000866:	f000 fbd1 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2102      	movs	r1, #2
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fb54 	bl	8002f34 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000892:	f000 fbbb 	bl	800100c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000896:	2302      	movs	r3, #2
 8000898:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800089a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fce0 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ae:	f000 fbad 	bl	800100c <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008cc:	4b43      	ldr	r3, [pc, #268]	; (80009dc <MX_ADC1_Init+0x120>)
 80008ce:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <MX_ADC1_Init+0x124>)
 80008d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <MX_ADC1_Init+0x120>)
 80008d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008da:	4b40      	ldr	r3, [pc, #256]	; (80009dc <MX_ADC1_Init+0x120>)
 80008dc:	2200      	movs	r2, #0
 80008de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <MX_ADC1_Init+0x120>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <MX_ADC1_Init+0x120>)
 80008e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <MX_ADC1_Init+0x120>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80008f4:	4b39      	ldr	r3, [pc, #228]	; (80009dc <MX_ADC1_Init+0x120>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fa:	4838      	ldr	r0, [pc, #224]	; (80009dc <MX_ADC1_Init+0x120>)
 80008fc:	f000 ff76 	bl	80017ec <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000906:	f000 fb81 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090a:	2304      	movs	r3, #4
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2301      	movs	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4830      	ldr	r0, [pc, #192]	; (80009dc <MX_ADC1_Init+0x120>)
 800091c:	f001 f92e 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fb71 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800092a:	2303      	movs	r3, #3
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800092e:	2302      	movs	r3, #2
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4829      	ldr	r0, [pc, #164]	; (80009dc <MX_ADC1_Init+0x120>)
 8000938:	f001 f920 	bl	8001b7c <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000942:	f000 fb63 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000946:	2302      	movs	r3, #2
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4822      	ldr	r0, [pc, #136]	; (80009dc <MX_ADC1_Init+0x120>)
 8000954:	f001 f912 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800095e:	f000 fb55 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000962:	2301      	movs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000966:	2304      	movs	r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	481b      	ldr	r0, [pc, #108]	; (80009dc <MX_ADC1_Init+0x120>)
 8000970:	f001 f904 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800097a:	f000 fb47 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800097e:	2304      	movs	r3, #4
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000982:	2305      	movs	r3, #5
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_ADC1_Init+0x120>)
 800098c:	f001 f8f6 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000996:	f000 fb39 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800099a:	2308      	movs	r3, #8
 800099c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800099e:	2306      	movs	r3, #6
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_ADC1_Init+0x120>)
 80009a8:	f001 f8e8 	bl	8001b7c <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80009b2:	f000 fb2b 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009b6:	2309      	movs	r3, #9
 80009b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009ba:	2307      	movs	r3, #7
 80009bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_ADC1_Init+0x120>)
 80009c4:	f001 f8da 	bl	8001b7c <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80009ce:	f000 fb1d 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000018c 	.word	0x2000018c
 80009e0:	40012400 	.word	0x40012400

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_SPI1_Init+0x68>)
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <MX_SPI1_Init+0x6c>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SPI1_Init+0x68>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_SPI1_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_SPI1_Init+0x68>)
 80009fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a32:	220a      	movs	r2, #10
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_SPI1_Init+0x68>)
 8000a38:	f002 fccc 	bl	80033d4 <HAL_SPI_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a42:	f000 fae3 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200002d0 	.word	0x200002d0
 8000a50:	40013000 	.word	0x40013000

08000a54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	; 0x58
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fe2f 	bl	80056f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000a94:	4a45      	ldr	r2, [pc, #276]	; (8000bac <MX_TIM1_Init+0x158>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8000aa4:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab0:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000abc:	483a      	ldr	r0, [pc, #232]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000abe:	f002 ff55 	bl	800396c <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ac8:	f000 faa0 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4833      	ldr	r0, [pc, #204]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000ada:	f003 fb89 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ae4:	f000 fa92 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae8:	482f      	ldr	r0, [pc, #188]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000aea:	f002 ffd9 	bl	8003aa0 <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000af4:	f000 fa8a 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b04:	4619      	mov	r1, r3
 8000b06:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000b08:	f003 fefe 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b12:	f000 fa7b 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	; 0x60
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	2204      	movs	r2, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000b3c:	f003 fa9a 	bl	8004074 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b46:	f000 fa61 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2208      	movs	r2, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000b58:	f003 fa8c 	bl	8004074 <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000b62:	f000 fa53 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000b8a:	f003 ff1b 	bl	80049c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b94:	f000 fa3a 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM1_Init+0x154>)
 8000b9a:	f000 fb99 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	; 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000288 	.word	0x20000288
 8000bac:	40012c00 	.word	0x40012c00

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c08:	f002 feb0 	bl	800396c <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c12:	f000 f9fb 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c20:	4619      	mov	r1, r3
 8000c22:	481c      	ldr	r0, [pc, #112]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c24:	f003 fae4 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c2e:	f000 f9ed 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c34:	f002 ff34 	bl	8003aa0 <HAL_TIM_PWM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c3e:	f000 f9e5 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c52:	f003 fe59 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f000 f9d6 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	; 0x60
 8000c62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c78:	f003 f9fc 	bl	8004074 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c82:	f000 f9c3 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM2_Init+0xe4>)
 8000c88:	f000 fb22 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000328 	.word	0x20000328

08000c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cca:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <MX_TIM3_Init+0xe8>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cec:	4823      	ldr	r0, [pc, #140]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000cee:	f002 fe3d 	bl	800396c <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000cf8:	f000 f988 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d06:	4619      	mov	r1, r3
 8000d08:	481c      	ldr	r0, [pc, #112]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d0a:	f003 fa71 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000d14:	f000 f97a 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d18:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d1a:	f002 fec1 	bl	8003aa0 <HAL_TIM_PWM_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000d24:	f000 f972 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	4619      	mov	r1, r3
 8000d36:	4811      	ldr	r0, [pc, #68]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d38:	f003 fde6 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d42:	f000 f963 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d46:	2360      	movs	r3, #96	; 0x60
 8000d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d5e:	f003 f989 	bl	8004074 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d68:	f000 f950 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <MX_TIM3_Init+0xe4>)
 8000d6e:	f000 faaf 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000100 	.word	0x20000100
 8000d80:	40000400 	.word	0x40000400

08000d84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <MX_TIM4_Init+0x98>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dc6:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000dc8:	f002 fdd0 	bl	800396c <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000dd2:	f000 f91b 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000de4:	f003 fa04 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 f90d 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM4_Init+0x94>)
 8000e00:	f003 fd82 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e0a:	f000 f8ff 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000b8 	.word	0x200000b8
 8000e1c:	40000800 	.word	0x40000800

08000e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_USART1_UART_Init+0x50>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e58:	f003 fe17 	bl	8004a8a <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e62:	f000 f8d3 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000200 	.word	0x20000200
 8000e70:	40013800 	.word	0x40013800

08000e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_DMA_Init+0x58>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_DMA_Init+0x58>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_DMA_Init+0x58>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200b      	movs	r0, #11
 8000e98:	f001 f941 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f001 f95a 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200e      	movs	r0, #14
 8000ea8:	f001 f939 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000eac:	200e      	movs	r0, #14
 8000eae:	f001 f952 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f001 f931 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f001 f94a 	bl	8002156 <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	4b44      	ldr	r3, [pc, #272]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <MX_GPIO_Init+0x128>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4832      	ldr	r0, [pc, #200]	; (8000ffc <MX_GPIO_Init+0x12c>)
 8000f32:	f001 fd4d 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	212c      	movs	r1, #44	; 0x2c
 8000f3a:	4831      	ldr	r0, [pc, #196]	; (8001000 <MX_GPIO_Init+0x130>)
 8000f3c:	f001 fd48 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_CL_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <MX_GPIO_Init+0x134>)
 8000f48:	f001 fd42 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	4826      	ldr	r0, [pc, #152]	; (8000ffc <MX_GPIO_Init+0x12c>)
 8000f64:	f001 fbb0 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <MX_GPIO_Init+0x12c>)
 8000f7c:	f001 fba4 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PWM_AL_Pin PWM_BL_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin;
 8000f80:	232c      	movs	r3, #44	; 0x2c
 8000f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	481a      	ldr	r0, [pc, #104]	; (8001000 <MX_GPIO_Init+0x130>)
 8000f98:	f001 fb96 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_CL_Pin LED_Pin */
  GPIO_InitStruct.Pin = PWM_CL_Pin|LED_Pin;
 8000f9c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_GPIO_Init+0x134>)
 8000fb6:	f001 fb87 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_INPUT_Pin D1_INPUT_Pin */
  GPIO_InitStruct.Pin = D2_INPUT_Pin|D1_INPUT_Pin;
 8000fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_GPIO_Init+0x134>)
 8000fd0:	f001 fb7a 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_GPIO_Init+0x138>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <MX_GPIO_Init+0x138>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	6053      	str	r3, [r2, #4]

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40010800 	.word	0x40010800
 8001008:	40010000 	.word	0x40010000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_MspInit+0x5c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_MspInit+0x5c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x5c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x5c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x60>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_MspInit+0x60>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a33      	ldr	r2, [pc, #204]	; (8001164 <HAL_ADC_MspInit+0xe8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d15f      	bne.n	800115c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_ADC_MspInit+0xec>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a31      	ldr	r2, [pc, #196]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a25      	ldr	r2, [pc, #148]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_ADC_MspInit+0xec>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 80010e4:	231f      	movs	r3, #31
 80010e6:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	481e      	ldr	r0, [pc, #120]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010f4:	f001 fae8 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4619      	mov	r1, r3
 8001106:	481a      	ldr	r0, [pc, #104]	; (8001170 <HAL_ADC_MspInit+0xf4>)
 8001108:	f001 fade 	bl	80026c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0xfc>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001136:	2220      	movs	r2, #32
 8001138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001142:	f001 f823 	bl	800218c <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800114c:	f7ff ff5e 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001154:	621a      	str	r2, [r3, #32]
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40012400 	.word	0x40012400
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	20000244 	.word	0x20000244
 8001178:	40020008 	.word	0x40020008

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_SPI_MspInit+0x88>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d12f      	bne.n	80011fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011e0:	f001 fa72 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011f8:	f001 fa66 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40021000 	.word	0x40021000
 800120c:	40010800 	.word	0x40010800

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_TIM_Base_MspInit+0xb0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d114      	bne.n	800124c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2019      	movs	r0, #25
 8001240:	f000 ff6d 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001244:	2019      	movs	r0, #25
 8001246:	f000 ff86 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800124a:	e034      	b.n	80012b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d10c      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
}
 800126e:	e022      	b.n	80012b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10c      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
}
 8001292:	e010      	b.n	80012b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_TIM_Base_MspInit+0xbc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10b      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_TIM_Base_MspInit+0xb4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012c00 	.word	0x40012c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40000800 	.word	0x40000800

080012d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <HAL_TIM_MspPostInit+0x11c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d119      	bne.n	8001324 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH_Pin;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2302      	movs	r3, #2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4619      	mov	r1, r3
 800131c:	4835      	ldr	r0, [pc, #212]	; (80013f4 <HAL_TIM_MspPostInit+0x124>)
 800131e:	f001 f9d3 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001322:	e05f      	b.n	80013e4 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132c:	d12b      	bne.n	8001386 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 8001346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2302      	movs	r3, #2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <HAL_TIM_MspPostInit+0x124>)
 800135c:	f001 f9b4 	bl	80026c8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_TIM_MspPostInit+0x128>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_TIM_MspPostInit+0x128>)
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	6053      	str	r3, [r2, #4]
}
 8001384:	e02e      	b.n	80013e4 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_TIM_MspPostInit+0x12c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d129      	bne.n	80013e4 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_TIM_MspPostInit+0x120>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BH_Pin;
 80013a8:	2310      	movs	r3, #16
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BH_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <HAL_TIM_MspPostInit+0x130>)
 80013bc:	f001 f984 	bl	80026c8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_TIM_MspPostInit+0x128>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_TIM_MspPostInit+0x128>)
 80013e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e2:	6053      	str	r3, [r2, #4]
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40000400 	.word	0x40000400
 8001400:	40010c00 	.word	0x40010c00

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_UART_MspInit+0x150>)
 8001420:	4293      	cmp	r3, r2
 8001422:	f040 8092 	bne.w	800154a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_UART_MspInit+0x154>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_UART_MspInit+0x154>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_UART_MspInit+0x154>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_UART_MspInit+0x154>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a45      	ldr	r2, [pc, #276]	; (8001558 <HAL_UART_MspInit+0x154>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_UART_MspInit+0x154>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	483c      	ldr	r0, [pc, #240]	; (800155c <HAL_UART_MspInit+0x158>)
 800146a:	f001 f92d 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4836      	ldr	r0, [pc, #216]	; (800155c <HAL_UART_MspInit+0x158>)
 8001482:	f001 f921 	bl	80026c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_UART_MspInit+0x15c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	4a30      	ldr	r2, [pc, #192]	; (8001560 <HAL_UART_MspInit+0x15c>)
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014a4:	4a30      	ldr	r2, [pc, #192]	; (8001568 <HAL_UART_MspInit+0x164>)
 80014a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d2:	4824      	ldr	r0, [pc, #144]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014d4:	f000 fe5a 	bl	800218c <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80014de:	f7ff fd95 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_UART_MspInit+0x160>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_UART_MspInit+0x168>)
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <HAL_UART_MspInit+0x16c>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_UART_MspInit+0x168>)
 80014f6:	2210      	movs	r2, #16
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_UART_MspInit+0x168>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_UART_MspInit+0x168>)
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_UART_MspInit+0x168>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_UART_MspInit+0x168>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_UART_MspInit+0x168>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_UART_MspInit+0x168>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <HAL_UART_MspInit+0x168>)
 8001520:	f000 fe34 	bl	800218c <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800152a:	f7ff fd6f 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_UART_MspInit+0x168>)
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <HAL_UART_MspInit+0x168>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2025      	movs	r0, #37	; 0x25
 8001540:	f000 fded 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001544:	2025      	movs	r0, #37	; 0x25
 8001546:	f000 fe06 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40013800 	.word	0x40013800
 8001558:	40021000 	.word	0x40021000
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40010000 	.word	0x40010000
 8001564:	200001bc 	.word	0x200001bc
 8001568:	40020058 	.word	0x40020058
 800156c:	20000148 	.word	0x20000148
 8001570:	40020044 	.word	0x40020044

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <HardFault_Handler+0x4>

08001586 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <BusFault_Handler+0x4>

08001592 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f8d4 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ce:	f000 ff47 	bl	8002460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000244 	.word	0x20000244

080015dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA1_Channel4_IRQHandler+0x10>)
 80015e2:	f000 ff3d 	bl	8002460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000148 	.word	0x20000148

080015f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <DMA1_Channel5_IRQHandler+0x10>)
 80015f6:	f000 ff33 	bl	8002460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001bc 	.word	0x200001bc

08001604 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_UP_IRQHandler+0x10>)
 800160a:	f002 fc2b 	bl	8003e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000288 	.word	0x20000288

08001618 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <USART1_IRQHandler+0x10>)
 800161e:	f003 fb1d 	bl	8004c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000200 	.word	0x20000200

0800162c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <SystemInit+0x5c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <SystemInit+0x5c>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <SystemInit+0x5c>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4911      	ldr	r1, [pc, #68]	; (8001688 <SystemInit+0x5c>)
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <SystemInit+0x60>)
 8001644:	4013      	ands	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <SystemInit+0x5c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <SystemInit+0x5c>)
 800164e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <SystemInit+0x5c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SystemInit+0x5c>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <SystemInit+0x5c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <SystemInit+0x5c>)
 800166a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800166e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SystemInit+0x5c>)
 8001672:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001676:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SystemInit+0x64>)
 800167a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800167e:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40021000 	.word	0x40021000
 800168c:	f8ff0000 	.word	0xf8ff0000
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001696:	e003      	b.n	80016a0 <LoopCopyDataInit>

08001698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800169a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800169c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800169e:	3104      	adds	r1, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016a8:	d3f6      	bcc.n	8001698 <CopyDataInit>
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016ac:	e002      	b.n	80016b4 <LoopFillZerobss>

080016ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016b0:	f842 3b04 	str.w	r3, [r2], #4

080016b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016b8:	d3f9      	bcc.n	80016ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ba:	f7ff ffb7 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f003 ffe5 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff f847 	bl	8000754 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r3, =_sidata
 80016c8:	08005748 	.word	0x08005748
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016d8:	20000374 	.word	0x20000374

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x28>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 fd09 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fc8c 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fd21 	bl	8002172 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 fce9 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	20000008 	.word	0x20000008
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_IncTick+0x20>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000008 	.word	0x20000008
 800178c:	20000370 	.word	0x20000370

08001790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_GetTick+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000370 	.word	0x20000370

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fff0 	bl	8001790 <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffe0 	bl	8001790 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0be      	b.n	800198c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fc26 	bl	800107c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 faf5 	bl	8001e20 <ADC_ConversionStop_Disable>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 8099 	bne.w	800197a <HAL_ADC_Init+0x18e>
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8095 	bne.w	800197a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001858:	f023 0302 	bic.w	r3, r3, #2
 800185c:	f043 0202 	orr.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800186c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7b1b      	ldrb	r3, [r3, #12]
 8001872:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001874:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4313      	orrs	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001884:	d003      	beq.n	800188e <HAL_ADC_Init+0xa2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_ADC_Init+0xa8>
 800188e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001892:	e000      	b.n	8001896 <HAL_ADC_Init+0xaa>
 8001894:	2300      	movs	r3, #0
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7d1b      	ldrb	r3, [r3, #20]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d119      	bne.n	80018d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7b1b      	ldrb	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	035a      	lsls	r2, r3, #13
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	e00b      	b.n	80018d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_ADC_Init+0x1a8>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001908:	d003      	beq.n	8001912 <HAL_ADC_Init+0x126>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d104      	bne.n	800191c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	3b01      	subs	r3, #1
 8001918:	051b      	lsls	r3, r3, #20
 800191a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	430a      	orrs	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_ADC_Init+0x1ac>)
 8001938:	4013      	ands	r3, r2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	429a      	cmp	r2, r3
 800193e:	d10b      	bne.n	8001958 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001956:	e018      	b.n	800198a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f023 0312 	bic.w	r3, r3, #18
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001978:	e007      	b.n	800198a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800198a:	7dfb      	ldrb	r3, [r7, #23]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	ffe1f7fd 	.word	0xffe1f7fd
 8001998:	ff1f0efe 	.word	0xff1f0efe

0800199c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a64      	ldr	r2, [pc, #400]	; (8001b44 <HAL_ADC_Start_DMA+0x1a8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d004      	beq.n	80019c0 <HAL_ADC_Start_DMA+0x24>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a63      	ldr	r2, [pc, #396]	; (8001b48 <HAL_ADC_Start_DMA+0x1ac>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d106      	bne.n	80019ce <HAL_ADC_Start_DMA+0x32>
 80019c0:	4b60      	ldr	r3, [pc, #384]	; (8001b44 <HAL_ADC_Start_DMA+0x1a8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 80b3 	bne.w	8001b34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_Start_DMA+0x40>
 80019d8:	2302      	movs	r3, #2
 80019da:	e0ae      	b.n	8001b3a <HAL_ADC_Start_DMA+0x19e>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f9c1 	bl	8001d6c <ADC_Enable>
 80019ea:	4603      	mov	r3, r0
 80019ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 809a 	bne.w	8001b2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a4e      	ldr	r2, [pc, #312]	; (8001b48 <HAL_ADC_Start_DMA+0x1ac>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d105      	bne.n	8001a20 <HAL_ADC_Start_DMA+0x84>
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_ADC_Start_DMA+0x1a8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d026      	beq.n	8001a88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4a:	e01d      	b.n	8001a88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a39      	ldr	r2, [pc, #228]	; (8001b44 <HAL_ADC_Start_DMA+0x1a8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_ADC_Start_DMA+0xd0>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_ADC_Start_DMA+0x1ac>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10d      	bne.n	8001a88 <HAL_ADC_Start_DMA+0xec>
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_ADC_Start_DMA+0x1a8>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f023 0206 	bic.w	r2, r3, #6
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_ADC_Start_DMA+0x1b0>)
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_ADC_Start_DMA+0x1b4>)
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_ADC_Start_DMA+0x1b8>)
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0202 	mvn.w	r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a18      	ldr	r0, [r3, #32]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	334c      	adds	r3, #76	; 0x4c
 8001aec:	4619      	mov	r1, r3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f000 fba5 	bl	8002240 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b04:	d108      	bne.n	8001b18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b16:	e00f      	b.n	8001b38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b28:	e006      	b.n	8001b38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40012400 	.word	0x40012400
 8001b48:	40012800 	.word	0x40012800
 8001b4c:	08001ea3 	.word	0x08001ea3
 8001b50:	08001f1f 	.word	0x08001f1f
 8001b54:	08001f3b 	.word	0x08001f3b

08001b58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x20>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0dc      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1da>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d81c      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b05      	subs	r3, #5
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b05      	subs	r3, #5
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
 8001be4:	e03c      	b.n	8001c60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d81c      	bhi.n	8001c28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b23      	subs	r3, #35	; 0x23
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b23      	subs	r3, #35	; 0x23
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
 8001c26:	e01b      	b.n	8001c60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3b41      	subs	r3, #65	; 0x41
 8001c3a:	221f      	movs	r2, #31
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4019      	ands	r1, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b41      	subs	r3, #65	; 0x41
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d91c      	bls.n	8001ca2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	e019      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6919      	ldr	r1, [r3, #16]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d003      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d132      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d125      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d126      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d11a      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	0c9a      	lsrs	r2, r3, #18
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x1b2>
 8001d3a:	e007      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40012400 	.word	0x40012400
 8001d64:	20000000 	.word	0x20000000
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d040      	beq.n	8001e0c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <ADC_Enable+0xac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <ADC_Enable+0xb0>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	0c9b      	lsrs	r3, r3, #18
 8001da6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001da8:	e002      	b.n	8001db0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001db6:	f7ff fceb 	bl	8001790 <HAL_GetTick>
 8001dba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dbc:	e01f      	b.n	8001dfe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dbe:	f7ff fce7 	bl	8001790 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d918      	bls.n	8001dfe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d011      	beq.n	8001dfe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e007      	b.n	8001e0e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d1d8      	bne.n	8001dbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	431bde83 	.word	0x431bde83

08001e20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d12e      	bne.n	8001e98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e4a:	f7ff fca1 	bl	8001790 <HAL_GetTick>
 8001e4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e50:	e01b      	b.n	8001e8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e52:	f7ff fc9d 	bl	8001790 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d914      	bls.n	8001e8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10d      	bne.n	8001e8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e007      	b.n	8001e9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d0dc      	beq.n	8001e52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d127      	bne.n	8001f0c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ed2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ed6:	d115      	bne.n	8001f04 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7fe fa21 	bl	800034c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f0a:	e004      	b.n	8001f16 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fe13 	bl	8001b58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	f043 0204 	orr.w	r2, r3, #4
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7ff fe02 	bl	8001b6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4906      	ldr	r1, [pc, #24]	; (8002008 <__NVIC_EnableIRQ+0x34>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff90 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff2d 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff42 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff90 	bl	8002060 <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5f 	bl	800200c <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff35 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e043      	b.n	800222a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_DMA_Init+0xa8>)
 80021aa:	4413      	add	r3, r2
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <HAL_DMA_Init+0xac>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_DMA_Init+0xb0>)
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	bffdfff8 	.word	0xbffdfff8
 8002238:	cccccccd 	.word	0xcccccccd
 800223c:	40020000 	.word	0x40020000

08002240 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Start_IT+0x20>
 800225c:	2302      	movs	r3, #2
 800225e:	e04a      	b.n	80022f6 <HAL_DMA_Start_IT+0xb6>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800226e:	2b01      	cmp	r3, #1
 8002270:	d13a      	bne.n	80022e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f9e8 	bl	800266c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 020e 	orr.w	r2, r2, #14
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e00f      	b.n	80022d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0204 	bic.w	r2, r2, #4
 80022c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 020a 	orr.w	r2, r2, #10
 80022d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e005      	b.n	80022f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002310:	2b02      	cmp	r3, #2
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2204      	movs	r2, #4
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e020      	b.n	8002368 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 020e 	bic.w	r2, r2, #14
 8002334:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002386:	2b02      	cmp	r3, #2
 8002388:	d005      	beq.n	8002396 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e051      	b.n	800243a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020e 	bic.w	r2, r2, #14
 80023a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_DMA_Abort_IT+0xd0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d029      	beq.n	8002414 <HAL_DMA_Abort_IT+0xa0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_DMA_Abort_IT+0xd4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_Abort_IT+0x9c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_DMA_Abort_IT+0xd8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d01a      	beq.n	800240a <HAL_DMA_Abort_IT+0x96>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_DMA_Abort_IT+0xdc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d012      	beq.n	8002404 <HAL_DMA_Abort_IT+0x90>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <HAL_DMA_Abort_IT+0xe0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00a      	beq.n	80023fe <HAL_DMA_Abort_IT+0x8a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_DMA_Abort_IT+0xe4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d102      	bne.n	80023f8 <HAL_DMA_Abort_IT+0x84>
 80023f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023f6:	e00e      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 80023f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fc:	e00b      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 80023fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002402:	e008      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 8002404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002408:	e005      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 800240a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240e:	e002      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 8002410:	2310      	movs	r3, #16
 8002412:	e000      	b.n	8002416 <HAL_DMA_Abort_IT+0xa2>
 8002414:	2301      	movs	r3, #1
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_DMA_Abort_IT+0xe8>)
 8002418:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
    } 
  }
  return status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40020008 	.word	0x40020008
 8002448:	4002001c 	.word	0x4002001c
 800244c:	40020030 	.word	0x40020030
 8002450:	40020044 	.word	0x40020044
 8002454:	40020058 	.word	0x40020058
 8002458:	4002006c 	.word	0x4002006c
 800245c:	40020000 	.word	0x40020000

08002460 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2204      	movs	r2, #4
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d04f      	beq.n	8002528 <HAL_DMA_IRQHandler+0xc8>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04a      	beq.n	8002528 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0204 	bic.w	r2, r2, #4
 80024ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_DMA_IRQHandler+0x1f0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d029      	beq.n	800250e <HAL_DMA_IRQHandler+0xae>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a65      	ldr	r2, [pc, #404]	; (8002654 <HAL_DMA_IRQHandler+0x1f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_IRQHandler+0xaa>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a63      	ldr	r2, [pc, #396]	; (8002658 <HAL_DMA_IRQHandler+0x1f8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01a      	beq.n	8002504 <HAL_DMA_IRQHandler+0xa4>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a62      	ldr	r2, [pc, #392]	; (800265c <HAL_DMA_IRQHandler+0x1fc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d012      	beq.n	80024fe <HAL_DMA_IRQHandler+0x9e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_DMA_IRQHandler+0x200>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00a      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x98>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5f      	ldr	r2, [pc, #380]	; (8002664 <HAL_DMA_IRQHandler+0x204>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d102      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x92>
 80024ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024f0:	e00e      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 80024f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024f6:	e00b      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 80024f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024fc:	e008      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 80024fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002502:	e005      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 8002504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002508:	e002      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 800250a:	2340      	movs	r3, #64	; 0x40
 800250c:	e000      	b.n	8002510 <HAL_DMA_IRQHandler+0xb0>
 800250e:	2304      	movs	r3, #4
 8002510:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_DMA_IRQHandler+0x208>)
 8002512:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8094 	beq.w	8002646 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002526:	e08e      	b.n	8002646 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2202      	movs	r2, #2
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d056      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x186>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d051      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 020a 	bic.w	r2, r2, #10
 800255e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a38      	ldr	r2, [pc, #224]	; (8002650 <HAL_DMA_IRQHandler+0x1f0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d029      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x166>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a37      	ldr	r2, [pc, #220]	; (8002654 <HAL_DMA_IRQHandler+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x162>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a35      	ldr	r2, [pc, #212]	; (8002658 <HAL_DMA_IRQHandler+0x1f8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x15c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_DMA_IRQHandler+0x1fc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d012      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x156>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a32      	ldr	r2, [pc, #200]	; (8002660 <HAL_DMA_IRQHandler+0x200>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00a      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x150>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_DMA_IRQHandler+0x204>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d102      	bne.n	80025aa <HAL_DMA_IRQHandler+0x14a>
 80025a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025a8:	e00e      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	e00b      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b4:	e008      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	e005      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c0:	e002      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025c2:	2320      	movs	r3, #32
 80025c4:	e000      	b.n	80025c8 <HAL_DMA_IRQHandler+0x168>
 80025c6:	2302      	movs	r3, #2
 80025c8:	4a27      	ldr	r2, [pc, #156]	; (8002668 <HAL_DMA_IRQHandler+0x208>)
 80025ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d034      	beq.n	8002646 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025e4:	e02f      	b.n	8002646 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2208      	movs	r2, #8
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_DMA_IRQHandler+0x1e8>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 020e 	bic.w	r2, r2, #14
 800260e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
    }
  }
  return;
 8002646:	bf00      	nop
 8002648:	bf00      	nop
}
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40020008 	.word	0x40020008
 8002654:	4002001c 	.word	0x4002001c
 8002658:	40020030 	.word	0x40020030
 800265c:	40020044 	.word	0x40020044
 8002660:	40020058 	.word	0x40020058
 8002664:	4002006c 	.word	0x4002006c
 8002668:	40020000 	.word	0x40020000

0800266c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d108      	bne.n	80026ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026aa:	e007      	b.n	80026bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e169      	b.n	80029b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026dc:	2201      	movs	r2, #1
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8158 	bne.w	80029aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a9a      	ldr	r2, [pc, #616]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002704:	4a98      	ldr	r2, [pc, #608]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d875      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800270a:	4a98      	ldr	r2, [pc, #608]	; (800296c <HAL_GPIO_Init+0x2a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d058      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002710:	4a96      	ldr	r2, [pc, #600]	; (800296c <HAL_GPIO_Init+0x2a4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d86f      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002716:	4a96      	ldr	r2, [pc, #600]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d052      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 800271c:	4a94      	ldr	r2, [pc, #592]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d869      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002722:	4a94      	ldr	r2, [pc, #592]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04c      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002728:	4a92      	ldr	r2, [pc, #584]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d863      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800272e:	4a92      	ldr	r2, [pc, #584]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d046      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002734:	4a90      	ldr	r2, [pc, #576]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d85d      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800273a:	2b12      	cmp	r3, #18
 800273c:	d82a      	bhi.n	8002794 <HAL_GPIO_Init+0xcc>
 800273e:	2b12      	cmp	r3, #18
 8002740:	d859      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <HAL_GPIO_Init+0x80>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	080027c3 	.word	0x080027c3
 800274c:	0800279d 	.word	0x0800279d
 8002750:	080027af 	.word	0x080027af
 8002754:	080027f1 	.word	0x080027f1
 8002758:	080027f7 	.word	0x080027f7
 800275c:	080027f7 	.word	0x080027f7
 8002760:	080027f7 	.word	0x080027f7
 8002764:	080027f7 	.word	0x080027f7
 8002768:	080027f7 	.word	0x080027f7
 800276c:	080027f7 	.word	0x080027f7
 8002770:	080027f7 	.word	0x080027f7
 8002774:	080027f7 	.word	0x080027f7
 8002778:	080027f7 	.word	0x080027f7
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027f7 	.word	0x080027f7
 8002784:	080027f7 	.word	0x080027f7
 8002788:	080027f7 	.word	0x080027f7
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027b9 	.word	0x080027b9
 8002794:	4a79      	ldr	r2, [pc, #484]	; (800297c <HAL_GPIO_Init+0x2b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800279a:	e02c      	b.n	80027f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e029      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e024      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	3308      	adds	r3, #8
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e01f      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	330c      	adds	r3, #12
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e01a      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ca:	2304      	movs	r3, #4
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e013      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d8:	2308      	movs	r3, #8
 80027da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	611a      	str	r2, [r3, #16]
          break;
 80027e2:	e009      	b.n	80027f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e4:	2308      	movs	r3, #8
 80027e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
          break;
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          break;
 80027f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d801      	bhi.n	8002802 <HAL_GPIO_Init+0x13a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_Init+0x13e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d802      	bhi.n	8002814 <HAL_GPIO_Init+0x14c>
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x152>
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3b08      	subs	r3, #8
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	210f      	movs	r1, #15
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80b1 	beq.w	80029aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002860:	4a48      	ldr	r2, [pc, #288]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_GPIO_Init+0x2c0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1ec>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_GPIO_Init+0x2c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1e8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <HAL_GPIO_Init+0x2c8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1e0>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b4:	2300      	movs	r3, #0
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	4093      	lsls	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028c6:	492f      	ldr	r1, [pc, #188]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4928      	ldr	r1, [pc, #160]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	491e      	ldr	r1, [pc, #120]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4918      	ldr	r1, [pc, #96]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4914      	ldr	r1, [pc, #80]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e021      	b.n	80029aa <HAL_GPIO_Init+0x2e2>
 8002966:	bf00      	nop
 8002968:	10320000 	.word	0x10320000
 800296c:	10310000 	.word	0x10310000
 8002970:	10220000 	.word	0x10220000
 8002974:	10210000 	.word	0x10210000
 8002978:	10120000 	.word	0x10120000
 800297c:	10110000 	.word	0x10110000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_GPIO_Init+0x304>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4909      	ldr	r1, [pc, #36]	; (80029cc <HAL_GPIO_Init+0x304>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f ae8e 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	372c      	adds	r7, #44	; 0x2c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43d9      	mvns	r1, r3
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	400b      	ands	r3, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e26c      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8087 	beq.w	8002b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a60:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d112      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
 8002a6c:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d10b      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d06c      	beq.n	8002b60 <HAL_RCC_OscConfig+0x12c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d168      	bne.n	8002b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e246      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x76>
 8002a9c:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7f      	ldr	r2, [pc, #508]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e02e      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7a      	ldr	r2, [pc, #488]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b78      	ldr	r3, [pc, #480]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a77      	ldr	r2, [pc, #476]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0xbc>
 8002ad6:	4b72      	ldr	r3, [pc, #456]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a71      	ldr	r2, [pc, #452]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002af0:	4b6b      	ldr	r3, [pc, #428]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a67      	ldr	r2, [pc, #412]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fe3e 	bl	8001790 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fe3a 	bl	8001790 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1fa      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe4>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fe2a 	bl	8001790 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fe26 	bl	8001790 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1e6      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x10c>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7a:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d116      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1ba      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4939      	ldr	r1, [pc, #228]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	e03a      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fddf 	bl	8001790 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fddb 	bl	8001790 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e19b      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4927      	ldr	r1, [pc, #156]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fdbe 	bl	8001790 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c18:	f7fe fdba 	bl	8001790 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e17a      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03a      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fd9e 	bl	8001790 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fe fd9a 	bl	8001790 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e15a      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f000 fad8 	bl	800322c <RCC_Delay>
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7fe fd84 	bl	8001790 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8a:	e00f      	b.n	8002cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fd80 	bl	8001790 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e140      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	42420000 	.word	0x42420000
 8002ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e9      	bne.n	8002c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a6 	beq.w	8002e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b97      	ldr	r3, [pc, #604]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b94      	ldr	r3, [pc, #592]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4a93      	ldr	r2, [pc, #588]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	61d3      	str	r3, [r2, #28]
 8002ce2:	4b91      	ldr	r3, [pc, #580]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b8b      	ldr	r3, [pc, #556]	; (8002f2c <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a8a      	ldr	r2, [pc, #552]	; (8002f2c <HAL_RCC_OscConfig+0x4f8>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fd41 	bl	8001790 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fe fd3d 	bl	8001790 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0fd      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x312>
 8002d38:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	e02d      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a75      	ldr	r2, [pc, #468]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b73      	ldr	r3, [pc, #460]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a72      	ldr	r2, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e01c      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x356>
 8002d70:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a6c      	ldr	r2, [pc, #432]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a63      	ldr	r2, [pc, #396]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fcf1 	bl	8001790 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fced 	bl	8001790 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0ab      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCC_OscConfig+0x37e>
 8002dd4:	e014      	b.n	8002e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fcdb 	bl	8001790 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe fcd7 	bl	8001790 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e095      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ee      	bne.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a47      	ldr	r2, [pc, #284]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8081 	beq.w	8002f1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d061      	beq.n	8002eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d146      	bne.n	8002ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_RCC_OscConfig+0x4fc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fcab 	bl	8001790 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fca7 	bl	8001790 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e067      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e66:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	492d      	ldr	r1, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a19      	ldr	r1, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x4fc>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fc7b 	bl	8001790 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fc77 	bl	8001790 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e037      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46a>
 8002ebc:	e02f      	b.n	8002f1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_OscConfig+0x4fc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fc64 	bl	8001790 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fc60 	bl	8001790 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e020      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x498>
 8002eea:	e018      	b.n	8002f1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e013      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42420060 	.word	0x42420060

08002f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d0      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4965      	ldr	r1, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d040      	beq.n	8003054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e073      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06b      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4936      	ldr	r1, [pc, #216]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7fe fbb4 	bl	8001790 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fe fbb0 	bl	8001790 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e053      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d210      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4922      	ldr	r1, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1cc>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fb12 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005728 	.word	0x08005728
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b490      	push	{r4, r7}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003110:	1d3c      	adds	r4, r7, #4
 8003112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003118:	f240 2301 	movw	r3, #513	; 0x201
 800311c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b04      	cmp	r3, #4
 8003140:	d002      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x40>
 8003142:	2b08      	cmp	r3, #8
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x46>
 8003146:	e02d      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	623b      	str	r3, [r7, #32]
      break;
 800314c:	e02d      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	0c9b      	lsrs	r3, r3, #18
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800315a:	4413      	add	r3, r2
 800315c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003160:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0c5b      	lsrs	r3, r3, #17
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800317a:	4413      	add	r3, r2
 800317c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003180:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003186:	fb02 f203 	mul.w	r2, r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	e004      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	623b      	str	r3, [r7, #32]
      break;
 80031a2:	e002      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a6:	623b      	str	r3, [r7, #32]
      break;
 80031a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc90      	pop	{r4, r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	08005718 	.word	0x08005718
 80031bc:	40021000 	.word	0x40021000
 80031c0:	007a1200 	.word	0x007a1200
 80031c4:	003d0900 	.word	0x003d0900

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b02      	ldr	r3, [pc, #8]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff2 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08005738 	.word	0x08005738

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffde 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08005738 	.word	0x08005738

0800322c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <RCC_Delay+0x34>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <RCC_Delay+0x38>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a5b      	lsrs	r3, r3, #9
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003248:	bf00      	nop
  }
  while (Delay --);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	60fa      	str	r2, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f9      	bne.n	8003248 <RCC_Delay+0x1c>
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000000 	.word	0x20000000
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d07d      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b49      	ldr	r3, [pc, #292]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d118      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032bc:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a42      	ldr	r2, [pc, #264]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c8:	f7fe fa62 	bl	8001790 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	e008      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7fe fa5e 	bl	8001790 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e06d      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02e      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d027      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d014      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fa2d 	bl	8001790 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe fa29 	bl	8001790 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e036      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4917      	ldr	r1, [pc, #92]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	4313      	orrs	r3, r2
 800336c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	490b      	ldr	r1, [pc, #44]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4904      	ldr	r1, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420440 	.word	0x42420440

080033d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e076      	b.n	80034d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f6:	d009      	beq.n	800340c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
 80033fe:	e005      	b.n	800340c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fea8 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	ea42 0103 	orr.w	r1, r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	0c1a      	lsrs	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f002 0204 	and.w	r2, r2, #4
 80034b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034ea:	2301      	movs	r3, #1
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x26>
 80034fe:	2302      	movs	r3, #2
 8003500:	e18a      	b.n	8003818 <HAL_SPI_TransmitReceive+0x33c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800350a:	f7fe f941 	bl	8001790 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003528:	2b01      	cmp	r3, #1
 800352a:	d00f      	beq.n	800354c <HAL_SPI_TransmitReceive+0x70>
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003532:	d107      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x68>
 800353c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003540:	2b04      	cmp	r3, #4
 8003542:	d003      	beq.n	800354c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800354a:	e15b      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_SPI_TransmitReceive+0x82>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_TransmitReceive+0x82>
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003564:	e14e      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2205      	movs	r2, #5
 8003576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	887a      	ldrh	r2, [r7, #2]
 80035a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d007      	beq.n	80035ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d178      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_SPI_TransmitReceive+0x10a>
 80035e0:	8b7b      	ldrh	r3, [r7, #26]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d166      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800360a:	e053      	b.n	80036b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d11b      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x176>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x176>
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d113      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d119      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x1b8>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d014      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	b292      	uxth	r2, r2
 8003676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	1c9a      	adds	r2, r3, #2
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003694:	f7fe f87c 	bl	8001790 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d807      	bhi.n	80036b4 <HAL_SPI_TransmitReceive+0x1d8>
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d003      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036b2:	e0a7      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1a6      	bne.n	800360c <HAL_SPI_TransmitReceive+0x130>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1a1      	bne.n	800360c <HAL_SPI_TransmitReceive+0x130>
 80036c8:	e07c      	b.n	80037c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x1fc>
 80036d2:	8b7b      	ldrh	r3, [r7, #26]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d16b      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fe:	e057      	b.n	80037b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d11c      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x26c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d017      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x26c>
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d114      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d119      	bne.n	800378a <HAL_SPI_TransmitReceive+0x2ae>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d014      	beq.n	800378a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003786:	2301      	movs	r3, #1
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800378a:	f7fe f801 	bl	8001790 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003796:	429a      	cmp	r2, r3
 8003798:	d803      	bhi.n	80037a2 <HAL_SPI_TransmitReceive+0x2c6>
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d102      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x2cc>
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037ae:	e029      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1a2      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x224>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d19d      	bne.n	8003700 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8b1 	bl	8003930 <SPI_EndRxTxTransaction>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037e0:	e010      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	e000      	b.n	8003804 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003818:	4618      	mov	r0, r3
 800381a:	3730      	adds	r7, #48	; 0x30
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003830:	f7fd ffae 	bl	8001790 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	4413      	add	r3, r2
 800383e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003840:	f7fd ffa6 	bl	8001790 <HAL_GetTick>
 8003844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	0d1b      	lsrs	r3, r3, #20
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003856:	e054      	b.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d050      	beq.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003860:	f7fd ff96 	bl	8001790 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d902      	bls.n	8003876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d13d      	bne.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800388e:	d111      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003898:	d004      	beq.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d107      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038bc:	d10f      	bne.n	80038de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e017      	b.n	8003922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3b01      	subs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	bf0c      	ite	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	2300      	movne	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d19b      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000000 	.word	0x20000000

08003930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff ff6a 	bl	8003820 <SPI_WaitFlagStateUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e000      	b.n	8003964 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fc3c 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fd08 	bl	80043c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIM_Base_Start+0x88>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start+0x48>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start+0x48>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_TIM_Base_Start+0x8c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start+0x48>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_TIM_Base_Start+0x90>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d010      	beq.n	8003a88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e007      	b.n	8003a88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e041      	b.n	8003b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f839 	bl	8003b3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f000 fc6e 	bl	80043c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_PWM_Start+0x24>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e022      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d109      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x3e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e015      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0x58>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e05e      	b.n	8003c80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x82>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e013      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x92>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e00b      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e003      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fe5c 	bl	80048c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_TIM_PWM_Start+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIM_PWM_Start+0x138>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIM_PWM_Start+0xfa>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d009      	beq.n	8003c4a <HAL_TIM_PWM_Start+0xfa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <HAL_TIM_PWM_Start+0x13c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIM_PWM_Start+0xfa>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <HAL_TIM_PWM_Start+0x140>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d111      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d010      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6c:	e007      	b.n	8003c7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800

08003c94 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start_IT+0x24>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e022      	b.n	8003cfe <HAL_TIM_PWM_Start_IT+0x6a>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d109      	bne.n	8003cd2 <HAL_TIM_PWM_Start_IT+0x3e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e015      	b.n	8003cfe <HAL_TIM_PWM_Start_IT+0x6a>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d109      	bne.n	8003cec <HAL_TIM_PWM_Start_IT+0x58>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <HAL_TIM_PWM_Start_IT+0x6a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0a4      	b.n	8003e50 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start_IT+0x82>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	e013      	b.n	8003d3e <HAL_TIM_PWM_Start_IT+0xaa>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start_IT+0x92>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	e00b      	b.n	8003d3e <HAL_TIM_PWM_Start_IT+0xaa>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start_IT+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	e003      	b.n	8003d3e <HAL_TIM_PWM_Start_IT+0xaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d841      	bhi.n	8003dc8 <HAL_TIM_PWM_Start_IT+0x134>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <HAL_TIM_PWM_Start_IT+0xb8>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003dc9 	.word	0x08003dc9
 8003d54:	08003dc9 	.word	0x08003dc9
 8003d58:	08003dc9 	.word	0x08003dc9
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003dc9 	.word	0x08003dc9
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003db7 	.word	0x08003db7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0202 	orr.w	r2, r2, #2
 8003d8e:	60da      	str	r2, [r3, #12]
      break;
 8003d90:	e01b      	b.n	8003dca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0204 	orr.w	r2, r2, #4
 8003da0:	60da      	str	r2, [r3, #12]
      break;
 8003da2:	e012      	b.n	8003dca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	60da      	str	r2, [r3, #12]
      break;
 8003db4:	e009      	b.n	8003dca <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0210 	orr.w	r2, r2, #16
 8003dc4:	60da      	str	r2, [r3, #12]
      break;
 8003dc6:	e000      	b.n	8003dca <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003dc8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fd74 	bl	80048c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d107      	bne.n	8003df2 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_TIM_PWM_Start_IT+0x186>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d009      	beq.n	8003e1a <HAL_TIM_PWM_Start_IT+0x186>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIM_PWM_Start_IT+0x186>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d111      	bne.n	8003e3e <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d010      	beq.n	8003e4e <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	e007      	b.n	8003e4e <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800

08003e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0202 	mvn.w	r2, #2
 8003e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa78 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa6b 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fa7a 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0204 	mvn.w	r2, #4
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa4e 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa41 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa50 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0208 	mvn.w	r2, #8
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa24 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa17 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa26 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0210 	mvn.w	r2, #16
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2208      	movs	r2, #8
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9fa 	bl	800439c <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9ed 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f9fc 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0201 	mvn.w	r2, #1
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9c8 	bl	8004378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d10e      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fd32 	bl	8004a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fb5c 	bl	80006f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d10e      	bne.n	800406c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b20      	cmp	r3, #32
 800405a:	d107      	bne.n	800406c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0220 	mvn.w	r2, #32
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fcfd 	bl	8004a66 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e0ac      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f200 809f 	bhi.w	80041dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080041dd 	.word	0x080041dd
 80040ac:	080041dd 	.word	0x080041dd
 80040b0:	080041dd 	.word	0x080041dd
 80040b4:	08004119 	.word	0x08004119
 80040b8:	080041dd 	.word	0x080041dd
 80040bc:	080041dd 	.word	0x080041dd
 80040c0:	080041dd 	.word	0x080041dd
 80040c4:	0800415b 	.word	0x0800415b
 80040c8:	080041dd 	.word	0x080041dd
 80040cc:	080041dd 	.word	0x080041dd
 80040d0:	080041dd 	.word	0x080041dd
 80040d4:	0800419b 	.word	0x0800419b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f9d0 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	619a      	str	r2, [r3, #24]
      break;
 8004116:	e062      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa16 	bl	8004550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	021a      	lsls	r2, r3, #8
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
      break;
 8004158:	e041      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa5f 	bl	8004624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0208 	orr.w	r2, r2, #8
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0204 	bic.w	r2, r2, #4
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]
      break;
 8004198:	e021      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 faa9 	bl	80046f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	021a      	lsls	r2, r3, #8
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	61da      	str	r2, [r3, #28]
      break;
 80041da:	e000      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIM_ConfigClockSource+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e0b3      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x180>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800422e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d03e      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004246:	f200 8087 	bhi.w	8004358 <HAL_TIM_ConfigClockSource+0x168>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	f000 8085 	beq.w	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d87f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004258:	2b70      	cmp	r3, #112	; 0x70
 800425a:	d01a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xa2>
 800425c:	2b70      	cmp	r3, #112	; 0x70
 800425e:	d87b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	d050      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x116>
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d877      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004268:	2b50      	cmp	r3, #80	; 0x50
 800426a:	d03c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xf6>
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d873      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d058      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x136>
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d86f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b30      	cmp	r3, #48	; 0x30
 800427a:	d064      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d86b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b20      	cmp	r3, #32
 8004282:	d060      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d867      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800428c:	2b10      	cmp	r3, #16
 800428e:	d05a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004290:	e062      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f000 faee 	bl	8004882 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	609a      	str	r2, [r3, #8]
      break;
 80042be:	e04e      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 fad7 	bl	8004882 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e2:	609a      	str	r2, [r3, #8]
      break;
 80042e4:	e03b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 fa4e 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2150      	movs	r1, #80	; 0x50
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 faa5 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004304:	e02b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fa6c 	bl	80047f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2160      	movs	r1, #96	; 0x60
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fa95 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004324:	e01b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fa2e 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa85 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004344:	e00b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fa7c 	bl	800484e <TIM_ITRx_SetConfig>
        break;
 8004356:	e002      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800435c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d007      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <TIM_Base_SetConfig+0xbc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_Base_SetConfig+0x30>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a25      	ldr	r2, [pc, #148]	; (8004480 <TIM_Base_SetConfig+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d108      	bne.n	8004402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <TIM_Base_SetConfig+0xbc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <TIM_Base_SetConfig+0xc0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <TIM_OC1_SetConfig+0xc8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10c      	bne.n	80044fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0308 	bic.w	r3, r3, #8
 80044e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <TIM_OC1_SetConfig+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d111      	bne.n	8004526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00

08004550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0210 	bic.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0320 	bic.w	r3, r3, #32
 800459a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <TIM_OC2_SetConfig+0xd0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10d      	bne.n	80045cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a14      	ldr	r2, [pc, #80]	; (8004620 <TIM_OC2_SetConfig+0xd0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d113      	bne.n	80045fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00

08004624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <TIM_OC3_SetConfig+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <TIM_OC3_SetConfig+0xd0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d113      	bne.n	80046ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00

080046f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <TIM_OC4_SetConfig+0x98>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	019b      	lsls	r3, r3, #6
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	40012c00 	.word	0x40012c00

08004794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 030a 	bic.w	r3, r3, #10
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800482c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	f043 0307 	orr.w	r3, r3, #7
 8004870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	609a      	str	r2, [r3, #8]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2201      	movs	r2, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e046      	b.n	80049ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d009      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10c      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800

080049c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049dc:	2302      	movs	r3, #2
 80049de:	e03d      	b.n	8004a5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e03f      	b.n	8004b1c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc fca7 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004acc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd4e 	bl	8005570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d153      	bne.n	8004be6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_Transmit_DMA+0x26>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e04c      	b.n	8004be8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit_DMA+0x38>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e045      	b.n	8004be8 <HAL_UART_Transmit_DMA+0xc4>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2221      	movs	r2, #33	; 0x21
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_UART_Transmit_DMA+0xcc>)
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_UART_Transmit_DMA+0xd0>)
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_UART_Transmit_DMA+0xd4>)
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	461a      	mov	r2, r3
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f7fd fb40 	bl	8002240 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004be0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	0800500f 	.word	0x0800500f
 8004bf4:	08005061 	.word	0x08005061
 8004bf8:	08005149 	.word	0x08005149

08004bfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d11d      	bne.n	8004c52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_Receive_DMA+0x26>
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e016      	b.n	8004c54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Receive_DMA+0x38>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e00f      	b.n	8004c54 <HAL_UART_Receive_DMA+0x58>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fac7 	bl	80051dc <UART_Start_Receive_DMA>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	e000      	b.n	8004c54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
  }
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_UART_IRQHandler+0x52>
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fbb8 	bl	800541c <UART_Receive_IT>
      return;
 8004cac:	e17b      	b.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80b1 	beq.w	8004e18 <HAL_UART_IRQHandler+0x1bc>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_UART_IRQHandler+0x70>
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80a6 	beq.w	8004e18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_UART_IRQHandler+0x90>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0201 	orr.w	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_UART_IRQHandler+0xb0>
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f043 0202 	orr.w	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_UART_IRQHandler+0xd0>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00f      	beq.n	8004d56 <HAL_UART_IRQHandler+0xfa>
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d104      	bne.n	8004d4a <HAL_UART_IRQHandler+0xee>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f043 0208 	orr.w	r2, r3, #8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 811e 	beq.w	8004f9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <HAL_UART_IRQHandler+0x11e>
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb51 	bl	800541c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_UART_IRQHandler+0x146>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d031      	beq.n	8004e06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa93 	bl	80052ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d023      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d013      	beq.n	8004df6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	4a76      	ldr	r2, [pc, #472]	; (8004fac <HAL_UART_IRQHandler+0x350>)
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd faca 	bl	8002374 <HAL_DMA_Abort_IT>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e00e      	b.n	8004e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8f5 	bl	8004fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e00a      	b.n	8004e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8f1 	bl	8004fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	e006      	b.n	8004e14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8ed 	bl	8004fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e12:	e0c3      	b.n	8004f9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	bf00      	nop
    return;
 8004e16:	e0c1      	b.n	8004f9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f040 80a1 	bne.w	8004f64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 809b 	beq.w	8004f64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8095 	beq.w	8004f64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d04e      	beq.n	8004efc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e68:	8a3b      	ldrh	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8098 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e74:	8a3a      	ldrh	r2, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	f080 8092 	bcs.w	8004fa0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8a3a      	ldrh	r2, [r7, #16]
 8004e80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d02b      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0210 	bic.w	r2, r2, #16
 8004ed8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fa0d 	bl	80022fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f87f 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004efa:	e051      	b.n	8004fa0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d047      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004f14:	8a7b      	ldrh	r3, [r7, #18]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d044      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0210 	bic.w	r2, r2, #16
 8004f56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f58:	8a7b      	ldrh	r3, [r7, #18]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f84b 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f62:	e01f      	b.n	8004fa4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_UART_IRQHandler+0x324>
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9e8 	bl	800534e <UART_Transmit_IT>
    return;
 8004f7e:	e012      	b.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fa29 	bl	80053ec <UART_EndTransmit_IT>
    return;
 8004f9a:	e004      	b.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
    return;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004fa4:	bf00      	nop
  }
}
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	08005327 	.word	0x08005327

08004fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d113      	bne.n	8005052 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800503e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005050:	e002      	b.n	8005058 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffac 	bl	8004fb0 <HAL_UART_TxCpltCallback>
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ffa7 	bl	8004fc2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d12a      	bne.n	80050ee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0210 	bic.w	r2, r2, #16
 80050ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d106      	bne.n	8005104 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fa:	4619      	mov	r1, r3
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff7b 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005102:	e002      	b.n	800510a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7fb f87d 	bl	8000204 <HAL_UART_RxCpltCallback>
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	2b01      	cmp	r3, #1
 8005126:	d108      	bne.n	800513a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ff60 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005138:	e002      	b.n	8005140 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff4a 	bl	8004fd4 <HAL_UART_RxHalfCpltCallback>
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b21      	cmp	r3, #33	; 0x21
 800517a:	d108      	bne.n	800518e <UART_DMAError+0x46>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005188:	68b8      	ldr	r0, [r7, #8]
 800518a:	f000 f88b 	bl	80052a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	d108      	bne.n	80051c2 <UART_DMAError+0x7a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	f000 f886 	bl	80052ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0210 	orr.w	r2, r3, #16
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68b8      	ldr	r0, [r7, #8]
 80051d0:	f7ff ff09 	bl	8004fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2222      	movs	r2, #34	; 0x22
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	4a23      	ldr	r2, [pc, #140]	; (8005298 <UART_Start_Receive_DMA+0xbc>)
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <UART_Start_Receive_DMA+0xc0>)
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <UART_Start_Receive_DMA+0xc4>)
 800521a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2200      	movs	r2, #0
 8005222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	f7fd f800 	bl	8002240 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800526c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0800507d 	.word	0x0800507d
 800529c:	08005113 	.word	0x08005113
 80052a0:	08005149 	.word	0x08005149

080052a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80052ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0210 	bic.w	r2, r2, #16
 800530c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff fe50 	bl	8004fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b21      	cmp	r3, #33	; 0x21
 8005360:	d13e      	bne.n	80053e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d114      	bne.n	8005396 <UART_Transmit_IT+0x48>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d110      	bne.n	8005396 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	1c9a      	adds	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	621a      	str	r2, [r3, #32]
 8005394:	e008      	b.n	80053a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	1c59      	adds	r1, r3, #1
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6211      	str	r1, [r2, #32]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	4619      	mov	r1, r3
 80053b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10f      	bne.n	80053dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fdcf 	bl	8004fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	f040 8099 	bne.w	8005564 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	d117      	bne.n	800546c <UART_Receive_IT+0x50>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d113      	bne.n	800546c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	b29a      	uxth	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
 800546a:	e026      	b.n	80054ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	d007      	beq.n	8005490 <UART_Receive_IT+0x74>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <UART_Receive_IT+0x82>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e008      	b.n	80054b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4619      	mov	r1, r3
 80054c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d148      	bne.n	8005560 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0220 	bic.w	r2, r2, #32
 80054dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	2b01      	cmp	r3, #1
 800550c:	d123      	bne.n	8005556 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0210 	bic.w	r2, r2, #16
 8005522:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d10a      	bne.n	8005548 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fd52 	bl	8004ff8 <HAL_UARTEx_RxEventCallback>
 8005554:	e002      	b.n	800555c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fa fe54 	bl	8000204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e002      	b.n	8005566 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	e000      	b.n	8005566 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
  }
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055aa:	f023 030c 	bic.w	r3, r3, #12
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <UART_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055d8:	f7fd fe14 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	e002      	b.n	80055e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fd fdfc 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80055e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	4a22      	ldr	r2, [pc, #136]	; (8005688 <UART_SetConfig+0x118>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	0119      	lsls	r1, r3, #4
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009a      	lsls	r2, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	fbb2 f2f3 	udiv	r2, r2, r3
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <UART_SetConfig+0x118>)
 800561e:	fba3 0302 	umull	r0, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2064      	movs	r0, #100	; 0x64
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	3332      	adds	r3, #50	; 0x32
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563c:	4419      	add	r1, r3
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009a      	lsls	r2, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	fbb2 f2f3 	udiv	r2, r2, r3
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <UART_SetConfig+0x118>)
 8005656:	fba3 0302 	umull	r0, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2064      	movs	r0, #100	; 0x64
 800565e:	fb00 f303 	mul.w	r3, r0, r3
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	3332      	adds	r3, #50	; 0x32
 8005668:	4a07      	ldr	r2, [pc, #28]	; (8005688 <UART_SetConfig+0x118>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	440a      	add	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40013800 	.word	0x40013800
 8005688:	51eb851f 	.word	0x51eb851f

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2600      	movs	r6, #0
 8005690:	4d0c      	ldr	r5, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	f000 f830 	bl	8005700 <_init>
 80056a0:	2600      	movs	r6, #0
 80056a2:	4d0a      	ldr	r5, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4c0a      	ldr	r4, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08005740 	.word	0x08005740
 80056c8:	08005740 	.word	0x08005740
 80056cc:	08005740 	.word	0x08005740
 80056d0:	08005744 	.word	0x08005744

080056d4 <memcpy>:
 80056d4:	440a      	add	r2, r1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056dc:	d100      	bne.n	80056e0 <memcpy+0xc>
 80056de:	4770      	bx	lr
 80056e0:	b510      	push	{r4, lr}
 80056e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e6:	4291      	cmp	r1, r2
 80056e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ec:	d1f9      	bne.n	80056e2 <memcpy+0xe>
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <memset>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
