
Uber_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005918  08005918  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005918  08005918  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000010  08005930  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08005930  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001012f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255a  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000326c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018547  00000000  00000000  00034660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd6  00000000  00000000  0004cba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd17  00000000  00000000  0005d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000444c  00000000  00000000  000eb6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080058b0 	.word	0x080058b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080058b0 	.word	0x080058b0

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	af00      	add	r7, sp, #0
 8000152:	f107 0c08 	add.w	ip, r7, #8
 8000156:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 800015a:	4b07      	ldr	r3, [pc, #28]	; (8000178 <DRV_Init+0x2c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f107 0308 	add.w	r3, r7, #8
 8000162:	2258      	movs	r2, #88	; 0x58
 8000164:	4619      	mov	r1, r3
 8000166:	f005 fb8d 	bl	8005884 <memcpy>
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000172:	b004      	add	sp, #16
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	2000002c 	.word	0x2000002c

0800017c <Control_Init>:
		TIM_HandleTypeDef htim1_,
		TIM_HandleTypeDef htim2_,
		TIM_HandleTypeDef htim3_,
		TIM_HandleTypeDef htim4_,
		ADC_HandleTypeDef hadc1_,
		UART_HandleTypeDef huart1_){
 800017c:	b084      	sub	sp, #16
 800017e:	b5b0      	push	{r4, r5, r7, lr}
 8000180:	af00      	add	r7, sp, #0
 8000182:	f107 0410 	add.w	r4, r7, #16
 8000186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&htim1, &htim1_, sizeof(htim1_));
 800018a:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <Control_Init+0x84>)
 800018c:	4618      	mov	r0, r3
 800018e:	f107 0310 	add.w	r3, r7, #16
 8000192:	2248      	movs	r2, #72	; 0x48
 8000194:	4619      	mov	r1, r3
 8000196:	f005 fb75 	bl	8005884 <memcpy>
	memcpy(&htim2, &htim2_, sizeof(htim2_));
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <Control_Init+0x88>)
 800019c:	4618      	mov	r0, r3
 800019e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001a2:	2248      	movs	r2, #72	; 0x48
 80001a4:	4619      	mov	r1, r3
 80001a6:	f005 fb6d 	bl	8005884 <memcpy>
	memcpy(&htim3, &htim3_, sizeof(htim3_));
 80001aa:	4b17      	ldr	r3, [pc, #92]	; (8000208 <Control_Init+0x8c>)
 80001ac:	4618      	mov	r0, r3
 80001ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80001b2:	2248      	movs	r2, #72	; 0x48
 80001b4:	4619      	mov	r1, r3
 80001b6:	f005 fb65 	bl	8005884 <memcpy>
	memcpy(&htim4, &htim4_, sizeof(htim4_));
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <Control_Init+0x90>)
 80001bc:	4618      	mov	r0, r3
 80001be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80001c2:	2248      	movs	r2, #72	; 0x48
 80001c4:	4619      	mov	r1, r3
 80001c6:	f005 fb5d 	bl	8005884 <memcpy>
	memcpy(&hadc1, &hadc1_, sizeof(hadc1_));
 80001ca:	4b11      	ldr	r3, [pc, #68]	; (8000210 <Control_Init+0x94>)
 80001cc:	461d      	mov	r5, r3
 80001ce:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80001d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80001de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	memcpy(&huart1, &huart1_, sizeof(huart1_));
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <Control_Init+0x98>)
 80001e4:	4618      	mov	r0, r3
 80001e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80001ea:	2244      	movs	r2, #68	; 0x44
 80001ec:	4619      	mov	r1, r3
 80001ee:	f005 fb49 	bl	8005884 <memcpy>
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80001fa:	b004      	add	sp, #16
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	20000084 	.word	0x20000084
 8000204:	200000cc 	.word	0x200000cc
 8000208:	20000114 	.word	0x20000114
 800020c:	2000015c 	.word	0x2000015c
 8000210:	200001a4 	.word	0x200001a4
 8000214:	200001d4 	.word	0x200001d4

08000218 <StartPWM>:

void StartPWM(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800021c:	2100      	movs	r1, #0
 800021e:	4815      	ldr	r0, [pc, #84]	; (8000274 <StartPWM+0x5c>)
 8000220:	f003 fd6e 	bl	8003d00 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000224:	2100      	movs	r1, #0
 8000226:	4814      	ldr	r0, [pc, #80]	; (8000278 <StartPWM+0x60>)
 8000228:	f003 fd6a 	bl	8003d00 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800022c:	2104      	movs	r1, #4
 800022e:	4813      	ldr	r0, [pc, #76]	; (800027c <StartPWM+0x64>)
 8000230:	f003 fd66 	bl	8003d00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000234:	2108      	movs	r1, #8
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <StartPWM+0x64>)
 8000238:	f003 fd62 	bl	8003d00 <HAL_TIM_PWM_Start>

	htim1.Instance->CNT = 0;
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <StartPWM+0x64>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
	htim2.Instance->CNT = 0;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <StartPWM+0x5c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <StartPWM+0x60>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(&htim4);
 8000254:	480a      	ldr	r0, [pc, #40]	; (8000280 <StartPWM+0x68>)
 8000256:	f003 fcb1 	bl	8003bbc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_data, 7);		// Po konwersji ADC, DMA zapisuje odczyty
 800025a:	2207      	movs	r2, #7
 800025c:	4909      	ldr	r1, [pc, #36]	; (8000284 <StartPWM+0x6c>)
 800025e:	480a      	ldr	r0, [pc, #40]	; (8000288 <StartPWM+0x70>)
 8000260:	f001 fc74 	bl	8001b4c <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 2);
 8000264:	2202      	movs	r2, #2
 8000266:	4909      	ldr	r1, [pc, #36]	; (800028c <StartPWM+0x74>)
 8000268:	4809      	ldr	r0, [pc, #36]	; (8000290 <StartPWM+0x78>)
 800026a:	f004 fd9f 	bl	8004dac <HAL_UART_Receive_DMA>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	200000cc 	.word	0x200000cc
 8000278:	20000114 	.word	0x20000114
 800027c:	20000084 	.word	0x20000084
 8000280:	2000015c 	.word	0x2000015c
 8000284:	20000218 	.word	0x20000218
 8000288:	200001a4 	.word	0x200001a4
 800028c:	2000022c 	.word	0x2000022c
 8000290:	200001d4 	.word	0x200001d4

08000294 <SetZero_A>:

void SetZero_A(){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <SetZero_A+0x1c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2108      	movs	r1, #8
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <SetZero_A+0x20>)
 80002a6:	f002 fc6b 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000cc 	.word	0x200000cc
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <SetZero_B>:

void SetZero_B(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <SetZero_B+0x1c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2200      	movs	r2, #0
 80002c2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2120      	movs	r1, #32
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <SetZero_B+0x20>)
 80002ca:	f002 fc59 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000114 	.word	0x20000114
 80002d8:	40010c00 	.word	0x40010c00

080002dc <SetZero_C>:

void SetZero_C(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <SetZero_C+0x1c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2200      	movs	r2, #0
 80002e6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <SetZero_C+0x20>)
 80002f0:	f002 fc46 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000084 	.word	0x20000084
 80002fc:	40010800 	.word	0x40010800

08000300 <SetPulse_AH>:

void SetPulse_AH(uint8_t value){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <SetPulse_AH+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4804      	ldr	r0, [pc, #16]	; (8000328 <SetPulse_AH+0x28>)
 8000318:	f002 fc32 	bl	8002b80 <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200000cc 	.word	0x200000cc
 8000328:	40010c00 	.word	0x40010c00

0800032c <SetPulse_BH>:

void SetPulse_BH(uint8_t value){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <SetPulse_BH+0x24>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <SetPulse_BH+0x28>)
 8000344:	f002 fc1c 	bl	8002b80 <HAL_GPIO_WritePin>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000114 	.word	0x20000114
 8000354:	40010c00 	.word	0x40010c00

08000358 <SetPulse_CH>:

void SetPulse_CH(uint8_t value){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value);
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SetPulse_CH+0x28>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <SetPulse_CH+0x2c>)
 8000372:	f002 fc05 	bl	8002b80 <HAL_GPIO_WritePin>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000084 	.word	0x20000084
 8000384:	40010800 	.word	0x40010800

08000388 <SetFloating_A>:

void SetFloating_A(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SetFloating_A+0x1c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	2108      	movs	r1, #8
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <SetFloating_A+0x20>)
 800039a:	f002 fbf1 	bl	8002b80 <HAL_GPIO_WritePin>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000cc 	.word	0x200000cc
 80003a8:	40010c00 	.word	0x40010c00

080003ac <SetFloating_B>:

void SetFloating_B(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <SetFloating_B+0x1c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <SetFloating_B+0x20>)
 80003be:	f002 fbdf 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000114 	.word	0x20000114
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <SetFloating_C>:

void SetFloating_C(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SetFloating_C+0x1c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2200      	movs	r2, #0
 80003da:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	4803      	ldr	r0, [pc, #12]	; (80003f0 <SetFloating_C+0x20>)
 80003e4:	f002 fbcc 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000084 	.word	0x20000084
 80003f0:	40010800 	.word	0x40010800

080003f4 <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 8000400:	887b      	ldrh	r3, [r7, #2]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff7b 	bl	8000300 <SetPulse_AH>
	SetZero_B();
 800040a:	f7ff ff55 	bl	80002b8 <SetZero_B>
	SetFloating_C();
 800040e:	f7ff ffdf 	bl	80003d0 <SetFloating_C>
	Delay_Tick(Speed);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f000 f890 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_AH(Value);
 8000418:	887b      	ldrh	r3, [r7, #2]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff6f 	bl	8000300 <SetPulse_AH>
	SetFloating_B();
 8000422:	f7ff ffc3 	bl	80003ac <SetFloating_B>
	SetZero_C();
 8000426:	f7ff ff59 	bl	80002dc <SetZero_C>
	Delay_Tick(Speed);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f884 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_A();
 8000430:	f7ff ffaa 	bl	8000388 <SetFloating_A>
	SetPulse_BH(Value);
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff77 	bl	800032c <SetPulse_BH>
	SetZero_C();
 800043e:	f7ff ff4d 	bl	80002dc <SetZero_C>
	Delay_Tick(Speed);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f878 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_A();
 8000448:	f7ff ff24 	bl	8000294 <SetZero_A>
	SetPulse_BH(Value);
 800044c:	887b      	ldrh	r3, [r7, #2]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff6b 	bl	800032c <SetPulse_BH>
	SetFloating_C();
 8000456:	f7ff ffbb 	bl	80003d0 <SetFloating_C>
	Delay_Tick(Speed);
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 f86c 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_A();
 8000460:	f7ff ff18 	bl	8000294 <SetZero_A>
	SetFloating_B();
 8000464:	f7ff ffa2 	bl	80003ac <SetFloating_B>
	SetPulse_CH(Value);
 8000468:	887b      	ldrh	r3, [r7, #2]
 800046a:	b2db      	uxtb	r3, r3
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff73 	bl	8000358 <SetPulse_CH>
	Delay_Tick(Speed);
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f860 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_A();
 8000478:	f7ff ff86 	bl	8000388 <SetFloating_A>
	SetZero_B();
 800047c:	f7ff ff1c 	bl	80002b8 <SetZero_B>
	SetPulse_CH(Value);
 8000480:	887b      	ldrh	r3, [r7, #2]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff67 	bl	8000358 <SetPulse_CH>
	Delay_Tick(Speed);
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f854 	bl	8000538 <Delay_Tick>
	//data[ data_num-1] = 0;
	ToSend[0]++;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <SixStep+0xb0>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b02      	ldr	r3, [pc, #8]	; (80004a4 <SixStep+0xb0>)
 800049a:	701a      	strb	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000230 	.word	0x20000230

080004a8 <HAL_ADC_ConvCpltCallback>:
			if(ADC_data[Phase] < ADC_data[3]/2) return;
		}
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	// Collect data
	uint8_t div = 1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
			//TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(&htim1);
			//TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(&htim2);
			tim_num++;
		}
	}
	IsNewVal = 1;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x28>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
	cnt ++;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3301      	adds	r3, #1
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000226 	.word	0x20000226
 80004d4:	20000228 	.word	0x20000228

080004d8 <HAL_UART_RxCpltCallback>:

// Po odebraniu danych z UART + DMA wyowulje sie przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <HAL_UART_RxCpltCallback+0x50>)
 80004e6:	f002 fb63 	bl	8002bb0 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 2);		// Chcemy obierac dalej
 80004ea:	2202      	movs	r2, #2
 80004ec:	490f      	ldr	r1, [pc, #60]	; (800052c <HAL_UART_RxCpltCallback+0x54>)
 80004ee:	4810      	ldr	r0, [pc, #64]	; (8000530 <HAL_UART_RxCpltCallback+0x58>)
 80004f0:	f004 fc5c 	bl	8004dac <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart1, ToSend, 1);			// Odsylamy warrtosc obrotow
 80004f4:	2201      	movs	r2, #1
 80004f6:	490f      	ldr	r1, [pc, #60]	; (8000534 <HAL_UART_RxCpltCallback+0x5c>)
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <HAL_UART_RxCpltCallback+0x58>)
 80004fa:	f004 fbeb 	bl	8004cd4 <HAL_UART_Transmit_DMA>
	ToSend[0] = 0;										// resetujemy zmienna obrotow
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <HAL_UART_RxCpltCallback+0x5c>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	if ((rx_buffer[0] == 0) || rx_buffer[1] ==0){		// Zatrzymanie awaryjne
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_UART_RxCpltCallback+0x54>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <HAL_UART_RxCpltCallback+0x3c>
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_UART_RxCpltCallback+0x54>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d105      	bne.n	8000520 <HAL_UART_RxCpltCallback+0x48>
		SetFloating_A();
 8000514:	f7ff ff38 	bl	8000388 <SetFloating_A>
		SetFloating_B();
 8000518:	f7ff ff48 	bl	80003ac <SetFloating_B>
		SetFloating_C();
 800051c:	f7ff ff58 	bl	80003d0 <SetFloating_C>
	}
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010800 	.word	0x40010800
 800052c:	2000022c 	.word	0x2000022c
 8000530:	200001d4 	.word	0x200001d4
 8000534:	20000230 	.word	0x20000230

08000538 <Delay_Tick>:





void Delay_Tick(uint32_t val){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <Delay_Tick+0x58>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8000548:	e010      	b.n	800056c <Delay_Tick+0x34>
		val -= 0x00007fff;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000550:	3b7f      	subs	r3, #127	; 0x7f
 8000552:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(&htim4) < 0x7fff);
 8000554:	bf00      	nop
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <Delay_Tick+0x58>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000560:	4293      	cmp	r3, r2
 8000562:	d9f8      	bls.n	8000556 <Delay_Tick+0x1e>
		__HAL_TIM_SET_COUNTER(&htim4,0);
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <Delay_Tick+0x58>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2200      	movs	r2, #0
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000572:	d2ea      	bcs.n	800054a <Delay_Tick+0x12>
	}
	while(__HAL_TIM_GET_COUNTER(&htim4) < val);
 8000574:	bf00      	nop
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <Delay_Tick+0x58>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	d8f9      	bhi.n	8000576 <Delay_Tick+0x3e>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000234 	.word	0x20000234

08000594 <HAL_TIM_TriggerCallback>:



uint8_t test = 0;
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	test = __HAL_TIM_GET_COUNTER(&htim1);
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_TIM_TriggerCallback+0x48>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_TIM_TriggerCallback+0x4c>)
 80005a6:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM1){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <HAL_TIM_TriggerCallback+0x50>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10f      	bne.n	80005d2 <HAL_TIM_TriggerCallback+0x3e>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7f1b      	ldrb	r3, [r3, #28]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d10b      	bne.n	80005d2 <HAL_TIM_TriggerCallback+0x3e>
			test = __HAL_TIM_GET_COUNTER(&htim1);
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_TIM_TriggerCallback+0x48>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_TIM_TriggerCallback+0x4c>)
 80005c4:	701a      	strb	r2, [r3, #0]
			test = __HAL_TIM_GET_COUNTER(&htim1);
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_TIM_TriggerCallback+0x48>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <HAL_TIM_TriggerCallback+0x4c>)
 80005d0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	20000404 	.word	0x20000404
 80005e0:	20000231 	.word	0x20000231
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 80005ee:	b087      	sub	sp, #28
 80005f0:	af62      	add	r7, sp, #392	; 0x188
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f94d 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f9e1 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fd41 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 fd11 	bl	8001024 <MX_DMA_Init>
  MX_ADC1_Init();
 8000602:	f000 fa33 	bl	8000a6c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000606:	f000 fac5 	bl	8000b94 <MX_SPI1_Init>
  MX_TIM1_Init();
 800060a:	f000 fafb 	bl	8000c04 <MX_TIM1_Init>
  MX_TIM3_Init();
 800060e:	f000 fc1b 	bl	8000e48 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000612:	f000 fba5 	bl	8000d60 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000616:	f000 fcdb 	bl	8000fd0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800061a:	f000 fc8b 	bl	8000f34 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	48c5      	ldr	r0, [pc, #788]	; (8000938 <main+0x350>)
 8000624:	f002 faac 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2104      	movs	r1, #4
 800062c:	48c3      	ldr	r0, [pc, #780]	; (800093c <main+0x354>)
 800062e:	f002 faa7 	bl	8002b80 <HAL_GPIO_WritePin>


	// 				   DATA2,(  READ  ) + ADDR						     + DATA1
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	48c0      	ldr	r0, [pc, #768]	; (8000938 <main+0x350>)
 8000638:	f002 faa2 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800063c:	2064      	movs	r0, #100	; 0x64
 800063e:	f001 f989 	bl	8001954 <HAL_Delay>
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	48bc      	ldr	r0, [pc, #752]	; (8000938 <main+0x350>)
 8000648:	f002 fa9a 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f001 f981 	bl	8001954 <HAL_Delay>
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	48b8      	ldr	r0, [pc, #736]	; (8000938 <main+0x350>)
 8000658:	f002 fa92 	bl	8002b80 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f001 f979 	bl	8001954 <HAL_Delay>
	uint8_t ret[2] = {0, 0};
 8000662:	2300      	movs	r3, #0
 8000664:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000668:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800066c:	8013      	strh	r3, [r2, #0]
	uint8_t send[2] = {0x44,(1 << 7) + (0x5 << 3) + 0x0};
 800066e:	f64a 0344 	movw	r3, #43076	; 0xa844
 8000672:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000676:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800067a:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	48ae      	ldr	r0, [pc, #696]	; (800093c <main+0x354>)
 8000682:	f002 fa7d 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f001 f964 	bl	8001954 <HAL_Delay>
	uint8_t res = HAL_SPI_TransmitReceive(&hspi1, send, ret, 2, 1000);
 800068c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000690:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000694:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8000698:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2302      	movs	r3, #2
 80006a4:	48a6      	ldr	r0, [pc, #664]	; (8000940 <main+0x358>)
 80006a6:	f002 fff1 	bl	800368c <HAL_SPI_TransmitReceive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80006b0:	f102 020e 	add.w	r2, r2, #14
 80006b4:	7013      	strb	r3, [r2, #0]
	HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f001 f94c 	bl	8001954 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2104      	movs	r1, #4
 80006c0:	489e      	ldr	r0, [pc, #632]	; (800093c <main+0x354>)
 80006c2:	f002 fa5d 	bl	8002b80 <HAL_GPIO_WritePin>


	HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f001 f944 	bl	8001954 <HAL_Delay>
	uint8_t ret2[2] = {0, 0};
 80006cc:	2300      	movs	r3, #0
 80006ce:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80006d2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80006d6:	8013      	strh	r3, [r2, #0]
	uint8_t send2[2] = {0x44,(0 << 7) + (0x5 << 3) + 0x0};
 80006d8:	f642 0344 	movw	r3, #10308	; 0x2844
 80006dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80006e0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80006e4:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2104      	movs	r1, #4
 80006ea:	4894      	ldr	r0, [pc, #592]	; (800093c <main+0x354>)
 80006ec:	f002 fa48 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f001 f92f 	bl	8001954 <HAL_Delay>
	uint8_t res2 = HAL_SPI_TransmitReceive(&hspi1, send2, ret2, 2, 1000);
 80006f6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80006fa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80006fe:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8000702:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	488c      	ldr	r0, [pc, #560]	; (8000940 <main+0x358>)
 8000710:	f002 ffbc 	bl	800368c <HAL_SPI_TransmitReceive>
 8000714:	4603      	mov	r3, r0
 8000716:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800071a:	f102 020f 	add.w	r2, r2, #15
 800071e:	7013      	strb	r3, [r2, #0]
	HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f001 f917 	bl	8001954 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2104      	movs	r1, #4
 800072a:	4884      	ldr	r0, [pc, #528]	; (800093c <main+0x354>)
 800072c:	f002 fa28 	bl	8002b80 <HAL_GPIO_WritePin>

  DRV_Init(hspi1);
 8000730:	4c83      	ldr	r4, [pc, #524]	; (8000940 <main+0x358>)
 8000732:	4668      	mov	r0, sp
 8000734:	f104 0310 	add.w	r3, r4, #16
 8000738:	2248      	movs	r2, #72	; 0x48
 800073a:	4619      	mov	r1, r3
 800073c:	f005 f8a2 	bl	8005884 <memcpy>
 8000740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000744:	f7ff fd02 	bl	800014c <DRV_Init>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);		// LED
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	487d      	ldr	r0, [pc, #500]	; (8000944 <main+0x35c>)
 8000750:	f002 fa16 	bl	8002b80 <HAL_GPIO_WritePin>
  Control_Init(htim1, htim2, htim3, htim4, hadc1, huart1);
 8000754:	4e7c      	ldr	r6, [pc, #496]	; (8000948 <main+0x360>)
 8000756:	4a7d      	ldr	r2, [pc, #500]	; (800094c <main+0x364>)
 8000758:	ab50      	add	r3, sp, #320	; 0x140
 800075a:	4611      	mov	r1, r2
 800075c:	2244      	movs	r2, #68	; 0x44
 800075e:	4618      	mov	r0, r3
 8000760:	f005 f890 	bl	8005884 <memcpy>
 8000764:	4b7a      	ldr	r3, [pc, #488]	; (8000950 <main+0x368>)
 8000766:	ac44      	add	r4, sp, #272	; 0x110
 8000768:	461d      	mov	r5, r3
 800076a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800077a:	4a76      	ldr	r2, [pc, #472]	; (8000954 <main+0x36c>)
 800077c:	ab32      	add	r3, sp, #200	; 0xc8
 800077e:	4611      	mov	r1, r2
 8000780:	2248      	movs	r2, #72	; 0x48
 8000782:	4618      	mov	r0, r3
 8000784:	f005 f87e 	bl	8005884 <memcpy>
 8000788:	4a73      	ldr	r2, [pc, #460]	; (8000958 <main+0x370>)
 800078a:	ab20      	add	r3, sp, #128	; 0x80
 800078c:	4611      	mov	r1, r2
 800078e:	2248      	movs	r2, #72	; 0x48
 8000790:	4618      	mov	r0, r3
 8000792:	f005 f877 	bl	8005884 <memcpy>
 8000796:	4a71      	ldr	r2, [pc, #452]	; (800095c <main+0x374>)
 8000798:	ab0e      	add	r3, sp, #56	; 0x38
 800079a:	4611      	mov	r1, r2
 800079c:	2248      	movs	r2, #72	; 0x48
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 f870 	bl	8005884 <memcpy>
 80007a4:	466d      	mov	r5, sp
 80007a6:	f106 0410 	add.w	r4, r6, #16
 80007aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80007be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007c2:	f7ff fcdb 	bl	800017c <Control_Init>
  StartPWM();
 80007c6:	f7ff fd27 	bl	8000218 <StartPWM>



  //HAL_UART_Transmit_DMA(&huart1, tx_buffer, 3);
  HAL_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 f8c2 	bl	8001954 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  uint16_t ValueArray[10] = {0x0002,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003};
 80007d0:	4b63      	ldr	r3, [pc, #396]	; (8000960 <main+0x378>)
 80007d2:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 80007d6:	f104 0414 	add.w	r4, r4, #20
 80007da:	461d      	mov	r5, r3
 80007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e0:	682b      	ldr	r3, [r5, #0]
 80007e2:	6023      	str	r3, [r4, #0]
  uint16_t SpeedArray[10] = {0xff00,0xf800,0xf000,0x8000,0x0fff,0x0ff0,0x0f00,0x0800,0x00ff,0x00f0};
 80007e4:	4b5f      	ldr	r3, [pc, #380]	; (8000964 <main+0x37c>)
 80007e6:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	6023      	str	r3, [r4, #0]
  uint8_t Presc = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80007fa:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80007fe:	7013      	strb	r3, [r2, #0]
  uint16_t Value = Presc;
 8000800:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000804:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800080e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000812:	8013      	strh	r3, [r2, #0]
  uint32_t Speed = 0x0007ffff;
 8000814:	4b54      	ldr	r3, [pc, #336]	; (8000968 <main+0x380>)
 8000816:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800081a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800081e:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000826:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x35c>)
 8000828:	f002 f9aa 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000830:	f001 f890 	bl	8001954 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4842      	ldr	r0, [pc, #264]	; (8000944 <main+0x35c>)
 800083c:	f002 f9a0 	bl	8002b80 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 8000840:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000844:	f001 f886 	bl	8001954 <HAL_Delay>

  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	483a      	ldr	r0, [pc, #232]	; (8000938 <main+0x350>)
 800084e:	f002 f997 	bl	8002b80 <HAL_GPIO_WritePin>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 8);
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <main+0x360>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2208      	movs	r2, #8
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);	// Pulse wyzwala ADC
 800085a:	2108      	movs	r1, #8
 800085c:	483a      	ldr	r0, [pc, #232]	; (8000948 <main+0x360>)
 800085e:	f003 faf1 	bl	8003e44 <HAL_TIM_PWM_Start_IT>
*/
	//Speed = Speed - 0x0ff;
		  //Speed = SpeedArray[a];
		  //Value = ValueArray[a];
  //}
  IsDMA = 1;
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <main+0x384>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 3);
 8000868:	4b37      	ldr	r3, [pc, #220]	; (8000948 <main+0x360>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2203      	movs	r2, #3
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
uint16_t ticks = MIN_TICKS;
 8000870:	230f      	movs	r3, #15
 8000872:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000876:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800087a:	8013      	strh	r3, [r2, #0]
	SetFloating_C();
	IsRunning = 0;
}

///////////////////////
ticks = MIN_TICKS;
 800087c:	230f      	movs	r3, #15
 800087e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000882:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8000886:	8013      	strh	r3, [r2, #0]

while (1){

	int Speed;
	int cnt = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800088e:	f102 0208 	add.w	r2, r2, #8
 8000892:	6013      	str	r3, [r2, #0]
	int val = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800089a:	f102 0204 	add.w	r2, r2, #4
 800089e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	4824      	ldr	r0, [pc, #144]	; (8000938 <main+0x350>)
 80008a6:	f002 f96b 	bl	8002b80 <HAL_GPIO_WritePin>
	// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
	Speed = 0x00070000;
 80008aa:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80008ae:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80008b2:	6013      	str	r3, [r2, #0]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 80008b4:	e038      	b.n	8000928 <main+0x340>
		SixStep(Speed, val);
 80008b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80008c0:	f102 0204 	add.w	r2, r2, #4
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	b292      	uxth	r2, r2
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fd92 	bl	80003f4 <SixStep>
		++cnt;
 80008d0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80008d4:	f103 0308 	add.w	r3, r3, #8
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80008e0:	f102 0208 	add.w	r2, r2, #8
 80008e4:	6013      	str	r3, [r2, #0]
		if (cnt == 4){
 80008e6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80008ea:	f103 0308 	add.w	r3, r3, #8
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d110      	bne.n	8000916 <main+0x32e>
			++val;
 80008f4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80008f8:	f103 0304 	add.w	r3, r3, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000904:	f102 0204 	add.w	r2, r2, #4
 8000908:	6013      	str	r3, [r2, #0]
			cnt = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000910:	f102 0208 	add.w	r2, r2, #8
 8000914:	6013      	str	r3, [r2, #0]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000916:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000920:	3b1f      	subs	r3, #31
 8000922:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000932:	dcc0      	bgt.n	80008b6 <main+0x2ce>
		}
	}

	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000934:	e031      	b.n	800099a <main+0x3b2>
 8000936:	bf00      	nop
 8000938:	40011400 	.word	0x40011400
 800093c:	40010c00 	.word	0x40010c00
 8000940:	2000044c 	.word	0x2000044c
 8000944:	40010800 	.word	0x40010800
 8000948:	20000404 	.word	0x20000404
 800094c:	2000037c 	.word	0x2000037c
 8000950:	20000308 	.word	0x20000308
 8000954:	20000234 	.word	0x20000234
 8000958:	2000027c 	.word	0x2000027c
 800095c:	200004a4 	.word	0x200004a4
 8000960:	080058c8 	.word	0x080058c8
 8000964:	080058dc 	.word	0x080058dc
 8000968:	0007ffff 	.word	0x0007ffff
 800096c:	20000000 	.word	0x20000000
		SixStep(Speed, val);
 8000970:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800097a:	f102 0204 	add.w	r2, r2, #4
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	b292      	uxth	r2, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd35 	bl	80003f4 <SixStep>
	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800098a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000994:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80009a4:	dce4      	bgt.n	8000970 <main+0x388>
	}

	SetZero_A();
 80009a6:	f7ff fc75 	bl	8000294 <SetZero_A>
	SetZero_B();
 80009aa:	f7ff fc85 	bl	80002b8 <SetZero_B>
	SetZero_C();
 80009ae:	f7ff fc95 	bl	80002dc <SetZero_C>
	//HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
	HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 ffce 	bl	8001954 <HAL_Delay>


	while(1){
 80009b8:	e7fe      	b.n	80009b8 <main+0x3d0>
 80009ba:	bf00      	nop

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 ff68 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009fc:	2300      	movs	r3, #0
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000a00:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 f8ea 	bl	8002be4 <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a16:	f000 fbd1 	bl	80011bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fb54 	bl	80030e4 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a42:	f000 fbbb 	bl	80011bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a46:	2302      	movs	r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fce0 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5e:	f000 fbad 	bl	80011bc <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	; 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000a7e:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <MX_ADC1_Init+0x124>)
 8000a80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a82:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8a:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000a98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aaa:	4838      	ldr	r0, [pc, #224]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000aac:	f000 ff76 	bl	800199c <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ab6:	f000 fb81 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4830      	ldr	r0, [pc, #192]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000acc:	f001 f92e 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 fb71 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ada:	2303      	movs	r3, #3
 8000adc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000ae8:	f001 f920 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000af2:	f000 fb63 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4822      	ldr	r0, [pc, #136]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000b04:	f001 f912 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b0e:	f000 fb55 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481b      	ldr	r0, [pc, #108]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000b20:	f001 f904 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000b2a:	f000 fb47 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b32:	2305      	movs	r3, #5
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000b3c:	f001 f8f6 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b46:	f000 fb39 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000b58:	f001 f8e8 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b62:	f000 fb2b 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b66:	2309      	movs	r3, #9
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_ADC1_Init+0x120>)
 8000b74:	f001 f8da 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000b7e:	f000 fb1d 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000308 	.word	0x20000308
 8000b90:	40012400 	.word	0x40012400

08000b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <MX_SPI1_Init+0x6c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bca:	2220      	movs	r2, #32
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000be2:	220a      	movs	r2, #10
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_SPI1_Init+0x68>)
 8000be8:	f002 fccc 	bl	8003584 <HAL_SPI_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000bf2:	f000 fae3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000044c 	.word	0x2000044c
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	; 0x58
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fe2f 	bl	80058a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c42:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c44:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <MX_TIM1_Init+0x158>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c4e:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c50:	2220      	movs	r2, #32
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c60:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c6c:	483a      	ldr	r0, [pc, #232]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c6e:	f002 ff55 	bl	8003b1c <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c78:	f000 faa0 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c86:	4619      	mov	r1, r3
 8000c88:	4833      	ldr	r0, [pc, #204]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c8a:	f003 fb89 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c94:	f000 fa92 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c98:	482f      	ldr	r0, [pc, #188]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000c9a:	f002 ffd9 	bl	8003c50 <HAL_TIM_PWM_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ca4:	f000 fa8a 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4828      	ldr	r0, [pc, #160]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000cb8:	f003 fefe 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000cc2:	f000 fa7b 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	2360      	movs	r3, #96	; 0x60
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000cec:	f003 fa9a 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cf6:	f000 fa61 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	2208      	movs	r2, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000d08:	f003 fa8c 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000d12:	f000 fa53 	bl	80011bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000d3a:	f003 ff1b 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000d44:	f000 fa3a 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <MX_TIM1_Init+0x154>)
 8000d4a:	f000 fb99 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000d4e:	bf00      	nop
 8000d50:	3758      	adds	r7, #88	; 0x58
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000404 	.word	0x20000404
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 0320 	add.w	r3, r7, #32
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d90:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4823      	ldr	r0, [pc, #140]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000db8:	f002 feb0 	bl	8003b1c <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000dc2:	f000 f9fb 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481c      	ldr	r0, [pc, #112]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000dd4:	f003 fae4 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000dde:	f000 f9ed 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de2:	4818      	ldr	r0, [pc, #96]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000de4:	f002 ff34 	bl	8003c50 <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000dee:	f000 f9e5 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000e02:	f003 fe59 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f9d6 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000e28:	f003 f9fc 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f9c3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <MX_TIM2_Init+0xe4>)
 8000e38:	f000 fb22 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000e3c:	bf00      	nop
 8000e3e:	3738      	adds	r7, #56	; 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200004a4 	.word	0x200004a4

08000e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <MX_TIM3_Init+0xe8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e86:	2220      	movs	r2, #32
 8000e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e9c:	4823      	ldr	r0, [pc, #140]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000e9e:	f002 fe3d 	bl	8003b1c <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ea8:	f000 f988 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000eba:	f003 fa71 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ec4:	f000 f97a 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000eca:	f002 fec1 	bl	8003c50 <HAL_TIM_PWM_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ed4:	f000 f972 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000ee8:	f003 fde6 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000ef2:	f000 f963 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000f0e:	f003 f989 	bl	8004224 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f18:	f000 f950 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <MX_TIM3_Init+0xe4>)
 8000f1e:	f000 faaf 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000f22:	bf00      	nop
 8000f24:	3738      	adds	r7, #56	; 0x38
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000027c 	.word	0x2000027c
 8000f30:	40000400 	.word	0x40000400

08000f34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <MX_TIM4_Init+0x98>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f78:	f002 fdd0 	bl	8003b1c <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f91b 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000f94:	f003 fa04 	bl	80043a0 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 f90d 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_TIM4_Init+0x94>)
 8000fb0:	f003 fd82 	bl	8004ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 f8ff 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000234 	.word	0x20000234
 8000fcc:	40000800 	.word	0x40000800

08000fd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_USART1_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8001008:	f003 fe17 	bl	8004c3a <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 f8d3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000037c 	.word	0x2000037c
 8001020:	40013800 	.word	0x40013800

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_DMA_Init+0x58>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <MX_DMA_Init+0x58>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_DMA_Init+0x58>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200b      	movs	r0, #11
 8001048:	f001 f941 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800104c:	200b      	movs	r0, #11
 800104e:	f001 f95a 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200e      	movs	r0, #14
 8001058:	f001 f939 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800105c:	200e      	movs	r0, #14
 800105e:	f001 f952 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	200f      	movs	r0, #15
 8001068:	f001 f931 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800106c:	200f      	movs	r0, #15
 800106e:	f001 f94a 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <MX_GPIO_Init+0x128>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <MX_GPIO_Init+0x128>)
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a3d      	ldr	r2, [pc, #244]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a37      	ldr	r2, [pc, #220]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <MX_GPIO_Init+0x128>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2101      	movs	r1, #1
 80010e0:	4832      	ldr	r0, [pc, #200]	; (80011ac <MX_GPIO_Init+0x12c>)
 80010e2:	f001 fd4d 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	212c      	movs	r1, #44	; 0x2c
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <MX_GPIO_Init+0x130>)
 80010ec:	f001 fd48 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_CL_Pin|LED_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010f6:	482f      	ldr	r0, [pc, #188]	; (80011b4 <MX_GPIO_Init+0x134>)
 80010f8:	f001 fd42 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4826      	ldr	r0, [pc, #152]	; (80011ac <MX_GPIO_Init+0x12c>)
 8001114:	f001 fbb0 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001118:	2302      	movs	r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4820      	ldr	r0, [pc, #128]	; (80011ac <MX_GPIO_Init+0x12c>)
 800112c:	f001 fba4 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PWM_AL_Pin PWM_BL_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin;
 8001130:	232c      	movs	r3, #44	; 0x2c
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_GPIO_Init+0x130>)
 8001148:	f001 fb96 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_CL_Pin LED_Pin */
  GPIO_InitStruct.Pin = PWM_CL_Pin|LED_Pin;
 800114c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_GPIO_Init+0x134>)
 8001166:	f001 fb87 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_INPUT_Pin D1_INPUT_Pin */
  GPIO_InitStruct.Pin = D2_INPUT_Pin|D1_INPUT_Pin;
 800116a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_GPIO_Init+0x134>)
 8001180:	f001 fb7a 	bl	8002878 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_GPIO_Init+0x138>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <MX_GPIO_Init+0x138>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	6053      	str	r3, [r2, #4]

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010000 	.word	0x40010000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_MspInit+0x5c>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_MspInit+0x5c>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_MspInit+0x5c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_MspInit+0x5c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_MspInit+0x60>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_MspInit+0x60>)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000

0800122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d15f      	bne.n	800130c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_ADC_MspInit+0xec>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_ADC_MspInit+0xec>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_ADC_MspInit+0xec>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_ADC_MspInit+0xec>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <HAL_ADC_MspInit+0xec>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_ADC_MspInit+0xec>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_ADC_MspInit+0xec>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a25      	ldr	r2, [pc, #148]	; (8001318 <HAL_ADC_MspInit+0xec>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_ADC_MspInit+0xec>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8001294:	231f      	movs	r3, #31
 8001296:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	4619      	mov	r1, r3
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <HAL_ADC_MspInit+0xf0>)
 80012a4:	f001 fae8 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4619      	mov	r1, r3
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <HAL_ADC_MspInit+0xf4>)
 80012b8:	f001 fade 	bl	8002878 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_ADC_MspInit+0xfc>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 80012f2:	f001 f823 	bl	800233c <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80012fc:	f7ff ff5e 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 8001304:	621a      	str	r2, [r3, #32]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_ADC_MspInit+0xf8>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40012400 	.word	0x40012400
 8001318:	40021000 	.word	0x40021000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	200003c0 	.word	0x200003c0
 8001328:	40020008 	.word	0x40020008

0800132c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d12f      	bne.n	80013ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 8001352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <HAL_SPI_MspInit+0x90>)
 8001390:	f001 fa72 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_SPI_MspInit+0x90>)
 80013a8:	f001 fa66 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40013000 	.word	0x40013000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_TIM_Base_MspInit+0xb0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d114      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 80013d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2019      	movs	r0, #25
 80013f0:	f000 ff6d 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013f4:	2019      	movs	r0, #25
 80013f6:	f000 ff86 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013fa:	e034      	b.n	8001466 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d10c      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
}
 800141e:	e022      	b.n	8001466 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_TIM_Base_MspInit+0xb8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10c      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
}
 8001442:	e010      	b.n	8001466 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0xbc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10b      	bne.n	8001466 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012c00 	.word	0x40012c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40000400 	.word	0x40000400
 800147c:	40000800 	.word	0x40000800

08001480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a40      	ldr	r2, [pc, #256]	; (800159c <HAL_TIM_MspPostInit+0x11c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d119      	bne.n	80014d4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH_Pin;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2302      	movs	r3, #2
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <HAL_TIM_MspPostInit+0x124>)
 80014ce:	f001 f9d3 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014d2:	e05f      	b.n	8001594 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d12b      	bne.n	8001536 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 80014f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2302      	movs	r3, #2
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4619      	mov	r1, r3
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <HAL_TIM_MspPostInit+0x124>)
 800150c:	f001 f9b4 	bl	8002878 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_TIM_MspPostInit+0x128>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_TIM_MspPostInit+0x128>)
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	6053      	str	r3, [r2, #4]
}
 8001534:	e02e      	b.n	8001594 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_TIM_MspPostInit+0x12c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d129      	bne.n	8001594 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_TIM_MspPostInit+0x120>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BH_Pin;
 8001558:	2310      	movs	r3, #16
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2302      	movs	r3, #2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BH_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	4619      	mov	r1, r3
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <HAL_TIM_MspPostInit+0x130>)
 800156c:	f001 f984 	bl	8002878 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_TIM_MspPostInit+0x128>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800158e:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_TIM_MspPostInit+0x128>)
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	6053      	str	r3, [r2, #4]
}
 8001594:	bf00      	nop
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40012c00 	.word	0x40012c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40010c00 	.word	0x40010c00

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_UART_MspInit+0x150>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f040 8092 	bne.w	80016fa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_UART_MspInit+0x154>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	483c      	ldr	r0, [pc, #240]	; (800170c <HAL_UART_MspInit+0x158>)
 800161a:	f001 f92d 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4836      	ldr	r0, [pc, #216]	; (800170c <HAL_UART_MspInit+0x158>)
 8001632:	f001 f921 	bl	8002878 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_UART_MspInit+0x15c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
 800164c:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_UART_MspInit+0x15c>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001654:	4a30      	ldr	r2, [pc, #192]	; (8001718 <HAL_UART_MspInit+0x164>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_UART_MspInit+0x160>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_UART_MspInit+0x160>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_UART_MspInit+0x160>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001682:	4824      	ldr	r0, [pc, #144]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001684:	f000 fe5a 	bl	800233c <HAL_DMA_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800168e:	f7ff fd95 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_UART_MspInit+0x160>)
 8001696:	639a      	str	r2, [r3, #56]	; 0x38
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_UART_MspInit+0x160>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_UART_MspInit+0x168>)
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_UART_MspInit+0x16c>)
 80016a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_UART_MspInit+0x168>)
 80016a6:	2210      	movs	r2, #16
 80016a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_UART_MspInit+0x168>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_UART_MspInit+0x168>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_UART_MspInit+0x168>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0x168>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_UART_MspInit+0x168>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0x168>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <HAL_UART_MspInit+0x168>)
 80016d0:	f000 fe34 	bl	800233c <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80016da:	f7ff fd6f 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_UART_MspInit+0x168>)
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_UART_MspInit+0x168>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2025      	movs	r0, #37	; 0x25
 80016f0:	f000 fded 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f4:	2025      	movs	r0, #37	; 0x25
 80016f6:	f000 fe06 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013800 	.word	0x40013800
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00
 8001710:	40010000 	.word	0x40010000
 8001714:	20000338 	.word	0x20000338
 8001718:	40020058 	.word	0x40020058
 800171c:	200002c4 	.word	0x200002c4
 8001720:	40020044 	.word	0x40020044

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <HardFault_Handler+0x4>

08001736 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <BusFault_Handler+0x4>

08001742 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8d4 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA1_Channel1_IRQHandler+0x10>)
 800177e:	f000 ff47 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200003c0 	.word	0x200003c0

0800178c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Channel4_IRQHandler+0x10>)
 8001792:	f000 ff3d 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002c4 	.word	0x200002c4

080017a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Channel5_IRQHandler+0x10>)
 80017a6:	f000 ff33 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000338 	.word	0x20000338

080017b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM1_UP_IRQHandler+0x10>)
 80017ba:	f002 fc2b 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000404 	.word	0x20000404

080017c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART1_IRQHandler+0x10>)
 80017ce:	f003 fb1d 	bl	8004e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000037c 	.word	0x2000037c

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <SystemInit+0x5c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <SystemInit+0x5c>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <SystemInit+0x5c>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4911      	ldr	r1, [pc, #68]	; (8001838 <SystemInit+0x5c>)
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <SystemInit+0x60>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <SystemInit+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <SystemInit+0x5c>)
 80017fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <SystemInit+0x5c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SystemInit+0x5c>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SystemInit+0x5c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x5c>)
 800181a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800181e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SystemInit+0x5c>)
 8001822:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001826:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SystemInit+0x64>)
 800182a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182e:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	f8ff0000 	.word	0xf8ff0000
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001844:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001846:	e003      	b.n	8001850 <LoopCopyDataInit>

08001848 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800184a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800184c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800184e:	3104      	adds	r1, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001854:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001856:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001858:	d3f6      	bcc.n	8001848 <CopyDataInit>
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800185c:	e002      	b.n	8001864 <LoopFillZerobss>

0800185e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001860:	f842 3b04 	str.w	r3, [r2], #4

08001864 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001866:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001868:	d3f9      	bcc.n	800185e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186a:	f7ff ffb7 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f003 ffe5 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7fe feb9 	bl	80005e8 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r3, =_sidata
 8001878:	08005920 	.word	0x08005920
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001880:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001884:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001888:	200004f0 	.word	0x200004f0

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 fd09 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fc8c 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd21 	bl	8002322 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 fce9 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000004 	.word	0x20000004
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	2000000c 	.word	0x2000000c
 800193c:	200004ec 	.word	0x200004ec

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200004ec 	.word	0x200004ec

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff0 	bl	8001940 <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffe0 	bl	8001940 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c

0800199c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0be      	b.n	8001b3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fc26 	bl	800122c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 faf5 	bl	8001fd0 <ADC_ConversionStop_Disable>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8099 	bne.w	8001b2a <HAL_ADC_Init+0x18e>
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8095 	bne.w	8001b2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a08:	f023 0302 	bic.w	r3, r3, #2
 8001a0c:	f043 0202 	orr.w	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7b1b      	ldrb	r3, [r3, #12]
 8001a22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_Init+0xa2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_Init+0xa8>
 8001a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a42:	e000      	b.n	8001a46 <HAL_ADC_Init+0xaa>
 8001a44:	2300      	movs	r3, #0
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d1b      	ldrb	r3, [r3, #20]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d119      	bne.n	8001a88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	035a      	lsls	r2, r3, #13
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e00b      	b.n	8001a88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_ADC_Init+0x1a8>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_Init+0x126>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d104      	bne.n	8001acc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	051b      	lsls	r3, r3, #20
 8001aca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_ADC_Init+0x1ac>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10b      	bne.n	8001b08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	f043 0201 	orr.w	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b06:	e018      	b.n	8001b3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f023 0312 	bic.w	r3, r3, #18
 8001b10:	f043 0210 	orr.w	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b28:	e007      	b.n	8001b3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f043 0210 	orr.w	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	ffe1f7fd 	.word	0xffe1f7fd
 8001b48:	ff1f0efe 	.word	0xff1f0efe

08001b4c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a64      	ldr	r2, [pc, #400]	; (8001cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_ADC_Start_DMA+0x24>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_Start_DMA+0x32>
 8001b70:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 80b3 	bne.w	8001ce4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_Start_DMA+0x40>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e0ae      	b.n	8001cea <HAL_ADC_Start_DMA+0x19e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f9c1 	bl	8001f1c <ADC_Enable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 809a 	bne.w	8001cda <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Start_DMA+0x84>
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d115      	bne.n	8001bfc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d026      	beq.n	8001c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bfa:	e01d      	b.n	8001c38 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_Start_DMA+0xd0>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a38      	ldr	r2, [pc, #224]	; (8001cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d10d      	bne.n	8001c38 <HAL_ADC_Start_DMA+0xec>
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	f023 0206 	bic.w	r2, r3, #6
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <HAL_ADC_Start_DMA+0x1b0>)
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <HAL_ADC_Start_DMA+0x1b4>)
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_ADC_Start_DMA+0x1b8>)
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0202 	mvn.w	r2, #2
 8001c80:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c90:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a18      	ldr	r0, [r3, #32]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	334c      	adds	r3, #76	; 0x4c
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f000 fba5 	bl	80023f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cc4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cd6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cd8:	e006      	b.n	8001ce8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ce2:	e001      	b.n	8001ce8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40012400 	.word	0x40012400
 8001cf8:	40012800 	.word	0x40012800
 8001cfc:	08002053 	.word	0x08002053
 8001d00:	080020cf 	.word	0x080020cf
 8001d04:	080020eb 	.word	0x080020eb

08001d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x20>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0dc      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1da>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d81c      	bhi.n	8001d96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	221f      	movs	r2, #31
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4019      	ands	r1, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b05      	subs	r3, #5
 8001d88:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
 8001d94:	e03c      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d81c      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b23      	subs	r3, #35	; 0x23
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4019      	ands	r1, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b23      	subs	r3, #35	; 0x23
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd6:	e01b      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b41      	subs	r3, #65	; 0x41
 8001dea:	221f      	movs	r2, #31
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b41      	subs	r3, #65	; 0x41
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d91c      	bls.n	8001e52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	3b1e      	subs	r3, #30
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4019      	ands	r1, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6898      	ldr	r0, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	fa00 f203 	lsl.w	r2, r0, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	e019      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	2207      	movs	r2, #7
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6898      	ldr	r0, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d003      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d132      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d125      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d126      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ebc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d11a      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	0c9a      	lsrs	r2, r3, #18
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x1b2>
 8001eea:	e007      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40012400 	.word	0x40012400
 8001f14:	20000004 	.word	0x20000004
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d040      	beq.n	8001fbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <ADC_Enable+0xac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <ADC_Enable+0xb0>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f58:	e002      	b.n	8001f60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f66:	f7ff fceb 	bl	8001940 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f6c:	e01f      	b.n	8001fae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f6e:	f7ff fce7 	bl	8001940 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d918      	bls.n	8001fae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d011      	beq.n	8001fae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1d8      	bne.n	8001f6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d12e      	bne.n	8002048 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ffa:	f7ff fca1 	bl	8001940 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002000:	e01b      	b.n	800203a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002002:	f7ff fc9d 	bl	8001940 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d914      	bls.n	800203a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d10d      	bne.n	800203a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e007      	b.n	800204a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d0dc      	beq.n	8002002 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002068:	2b00      	cmp	r3, #0
 800206a:	d127      	bne.n	80020bc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002082:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002086:	d115      	bne.n	80020b4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	2b00      	cmp	r3, #0
 800208e:	d111      	bne.n	80020b4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7fe f9f7 	bl	80004a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020ba:	e004      	b.n	80020c6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fe13 	bl	8001d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff fe02 	bl	8001d1a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4906      	ldr	r1, [pc, #24]	; (80021b8 <__NVIC_EnableIRQ+0x34>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff90 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff2d 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff42 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff90 	bl	8002210 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5f 	bl	80021bc <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff35 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e043      	b.n	80023da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_DMA_Init+0xa8>)
 800235a:	4413      	add	r3, r2
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_DMA_Init+0xac>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_DMA_Init+0xb0>)
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002386:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800238a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	bffdfff8 	.word	0xbffdfff8
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Start_IT+0x20>
 800240c:	2302      	movs	r3, #2
 800240e:	e04a      	b.n	80024a6 <HAL_DMA_Start_IT+0xb6>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800241e:	2b01      	cmp	r3, #1
 8002420:	d13a      	bne.n	8002498 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9e8 	bl	800281c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 020e 	orr.w	r2, r2, #14
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e00f      	b.n	8002486 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 020a 	orr.w	r2, r2, #10
 8002484:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e005      	b.n	80024a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
 80024a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d008      	beq.n	80024d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e020      	b.n	8002518 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 020e 	bic.w	r2, r2, #14
 80024e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002536:	2b02      	cmp	r3, #2
 8002538:	d005      	beq.n	8002546 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e051      	b.n	80025ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 020e 	bic.w	r2, r2, #14
 8002554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_DMA_Abort_IT+0xd0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d029      	beq.n	80025c4 <HAL_DMA_Abort_IT+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_DMA_Abort_IT+0xd4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d022      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x9c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_DMA_Abort_IT+0xd8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d01a      	beq.n	80025ba <HAL_DMA_Abort_IT+0x96>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <HAL_DMA_Abort_IT+0xdc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d012      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x90>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_DMA_Abort_IT+0xe0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00a      	beq.n	80025ae <HAL_DMA_Abort_IT+0x8a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_DMA_Abort_IT+0xe4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Abort_IT+0x84>
 80025a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a6:	e00e      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ac:	e00b      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b2:	e008      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	e005      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	e002      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025c0:	2310      	movs	r3, #16
 80025c2:	e000      	b.n	80025c6 <HAL_DMA_Abort_IT+0xa2>
 80025c4:	2301      	movs	r3, #1
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_DMA_Abort_IT+0xe8>)
 80025c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
    } 
  }
  return status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40020008 	.word	0x40020008
 80025f8:	4002001c 	.word	0x4002001c
 80025fc:	40020030 	.word	0x40020030
 8002600:	40020044 	.word	0x40020044
 8002604:	40020058 	.word	0x40020058
 8002608:	4002006c 	.word	0x4002006c
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2204      	movs	r2, #4
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d04f      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xc8>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a66      	ldr	r2, [pc, #408]	; (8002800 <HAL_DMA_IRQHandler+0x1f0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d029      	beq.n	80026be <HAL_DMA_IRQHandler+0xae>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_DMA_IRQHandler+0x1f4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d022      	beq.n	80026ba <HAL_DMA_IRQHandler+0xaa>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a63      	ldr	r2, [pc, #396]	; (8002808 <HAL_DMA_IRQHandler+0x1f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01a      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xa4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a62      	ldr	r2, [pc, #392]	; (800280c <HAL_DMA_IRQHandler+0x1fc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d012      	beq.n	80026ae <HAL_DMA_IRQHandler+0x9e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_DMA_IRQHandler+0x200>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00a      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x98>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <HAL_DMA_IRQHandler+0x204>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x92>
 800269c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a0:	e00e      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026a6:	e00b      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026ac:	e008      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b2:	e005      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	e002      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb0>
 80026be:	2304      	movs	r3, #4
 80026c0:	4a55      	ldr	r2, [pc, #340]	; (8002818 <HAL_DMA_IRQHandler+0x208>)
 80026c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8094 	beq.w	80027f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	e08e      	b.n	80027f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2202      	movs	r2, #2
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d056      	beq.n	8002796 <HAL_DMA_IRQHandler+0x186>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d051      	beq.n	8002796 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 020a 	bic.w	r2, r2, #10
 800270e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a38      	ldr	r2, [pc, #224]	; (8002800 <HAL_DMA_IRQHandler+0x1f0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d029      	beq.n	8002776 <HAL_DMA_IRQHandler+0x166>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a37      	ldr	r2, [pc, #220]	; (8002804 <HAL_DMA_IRQHandler+0x1f4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d022      	beq.n	8002772 <HAL_DMA_IRQHandler+0x162>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a35      	ldr	r2, [pc, #212]	; (8002808 <HAL_DMA_IRQHandler+0x1f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01a      	beq.n	800276c <HAL_DMA_IRQHandler+0x15c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_DMA_IRQHandler+0x1fc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d012      	beq.n	8002766 <HAL_DMA_IRQHandler+0x156>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a32      	ldr	r2, [pc, #200]	; (8002810 <HAL_DMA_IRQHandler+0x200>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00a      	beq.n	8002760 <HAL_DMA_IRQHandler+0x150>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_DMA_IRQHandler+0x204>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d102      	bne.n	800275a <HAL_DMA_IRQHandler+0x14a>
 8002754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002758:	e00e      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 800275a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275e:	e00b      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 8002760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002764:	e008      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 8002766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276a:	e005      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	e002      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 8002772:	2320      	movs	r3, #32
 8002774:	e000      	b.n	8002778 <HAL_DMA_IRQHandler+0x168>
 8002776:	2302      	movs	r3, #2
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_DMA_IRQHandler+0x208>)
 800277a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d034      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002794:	e02f      	b.n	80027f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2208      	movs	r2, #8
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x1e8>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
    }
  }
  return;
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
}
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40020008 	.word	0x40020008
 8002804:	4002001c 	.word	0x4002001c
 8002808:	40020030 	.word	0x40020030
 800280c:	40020044 	.word	0x40020044
 8002810:	40020058 	.word	0x40020058
 8002814:	4002006c 	.word	0x4002006c
 8002818:	40020000 	.word	0x40020000

0800281c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d108      	bne.n	800285c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800285a:	e007      	b.n	800286c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b08b      	sub	sp, #44	; 0x2c
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288a:	e169      	b.n	8002b60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800288c:	2201      	movs	r2, #1
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8158 	bne.w	8002b5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a9a      	ldr	r2, [pc, #616]	; (8002b18 <HAL_GPIO_Init+0x2a0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d05e      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
 80028b4:	4a98      	ldr	r2, [pc, #608]	; (8002b18 <HAL_GPIO_Init+0x2a0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d875      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028ba:	4a98      	ldr	r2, [pc, #608]	; (8002b1c <HAL_GPIO_Init+0x2a4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d058      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
 80028c0:	4a96      	ldr	r2, [pc, #600]	; (8002b1c <HAL_GPIO_Init+0x2a4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d86f      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028c6:	4a96      	ldr	r2, [pc, #600]	; (8002b20 <HAL_GPIO_Init+0x2a8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d052      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
 80028cc:	4a94      	ldr	r2, [pc, #592]	; (8002b20 <HAL_GPIO_Init+0x2a8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d869      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028d2:	4a94      	ldr	r2, [pc, #592]	; (8002b24 <HAL_GPIO_Init+0x2ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d04c      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
 80028d8:	4a92      	ldr	r2, [pc, #584]	; (8002b24 <HAL_GPIO_Init+0x2ac>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d863      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028de:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_GPIO_Init+0x2b0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d046      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
 80028e4:	4a90      	ldr	r2, [pc, #576]	; (8002b28 <HAL_GPIO_Init+0x2b0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d85d      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d82a      	bhi.n	8002944 <HAL_GPIO_Init+0xcc>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d859      	bhi.n	80029a6 <HAL_GPIO_Init+0x12e>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_GPIO_Init+0x80>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002973 	.word	0x08002973
 80028fc:	0800294d 	.word	0x0800294d
 8002900:	0800295f 	.word	0x0800295f
 8002904:	080029a1 	.word	0x080029a1
 8002908:	080029a7 	.word	0x080029a7
 800290c:	080029a7 	.word	0x080029a7
 8002910:	080029a7 	.word	0x080029a7
 8002914:	080029a7 	.word	0x080029a7
 8002918:	080029a7 	.word	0x080029a7
 800291c:	080029a7 	.word	0x080029a7
 8002920:	080029a7 	.word	0x080029a7
 8002924:	080029a7 	.word	0x080029a7
 8002928:	080029a7 	.word	0x080029a7
 800292c:	080029a7 	.word	0x080029a7
 8002930:	080029a7 	.word	0x080029a7
 8002934:	080029a7 	.word	0x080029a7
 8002938:	080029a7 	.word	0x080029a7
 800293c:	08002955 	.word	0x08002955
 8002940:	08002969 	.word	0x08002969
 8002944:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <HAL_GPIO_Init+0x2b4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294a:	e02c      	b.n	80029a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e029      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	3304      	adds	r3, #4
 800295a:	623b      	str	r3, [r7, #32]
          break;
 800295c:	e024      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	3308      	adds	r3, #8
 8002964:	623b      	str	r3, [r7, #32]
          break;
 8002966:	e01f      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	330c      	adds	r3, #12
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	e01a      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297a:	2304      	movs	r3, #4
 800297c:	623b      	str	r3, [r7, #32]
          break;
 800297e:	e013      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002988:	2308      	movs	r3, #8
 800298a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	611a      	str	r2, [r3, #16]
          break;
 8002992:	e009      	b.n	80029a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002994:	2308      	movs	r3, #8
 8002996:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	615a      	str	r2, [r3, #20]
          break;
 800299e:	e003      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e000      	b.n	80029a8 <HAL_GPIO_Init+0x130>
          break;
 80029a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2bff      	cmp	r3, #255	; 0xff
 80029ac:	d801      	bhi.n	80029b2 <HAL_GPIO_Init+0x13a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	e001      	b.n	80029b6 <HAL_GPIO_Init+0x13e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2bff      	cmp	r3, #255	; 0xff
 80029bc:	d802      	bhi.n	80029c4 <HAL_GPIO_Init+0x14c>
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	e002      	b.n	80029ca <HAL_GPIO_Init+0x152>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	3b08      	subs	r3, #8
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	210f      	movs	r1, #15
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80b1 	beq.w	8002b5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_GPIO_Init+0x2b8>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	; (8002b30 <HAL_GPIO_Init+0x2b8>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_GPIO_Init+0x2b8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a10:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_GPIO_Init+0x2bc>)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	220f      	movs	r2, #15
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a40      	ldr	r2, [pc, #256]	; (8002b38 <HAL_GPIO_Init+0x2c0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_GPIO_Init+0x1ec>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <HAL_GPIO_Init+0x2c4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_GPIO_Init+0x1e8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3e      	ldr	r2, [pc, #248]	; (8002b40 <HAL_GPIO_Init+0x2c8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <HAL_GPIO_Init+0x1e4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <HAL_GPIO_Init+0x2cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_GPIO_Init+0x1e0>
 8002a54:	2303      	movs	r3, #3
 8002a56:	e006      	b.n	8002a66 <HAL_GPIO_Init+0x1ee>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e004      	b.n	8002a66 <HAL_GPIO_Init+0x1ee>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x1ee>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_GPIO_Init+0x1ee>
 8002a64:	2300      	movs	r3, #0
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	f002 0203 	and.w	r2, r2, #3
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	4093      	lsls	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a76:	492f      	ldr	r1, [pc, #188]	; (8002b34 <HAL_GPIO_Init+0x2bc>)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	492c      	ldr	r1, [pc, #176]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4928      	ldr	r1, [pc, #160]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4922      	ldr	r1, [pc, #136]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	491e      	ldr	r1, [pc, #120]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4918      	ldr	r1, [pc, #96]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	4914      	ldr	r1, [pc, #80]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d021      	beq.n	8002b4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
 8002b14:	e021      	b.n	8002b5a <HAL_GPIO_Init+0x2e2>
 8002b16:	bf00      	nop
 8002b18:	10320000 	.word	0x10320000
 8002b1c:	10310000 	.word	0x10310000
 8002b20:	10220000 	.word	0x10220000
 8002b24:	10210000 	.word	0x10210000
 8002b28:	10120000 	.word	0x10120000
 8002b2c:	10110000 	.word	0x10110000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40010800 	.word	0x40010800
 8002b3c:	40010c00 	.word	0x40010c00
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	4909      	ldr	r1, [pc, #36]	; (8002b7c <HAL_GPIO_Init+0x304>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f47f ae8e 	bne.w	800288c <HAL_GPIO_Init+0x14>
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	372c      	adds	r7, #44	; 0x2c
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43d9      	mvns	r1, r3
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e26c      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c10:	4b8f      	ldr	r3, [pc, #572]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x12c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e246      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x76>
 8002c4c:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xbc>
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fe3e 	bl	8001940 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fe3a 	bl	8001940 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1fa      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe4>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fe2a 	bl	8001940 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fe26 	bl	8001940 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1e6      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x10c>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1ba      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4939      	ldr	r1, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fddf 	bl	8001940 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fddb 	bl	8001940 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e19b      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4927      	ldr	r1, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fdbe 	bl	8001940 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fdba 	bl	8001940 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e17a      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03a      	beq.n	8002e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d019      	beq.n	8002e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fd9e 	bl	8001940 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fd9a 	bl	8001940 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e15a      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f000 fad8 	bl	80033dc <RCC_Delay>
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fd84 	bl	8001940 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fd80 	bl	8001940 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e140      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	42420000 	.word	0x42420000
 8002e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b9e      	ldr	r3, [pc, #632]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a6 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b97      	ldr	r3, [pc, #604]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a93      	ldr	r2, [pc, #588]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	61d3      	str	r3, [r2, #28]
 8002e92:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b8e      	ldr	r3, [pc, #568]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a8a      	ldr	r2, [pc, #552]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fd41 	bl	8001940 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe fd3d 	bl	8001940 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0fd      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4b81      	ldr	r3, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x312>
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x356>
 8002f20:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a6c      	ldr	r2, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a66      	ldr	r2, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fcf1 	bl	8001940 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe fced 	bl	8001940 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0ab      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x37e>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fcdb 	bl	8001940 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fcd7 	bl	8001940 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e095      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a47      	ldr	r2, [pc, #284]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8081 	beq.w	80030ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d061      	beq.n	800309c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d146      	bne.n	800306e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fcab 	bl	8001940 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fca7 	bl	8001940 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e067      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	492d      	ldr	r1, [pc, #180]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a19      	ldr	r1, [r3, #32]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	430b      	orrs	r3, r1
 800303a:	4927      	ldr	r1, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fe fc7b 	bl	8001940 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fc77 	bl	8001940 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e037      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x46a>
 800306c:	e02f      	b.n	80030ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_RCC_OscConfig+0x4fc>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fc64 	bl	8001940 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fc60 	bl	8001940 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e020      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x498>
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e013      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42420060 	.word	0x42420060

080030e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4965      	ldr	r1, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d040      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e073      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fbb4 	bl	8001940 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe fbb0 	bl	8001940 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e053      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d210      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1cc>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fb12 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08005900 	.word	0x08005900
 80032b0:	20000004 	.word	0x20000004
 80032b4:	20000008 	.word	0x20000008

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b490      	push	{r4, r7}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032c0:	1d3c      	adds	r4, r7, #4
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032c8:	f240 2301 	movw	r3, #513	; 0x201
 80032cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x46>
 80032f6:	e02d      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	e02d      	b.n	800335a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800330a:	4413      	add	r3, r2
 800330c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003310:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c5b      	lsrs	r3, r3, #17
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800332a:	4413      	add	r3, r2
 800332c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003330:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003336:	fb02 f203 	mul.w	r2, r2, r3
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e004      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	623b      	str	r3, [r7, #32]
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003356:	623b      	str	r3, [r7, #32]
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	6a3b      	ldr	r3, [r7, #32]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc90      	pop	{r4, r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	080058f0 	.word	0x080058f0
 800336c:	40021000 	.word	0x40021000
 8003370:	007a1200 	.word	0x007a1200
 8003374:	003d0900 	.word	0x003d0900

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <HAL_RCC_GetHCLKFreq+0x10>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003390:	f7ff fff2 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	08005910 	.word	0x08005910

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b8:	f7ff ffde 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0adb      	lsrs	r3, r3, #11
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08005910 	.word	0x08005910

080033dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <RCC_Delay+0x34>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <RCC_Delay+0x38>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a5b      	lsrs	r3, r3, #9
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f8:	bf00      	nop
  }
  while (Delay --);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <RCC_Delay+0x1c>
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000004 	.word	0x20000004
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d07d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	61d3      	str	r3, [r2, #28]
 8003450:	4b49      	ldr	r3, [pc, #292]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a42      	ldr	r2, [pc, #264]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7fe fa62 	bl	8001940 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fa5e 	bl	8001940 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e06d      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02e      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d027      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034bc:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c6:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034cc:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d2:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d014      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fa2d 	bl	8001940 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fa29 	bl	8001940 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e036      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ee      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4917      	ldr	r1, [pc, #92]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	4313      	orrs	r3, r2
 800351c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	490b      	ldr	r1, [pc, #44]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4904      	ldr	r1, [pc, #16]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
 8003580:	42420440 	.word	0x42420440

08003584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e076      	b.n	8003684 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a6:	d009      	beq.n	80035bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
 80035ae:	e005      	b.n	80035bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fea8 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	0c1a      	lsrs	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 0204 	and.w	r2, r2, #4
 8003662:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003672:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	; 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800369a:	2301      	movs	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x26>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e18a      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x33c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ba:	f7fe f941 	bl	8001940 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d00f      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x70>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e2:	d107      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x68>
 80036ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d003      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036fa:	e15b      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_SPI_TransmitReceive+0x82>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_TransmitReceive+0x82>
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003714:	e14e      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b04      	cmp	r3, #4
 8003720:	d003      	beq.n	800372a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2205      	movs	r2, #5
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	887a      	ldrh	r2, [r7, #2]
 8003752:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d007      	beq.n	800377e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003786:	d178      	bne.n	800387a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x10a>
 8003790:	8b7b      	ldrh	r3, [r7, #26]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d166      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ba:	e053      	b.n	8003864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d11b      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x176>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d016      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x176>
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d113      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x1b8>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	b292      	uxth	r2, r2
 8003826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003844:	f7fe f87c 	bl	8001940 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003850:	429a      	cmp	r2, r3
 8003852:	d807      	bhi.n	8003864 <HAL_SPI_TransmitReceive+0x1d8>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d003      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003862:	e0a7      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1a6      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x130>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1a1      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x130>
 8003878:	e07c      	b.n	8003974 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x1fc>
 8003882:	8b7b      	ldrh	r3, [r7, #26]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d16b      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	7812      	ldrb	r2, [r2, #0]
 8003894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ae:	e057      	b.n	8003960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d11c      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x26c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <HAL_SPI_TransmitReceive+0x26c>
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d114      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d119      	bne.n	800393a <HAL_SPI_TransmitReceive+0x2ae>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003936:	2301      	movs	r3, #1
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800393a:	f7fe f801 	bl	8001940 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003946:	429a      	cmp	r2, r3
 8003948:	d803      	bhi.n	8003952 <HAL_SPI_TransmitReceive+0x2c6>
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d102      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x2cc>
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800395e:	e029      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1a2      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x224>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d19d      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f8b1 	bl	8003ae0 <SPI_EndRxTxTransaction>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003990:	e010      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e000      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039e0:	f7fd ffae 	bl	8001940 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039f0:	f7fd ffa6 	bl	8001940 <HAL_GetTick>
 80039f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a06:	e054      	b.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d050      	beq.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a10:	f7fd ff96 	bl	8001940 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d902      	bls.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d111      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	d004      	beq.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d107      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d10f      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e017      	b.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d19b      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000004 	.word	0x20000004

08003ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ff6a 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e000      	b.n	8003b14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fc3c 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fd08 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_TIM_Base_Start+0x88>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_Base_Start+0x48>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_Base_Start+0x48>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_TIM_Base_Start+0x8c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_Base_Start+0x48>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_TIM_Base_Start+0x90>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d010      	beq.n	8003c38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	e007      	b.n	8003c38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800

08003c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f839 	bl	8003cee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fc6e 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_TIM_PWM_Start+0x24>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e022      	b.n	8003d6a <HAL_TIM_PWM_Start+0x6a>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d109      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x3e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e015      	b.n	8003d6a <HAL_TIM_PWM_Start+0x6a>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d109      	bne.n	8003d58 <HAL_TIM_PWM_Start+0x58>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e008      	b.n	8003d6a <HAL_TIM_PWM_Start+0x6a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e05e      	b.n	8003e30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x82>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d80:	e013      	b.n	8003daa <HAL_TIM_PWM_Start+0xaa>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0x92>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	e00b      	b.n	8003daa <HAL_TIM_PWM_Start+0xaa>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	e003      	b.n	8003daa <HAL_TIM_PWM_Start+0xaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	6839      	ldr	r1, [r7, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fe5c 	bl	8004a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_TIM_PWM_Start+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_TIM_PWM_Start+0x138>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_TIM_PWM_Start+0xfa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d009      	beq.n	8003dfa <HAL_TIM_PWM_Start+0xfa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <HAL_TIM_PWM_Start+0x13c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_TIM_PWM_Start+0xfa>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <HAL_TIM_PWM_Start+0x140>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d010      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	e007      	b.n	8003e2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start_IT+0x24>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e022      	b.n	8003eae <HAL_TIM_PWM_Start_IT+0x6a>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d109      	bne.n	8003e82 <HAL_TIM_PWM_Start_IT+0x3e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e015      	b.n	8003eae <HAL_TIM_PWM_Start_IT+0x6a>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d109      	bne.n	8003e9c <HAL_TIM_PWM_Start_IT+0x58>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e008      	b.n	8003eae <HAL_TIM_PWM_Start_IT+0x6a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0a4      	b.n	8004000 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start_IT+0x82>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	e013      	b.n	8003eee <HAL_TIM_PWM_Start_IT+0xaa>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start_IT+0x92>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	e00b      	b.n	8003eee <HAL_TIM_PWM_Start_IT+0xaa>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start_IT+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	e003      	b.n	8003eee <HAL_TIM_PWM_Start_IT+0xaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d841      	bhi.n	8003f78 <HAL_TIM_PWM_Start_IT+0x134>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_TIM_PWM_Start_IT+0xb8>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f79 	.word	0x08003f79
 8003f04:	08003f79 	.word	0x08003f79
 8003f08:	08003f79 	.word	0x08003f79
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003f79 	.word	0x08003f79
 8003f18:	08003f79 	.word	0x08003f79
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003f79 	.word	0x08003f79
 8003f2c:	08003f67 	.word	0x08003f67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0202 	orr.w	r2, r2, #2
 8003f3e:	60da      	str	r2, [r3, #12]
      break;
 8003f40:	e01b      	b.n	8003f7a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0204 	orr.w	r2, r2, #4
 8003f50:	60da      	str	r2, [r3, #12]
      break;
 8003f52:	e012      	b.n	8003f7a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0208 	orr.w	r2, r2, #8
 8003f62:	60da      	str	r2, [r3, #12]
      break;
 8003f64:	e009      	b.n	8003f7a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0210 	orr.w	r2, r2, #16
 8003f74:	60da      	str	r2, [r3, #12]
      break;
 8003f76:	e000      	b.n	8003f7a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003f78:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd74 	bl	8004a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIM_PWM_Start_IT+0x186>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d009      	beq.n	8003fca <HAL_TIM_PWM_Start_IT+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIM_PWM_Start_IT+0x186>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d111      	bne.n	8003fee <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d010      	beq.n	8003ffe <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	e007      	b.n	8003ffe <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800

08004014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0202 	mvn.w	r2, #2
 8004040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa78 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa6b 	bl	800453a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa7a 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0204 	mvn.w	r2, #4
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fa4e 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa41 	bl	800453a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa50 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0208 	mvn.w	r2, #8
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa24 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa17 	bl	800453a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa26 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2208      	movs	r2, #8
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9fa 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9ed 	bl	800453a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f9fc 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9c8 	bl	8004528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fd32 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc f9d2 	bl	8000594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b20      	cmp	r3, #32
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0220 	mvn.w	r2, #32
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fcfd 	bl	8004c16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800423a:	2302      	movs	r3, #2
 800423c:	e0ac      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x174>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	f200 809f 	bhi.w	800438c <HAL_TIM_PWM_ConfigChannel+0x168>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004289 	.word	0x08004289
 8004258:	0800438d 	.word	0x0800438d
 800425c:	0800438d 	.word	0x0800438d
 8004260:	0800438d 	.word	0x0800438d
 8004264:	080042c9 	.word	0x080042c9
 8004268:	0800438d 	.word	0x0800438d
 800426c:	0800438d 	.word	0x0800438d
 8004270:	0800438d 	.word	0x0800438d
 8004274:	0800430b 	.word	0x0800430b
 8004278:	0800438d 	.word	0x0800438d
 800427c:	0800438d 	.word	0x0800438d
 8004280:	0800438d 	.word	0x0800438d
 8004284:	0800434b 	.word	0x0800434b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9d0 	bl	8004634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	619a      	str	r2, [r3, #24]
      break;
 80042c6:	e062      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa16 	bl	8004700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	619a      	str	r2, [r3, #24]
      break;
 8004308:	e041      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa5f 	bl	80047d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0208 	orr.w	r2, r2, #8
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0204 	bic.w	r2, r2, #4
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	61da      	str	r2, [r3, #28]
      break;
 8004348:	e021      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 faa9 	bl	80048a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	61da      	str	r2, [r3, #28]
      break;
 800438a:	e000      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800438c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_ConfigClockSource+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0b3      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x180>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f0:	d03e      	beq.n	8004470 <HAL_TIM_ConfigClockSource+0xd0>
 80043f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f6:	f200 8087 	bhi.w	8004508 <HAL_TIM_ConfigClockSource+0x168>
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	f000 8085 	beq.w	800450c <HAL_TIM_ConfigClockSource+0x16c>
 8004402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004406:	d87f      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004408:	2b70      	cmp	r3, #112	; 0x70
 800440a:	d01a      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0xa2>
 800440c:	2b70      	cmp	r3, #112	; 0x70
 800440e:	d87b      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004410:	2b60      	cmp	r3, #96	; 0x60
 8004412:	d050      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x116>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d877      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d03c      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0xf6>
 800441c:	2b50      	cmp	r3, #80	; 0x50
 800441e:	d873      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d058      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x136>
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d86f      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004428:	2b30      	cmp	r3, #48	; 0x30
 800442a:	d064      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x156>
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d86b      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004430:	2b20      	cmp	r3, #32
 8004432:	d060      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x156>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d867      	bhi.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05c      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x156>
 800443c:	2b10      	cmp	r3, #16
 800443e:	d05a      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004440:	e062      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6899      	ldr	r1, [r3, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f000 faee 	bl	8004a32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004464:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	609a      	str	r2, [r3, #8]
      break;
 800446e:	e04e      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6899      	ldr	r1, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f000 fad7 	bl	8004a32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004492:	609a      	str	r2, [r3, #8]
      break;
 8004494:	e03b      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 fa4e 	bl	8004944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2150      	movs	r1, #80	; 0x50
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 faa5 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80044b4:	e02b      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 fa6c 	bl	80049a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2160      	movs	r1, #96	; 0x60
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa95 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80044d4:	e01b      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 fa2e 	bl	8004944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2140      	movs	r1, #64	; 0x40
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa85 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80044f4:	e00b      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f000 fa7c 	bl	80049fe <TIM_ITRx_SetConfig>
        break;
 8004506:	e002      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004508:	bf00      	nop
 800450a:	e000      	b.n	800450e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800450c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a29      	ldr	r2, [pc, #164]	; (8004628 <TIM_Base_SetConfig+0xb8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0x30>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0x30>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a26      	ldr	r2, [pc, #152]	; (800462c <TIM_Base_SetConfig+0xbc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0x30>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <TIM_Base_SetConfig+0xc0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <TIM_Base_SetConfig+0xb8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_Base_SetConfig+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d007      	beq.n	80045d2 <TIM_Base_SetConfig+0x62>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_Base_SetConfig+0xbc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_Base_SetConfig+0x62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_Base_SetConfig+0xc0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d108      	bne.n	80045e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <TIM_Base_SetConfig+0xb8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800

08004634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0201 	bic.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 0302 	bic.w	r3, r3, #2
 800467c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_OC1_SetConfig+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10c      	bne.n	80046aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0308 	bic.w	r3, r3, #8
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 0304 	bic.w	r3, r3, #4
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <TIM_OC1_SetConfig+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d111      	bne.n	80046d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40012c00 	.word	0x40012c00

08004700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0210 	bic.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0320 	bic.w	r3, r3, #32
 800474a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <TIM_OC2_SetConfig+0xd0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10d      	bne.n	800477c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <TIM_OC2_SetConfig+0xd0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d113      	bne.n	80047ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800478a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00

080047d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800481c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_OC3_SetConfig+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10d      	bne.n	800484e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <TIM_OC3_SetConfig+0xd0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	031b      	lsls	r3, r3, #12
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <TIM_OC4_SetConfig+0x98>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	40012c00 	.word	0x40012c00

08004944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 030a 	bic.w	r3, r3, #10
 8004980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	031b      	lsls	r3, r3, #12
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f043 0307 	orr.w	r3, r3, #7
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b087      	sub	sp, #28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	609a      	str	r2, [r3, #8]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2201      	movs	r2, #1
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	401a      	ands	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e046      	b.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10c      	bne.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800

08004b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e03d      	b.n	8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e03f      	b.n	8004ccc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fc fca7 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2224      	movs	r2, #36	; 0x24
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd4e 	bl	8005720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d153      	bne.n	8004d96 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_UART_Transmit_DMA+0x26>
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e04c      	b.n	8004d98 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit_DMA+0x38>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e045      	b.n	8004d98 <HAL_UART_Transmit_DMA+0xc4>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2221      	movs	r2, #33	; 0x21
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <HAL_UART_Transmit_DMA+0xcc>)
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_UART_Transmit_DMA+0xd0>)
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_UART_Transmit_DMA+0xd4>)
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	2200      	movs	r2, #0
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3304      	adds	r3, #4
 8004d68:	461a      	mov	r2, r3
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	f7fd fb40 	bl	80023f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d90:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	080051bf 	.word	0x080051bf
 8004da4:	08005211 	.word	0x08005211
 8004da8:	080052f9 	.word	0x080052f9

08004dac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d11d      	bne.n	8004e02 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_Receive_DMA+0x26>
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e016      	b.n	8004e04 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Receive_DMA+0x38>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e00f      	b.n	8004e04 <HAL_UART_Receive_DMA+0x58>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	461a      	mov	r2, r3
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fac7 	bl	800538c <UART_Start_Receive_DMA>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_UART_IRQHandler+0x52>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fbb8 	bl	80055cc <UART_Receive_IT>
      return;
 8004e5c:	e17b      	b.n	8005156 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80b1 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x1bc>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_UART_IRQHandler+0x70>
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80a6 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_UART_IRQHandler+0x90>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0201 	orr.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_UART_IRQHandler+0xb0>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f043 0202 	orr.w	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_UART_IRQHandler+0xd0>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00f      	beq.n	8004f06 <HAL_UART_IRQHandler+0xfa>
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_UART_IRQHandler+0xee>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f043 0208 	orr.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 811e 	beq.w	800514c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <HAL_UART_IRQHandler+0x11e>
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fb51 	bl	80055cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <HAL_UART_IRQHandler+0x146>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d031      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa93 	bl	800547e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d023      	beq.n	8004fae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	4a76      	ldr	r2, [pc, #472]	; (800515c <HAL_UART_IRQHandler+0x350>)
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd faca 	bl	8002524 <HAL_DMA_Abort_IT>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	e00e      	b.n	8004fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8f5 	bl	8005196 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e00a      	b.n	8004fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8f1 	bl	8005196 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e006      	b.n	8004fc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8ed 	bl	8005196 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004fc2:	e0c3      	b.n	800514c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	bf00      	nop
    return;
 8004fc6:	e0c1      	b.n	800514c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f040 80a1 	bne.w	8005114 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 809b 	beq.w	8005114 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8095 	beq.w	8005114 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d04e      	beq.n	80050ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005018:	8a3b      	ldrh	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8098 	beq.w	8005150 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005024:	8a3a      	ldrh	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	f080 8092 	bcs.w	8005150 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8a3a      	ldrh	r2, [r7, #16]
 8005030:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b20      	cmp	r3, #32
 800503a:	d02b      	beq.n	8005094 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800504a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0210 	bic.w	r2, r2, #16
 8005088:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	4618      	mov	r0, r3
 8005090:	f7fd fa0d 	bl	80024ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f87f 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050aa:	e051      	b.n	8005150 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d047      	beq.n	8005154 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80050c4:	8a7b      	ldrh	r3, [r7, #18]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d044      	beq.n	8005154 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0210 	bic.w	r2, r2, #16
 8005106:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005108:	8a7b      	ldrh	r3, [r7, #18]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f84b 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005112:	e01f      	b.n	8005154 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_UART_IRQHandler+0x324>
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9e8 	bl	80054fe <UART_Transmit_IT>
    return;
 800512e:	e012      	b.n	8005156 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <HAL_UART_IRQHandler+0x34a>
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa29 	bl	800559c <UART_EndTransmit_IT>
    return;
 800514a:	e004      	b.n	8005156 <HAL_UART_IRQHandler+0x34a>
    return;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_UART_IRQHandler+0x34a>
      return;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_UART_IRQHandler+0x34a>
      return;
 8005154:	bf00      	nop
  }
}
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	080054d7 	.word	0x080054d7

08005160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ee:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fe:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005200:	e002      	b.n	8005208 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ffac 	bl	8005160 <HAL_UART_TxCpltCallback>
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ffa7 	bl	8005172 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005224:	bf00      	nop
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d12a      	bne.n	800529e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0210 	bic.w	r2, r2, #16
 800529c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d106      	bne.n	80052b4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052aa:	4619      	mov	r1, r3
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ff7b 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052b2:	e002      	b.n	80052ba <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7fb f90f 	bl	80004d8 <HAL_UART_RxCpltCallback>
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff ff60 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052e8:	e002      	b.n	80052f0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ff4a 	bl	8005184 <HAL_UART_RxHalfCpltCallback>
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b21      	cmp	r3, #33	; 0x21
 800532a:	d108      	bne.n	800533e <UART_DMAError+0x46>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005338:	68b8      	ldr	r0, [r7, #8]
 800533a:	f000 f88b 	bl	8005454 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b22      	cmp	r3, #34	; 0x22
 800535e:	d108      	bne.n	8005372 <UART_DMAError+0x7a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800536c:	68b8      	ldr	r0, [r7, #8]
 800536e:	f000 f886 	bl	800547e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0210 	orr.w	r2, r3, #16
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537e:	68b8      	ldr	r0, [r7, #8]
 8005380:	f7ff ff09 	bl	8005196 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2222      	movs	r2, #34	; 0x22
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	4a23      	ldr	r2, [pc, #140]	; (8005448 <UART_Start_Receive_DMA+0xbc>)
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	4a22      	ldr	r2, [pc, #136]	; (800544c <UART_Start_Receive_DMA+0xc0>)
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	4a21      	ldr	r2, [pc, #132]	; (8005450 <UART_Start_Receive_DMA+0xc4>)
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	2200      	movs	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f7fd f800 	bl	80023f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	0800522d 	.word	0x0800522d
 800544c:	080052c3 	.word	0x080052c3
 8005450:	080052f9 	.word	0x080052f9

08005454 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800546a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005494:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0210 	bic.w	r2, r2, #16
 80054bc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe50 	bl	8005196 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b21      	cmp	r3, #33	; 0x21
 8005510:	d13e      	bne.n	8005590 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d114      	bne.n	8005546 <UART_Transmit_IT+0x48>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d110      	bne.n	8005546 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005538:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]
 8005544:	e008      	b.n	8005558 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6211      	str	r1, [r2, #32]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29b      	uxth	r3, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4619      	mov	r1, r3
 8005566:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10f      	bne.n	800558c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800557a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff fdcf 	bl	8005160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b22      	cmp	r3, #34	; 0x22
 80055de:	f040 8099 	bne.w	8005714 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d117      	bne.n	800561c <UART_Receive_IT+0x50>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560a:	b29a      	uxth	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	1c9a      	adds	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
 800561a:	e026      	b.n	800566a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	d007      	beq.n	8005640 <UART_Receive_IT+0x74>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <UART_Receive_IT+0x82>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e008      	b.n	8005660 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565a:	b2da      	uxtb	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29b      	uxth	r3, r3
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4619      	mov	r1, r3
 8005678:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800567a:	2b00      	cmp	r3, #0
 800567c:	d148      	bne.n	8005710 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0220 	bic.w	r2, r2, #32
 800568c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800569c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d123      	bne.n	8005706 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0210 	bic.w	r2, r2, #16
 80056d2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d10a      	bne.n	80056f8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fd52 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
 8005704:	e002      	b.n	800570c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fa fee6 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e002      	b.n	8005716 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800575a:	f023 030c 	bic.w	r3, r3, #12
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	430b      	orrs	r3, r1
 8005766:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <UART_SetConfig+0x114>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005788:	f7fd fe14 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	e002      	b.n	8005796 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005790:	f7fd fdfc 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8005794:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009a      	lsls	r2, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	4a22      	ldr	r2, [pc, #136]	; (8005838 <UART_SetConfig+0x118>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	0119      	lsls	r1, r3, #4
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009a      	lsls	r2, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <UART_SetConfig+0x118>)
 80057ce:	fba3 0302 	umull	r0, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	2064      	movs	r0, #100	; 0x64
 80057d6:	fb00 f303 	mul.w	r3, r0, r3
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	3332      	adds	r3, #50	; 0x32
 80057e0:	4a15      	ldr	r2, [pc, #84]	; (8005838 <UART_SetConfig+0x118>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ec:	4419      	add	r1, r3
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fbb2 f2f3 	udiv	r2, r2, r3
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <UART_SetConfig+0x118>)
 8005806:	fba3 0302 	umull	r0, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2064      	movs	r0, #100	; 0x64
 800580e:	fb00 f303 	mul.w	r3, r0, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	; 0x32
 8005818:	4a07      	ldr	r2, [pc, #28]	; (8005838 <UART_SetConfig+0x118>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 020f 	and.w	r2, r3, #15
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	440a      	add	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40013800 	.word	0x40013800
 8005838:	51eb851f 	.word	0x51eb851f

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	2600      	movs	r6, #0
 8005840:	4d0c      	ldr	r5, [pc, #48]	; (8005874 <__libc_init_array+0x38>)
 8005842:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	f000 f830 	bl	80058b0 <_init>
 8005850:	2600      	movs	r6, #0
 8005852:	4d0a      	ldr	r5, [pc, #40]	; (800587c <__libc_init_array+0x40>)
 8005854:	4c0a      	ldr	r4, [pc, #40]	; (8005880 <__libc_init_array+0x44>)
 8005856:	1b64      	subs	r4, r4, r5
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f855 3b04 	ldr.w	r3, [r5], #4
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f855 3b04 	ldr.w	r3, [r5], #4
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08005918 	.word	0x08005918
 8005878:	08005918 	.word	0x08005918
 800587c:	08005918 	.word	0x08005918
 8005880:	0800591c 	.word	0x0800591c

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	4291      	cmp	r1, r2
 8005898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <memset>:
 80058a0:	4603      	mov	r3, r0
 80058a2:	4402      	add	r2, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
