
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080051bc  080051bc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051bc  080051bc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000426c  20000020  080051e4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000428c  080051e4  0002428c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed17  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  0002ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a5  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd4c  00000000  00000000  0004b0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bca8  00000000  00000000  0005adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c90  00000000  00000000  000e6af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08005184 	.word	0x08005184

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08005184 	.word	0x08005184

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef *DRV_spi;

void DRV_Init(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//Copy SPI handle variable
	DRV_spi = hspi;
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <DRV_Init+0x28>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800015a:	2201      	movs	r2, #1
 800015c:	2104      	movs	r1, #4
 800015e:	4806      	ldr	r0, [pc, #24]	; (8000178 <DRV_Init+0x2c>)
 8000160:	f002 fce7 	bl	8002b32 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000164:	2001      	movs	r0, #1
 8000166:	f001 fc67 	bl	8001a38 <HAL_Delay>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	2000003c 	.word	0x2000003c
 8000178:	40010c00 	.word	0x40010c00

0800017c <HAL_TIM_IC_CaptureCallback>:
uint16_t T_Min = 0;
uint16_t T_Power = 0;
uint16_t Old_Power = 0;
//uint16_t Frequency = 0;
//float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){			// {5.2us - 4.0us}
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 0);			// 330ns
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){					// 170ns
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7f1b      	ldrb	r3, [r3, #28]
 8000188:	2b02      	cmp	r3, #2
 800018a:	d13e      	bne.n	800020a <HAL_TIM_IC_CaptureCallback+0x8e>
		T_PWM = htim->Instance->CCR2;								// 280ns
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000192:	b29a      	uxth	r2, r3
 8000194:	4b2e      	ldr	r3, [pc, #184]	; (8000250 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000196:	801a      	strh	r2, [r3, #0]
		T_Low = htim->Instance->CCR1;								// 280ns
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800019e:	b29a      	uxth	r2, r3
 80001a0:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80001a2:	801a      	strh	r2, [r3, #0]
		if (T_PWM != 0){											// {2.1us}
 80001a4:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80001a6:	881b      	ldrh	r3, [r3, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d02e      	beq.n	800020a <HAL_TIM_IC_CaptureCallback+0x8e>
			T_Min = T_PWM/20; // Czas wartosci minimalnej
 80001ac:	4b28      	ldr	r3, [pc, #160]	; (8000250 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	4a29      	ldr	r2, [pc, #164]	; (8000258 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80001b2:	fba2 2303 	umull	r2, r3, r2, r3
 80001b6:	091b      	lsrs	r3, r3, #4
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	4b28      	ldr	r3, [pc, #160]	; (800025c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80001bc:	801a      	strh	r2, [r3, #0]
			T_Power = (T_PWM - T_Low) - T_Min;
 80001be:	4b24      	ldr	r3, [pc, #144]	; (8000250 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80001c0:	881a      	ldrh	r2, [r3, #0]
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	1ad3      	subs	r3, r2, r3
 80001c8:	b29a      	uxth	r2, r3
 80001ca:	4b24      	ldr	r3, [pc, #144]	; (800025c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	1ad3      	subs	r3, r2, r3
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	4b23      	ldr	r3, [pc, #140]	; (8000260 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80001d4:	801a      	strh	r2, [r3, #0]
			if (T_Power > T_Min) T_Power = T_Min;
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80001d8:	881a      	ldrh	r2, [r3, #0]
 80001da:	4b20      	ldr	r3, [pc, #128]	; (800025c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d903      	bls.n	80001ea <HAL_TIM_IC_CaptureCallback+0x6e>
 80001e2:	4b1e      	ldr	r3, [pc, #120]	; (800025c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80001e4:	881a      	ldrh	r2, [r3, #0]
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80001e8:	801a      	strh	r2, [r3, #0]
			Power = (255*T_Power)/T_Min;
 80001ea:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	461a      	mov	r2, r3
 80001f0:	4613      	mov	r3, r2
 80001f2:	021b      	lsls	r3, r3, #8
 80001f4:	1a9b      	subs	r3, r3, r2
 80001f6:	4a19      	ldr	r2, [pc, #100]	; (800025c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80001f8:	8812      	ldrh	r2, [r2, #0]
 80001fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000202:	801a      	strh	r2, [r3, #0]
			Function = 64;
 8000204:	4b18      	ldr	r3, [pc, #96]	; (8000268 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000206:	2240      	movs	r2, #64	; 0x40
 8000208:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Power == 0){		// Zatrzymanie awaryjne
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d109      	bne.n	8000226 <HAL_TIM_IC_CaptureCallback+0xaa>
		Old_Power = 0;
 8000212:	4b16      	ldr	r3, [pc, #88]	; (800026c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000214:	2200      	movs	r2, #0
 8000216:	801a      	strh	r2, [r3, #0]
		SetFloating_A();
 8000218:	f000 fc08 	bl	8000a2c <SetFloating_A>
		SetFloating_B();
 800021c:	f000 fc1a 	bl	8000a54 <SetFloating_B>
		SetFloating_C();
 8000220:	f000 fc2c 	bl	8000a7c <SetFloating_C>
			Power = 0;
		}
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
	}
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 1);			// 330ns
}
 8000224:	e00f      	b.n	8000246 <HAL_TIM_IC_CaptureCallback+0xca>
		if (Old_Power == 0){
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d106      	bne.n	800023c <HAL_TIM_IC_CaptureCallback+0xc0>
			Old_Power = Power;
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000230:	881a      	ldrh	r2, [r3, #0]
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000234:	801a      	strh	r2, [r3, #0]
			Power = 0;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	2101      	movs	r1, #1
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000242:	f002 fc76 	bl	8002b32 <HAL_GPIO_WritePin>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000004a 	.word	0x2000004a
 8000254:	2000004c 	.word	0x2000004c
 8000258:	cccccccd 	.word	0xcccccccd
 800025c:	2000004e 	.word	0x2000004e
 8000260:	20000050 	.word	0x20000050
 8000264:	20000042 	.word	0x20000042
 8000268:	20000040 	.word	0x20000040
 800026c:	20000052 	.word	0x20000052
 8000270:	40011400 	.word	0x40011400

08000274 <NormalControl>:
	SetFloating_B();
	SetFloating_C();
	IsRunning = 0;
}

void NormalControl(){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	if(Power == 0){								// wartosc = 0, stop
 800027a:	4b3b      	ldr	r3, [pc, #236]	; (8000368 <NormalControl+0xf4>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d117      	bne.n	80002b2 <NormalControl+0x3e>
		Set_PWM(0);
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fac6 	bl	8000814 <Set_PWM>
		//Six_Step_Block(0);
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	2101      	movs	r1, #1
 800028c:	4837      	ldr	r0, [pc, #220]	; (800036c <NormalControl+0xf8>)
 800028e:	f002 fc50 	bl	8002b32 <HAL_GPIO_WritePin>
		SetFloating_A();
 8000292:	f000 fbcb 	bl	8000a2c <SetFloating_A>
		SetFloating_B();
 8000296:	f000 fbdd 	bl	8000a54 <SetFloating_B>
		SetFloating_C();
 800029a:	f000 fbef 	bl	8000a7c <SetFloating_C>
		IsRunning = 0;
 800029e:	4b34      	ldr	r3, [pc, #208]	; (8000370 <NormalControl+0xfc>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 80002a4:	4b33      	ldr	r3, [pc, #204]	; (8000374 <NormalControl+0x100>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 80002aa:	4b33      	ldr	r3, [pc, #204]	; (8000378 <NormalControl+0x104>)
 80002ac:	220f      	movs	r2, #15
 80002ae:	801a      	strh	r2, [r3, #0]
 80002b0:	e054      	b.n	800035c <NormalControl+0xe8>
		//Function = rx_buffer[0];				// Zmiana funkcji jest mzliwa jedynie gdy silnik stoi
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 80002b2:	4b32      	ldr	r3, [pc, #200]	; (800037c <NormalControl+0x108>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b3f      	cmp	r3, #63	; 0x3f
 80002b8:	d936      	bls.n	8000328 <NormalControl+0xb4>
		//HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
		uint16_t pwm = Power;				// It should be scalled from communication block
 80002ba:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <NormalControl+0xf4>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	80fb      	strh	r3, [r7, #6]
		if (pwm < 8) pwm = 0;
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d802      	bhi.n	80002cc <NormalControl+0x58>
 80002c6:	2300      	movs	r3, #0
 80002c8:	80fb      	strh	r3, [r7, #6]
 80002ca:	e003      	b.n	80002d4 <NormalControl+0x60>
		else pwm += 256;
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002d2:	80fb      	strh	r3, [r7, #6]
//			}
//			}
//		}
		//if(rx_buffer[0] == SCAN_ONE_VARIABLE){
			// Kręcimy normalnie
			if(Function % 2 == 1){					// Kręcimy do tylu
 80002d4:	4b29      	ldr	r3, [pc, #164]	; (800037c <NormalControl+0x108>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d00f      	beq.n	8000302 <NormalControl+0x8e>
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fa95 	bl	8000814 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <NormalControl+0x10c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	08db      	lsrs	r3, r3, #3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f9de 	bl	80006b4 <Set_Observer_Div>
				//Six_Step_Block(pwm);
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <NormalControl+0x100>)
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e00e      	b.n	8000320 <NormalControl+0xac>
			}else{									// Kręcimy do przodu
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 8000302:	88fb      	ldrh	r3, [r7, #6]
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fa85 	bl	8000814 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <NormalControl+0x10c>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	08db      	lsrs	r3, r3, #3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f9ce 	bl	80006b4 <Set_Observer_Div>
				//Six_Step_Block(pwm);
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <NormalControl+0x100>)
 800031e:	701a      	strb	r2, [r3, #0]
			}
		//}

		//Rotations[0] += 1;

		IsRunning = 1;
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <NormalControl+0xfc>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e019      	b.n	800035c <NormalControl+0xe8>
	}else {								// Nie funkcja z wartoscia -> Bład
		Set_PWM(0);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fa73 	bl	8000814 <Set_PWM>
		Six_Step_Block(0);
 800032e:	2000      	movs	r0, #0
 8000330:	f000 f9d6 	bl	80006e0 <Six_Step_Block>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	2101      	movs	r1, #1
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <NormalControl+0xf8>)
 800033a:	f002 fbfa 	bl	8002b32 <HAL_GPIO_WritePin>
		SetFloating_A();
 800033e:	f000 fb75 	bl	8000a2c <SetFloating_A>
		SetFloating_B();
 8000342:	f000 fb87 	bl	8000a54 <SetFloating_B>
		SetFloating_C();
 8000346:	f000 fb99 	bl	8000a7c <SetFloating_C>
		IsRunning = 0;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <NormalControl+0xfc>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <NormalControl+0x100>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <NormalControl+0x104>)
 8000358:	220f      	movs	r2, #15
 800035a:	801a      	strh	r2, [r3, #0]
	}
	if (IsScanReady() == 1){
 800035c:	f000 f818 	bl	8000390 <IsScanReady>
		//HAL_UART_Transmit_DMA(huart, GetScanData(), SCAN_SIZE);
	}
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000042 	.word	0x20000042
 800036c:	40011400 	.word	0x40011400
 8000370:	20000044 	.word	0x20000044
 8000374:	20000048 	.word	0x20000048
 8000378:	20000000 	.word	0x20000000
 800037c:	20000040 	.word	0x20000040
 8000380:	20000002 	.word	0x20000002

08000384 <Application_Update>:

void Application_Update(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	NormalControl();
 8000388:	f7ff ff74 	bl	8000274 <NormalControl>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <IsScanReady>:

void EnableScan(){
	Scan_Is_enabled = 1;
}

uint8_t IsScanReady(){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	if (Scan_iter >= SCAN_SIZE) return 1;
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <IsScanReady+0x1c>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800039c:	d301      	bcc.n	80003a2 <IsScanReady+0x12>
 800039e:	2301      	movs	r3, #1
 80003a0:	e000      	b.n	80003a4 <IsScanReady+0x14>
	else return 0;
 80003a2:	2300      	movs	r3, #0
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	20000086 	.word	0x20000086

080003b0 <BEMF_Observer_Block>:
uint16_t BEMF_Treshold = 0;
uint16_t PWM_Value = 0;
uint16_t BEMF_delay = 32;
uint16_t Angle = 0;
//uint16_t Ticks_Diff = 0;
void BEMF_Observer_Block(){										// {7.4us}
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 0);			// 330ns
// Input Block
	uint16_t V_Floating = ADC_data[0];
 80003b6:	4b93      	ldr	r3, [pc, #588]	; (8000604 <BEMF_Observer_Block+0x254>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	80fb      	strh	r3, [r7, #6]
	uint16_t V_DC = ADC_data[1];
 80003bc:	4b91      	ldr	r3, [pc, #580]	; (8000604 <BEMF_Observer_Block+0x254>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	80bb      	strh	r3, [r7, #4]
// 0 Cross Detection Block
	if((Cross == 0) && (BEMF_cnt_sign == 1) && (BEMF_time_cnt > BEMF_delay)){
 80003c2:	4b91      	ldr	r3, [pc, #580]	; (8000608 <BEMF_Observer_Block+0x258>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d134      	bne.n	8000434 <BEMF_Observer_Block+0x84>
 80003ca:	4b90      	ldr	r3, [pc, #576]	; (800060c <BEMF_Observer_Block+0x25c>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d130      	bne.n	8000434 <BEMF_Observer_Block+0x84>
 80003d2:	4b8f      	ldr	r3, [pc, #572]	; (8000610 <BEMF_Observer_Block+0x260>)
 80003d4:	881a      	ldrh	r2, [r3, #0]
 80003d6:	4b8f      	ldr	r3, [pc, #572]	; (8000614 <BEMF_Observer_Block+0x264>)
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d92a      	bls.n	8000434 <BEMF_Observer_Block+0x84>
		if((Step_Num == 1) || (Step_Num == 3) || (Step_Num == 5)){
 80003de:	4b8e      	ldr	r3, [pc, #568]	; (8000618 <BEMF_Observer_Block+0x268>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d007      	beq.n	80003f6 <BEMF_Observer_Block+0x46>
 80003e6:	4b8c      	ldr	r3, [pc, #560]	; (8000618 <BEMF_Observer_Block+0x268>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	d003      	beq.n	80003f6 <BEMF_Observer_Block+0x46>
 80003ee:	4b8a      	ldr	r3, [pc, #552]	; (8000618 <BEMF_Observer_Block+0x268>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d109      	bne.n	800040a <BEMF_Observer_Block+0x5a>
			if (V_Floating < V_DC/2 ) Cross = 1;
 80003f6:	88bb      	ldrh	r3, [r7, #4]
 80003f8:	085b      	lsrs	r3, r3, #1
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	88fa      	ldrh	r2, [r7, #6]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d218      	bcs.n	8000434 <BEMF_Observer_Block+0x84>
 8000402:	4b81      	ldr	r3, [pc, #516]	; (8000608 <BEMF_Observer_Block+0x258>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	e014      	b.n	8000434 <BEMF_Observer_Block+0x84>
		}else if((Step_Num == 2) || (Step_Num == 4) || (Step_Num == 6)){
 800040a:	4b83      	ldr	r3, [pc, #524]	; (8000618 <BEMF_Observer_Block+0x268>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b02      	cmp	r3, #2
 8000410:	d007      	beq.n	8000422 <BEMF_Observer_Block+0x72>
 8000412:	4b81      	ldr	r3, [pc, #516]	; (8000618 <BEMF_Observer_Block+0x268>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b04      	cmp	r3, #4
 8000418:	d003      	beq.n	8000422 <BEMF_Observer_Block+0x72>
 800041a:	4b7f      	ldr	r3, [pc, #508]	; (8000618 <BEMF_Observer_Block+0x268>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b06      	cmp	r3, #6
 8000420:	d108      	bne.n	8000434 <BEMF_Observer_Block+0x84>
			if (V_Floating > V_DC/2 ) Cross = 1;
 8000422:	88bb      	ldrh	r3, [r7, #4]
 8000424:	085b      	lsrs	r3, r3, #1
 8000426:	b29b      	uxth	r3, r3
 8000428:	88fa      	ldrh	r2, [r7, #6]
 800042a:	429a      	cmp	r2, r3
 800042c:	d902      	bls.n	8000434 <BEMF_Observer_Block+0x84>
 800042e:	4b76      	ldr	r3, [pc, #472]	; (8000608 <BEMF_Observer_Block+0x258>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
		}
	}
// 0 Cross Counter Block
	// Change counting sign when 0-cross is detected
	if (Cross == 1) {
 8000434:	4b74      	ldr	r3, [pc, #464]	; (8000608 <BEMF_Observer_Block+0x258>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d123      	bne.n	8000484 <BEMF_Observer_Block+0xd4>
		BEMF_cnt_sign = 0;
 800043c:	4b73      	ldr	r3, [pc, #460]	; (800060c <BEMF_Observer_Block+0x25c>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
		BEMF_delay = BEMF_time_cnt/4;
 8000442:	4b73      	ldr	r3, [pc, #460]	; (8000610 <BEMF_Observer_Block+0x260>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	b29a      	uxth	r2, r3
 800044a:	4b72      	ldr	r3, [pc, #456]	; (8000614 <BEMF_Observer_Block+0x264>)
 800044c:	801a      	strh	r2, [r3, #0]
		Cross = 0;
 800044e:	4b6e      	ldr	r3, [pc, #440]	; (8000608 <BEMF_Observer_Block+0x258>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
		BEMF_Angle += 30;
 8000454:	4b71      	ldr	r3, [pc, #452]	; (800061c <BEMF_Observer_Block+0x26c>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	331e      	adds	r3, #30
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b6f      	ldr	r3, [pc, #444]	; (800061c <BEMF_Observer_Block+0x26c>)
 800045e:	801a      	strh	r2, [r3, #0]
		if (Div > 30) BEMF_Treshold = 0;
 8000460:	4b6f      	ldr	r3, [pc, #444]	; (8000620 <BEMF_Observer_Block+0x270>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b1e      	cmp	r3, #30
 8000466:	d903      	bls.n	8000470 <BEMF_Observer_Block+0xc0>
 8000468:	4b6e      	ldr	r3, [pc, #440]	; (8000624 <BEMF_Observer_Block+0x274>)
 800046a:	2200      	movs	r2, #0
 800046c:	801a      	strh	r2, [r3, #0]
 800046e:	e009      	b.n	8000484 <BEMF_Observer_Block+0xd4>
		else BEMF_Treshold = BEMF_time_cnt/Div;
 8000470:	4b67      	ldr	r3, [pc, #412]	; (8000610 <BEMF_Observer_Block+0x260>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4b6a      	ldr	r3, [pc, #424]	; (8000620 <BEMF_Observer_Block+0x270>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	fb92 f3f3 	sdiv	r3, r2, r3
 800047e:	b29a      	uxth	r2, r3
 8000480:	4b68      	ldr	r3, [pc, #416]	; (8000624 <BEMF_Observer_Block+0x274>)
 8000482:	801a      	strh	r2, [r3, #0]
	}
	// Counter
	if (BEMF_cnt_sign) {
 8000484:	4b61      	ldr	r3, [pc, #388]	; (800060c <BEMF_Observer_Block+0x25c>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d006      	beq.n	800049a <BEMF_Observer_Block+0xea>
		BEMF_time_cnt ++;
 800048c:	4b60      	ldr	r3, [pc, #384]	; (8000610 <BEMF_Observer_Block+0x260>)
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b5e      	ldr	r3, [pc, #376]	; (8000610 <BEMF_Observer_Block+0x260>)
 8000496:	801a      	strh	r2, [r3, #0]
 8000498:	e009      	b.n	80004ae <BEMF_Observer_Block+0xfe>
	}else {
		if (BEMF_time_cnt > 0) BEMF_time_cnt --;
 800049a:	4b5d      	ldr	r3, [pc, #372]	; (8000610 <BEMF_Observer_Block+0x260>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d005      	beq.n	80004ae <BEMF_Observer_Block+0xfe>
 80004a2:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	4b59      	ldr	r3, [pc, #356]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004ac:	801a      	strh	r2, [r3, #0]
	}
	// When Counter reached TRESHOLD then change sign and update BEMF_Angle
	if((BEMF_time_cnt <= BEMF_Treshold) && (BEMF_cnt_sign == 0)){
 80004ae:	4b58      	ldr	r3, [pc, #352]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004b0:	881a      	ldrh	r2, [r3, #0]
 80004b2:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <BEMF_Observer_Block+0x274>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d80f      	bhi.n	80004da <BEMF_Observer_Block+0x12a>
 80004ba:	4b54      	ldr	r3, [pc, #336]	; (800060c <BEMF_Observer_Block+0x25c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d10b      	bne.n	80004da <BEMF_Observer_Block+0x12a>
		BEMF_Angle += 30;
 80004c2:	4b56      	ldr	r3, [pc, #344]	; (800061c <BEMF_Observer_Block+0x26c>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	331e      	adds	r3, #30
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	4b54      	ldr	r3, [pc, #336]	; (800061c <BEMF_Observer_Block+0x26c>)
 80004cc:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 80004ce:	4b4f      	ldr	r3, [pc, #316]	; (800060c <BEMF_Observer_Block+0x25c>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 80004d4:	4b4e      	ldr	r3, [pc, #312]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	801a      	strh	r2, [r3, #0]
	}
	// Counter buffor reset before overflow
	if(BEMF_time_cnt >= 1024){
 80004da:	4b4d      	ldr	r3, [pc, #308]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004e2:	d311      	bcc.n	8000508 <BEMF_Observer_Block+0x158>
		BEMF_delay = BEMF_time_cnt/4;
 80004e4:	4b4a      	ldr	r3, [pc, #296]	; (8000610 <BEMF_Observer_Block+0x260>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	089b      	lsrs	r3, r3, #2
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b49      	ldr	r3, [pc, #292]	; (8000614 <BEMF_Observer_Block+0x264>)
 80004ee:	801a      	strh	r2, [r3, #0]
		BEMF_Angle += 60;
 80004f0:	4b4a      	ldr	r3, [pc, #296]	; (800061c <BEMF_Observer_Block+0x26c>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	333c      	adds	r3, #60	; 0x3c
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b48      	ldr	r3, [pc, #288]	; (800061c <BEMF_Observer_Block+0x26c>)
 80004fa:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 80004fc:	4b43      	ldr	r3, [pc, #268]	; (800060c <BEMF_Observer_Block+0x25c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 8000502:	4b43      	ldr	r3, [pc, #268]	; (8000610 <BEMF_Observer_Block+0x260>)
 8000504:	2200      	movs	r2, #0
 8000506:	801a      	strh	r2, [r3, #0]

	}
	if (BEMF_Angle >= 360) BEMF_Angle = 0;
 8000508:	4b44      	ldr	r3, [pc, #272]	; (800061c <BEMF_Observer_Block+0x26c>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000510:	d302      	bcc.n	8000518 <BEMF_Observer_Block+0x168>
 8000512:	4b42      	ldr	r3, [pc, #264]	; (800061c <BEMF_Observer_Block+0x26c>)
 8000514:	2200      	movs	r2, #0
 8000516:	801a      	strh	r2, [r3, #0]
	Angle = BEMF_Angle;
 8000518:	4b40      	ldr	r3, [pc, #256]	; (800061c <BEMF_Observer_Block+0x26c>)
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	4b42      	ldr	r3, [pc, #264]	; (8000628 <BEMF_Observer_Block+0x278>)
 800051e:	801a      	strh	r2, [r3, #0]
	// Scan functionality
	if (Scan_Is_enabled > 0){
 8000520:	4b42      	ldr	r3, [pc, #264]	; (800062c <BEMF_Observer_Block+0x27c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	f000 8090 	beq.w	800064a <BEMF_Observer_Block+0x29a>
		Scan_iter += trace_num * 4;
 800052a:	4b41      	ldr	r3, [pc, #260]	; (8000630 <BEMF_Observer_Block+0x280>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b29b      	uxth	r3, r3
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	b29a      	uxth	r2, r3
 8000534:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	4413      	add	r3, r2
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <BEMF_Observer_Block+0x284>)
 800053e:	801a      	strh	r2, [r3, #0]

		Scan_Data[Scan_iter] = V_Floating/8;
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	b299      	uxth	r1, r3
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	b2c9      	uxtb	r1, r1
 800054e:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <BEMF_Observer_Block+0x288>)
 8000550:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b36      	ldr	r3, [pc, #216]	; (8000634 <BEMF_Observer_Block+0x284>)
 800055c:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = HAL_GPIO_ReadPin(Hall_GPIO_Port, Hall_GPIO_Pin)*64;
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <BEMF_Observer_Block+0x28c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <BEMF_Observer_Block+0x290>)
 8000564:	8812      	ldrh	r2, [r2, #0]
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f002 facb 	bl	8002b04 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	4619      	mov	r1, r3
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	018b      	lsls	r3, r1, #6
 800057a:	b2d9      	uxtb	r1, r3
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <BEMF_Observer_Block+0x288>)
 800057e:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <BEMF_Observer_Block+0x284>)
 800058a:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = Step_Num * 16;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <BEMF_Observer_Block+0x268>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <BEMF_Observer_Block+0x284>)
 8000592:	8812      	ldrh	r2, [r2, #0]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	b2d9      	uxtb	r1, r3
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <BEMF_Observer_Block+0x288>)
 800059a:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <BEMF_Observer_Block+0x284>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005a6:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = BEMF_time_cnt;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <BEMF_Observer_Block+0x260>)
 80005aa:	8819      	ldrh	r1, [r3, #0]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	b2c9      	uxtb	r1, r1
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <BEMF_Observer_Block+0x288>)
 80005b6:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005c2:	801a      	strh	r2, [r3, #0]

		Scan_iter += (MORE_TRACES-trace_num) * 4;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <BEMF_Observer_Block+0x280>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f1c3 0307 	rsb	r3, r3, #7
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	b29a      	uxth	r2, r3
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005dc:	801a      	strh	r2, [r3, #0]
		if (Scan_iter >= SCAN_SIZE) {
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <BEMF_Observer_Block+0x284>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005e6:	d330      	bcc.n	800064a <BEMF_Observer_Block+0x29a>
			trace_num++;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <BEMF_Observer_Block+0x280>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <BEMF_Observer_Block+0x280>)
 80005f2:	701a      	strb	r2, [r3, #0]
			if(trace_num > MORE_TRACES){
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <BEMF_Observer_Block+0x280>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	d923      	bls.n	8000644 <BEMF_Observer_Block+0x294>
				Scan_Is_enabled = 0;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <BEMF_Observer_Block+0x27c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e022      	b.n	800064a <BEMF_Observer_Block+0x29a>
 8000604:	20000068 	.word	0x20000068
 8000608:	20000095 	.word	0x20000095
 800060c:	2000000a 	.word	0x2000000a
 8000610:	2000000c 	.word	0x2000000c
 8000614:	20000012 	.word	0x20000012
 8000618:	20000090 	.word	0x20000090
 800061c:	2000000e 	.word	0x2000000e
 8000620:	20000010 	.word	0x20000010
 8000624:	20000096 	.word	0x20000096
 8000628:	2000009a 	.word	0x2000009a
 800062c:	20000084 	.word	0x20000084
 8000630:	20000088 	.word	0x20000088
 8000634:	20000086 	.word	0x20000086
 8000638:	2000009c 	.word	0x2000009c
 800063c:	20000004 	.word	0x20000004
 8000640:	20000008 	.word	0x20000008
			} else Scan_iter = 0;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <BEMF_Observer_Block+0x2e0>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
		}
	}
	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <BEMF_Observer_Block+0x2e4>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d115      	bne.n	800067e <BEMF_Observer_Block+0x2ce>
		Old_Cross = 0;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <BEMF_Observer_Block+0x2e8>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		Cross = 0;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <BEMF_Observer_Block+0x2ec>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		BEMF_cnt_sign = 0;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <BEMF_Observer_Block+0x2f0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <BEMF_Observer_Block+0x2f4>)
 8000666:	2201      	movs	r2, #1
 8000668:	801a      	strh	r2, [r3, #0]
		BEMF_Angle = 330;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <BEMF_Observer_Block+0x2f8>)
 800066c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000670:	801a      	strh	r2, [r3, #0]
		V_Floating_Old = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <BEMF_Observer_Block+0x2fc>)
 8000674:	2200      	movs	r2, #0
 8000676:	801a      	strh	r2, [r3, #0]
		BEMF_delay = 32;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <BEMF_Observer_Block+0x300>)
 800067a:	2220      	movs	r2, #32
 800067c:	801a      	strh	r2, [r3, #0]
	}
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 1);			// 330ns
	Six_Step_Block(PWM_Value);
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <BEMF_Observer_Block+0x2e4>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f82c 	bl	80006e0 <Six_Step_Block>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000086 	.word	0x20000086
 8000694:	20000098 	.word	0x20000098
 8000698:	20000094 	.word	0x20000094
 800069c:	20000095 	.word	0x20000095
 80006a0:	2000000a 	.word	0x2000000a
 80006a4:	2000000c 	.word	0x2000000c
 80006a8:	2000000e 	.word	0x2000000e
 80006ac:	20000092 	.word	0x20000092
 80006b0:	20000012 	.word	0x20000012

080006b4 <Set_Observer_Div>:

void Set_Observer_Div(uint8_t div){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	if(div < 1) Div = 1;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d103      	bne.n	80006cc <Set_Observer_Div+0x18>
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <Set_Observer_Div+0x28>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
	else Div = div;
}
 80006ca:	e002      	b.n	80006d2 <Set_Observer_Div+0x1e>
	else Div = div;
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <Set_Observer_Div+0x28>)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	7013      	strb	r3, [r2, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000010 	.word	0x20000010

080006e0 <Six_Step_Block>:
	// Do nothing if pwm is ste to 0

	DupkoSin_Block(PWM_Value);
}

void Six_Step_Block(uint16_t PWM_Value){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]

	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10c      	bne.n	800070a <Six_Step_Block+0x2a>
		SetFloating_A();
 80006f0:	f000 f99c 	bl	8000a2c <SetFloating_A>
		SetFloating_B();
 80006f4:	f000 f9ae 	bl	8000a54 <SetFloating_B>
		SetFloating_C();
 80006f8:	f000 f9c0 	bl	8000a7c <SetFloating_C>
		Step_Num = 0;
 80006fc:	4b41      	ldr	r3, [pc, #260]	; (8000804 <Six_Step_Block+0x124>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		Old_Step = 0;
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <Six_Step_Block+0x128>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
		return;
 8000708:	e078      	b.n	80007fc <Six_Step_Block+0x11c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070a:	b672      	cpsid	i
}
 800070c:	bf00      	nop
	}
										// {16.6us - 0.9us}
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 0);			// 330ns
	__disable_irq();
	Step_Num = (Angle/60)+1;
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <Six_Step_Block+0x12c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4a3f      	ldr	r2, [pc, #252]	; (8000810 <Six_Step_Block+0x130>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	095b      	lsrs	r3, r3, #5
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <Six_Step_Block+0x124>)
 8000724:	701a      	strb	r2, [r3, #0]
	if(Step_Num != Old_Step){
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <Six_Step_Block+0x124>)
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <Six_Step_Block+0x128>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	d062      	beq.n	80007f8 <Six_Step_Block+0x118>
		if(Step_Num == 1){
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <Six_Step_Block+0x124>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10b      	bne.n	8000752 <Six_Step_Block+0x72>
			SetPulse_CH(PWM_Value);
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f95f 	bl	8000a00 <SetPulse_CH>
			SetZero_B();
 8000742:	f000 f90d 	bl	8000960 <SetZero_B>
			SetFloating_A();
 8000746:	f000 f971 	bl	8000a2c <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 800074a:	2004      	movs	r0, #4
 800074c:	f000 f9aa 	bl	8000aa4 <ADC_Change_Order>
 8000750:	e04e      	b.n	80007f0 <Six_Step_Block+0x110>
		}else if(Step_Num == 2){
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <Six_Step_Block+0x124>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d10b      	bne.n	8000772 <Six_Step_Block+0x92>
			SetPulse_CH(PWM_Value);
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f94f 	bl	8000a00 <SetPulse_CH>
			SetFloating_B();
 8000762:	f000 f977 	bl	8000a54 <SetFloating_B>
			SetZero_A();
 8000766:	f000 f8e9 	bl	800093c <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_B);
 800076a:	2003      	movs	r0, #3
 800076c:	f000 f99a 	bl	8000aa4 <ADC_Change_Order>
 8000770:	e03e      	b.n	80007f0 <Six_Step_Block+0x110>
		}else if(Step_Num == 3){
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <Six_Step_Block+0x124>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d10b      	bne.n	8000792 <Six_Step_Block+0xb2>
			SetFloating_C();
 800077a:	f000 f97f 	bl	8000a7c <SetFloating_C>
			SetPulse_BH(PWM_Value);
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f927 	bl	80009d4 <SetPulse_BH>
			SetZero_A();
 8000786:	f000 f8d9 	bl	800093c <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_C);
 800078a:	2002      	movs	r0, #2
 800078c:	f000 f98a 	bl	8000aa4 <ADC_Change_Order>
 8000790:	e02e      	b.n	80007f0 <Six_Step_Block+0x110>
		}else if(Step_Num == 4){
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <Six_Step_Block+0x124>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b04      	cmp	r3, #4
 8000798:	d10b      	bne.n	80007b2 <Six_Step_Block+0xd2>
			SetZero_C();
 800079a:	f000 f8f3 	bl	8000984 <SetZero_C>
			SetPulse_BH(PWM_Value);
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f917 	bl	80009d4 <SetPulse_BH>
			SetFloating_A();
 80007a6:	f000 f941 	bl	8000a2c <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 80007aa:	2004      	movs	r0, #4
 80007ac:	f000 f97a 	bl	8000aa4 <ADC_Change_Order>
 80007b0:	e01e      	b.n	80007f0 <Six_Step_Block+0x110>
		}else if(Step_Num == 5){
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <Six_Step_Block+0x124>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d10b      	bne.n	80007d2 <Six_Step_Block+0xf2>
			SetZero_C();
 80007ba:	f000 f8e3 	bl	8000984 <SetZero_C>
			SetFloating_B();
 80007be:	f000 f949 	bl	8000a54 <SetFloating_B>
			SetPulse_AH(PWM_Value);
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f8ef 	bl	80009a8 <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_B);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f96a 	bl	8000aa4 <ADC_Change_Order>
 80007d0:	e00e      	b.n	80007f0 <Six_Step_Block+0x110>
		}else if(Step_Num == 6){
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <Six_Step_Block+0x124>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d10a      	bne.n	80007f0 <Six_Step_Block+0x110>
			SetFloating_C();
 80007da:	f000 f94f 	bl	8000a7c <SetFloating_C>
			SetZero_B();
 80007de:	f000 f8bf 	bl	8000960 <SetZero_B>
			SetPulse_AH(PWM_Value);
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8df 	bl	80009a8 <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_C);
 80007ea:	2002      	movs	r0, #2
 80007ec:	f000 f95a 	bl	8000aa4 <ADC_Change_Order>
		}
		Old_Step = Step_Num;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <Six_Step_Block+0x124>)
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <Six_Step_Block+0x128>)
 80007f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007f8:	b662      	cpsie	i
}
 80007fa:	bf00      	nop
	}
	__enable_irq();
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 1);			// 330ns

}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000090 	.word	0x20000090
 8000808:	20000091 	.word	0x20000091
 800080c:	2000009a 	.word	0x2000009a
 8000810:	88888889 	.word	0x88888889

08000814 <Set_PWM>:
		}
		Old_Step = Step_Num;
	}
}

void Set_PWM(uint16_t value){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	PWM_Value = value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <Set_PWM+0x1c>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	8013      	strh	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000098 	.word	0x20000098

08000834 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	BEMF_Observer_Block();
 800083c:	f7ff fdb8 	bl	80003b0 <BEMF_Observer_Block>
	//HALL_Observer_Block();

	ADC_Ticks ++;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_ADC_ConvCpltCallback+0x20>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a03      	ldr	r2, [pc, #12]	; (8000854 <HAL_ADC_ConvCpltCallback+0x20>)
 8000848:	6013      	str	r3, [r2, #0]
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c

08000858 <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 8000866:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <Control_Init+0xc8>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 800086c:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <Control_Init+0xcc>)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000872:	4a2d      	ldr	r2, [pc, #180]	; (8000928 <Control_Init+0xd0>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <Control_Init+0xd4>)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <Control_Init+0xd8>)
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	482a      	ldr	r0, [pc, #168]	; (8000934 <Control_Init+0xdc>)
 800088a:	f002 f952 	bl	8002b32 <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <Control_Init+0xd4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fed8 	bl	8003648 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <Control_Init+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 ff74 	bl	800378c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2); 	// LOW POLARITY
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <Control_Init+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2104      	movs	r1, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 ff6e 	bl	800378c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <Control_Init+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 ff68 	bl	800378c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);	// LOW POLARITY
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <Control_Init+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 ff62 	bl	800378c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <Control_Init+0xc8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2104      	movs	r1, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ff5c 	bl	800378c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  	// LOW POLARITY
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <Control_Init+0xc8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff56 	bl	800378c <HAL_TIM_PWM_Start>

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <Control_Init+0xc8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2108      	movs	r1, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ff50 	bl	800378c <HAL_TIM_PWM_Start>
	//htim2->Instance->CNT = 0;
	//htim3->Instance->CNT = 0;


	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 2);
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <Control_Init+0xd8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2202      	movs	r2, #2
 80008f2:	4911      	ldr	r1, [pc, #68]	; (8000938 <Control_Init+0xe0>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f99b 	bl	8001c30 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Control_Init+0xc8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2108      	movs	r1, #8
 8000900:	4618      	mov	r0, r3
 8000902:	f002 ffe5 	bl	80038d0 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <Control_Init+0xc8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2201      	movs	r2, #1
 800090e:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 f891 	bl	8001a38 <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000054 	.word	0x20000054
 8000924:	20000058 	.word	0x20000058
 8000928:	2000005c 	.word	0x2000005c
 800092c:	20000060 	.word	0x20000060
 8000930:	20000064 	.word	0x20000064
 8000934:	40011400 	.word	0x40011400
 8000938:	20000068 	.word	0x20000068

0800093c <SetZero_A>:

void SetZero_A(){
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SetZero_A+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, 0);
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SetZero_A+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000058 	.word	0x20000058

08000960 <SetZero_B>:

void SetZero_B(){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SetZero_B+0x20>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, 0);
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SetZero_B+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	2000005c 	.word	0x2000005c

08000984 <SetZero_C>:

void SetZero_C(){
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SetZero_C+0x20>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, 0);
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SetZero_C+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000054 	.word	0x20000054

080009a8 <SetPulse_AH>:
///////////////////
void SetPulse_AH(uint16_t value){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <SetPulse_AH+0x28>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	88fa      	ldrh	r2, [r7, #6]
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, value);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SetPulse_AH+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	88fa      	ldrh	r2, [r7, #6]
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000058 	.word	0x20000058

080009d4 <SetPulse_BH>:

void SetPulse_BH(uint16_t value){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <SetPulse_BH+0x28>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, value);
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SetPulse_BH+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	88fa      	ldrh	r2, [r7, #6]
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	2000005c 	.word	0x2000005c

08000a00 <SetPulse_CH>:

void SetPulse_CH(uint16_t value){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <SetPulse_CH+0x28>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, value);
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SetPulse_CH+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000054 	.word	0x20000054

08000a2c <SetFloating_A>:
///////////////////
void SetFloating_A(){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <SetFloating_A+0x24>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, PWM_COUNTER);
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SetFloating_A+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f240 227f 	movw	r2, #639	; 0x27f
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000058 	.word	0x20000058

08000a54 <SetFloating_B>:

void SetFloating_B(){
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <SetFloating_B+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, PWM_COUNTER);
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SetFloating_B+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f240 227f 	movw	r2, #639	; 0x27f
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000005c 	.word	0x2000005c

08000a7c <SetFloating_C>:

void SetFloating_C(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <SetFloating_C+0x24>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, PWM_COUNTER);
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SetFloating_C+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f240 227f 	movw	r2, #639	; 0x27f
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000054 	.word	0x20000054

08000aa4 <ADC_Change_Order>:
		Hall_GPIO_Port = HALL_C_GPIO_Port;
		Hall_GPIO_Pin = HALL_C_Pin;
	}
}

void ADC_Change_Order(uint32_t channel){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 0);			// 330ns
	//__disable_irq();

	ADC_ChannelConfTypeDef sConfig = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]

	// Stop timer what triggers ADC conversions
	HAL_TIM_PWM_Stop_IT(htim1, TIM_CHANNEL_3);	// 4us
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <ADC_Change_Order+0x84>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2108      	movs	r1, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 ffee 	bl	8003aa0 <HAL_TIM_PWM_Stop_IT>

	// Change order of conversions
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
	sConfig.Channel = channel;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)  Error_Handler();
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <ADC_Change_Order+0x88>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f998 	bl	8001e10 <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <ADC_Change_Order+0x46>
 8000ae6:	f000 fc67 	bl	80013b8 <Error_Handler>

	// Start timer what triggers ADC conversions
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <ADC_Change_Order+0x84>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2108      	movs	r1, #8
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 feed 	bl	80038d0 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <ADC_Change_Order+0x84>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2201      	movs	r2, #1
 8000afe:	63da      	str	r2, [r3, #60]	; 0x3c

	// Timers synchonisation
	htim1->Instance->CNT = 0;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <ADC_Change_Order+0x84>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <ADC_Change_Order+0x8c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <ADC_Change_Order+0x90>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
	//Hall_Change_Active(channel);

	//__enable_irq();
	//HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, 1);			// 330ns
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000054 	.word	0x20000054
 8000b2c:	20000064 	.word	0x20000064
 8000b30:	20000058 	.word	0x20000058
 8000b34:	2000005c 	.word	0x2000005c

08000b38 <HAL_TIM_TriggerCallback>:
		__HAL_TIM_SET_COUNTER(htim4,0);
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
}

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
//		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
//			test = __HAL_TIM_GET_COUNTER(htim1);
//			test = __HAL_TIM_GET_COUNTER(htim1);
//		}
//	}
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
	...

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 ff0f 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f835 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 fb8f 	bl	800127c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5e:	f000 fb6f 	bl	8001240 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b62:	f000 f887 	bl	8000c74 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000b66:	f000 f8d3 	bl	8000d10 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b6a:	f000 f909 	bl	8000d80 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b6e:	f000 fa45 	bl	8000ffc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000b72:	f000 f9c1 	bl	8000ef8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b76:	f000 fac5 	bl	8001104 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

	DRV_Init(&hspi1);
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <main+0x60>)
 8000b7c:	f7ff fae6 	bl	800014c <DRV_Init>
	//DRV_Write(SHUNT_AMPLIFIER_CONTROL,
	//		(GAIN_CS1 & 0xffff) +
	//		(GAIN_CS2 & 0xffff) +
	//		(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <main+0x64>)
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <main+0x68>)
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <main+0x6c>)
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <main+0x70>)
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <main+0x74>)
 8000b8c:	f7ff fe64 	bl	8000858 <Control_Init>
	//Application_Init(&huart1);
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);	// Main chanell
 8000b90:	2104      	movs	r1, #4
 8000b92:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <main+0x68>)
 8000b94:	f003 f946 	bl	8003e24 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <main+0x68>)
 8000b9c:	f003 f882 	bl	8003ca4 <HAL_TIM_IC_Start>

	HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 ff49 	bl	8001a38 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	Application_Update();
 8000ba6:	f7ff fbed 	bl	8000384 <Application_Update>
 8000baa:	e7fc      	b.n	8000ba6 <main+0x5a>
 8000bac:	200041e8 	.word	0x200041e8
 8000bb0:	2000412c 	.word	0x2000412c
 8000bb4:	2000409c 	.word	0x2000409c
 8000bb8:	200040e4 	.word	0x200040e4
 8000bbc:	20004240 	.word	0x20004240
 8000bc0:	200041a0 	.word	0x200041a0

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 face 	bl	8005174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c08:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 ffa6 	bl	8002b64 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c1e:	f000 fbcb 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fa10 	bl	8003064 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c4a:	f000 fbb5 	bl	80013b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fb6a 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c66:	f000 fba7 	bl	80013b8 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <MX_ADC1_Init+0x98>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000ca0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb2:	4815      	ldr	r0, [pc, #84]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000cb4:	f000 fee4 	bl	8001a80 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cbe:	f000 fb7b 	bl	80013b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000cd4:	f001 f89c 	bl	8001e10 <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 fb6b 	bl	80013b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_ADC1_Init+0x94>)
 8000cf0:	f001 f88e 	bl	8001e10 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cfa:	f000 fb5d 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000412c 	.word	0x2000412c
 8000d0c:	40012400 	.word	0x40012400

08000d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <MX_SPI1_Init+0x6c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d46:	2220      	movs	r2, #32
 8000d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d64:	f002 fb9c 	bl	80034a0 <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d6e:	f000 fb23 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200041e8 	.word	0x200041e8
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b096      	sub	sp, #88	; 0x58
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f9db 	bl	8005174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dbe:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <MX_TIM1_Init+0x174>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dca:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dcc:	2220      	movs	r2, #32
 8000dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dea:	4841      	ldr	r0, [pc, #260]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000dec:	f002 fbdc 	bl	80035a8 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000df6:	f000 fadf 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e04:	4619      	mov	r1, r3
 8000e06:	483a      	ldr	r0, [pc, #232]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000e08:	f003 fb6c 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e12:	f000 fad1 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e16:	4836      	ldr	r0, [pc, #216]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000e18:	f002 fc60 	bl	80036dc <HAL_TIM_PWM_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e22:	f000 fac9 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e32:	4619      	mov	r1, r3
 8000e34:	482e      	ldr	r0, [pc, #184]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000e36:	f004 f8b7 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 faba 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e44:	2360      	movs	r3, #96	; 0x60
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000e6a:	f003 fa7d 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e74:	f000 faa0 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2204      	movs	r2, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000e86:	f003 fa6f 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e90:	f000 fa92 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000ea2:	f003 fa61 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000eac:	f000 fa84 	bl	80013b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000ed4:	f004 f8c6 	bl	8005064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000ede:	f000 fa6b 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM1_Init+0x170>)
 8000ee4:	f000 fbf2 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000ee8:	bf00      	nop
 8000eea:	3758      	adds	r7, #88	; 0x58
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200041a0 	.word	0x200041a0
 8000ef4:	40012c00 	.word	0x40012c00

08000ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f38:	2220      	movs	r2, #32
 8000f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f50:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f52:	f002 fb29 	bl	80035a8 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f5c:	f000 fa2c 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4822      	ldr	r0, [pc, #136]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f6e:	f003 fab9 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f78:	f000 fa1e 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f7e:	f002 fbad 	bl	80036dc <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f88:	f000 fa16 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000f9c:	f004 f804 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f000 fa07 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	; 0x60
 8000fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000fc2:	f003 f9d1 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fcc:	f000 f9f4 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000fdc:	f003 f9c4 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000fe6:	f000 f9e7 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM2_Init+0x100>)
 8000fec:	f000 fb6e 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000ff0:	bf00      	nop
 8000ff2:	3738      	adds	r7, #56	; 0x38
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20004240 	.word	0x20004240

08000ffc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	; 0x38
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <MX_TIM3_Init+0x100>)
 800102e:	4a34      	ldr	r2, [pc, #208]	; (8001100 <MX_TIM3_Init+0x104>)
 8001030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <MX_TIM3_Init+0x100>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MX_TIM3_Init+0x100>)
 800103a:	2220      	movs	r2, #32
 800103c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <MX_TIM3_Init+0x100>)
 8001040:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001044:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_TIM3_Init+0x100>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_TIM3_Init+0x100>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001052:	482a      	ldr	r0, [pc, #168]	; (80010fc <MX_TIM3_Init+0x100>)
 8001054:	f002 faa8 	bl	80035a8 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800105e:	f000 f9ab 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106c:	4619      	mov	r1, r3
 800106e:	4823      	ldr	r0, [pc, #140]	; (80010fc <MX_TIM3_Init+0x100>)
 8001070:	f003 fa38 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800107a:	f000 f99d 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800107e:	481f      	ldr	r0, [pc, #124]	; (80010fc <MX_TIM3_Init+0x100>)
 8001080:	f002 fb2c 	bl	80036dc <HAL_TIM_PWM_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800108a:	f000 f995 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4619      	mov	r1, r3
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <MX_TIM3_Init+0x100>)
 800109e:	f003 ff83 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010a8:	f000 f986 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <MX_TIM3_Init+0x100>)
 80010c4:	f003 f950 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010ce:	f000 f973 	bl	80013b8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010d2:	2302      	movs	r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2204      	movs	r2, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM3_Init+0x100>)
 80010de:	f003 f943 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80010e8:	f000 f966 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM3_Init+0x100>)
 80010ee:	f000 faed 	bl	80016cc <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3738      	adds	r7, #56	; 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200040e4 	.word	0x200040e4
 8001100:	40000400 	.word	0x40000400

08001104 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <MX_TIM4_Init+0x134>)
 8001140:	4a3e      	ldr	r2, [pc, #248]	; (800123c <MX_TIM4_Init+0x138>)
 8001142:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 8001144:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <MX_TIM4_Init+0x134>)
 8001146:	2220      	movs	r2, #32
 8001148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_TIM4_Init+0x134>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MX_TIM4_Init+0x134>)
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <MX_TIM4_Init+0x134>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <MX_TIM4_Init+0x134>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001164:	4834      	ldr	r0, [pc, #208]	; (8001238 <MX_TIM4_Init+0x134>)
 8001166:	f002 fa1f 	bl	80035a8 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f922 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117e:	4619      	mov	r1, r3
 8001180:	482d      	ldr	r0, [pc, #180]	; (8001238 <MX_TIM4_Init+0x134>)
 8001182:	f003 f9af 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f914 	bl	80013b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001190:	4829      	ldr	r0, [pc, #164]	; (8001238 <MX_TIM4_Init+0x134>)
 8001192:	f002 fd2f 	bl	8003bf4 <HAL_TIM_IC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800119c:	f000 f90c 	bl	80013b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011a0:	2304      	movs	r3, #4
 80011a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011a8:	2302      	movs	r3, #2
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <MX_TIM4_Init+0x134>)
 80011bc:	f003 fa56 	bl	800466c <HAL_TIM_SlaveConfigSynchro>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80011c6:	f000 f8f7 	bl	80013b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <MX_TIM4_Init+0x134>)
 80011e4:	f003 f82c 	bl	8004240 <HAL_TIM_IC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80011ee:	f000 f8e3 	bl	80013b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011f6:	2301      	movs	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2204      	movs	r2, #4
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_TIM4_Init+0x134>)
 8001204:	f003 f81c 	bl	8004240 <HAL_TIM_IC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 800120e:	f000 f8d3 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_TIM4_Init+0x134>)
 8001220:	f003 fec2 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 800122a:	f000 f8c5 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000409c 	.word	0x2000409c
 800123c:	40000800 	.word	0x40000800

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_DMA_Init+0x38>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <MX_DMA_Init+0x38>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_DMA_Init+0x38>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200b      	movs	r0, #11
 8001264:	f001 f8a5 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001268:	200b      	movs	r0, #11
 800126a:	f001 f8be 	bl	80023ea <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x128>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <MX_GPIO_Init+0x128>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x128>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x128>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2101      	movs	r1, #1
 80012dc:	4832      	ldr	r0, [pc, #200]	; (80013a8 <MX_GPIO_Init+0x12c>)
 80012de:	f001 fc28 	bl	8002b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2104      	movs	r1, #4
 80012e6:	4831      	ldr	r0, [pc, #196]	; (80013ac <MX_GPIO_Init+0x130>)
 80012e8:	f001 fc23 	bl	8002b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HALL_A_GPIO_Port, HALL_A_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f2:	482f      	ldr	r0, [pc, #188]	; (80013b0 <MX_GPIO_Init+0x134>)
 80012f4:	f001 fc1d 	bl	8002b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x12c>)
 8001310:	f001 fa74 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001314:	2302      	movs	r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <MX_GPIO_Init+0x12c>)
 8001328:	f001 fa68 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800132c:	2304      	movs	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <MX_GPIO_Init+0x130>)
 8001344:	f001 fa5a 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_B_Pin|HALL_C_Pin;
 8001348:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0x134>)
 800135e:	f001 fa4d 	bl	80027fc <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_A_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin;
 8001362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HALL_A_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0x134>)
 800137c:	f001 fa3e 	bl	80027fc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x138>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <MX_GPIO_Init+0x138>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	6053      	str	r3, [r2, #4]

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40011400 	.word	0x40011400
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40010000 	.word	0x40010000

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_MspInit+0x5c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_MspInit+0x5c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_MspInit+0x60>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_MspInit+0x60>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000

08001428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_ADC_MspInit+0xe8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d15f      	bne.n	8001508 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <HAL_ADC_MspInit+0xec>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_ADC_MspInit+0xec>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_ADC_MspInit+0xec>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_ADC_MspInit+0xec>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <HAL_ADC_MspInit+0xec>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_ADC_MspInit+0xec>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_ADC_MspInit+0xec>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a25      	ldr	r2, [pc, #148]	; (8001514 <HAL_ADC_MspInit+0xec>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_ADC_MspInit+0xec>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8001490:	231f      	movs	r3, #31
 8001492:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4619      	mov	r1, r3
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <HAL_ADC_MspInit+0xf0>)
 80014a0:	f001 f9ac 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4619      	mov	r1, r3
 80014b2:	481a      	ldr	r0, [pc, #104]	; (800151c <HAL_ADC_MspInit+0xf4>)
 80014b4:	f001 f9a2 	bl	80027fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_ADC_MspInit+0xfc>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014e2:	2220      	movs	r2, #32
 80014e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 80014ee:	f000 ff97 	bl	8002420 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80014f8:	f7ff ff5e 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 8001500:	621a      	str	r2, [r3, #32]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_ADC_MspInit+0xf8>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012400 	.word	0x40012400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	2000415c 	.word	0x2000415c
 8001524:	40020008 	.word	0x40020008

08001528 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_SPI_MspInit+0x88>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d12f      	bne.n	80015a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 800154e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_SPI_MspInit+0x8c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 8001578:	23a0      	movs	r3, #160	; 0xa0
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <HAL_SPI_MspInit+0x90>)
 800158c:	f001 f936 	bl	80027fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_SPI_MspInit+0x90>)
 80015a4:	f001 f92a 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010800 	.word	0x40010800

080015bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <HAL_TIM_Base_MspInit+0xfc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d114      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a36      	ldr	r2, [pc, #216]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 80015e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2019      	movs	r0, #25
 80015fa:	f000 feda 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015fe:	2019      	movs	r0, #25
 8001600:	f000 fef3 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001604:	e054      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160e:	d10c      	bne.n	800162a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	61d3      	str	r3, [r2, #28]
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	69bb      	ldr	r3, [r7, #24]
}
 8001628:	e042      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <HAL_TIM_Base_MspInit+0x104>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d10c      	bne.n	800164e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	61d3      	str	r3, [r2, #28]
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697b      	ldr	r3, [r7, #20]
}
 800164c:	e030      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_TIM_Base_MspInit+0x108>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d12b      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	61d3      	str	r3, [r2, #28]
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_TIM_Base_MspInit+0x100>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	4619      	mov	r1, r3
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_TIM_Base_MspInit+0x10c>)
 800169c:	f001 f8ae 	bl	80027fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	201e      	movs	r0, #30
 80016a6:	f000 fe84 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016aa:	201e      	movs	r0, #30
 80016ac:	f000 fe9d 	bl	80023ea <HAL_NVIC_EnableIRQ>
}
 80016b0:	bf00      	nop
 80016b2:	3730      	adds	r7, #48	; 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40000800 	.word	0x40000800
 80016c8:	40010c00 	.word	0x40010c00

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_TIM_MspPostInit+0x14c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d119      	bne.n	8001720 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CL_Pin|PWM_CH_Pin;
 8001704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	4619      	mov	r1, r3
 8001718:	4841      	ldr	r0, [pc, #260]	; (8001820 <HAL_TIM_MspPostInit+0x154>)
 800171a:	f001 f86f 	bl	80027fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800171e:	e077      	b.n	8001810 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d143      	bne.n	80017b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a35      	ldr	r2, [pc, #212]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 800175a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2302      	movs	r3, #2
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	4619      	mov	r1, r3
 800176e:	482c      	ldr	r0, [pc, #176]	; (8001820 <HAL_TIM_MspPostInit+0x154>)
 8001770:	f001 f844 	bl	80027fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AL_Pin;
 8001774:	2308      	movs	r3, #8
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2302      	movs	r3, #2
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AL_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	4619      	mov	r1, r3
 8001786:	4827      	ldr	r0, [pc, #156]	; (8001824 <HAL_TIM_MspPostInit+0x158>)
 8001788:	f001 f838 	bl	80027fc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_TIM_MspPostInit+0x15c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_TIM_MspPostInit+0x15c>)
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	6053      	str	r3, [r2, #4]
}
 80017b0:	e02e      	b.n	8001810 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_TIM_MspPostInit+0x160>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d129      	bne.n	8001810 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_Pin|PWM_BL_Pin;
 80017d4:	2330      	movs	r3, #48	; 0x30
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2302      	movs	r3, #2
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4619      	mov	r1, r3
 80017e6:	480f      	ldr	r0, [pc, #60]	; (8001824 <HAL_TIM_MspPostInit+0x158>)
 80017e8:	f001 f808 	bl	80027fc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_MspPostInit+0x15c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_TIM_MspPostInit+0x15c>)
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180e:	6053      	str	r3, [r2, #4]
}
 8001810:	bf00      	nop
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800
 8001824:	40010c00 	.word	0x40010c00
 8001828:	40010000 	.word	0x40010000
 800182c:	40000400 	.word	0x40000400

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <HardFault_Handler+0x4>

08001842 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <MemManage_Handler+0x4>

08001848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <BusFault_Handler+0x4>

0800184e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f8c0 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <DMA1_Channel1_IRQHandler+0x10>)
 800188a:	f000 fe83 	bl	8002594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000415c 	.word	0x2000415c

08001898 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM1_UP_IRQHandler+0x10>)
 800189e:	f002 fbc7 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200041a0 	.word	0x200041a0

080018ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM4_IRQHandler+0x10>)
 80018b2:	f002 fbbd 	bl	8004030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000409c 	.word	0x2000409c

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <SystemInit+0x5c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <SystemInit+0x5c>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <SystemInit+0x5c>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4911      	ldr	r1, [pc, #68]	; (800191c <SystemInit+0x5c>)
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <SystemInit+0x60>)
 80018d8:	4013      	ands	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <SystemInit+0x5c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <SystemInit+0x5c>)
 80018e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <SystemInit+0x5c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SystemInit+0x5c>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <SystemInit+0x5c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <SystemInit+0x5c>)
 80018fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001902:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SystemInit+0x5c>)
 8001906:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800190a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SystemInit+0x64>)
 800190e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001912:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	f8ff0000 	.word	0xf8ff0000
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001928:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800192a:	e003      	b.n	8001934 <LoopCopyDataInit>

0800192c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800192e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001930:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001932:	3104      	adds	r1, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001938:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800193c:	d3f6      	bcc.n	800192c <CopyDataInit>
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001940:	e002      	b.n	8001948 <LoopFillZerobss>

08001942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001944:	f842 3b04 	str.w	r3, [r2], #4

08001948 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800194c:	d3f9      	bcc.n	8001942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194e:	f7ff ffb7 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f003 fbeb 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff f8f9 	bl	8000b4c <main>
  bx lr
 800195a:	4770      	bx	lr
  ldr r3, =_sidata
 800195c:	080051c4 	.word	0x080051c4
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001964:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8001968:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 800196c:	2000428c 	.word	0x2000428c

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 fd09 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd18 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fd21 	bl	8002406 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 fce9 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000014 	.word	0x20000014
 80019f8:	2000001c 	.word	0x2000001c
 80019fc:	20000018 	.word	0x20000018

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000001c 	.word	0x2000001c
 8001a20:	20004288 	.word	0x20004288

08001a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20004288 	.word	0x20004288

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffe0 	bl	8001a24 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000001c 	.word	0x2000001c

08001a80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0be      	b.n	8001c20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fcb2 	bl	8001428 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 faf5 	bl	80020b4 <ADC_ConversionStop_Disable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8099 	bne.w	8001c0e <HAL_ADC_Init+0x18e>
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8095 	bne.w	8001c0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aec:	f023 0302 	bic.w	r3, r3, #2
 8001af0:	f043 0202 	orr.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
 8001b06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_Init+0xa2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_ADC_Init+0xa8>
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	e000      	b.n	8001b2a <HAL_ADC_Init+0xaa>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7d1b      	ldrb	r3, [r3, #20]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d119      	bne.n	8001b6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	035a      	lsls	r2, r3, #13
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e00b      	b.n	8001b6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_ADC_Init+0x1a8>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d003      	beq.n	8001ba6 <HAL_ADC_Init+0x126>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d104      	bne.n	8001bb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	051b      	lsls	r3, r3, #20
 8001bae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_ADC_Init+0x1ac>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10b      	bne.n	8001bec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bea:	e018      	b.n	8001c1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f023 0312 	bic.w	r3, r3, #18
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	ffe1f7fd 	.word	0xffe1f7fd
 8001c2c:	ff1f0efe 	.word	0xff1f0efe

08001c30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a64      	ldr	r2, [pc, #400]	; (8001dd8 <HAL_ADC_Start_DMA+0x1a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_Start_DMA+0x24>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a63      	ldr	r2, [pc, #396]	; (8001ddc <HAL_ADC_Start_DMA+0x1ac>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_Start_DMA+0x32>
 8001c54:	4b60      	ldr	r3, [pc, #384]	; (8001dd8 <HAL_ADC_Start_DMA+0x1a8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 80b3 	bne.w	8001dc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_Start_DMA+0x40>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e0ae      	b.n	8001dce <HAL_ADC_Start_DMA+0x19e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f9c1 	bl	8002000 <ADC_Enable>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 809a 	bne.w	8001dbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_ADC_Start_DMA+0x1ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_Start_DMA+0x84>
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <HAL_ADC_Start_DMA+0x1a8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d115      	bne.n	8001ce0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d026      	beq.n	8001d1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cde:	e01d      	b.n	8001d1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <HAL_ADC_Start_DMA+0x1a8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_ADC_Start_DMA+0xd0>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a38      	ldr	r2, [pc, #224]	; (8001ddc <HAL_ADC_Start_DMA+0x1ac>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10d      	bne.n	8001d1c <HAL_ADC_Start_DMA+0xec>
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f023 0206 	bic.w	r2, r3, #6
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_ADC_Start_DMA+0x1b0>)
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <HAL_ADC_Start_DMA+0x1b4>)
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_ADC_Start_DMA+0x1b8>)
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0202 	mvn.w	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a18      	ldr	r0, [r3, #32]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	334c      	adds	r3, #76	; 0x4c
 8001d80:	4619      	mov	r1, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f000 fba5 	bl	80024d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d98:	d108      	bne.n	8001dac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001da8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001daa:	e00f      	b.n	8001dcc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dbc:	e006      	b.n	8001dcc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001dc6:	e001      	b.n	8001dcc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40012400 	.word	0x40012400
 8001ddc:	40012800 	.word	0x40012800
 8001de0:	08002137 	.word	0x08002137
 8001de4:	080021b3 	.word	0x080021b3
 8001de8:	080021cf 	.word	0x080021cf

08001dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x20>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0dc      	b.n	8001fea <HAL_ADC_ConfigChannel+0x1da>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d81c      	bhi.n	8001e7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b05      	subs	r3, #5
 8001e52:	221f      	movs	r2, #31
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4019      	ands	r1, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b05      	subs	r3, #5
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
 8001e78:	e03c      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d81c      	bhi.n	8001ebc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b23      	subs	r3, #35	; 0x23
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4019      	ands	r1, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	; 0x23
 8001eae:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eba:	e01b      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	; 0x41
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b41      	subs	r3, #65	; 0x41
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d91c      	bls.n	8001f36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b1e      	subs	r3, #30
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6898      	ldr	r0, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	3b1e      	subs	r3, #30
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	e019      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6919      	ldr	r1, [r3, #16]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	2207      	movs	r2, #7
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4019      	ands	r1, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6898      	ldr	r0, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d003      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f76:	2b11      	cmp	r3, #17
 8001f78:	d132      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d125      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d126      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fa0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d11a      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_ADC_ConfigChannel+0x1ec>)
 8001fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb4:	0c9a      	lsrs	r2, r3, #18
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc0:	e002      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f9      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fce:	e007      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	f043 0220 	orr.w	r2, r3, #32
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	40012400 	.word	0x40012400
 8001ff8:	20000014 	.word	0x20000014
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d040      	beq.n	80020a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <ADC_Enable+0xac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <ADC_Enable+0xb0>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800203c:	e002      	b.n	8002044 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3b01      	subs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800204a:	f7ff fceb 	bl	8001a24 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002050:	e01f      	b.n	8002092 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002052:	f7ff fce7 	bl	8001a24 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d918      	bls.n	8002092 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d011      	beq.n	8002092 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e007      	b.n	80020a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d1d8      	bne.n	8002052 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000014 	.word	0x20000014
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d12e      	bne.n	800212c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020de:	f7ff fca1 	bl	8001a24 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020e4:	e01b      	b.n	800211e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020e6:	f7ff fc9d 	bl	8001a24 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d914      	bls.n	800211e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10d      	bne.n	800211e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e007      	b.n	800212e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d0dc      	beq.n	80020e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800214c:	2b00      	cmp	r3, #0
 800214e:	d127      	bne.n	80021a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002166:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800216a:	d115      	bne.n	8002198 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7fe fb4b 	bl	8000834 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800219e:	e004      	b.n	80021aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fe13 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fe02 	bl	8001dfe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <__NVIC_EnableIRQ+0x34>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff90 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff2d 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff42 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff90 	bl	80022f4 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5f 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff35 	bl	8002268 <__NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffa2 	bl	8002358 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e043      	b.n	80024be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_DMA_Init+0xa8>)
 800243e:	4413      	add	r3, r2
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_DMA_Init+0xac>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_DMA_Init+0xb0>)
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800246a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800246e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	bffdfff8 	.word	0xbffdfff8
 80024cc:	cccccccd 	.word	0xcccccccd
 80024d0:	40020000 	.word	0x40020000

080024d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Start_IT+0x20>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e04a      	b.n	800258a <HAL_DMA_Start_IT+0xb6>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002502:	2b01      	cmp	r3, #1
 8002504:	d13a      	bne.n	800257c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f938 	bl	80027a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 020e 	orr.w	r2, r2, #14
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e00f      	b.n	800256a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0204 	bic.w	r2, r2, #4
 8002558:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 020a 	orr.w	r2, r2, #10
 8002568:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e005      	b.n	8002588 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002584:	2302      	movs	r3, #2
 8002586:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002588:	7dfb      	ldrb	r3, [r7, #23]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2204      	movs	r2, #4
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d04f      	beq.n	800265c <HAL_DMA_IRQHandler+0xc8>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04a      	beq.n	800265c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a66      	ldr	r2, [pc, #408]	; (8002784 <HAL_DMA_IRQHandler+0x1f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d029      	beq.n	8002642 <HAL_DMA_IRQHandler+0xae>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a65      	ldr	r2, [pc, #404]	; (8002788 <HAL_DMA_IRQHandler+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <HAL_DMA_IRQHandler+0xaa>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_DMA_IRQHandler+0x1f8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01a      	beq.n	8002638 <HAL_DMA_IRQHandler+0xa4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a62      	ldr	r2, [pc, #392]	; (8002790 <HAL_DMA_IRQHandler+0x1fc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d012      	beq.n	8002632 <HAL_DMA_IRQHandler+0x9e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a60      	ldr	r2, [pc, #384]	; (8002794 <HAL_DMA_IRQHandler+0x200>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00a      	beq.n	800262c <HAL_DMA_IRQHandler+0x98>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a5f      	ldr	r2, [pc, #380]	; (8002798 <HAL_DMA_IRQHandler+0x204>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d102      	bne.n	8002626 <HAL_DMA_IRQHandler+0x92>
 8002620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002624:	e00e      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 8002626:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800262a:	e00b      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 800262c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002630:	e008      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 8002632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002636:	e005      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 8002638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263c:	e002      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	e000      	b.n	8002644 <HAL_DMA_IRQHandler+0xb0>
 8002642:	2304      	movs	r3, #4
 8002644:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_DMA_IRQHandler+0x208>)
 8002646:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8094 	beq.w	800277a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800265a:	e08e      	b.n	800277a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2202      	movs	r2, #2
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d056      	beq.n	800271a <HAL_DMA_IRQHandler+0x186>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d051      	beq.n	800271a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020a 	bic.w	r2, r2, #10
 8002692:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a38      	ldr	r2, [pc, #224]	; (8002784 <HAL_DMA_IRQHandler+0x1f0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d029      	beq.n	80026fa <HAL_DMA_IRQHandler+0x166>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a37      	ldr	r2, [pc, #220]	; (8002788 <HAL_DMA_IRQHandler+0x1f4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d022      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x162>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a35      	ldr	r2, [pc, #212]	; (800278c <HAL_DMA_IRQHandler+0x1f8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x15c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <HAL_DMA_IRQHandler+0x1fc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d012      	beq.n	80026ea <HAL_DMA_IRQHandler+0x156>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_DMA_IRQHandler+0x200>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00a      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x150>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a31      	ldr	r2, [pc, #196]	; (8002798 <HAL_DMA_IRQHandler+0x204>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d102      	bne.n	80026de <HAL_DMA_IRQHandler+0x14a>
 80026d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026dc:	e00e      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e2:	e00b      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e8:	e008      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ee:	e005      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f4:	e002      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026f6:	2320      	movs	r3, #32
 80026f8:	e000      	b.n	80026fc <HAL_DMA_IRQHandler+0x168>
 80026fa:	2302      	movs	r3, #2
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_DMA_IRQHandler+0x208>)
 80026fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d034      	beq.n	800277a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002718:	e02f      	b.n	800277a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2208      	movs	r2, #8
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e8>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
    }
  }
  return;
 800277a:	bf00      	nop
 800277c:	bf00      	nop
}
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40020008 	.word	0x40020008
 8002788:	4002001c 	.word	0x4002001c
 800278c:	40020030 	.word	0x40020030
 8002790:	40020044 	.word	0x40020044
 8002794:	40020058 	.word	0x40020058
 8002798:	4002006c 	.word	0x4002006c
 800279c:	40020000 	.word	0x40020000

080027a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d108      	bne.n	80027e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027de:	e007      	b.n	80027f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b08b      	sub	sp, #44	; 0x2c
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e169      	b.n	8002ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002810:	2201      	movs	r2, #1
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8158 	bne.w	8002ade <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4a9a      	ldr	r2, [pc, #616]	; (8002a9c <HAL_GPIO_Init+0x2a0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d05e      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
 8002838:	4a98      	ldr	r2, [pc, #608]	; (8002a9c <HAL_GPIO_Init+0x2a0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d875      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 800283e:	4a98      	ldr	r2, [pc, #608]	; (8002aa0 <HAL_GPIO_Init+0x2a4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d058      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
 8002844:	4a96      	ldr	r2, [pc, #600]	; (8002aa0 <HAL_GPIO_Init+0x2a4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d86f      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 800284a:	4a96      	ldr	r2, [pc, #600]	; (8002aa4 <HAL_GPIO_Init+0x2a8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d052      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
 8002850:	4a94      	ldr	r2, [pc, #592]	; (8002aa4 <HAL_GPIO_Init+0x2a8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d869      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 8002856:	4a94      	ldr	r2, [pc, #592]	; (8002aa8 <HAL_GPIO_Init+0x2ac>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04c      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
 800285c:	4a92      	ldr	r2, [pc, #584]	; (8002aa8 <HAL_GPIO_Init+0x2ac>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d863      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 8002862:	4a92      	ldr	r2, [pc, #584]	; (8002aac <HAL_GPIO_Init+0x2b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d046      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
 8002868:	4a90      	ldr	r2, [pc, #576]	; (8002aac <HAL_GPIO_Init+0x2b0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d85d      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 800286e:	2b12      	cmp	r3, #18
 8002870:	d82a      	bhi.n	80028c8 <HAL_GPIO_Init+0xcc>
 8002872:	2b12      	cmp	r3, #18
 8002874:	d859      	bhi.n	800292a <HAL_GPIO_Init+0x12e>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_GPIO_Init+0x80>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028f7 	.word	0x080028f7
 8002880:	080028d1 	.word	0x080028d1
 8002884:	080028e3 	.word	0x080028e3
 8002888:	08002925 	.word	0x08002925
 800288c:	0800292b 	.word	0x0800292b
 8002890:	0800292b 	.word	0x0800292b
 8002894:	0800292b 	.word	0x0800292b
 8002898:	0800292b 	.word	0x0800292b
 800289c:	0800292b 	.word	0x0800292b
 80028a0:	0800292b 	.word	0x0800292b
 80028a4:	0800292b 	.word	0x0800292b
 80028a8:	0800292b 	.word	0x0800292b
 80028ac:	0800292b 	.word	0x0800292b
 80028b0:	0800292b 	.word	0x0800292b
 80028b4:	0800292b 	.word	0x0800292b
 80028b8:	0800292b 	.word	0x0800292b
 80028bc:	0800292b 	.word	0x0800292b
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	4a79      	ldr	r2, [pc, #484]	; (8002ab0 <HAL_GPIO_Init+0x2b4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ce:	e02c      	b.n	800292a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e029      	b.n	800292c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	3304      	adds	r3, #4
 80028de:	623b      	str	r3, [r7, #32]
          break;
 80028e0:	e024      	b.n	800292c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	3308      	adds	r3, #8
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e01f      	b.n	800292c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	330c      	adds	r3, #12
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e01a      	b.n	800292c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028fe:	2304      	movs	r3, #4
 8002900:	623b      	str	r3, [r7, #32]
          break;
 8002902:	e013      	b.n	800292c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800290c:	2308      	movs	r3, #8
 800290e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	611a      	str	r2, [r3, #16]
          break;
 8002916:	e009      	b.n	800292c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002918:	2308      	movs	r3, #8
 800291a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	615a      	str	r2, [r3, #20]
          break;
 8002922:	e003      	b.n	800292c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
          break;
 8002928:	e000      	b.n	800292c <HAL_GPIO_Init+0x130>
          break;
 800292a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2bff      	cmp	r3, #255	; 0xff
 8002930:	d801      	bhi.n	8002936 <HAL_GPIO_Init+0x13a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	e001      	b.n	800293a <HAL_GPIO_Init+0x13e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d802      	bhi.n	8002948 <HAL_GPIO_Init+0x14c>
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	e002      	b.n	800294e <HAL_GPIO_Init+0x152>
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	3b08      	subs	r3, #8
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	210f      	movs	r1, #15
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	6a39      	ldr	r1, [r7, #32]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	431a      	orrs	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80b1 	beq.w	8002ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800297c:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x2b8>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_GPIO_Init+0x2b8>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_GPIO_Init+0x2b8>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002994:	4a48      	ldr	r2, [pc, #288]	; (8002ab8 <HAL_GPIO_Init+0x2bc>)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a40      	ldr	r2, [pc, #256]	; (8002abc <HAL_GPIO_Init+0x2c0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_Init+0x1ec>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_GPIO_Init+0x2c4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_Init+0x1e8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3e      	ldr	r2, [pc, #248]	; (8002ac4 <HAL_GPIO_Init+0x2c8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_Init+0x1e4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3d      	ldr	r2, [pc, #244]	; (8002ac8 <HAL_GPIO_Init+0x2cc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_Init+0x1e0>
 80029d8:	2303      	movs	r3, #3
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x1ee>
 80029dc:	2304      	movs	r3, #4
 80029de:	e004      	b.n	80029ea <HAL_GPIO_Init+0x1ee>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x1ee>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_Init+0x1ee>
 80029e8:	2300      	movs	r3, #0
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4093      	lsls	r3, r2
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029fa:	492f      	ldr	r1, [pc, #188]	; (8002ab8 <HAL_GPIO_Init+0x2bc>)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	492c      	ldr	r1, [pc, #176]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4928      	ldr	r1, [pc, #160]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4922      	ldr	r1, [pc, #136]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	491e      	ldr	r1, [pc, #120]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4918      	ldr	r1, [pc, #96]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	4914      	ldr	r1, [pc, #80]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d021      	beq.n	8002ad0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	490e      	ldr	r1, [pc, #56]	; (8002acc <HAL_GPIO_Init+0x2d0>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
 8002a98:	e021      	b.n	8002ade <HAL_GPIO_Init+0x2e2>
 8002a9a:	bf00      	nop
 8002a9c:	10320000 	.word	0x10320000
 8002aa0:	10310000 	.word	0x10310000
 8002aa4:	10220000 	.word	0x10220000
 8002aa8:	10210000 	.word	0x10210000
 8002aac:	10120000 	.word	0x10120000
 8002ab0:	10110000 	.word	0x10110000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40010800 	.word	0x40010800
 8002ac0:	40010c00 	.word	0x40010c00
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	40011400 	.word	0x40011400
 8002acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	4909      	ldr	r1, [pc, #36]	; (8002b00 <HAL_GPIO_Init+0x304>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f47f ae8e 	bne.w	8002810 <HAL_GPIO_Init+0x14>
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	372c      	adds	r7, #44	; 0x2c
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e001      	b.n	8002b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b42:	787b      	ldrb	r3, [r7, #1]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b4e:	e003      	b.n	8002b58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	041a      	lsls	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e26c      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8087 	beq.w	8002c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d00c      	beq.n	8002baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b90:	4b8f      	ldr	r3, [pc, #572]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d112      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5e>
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002baa:	4b89      	ldr	r3, [pc, #548]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d06c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x12c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d168      	bne.n	8002c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e246      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x76>
 8002bcc:	4b80      	ldr	r3, [pc, #512]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a7f      	ldr	r2, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e02e      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7a      	ldr	r2, [pc, #488]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a77      	ldr	r2, [pc, #476]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0xbc>
 8002c06:	4b72      	ldr	r3, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a71      	ldr	r2, [pc, #452]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xd4>
 8002c20:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6a      	ldr	r2, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fef0 	bl	8001a24 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe feec 	bl	8001a24 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1fa      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe4>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fedc 	bl	8001a24 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fed8 	bl	8001a24 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1e6      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x10c>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9e:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x18c>
 8002cb6:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x176>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1ba      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4939      	ldr	r1, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fe91 	bl	8001a24 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe fe8d 	bl	8001a24 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e19b      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4927      	ldr	r1, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe70 	bl	8001a24 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fe6c 	bl	8001a24 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e17a      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03a      	beq.n	8002de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d019      	beq.n	8002dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fe50 	bl	8001a24 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fe4c 	bl	8001a24 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e15a      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f000 faa6 	bl	80032f8 <RCC_Delay>
 8002dac:	e01c      	b.n	8002de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fe36 	bl	8001a24 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dba:	e00f      	b.n	8002ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fe32 	bl	8001a24 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d908      	bls.n	8002ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e140      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	42420000 	.word	0x42420000
 8002dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b9e      	ldr	r3, [pc, #632]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e9      	bne.n	8002dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a6 	beq.w	8002f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfa:	4b97      	ldr	r3, [pc, #604]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a93      	ldr	r2, [pc, #588]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]
 8002e12:	4b91      	ldr	r3, [pc, #580]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_RCC_OscConfig+0x4f8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x4f8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8a      	ldr	r2, [pc, #552]	; (800305c <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fdf3 	bl	8001a24 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fdef 	bl	8001a24 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0fd      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b81      	ldr	r3, [pc, #516]	; (800305c <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x312>
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e02d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a75      	ldr	r2, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a72      	ldr	r2, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	e01c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x356>
 8002ea0:	4b6d      	ldr	r3, [pc, #436]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a6c      	ldr	r2, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a69      	ldr	r2, [pc, #420]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e00b      	b.n	8002ed2 <HAL_RCC_OscConfig+0x36e>
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d015      	beq.n	8002f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fda3 	bl	8001a24 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fd9f 	bl	8001a24 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0ab      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ee      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x37e>
 8002f04:	e014      	b.n	8002f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fd8d 	bl	8001a24 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fd89 	bl	8001a24 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e095      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ee      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f36:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8081 	beq.w	800304e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d061      	beq.n	800301c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d146      	bne.n	8002fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_OscConfig+0x4fc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fd5d 	bl	8001a24 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe fd59 	bl	8001a24 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e067      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d108      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	492d      	ldr	r1, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a19      	ldr	r1, [r3, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	4927      	ldr	r1, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x4fc>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fd2d 	bl	8001a24 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fd29 	bl	8001a24 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e037      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x46a>
 8002fec:	e02f      	b.n	800304e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_RCC_OscConfig+0x4fc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fd16 	bl	8001a24 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fd12 	bl	8001a24 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e020      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x498>
 800301a:	e018      	b.n	800304e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e013      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	429a      	cmp	r2, r3
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420060 	.word	0x42420060

08003064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d0      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b67      	ldr	r3, [pc, #412]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4965      	ldr	r1, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d040      	beq.n	8003184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e073      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06b      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003142:	4b39      	ldr	r3, [pc, #228]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4936      	ldr	r1, [pc, #216]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7fe fc66 	bl	8001a24 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	e00a      	b.n	8003172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7fe fc62 	bl	8001a24 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e053      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 020c 	and.w	r2, r3, #12
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	429a      	cmp	r2, r3
 8003182:	d1eb      	bne.n	800315c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d210      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	490a      	ldr	r1, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1cc>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fbc4 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
 800322c:	080051ac 	.word	0x080051ac
 8003230:	20000014 	.word	0x20000014
 8003234:	20000018 	.word	0x20000018

08003238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b490      	push	{r4, r7}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003240:	1d3c      	adds	r4, r7, #4
 8003242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003248:	f240 2301 	movw	r3, #513	; 0x201
 800324c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 8003272:	2b08      	cmp	r3, #8
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x46>
 8003276:	e02d      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	e02d      	b.n	80032da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	0c9b      	lsrs	r3, r3, #18
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800328a:	4413      	add	r3, r2
 800328c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003290:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b6:	fb02 f203 	mul.w	r2, r2, r3
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
 80032c2:	e004      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a0b      	ldr	r2, [pc, #44]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	623b      	str	r3, [r7, #32]
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d6:	623b      	str	r3, [r7, #32]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6a3b      	ldr	r3, [r7, #32]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc90      	pop	{r4, r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	0800519c 	.word	0x0800519c
 80032ec:	40021000 	.word	0x40021000
 80032f0:	007a1200 	.word	0x007a1200
 80032f4:	003d0900 	.word	0x003d0900

080032f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <RCC_Delay+0x34>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <RCC_Delay+0x38>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0a5b      	lsrs	r3, r3, #9
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003314:	bf00      	nop
  }
  while (Delay --);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	60fa      	str	r2, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f9      	bne.n	8003314 <RCC_Delay+0x1c>
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000014 	.word	0x20000014
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003354:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a4b      	ldr	r2, [pc, #300]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
 800336c:	4b49      	ldr	r3, [pc, #292]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b46      	ldr	r3, [pc, #280]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d118      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003394:	f7fe fb46 	bl	8001a24 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fe fb42 	bl	8001a24 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06d      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02e      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d027      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fb11 	bl	8001a24 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe fb0d 	bl	8001a24 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e036      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ee      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4917      	ldr	r1, [pc, #92]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	4313      	orrs	r3, r2
 8003438:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	490b      	ldr	r1, [pc, #44]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
 800349c:	42420440 	.word	0x42420440

080034a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e076      	b.n	80035a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c2:	d009      	beq.n	80034d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
 80034ca:	e005      	b.n	80034d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe f818 	bl	8001528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	ea42 0103 	orr.w	r1, r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	0c1a      	lsrs	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f002 0204 	and.w	r2, r2, #4
 800357e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e041      	b.n	800363e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fff4 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f001 f89e 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIM_Base_Start+0x88>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_TIM_Base_Start+0x48>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d009      	beq.n	8003690 <HAL_TIM_Base_Start+0x48>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <HAL_TIM_Base_Start+0x8c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_TIM_Base_Start+0x48>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <HAL_TIM_Base_Start+0x90>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d111      	bne.n	80036b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d010      	beq.n	80036c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	e007      	b.n	80036c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f839 	bl	800377a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f001 f804 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_TIM_PWM_Start+0x24>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e022      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d109      	bne.n	80037ca <HAL_TIM_PWM_Start+0x3e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e015      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d109      	bne.n	80037e4 <HAL_TIM_PWM_Start+0x58>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e008      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e05e      	b.n	80038bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0x82>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800380c:	e013      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0x92>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800381c:	e00b      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382c:	e003      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb8d 	bl	8004f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_TIM_PWM_Start+0x138>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d107      	bne.n	800385e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_TIM_PWM_Start+0x138>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_TIM_PWM_Start+0xfa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003870:	d009      	beq.n	8003886 <HAL_TIM_PWM_Start+0xfa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_TIM_PWM_Start+0x13c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_TIM_PWM_Start+0xfa>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a12      	ldr	r2, [pc, #72]	; (80038cc <HAL_TIM_PWM_Start+0x140>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d111      	bne.n	80038aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d010      	beq.n	80038ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a8:	e007      	b.n	80038ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800

080038d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_TIM_PWM_Start_IT+0x24>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e022      	b.n	800393a <HAL_TIM_PWM_Start_IT+0x6a>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d109      	bne.n	800390e <HAL_TIM_PWM_Start_IT+0x3e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e015      	b.n	800393a <HAL_TIM_PWM_Start_IT+0x6a>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start_IT+0x58>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e008      	b.n	800393a <HAL_TIM_PWM_Start_IT+0x6a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0a4      	b.n	8003a8c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start_IT+0x82>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	e013      	b.n	800397a <HAL_TIM_PWM_Start_IT+0xaa>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Start_IT+0x92>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003960:	e00b      	b.n	800397a <HAL_TIM_PWM_Start_IT+0xaa>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d104      	bne.n	8003972 <HAL_TIM_PWM_Start_IT+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003970:	e003      	b.n	800397a <HAL_TIM_PWM_Start_IT+0xaa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d841      	bhi.n	8003a04 <HAL_TIM_PWM_Start_IT+0x134>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <HAL_TIM_PWM_Start_IT+0xb8>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039bd 	.word	0x080039bd
 800398c:	08003a05 	.word	0x08003a05
 8003990:	08003a05 	.word	0x08003a05
 8003994:	08003a05 	.word	0x08003a05
 8003998:	080039cf 	.word	0x080039cf
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	08003a05 	.word	0x08003a05
 80039a8:	080039e1 	.word	0x080039e1
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003a05 	.word	0x08003a05
 80039b8:	080039f3 	.word	0x080039f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0202 	orr.w	r2, r2, #2
 80039ca:	60da      	str	r2, [r3, #12]
      break;
 80039cc:	e01b      	b.n	8003a06 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0204 	orr.w	r2, r2, #4
 80039dc:	60da      	str	r2, [r3, #12]
      break;
 80039de:	e012      	b.n	8003a06 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	60da      	str	r2, [r3, #12]
      break;
 80039f0:	e009      	b.n	8003a06 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0210 	orr.w	r2, r2, #16
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003a04:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 faa5 	bl	8004f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start_IT+0x186>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start_IT+0x186>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start_IT+0x186>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d841      	bhi.n	8003b34 <HAL_TIM_PWM_Stop_IT+0x94>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <HAL_TIM_PWM_Stop_IT+0x18>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003b35 	.word	0x08003b35
 8003ac0:	08003b35 	.word	0x08003b35
 8003ac4:	08003b35 	.word	0x08003b35
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003b35 	.word	0x08003b35
 8003ad0:	08003b35 	.word	0x08003b35
 8003ad4:	08003b35 	.word	0x08003b35
 8003ad8:	08003b11 	.word	0x08003b11
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003b35 	.word	0x08003b35
 8003ae8:	08003b23 	.word	0x08003b23
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0202 	bic.w	r2, r2, #2
 8003afa:	60da      	str	r2, [r3, #12]
      break;
 8003afc:	e01b      	b.n	8003b36 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0204 	bic.w	r2, r2, #4
 8003b0c:	60da      	str	r2, [r3, #12]
      break;
 8003b0e:	e012      	b.n	8003b36 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0208 	bic.w	r2, r2, #8
 8003b1e:	60da      	str	r2, [r3, #12]
      break;
 8003b20:	e009      	b.n	8003b36 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0210 	bic.w	r2, r2, #16
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003b34:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fa0d 	bl	8004f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_TIM_PWM_Stop_IT+0x150>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d117      	bne.n	8003b7e <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_TIM_PWM_Stop_IT+0xde>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	f240 4344 	movw	r3, #1092	; 0x444
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_TIM_PWM_Stop_IT+0xde>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_TIM_PWM_Stop_IT+0x10e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	f240 4344 	movw	r3, #1092	; 0x444
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_PWM_Stop_IT+0x10e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Stop_IT+0x11e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bbc:	e013      	b.n	8003be6 <HAL_TIM_PWM_Stop_IT+0x146>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Stop_IT+0x12e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	e00b      	b.n	8003be6 <HAL_TIM_PWM_Stop_IT+0x146>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Stop_IT+0x13e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bdc:	e003      	b.n	8003be6 <HAL_TIM_PWM_Stop_IT+0x146>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40012c00 	.word	0x40012c00

08003bf4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f839 	bl	8003c92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fd78 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_IC_Start+0x1a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e013      	b.n	8003ce6 <HAL_TIM_IC_Start+0x42>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_IC_Start+0x2a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e00b      	b.n	8003ce6 <HAL_TIM_IC_Start+0x42>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_IC_Start+0x3a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e003      	b.n	8003ce6 <HAL_TIM_IC_Start+0x42>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_TIM_IC_Start+0x54>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e013      	b.n	8003d20 <HAL_TIM_IC_Start+0x7c>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d104      	bne.n	8003d08 <HAL_TIM_IC_Start+0x64>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e00b      	b.n	8003d20 <HAL_TIM_IC_Start+0x7c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d104      	bne.n	8003d18 <HAL_TIM_IC_Start+0x74>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e003      	b.n	8003d20 <HAL_TIM_IC_Start+0x7c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d28:	7bbb      	ldrb	r3, [r7, #14]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06d      	b.n	8003e0e <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_IC_Start+0x9e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	e013      	b.n	8003d6a <HAL_TIM_IC_Start+0xc6>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_IC_Start+0xae>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	e00b      	b.n	8003d6a <HAL_TIM_IC_Start+0xc6>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_IC_Start+0xbe>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	e003      	b.n	8003d6a <HAL_TIM_IC_Start+0xc6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Start+0xd6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_IC_Start+0xfe>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_IC_Start+0xe6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d88:	e00b      	b.n	8003da2 <HAL_TIM_IC_Start+0xfe>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_IC_Start+0xf6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d98:	e003      	b.n	8003da2 <HAL_TIM_IC_Start+0xfe>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f8d7 	bl	8004f5e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_TIM_IC_Start+0x174>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <HAL_TIM_IC_Start+0x134>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc2:	d009      	beq.n	8003dd8 <HAL_TIM_IC_Start+0x134>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <HAL_TIM_IC_Start+0x178>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_TIM_IC_Start+0x134>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <HAL_TIM_IC_Start+0x17c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d111      	bne.n	8003dfc <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d010      	beq.n	8003e0c <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	e007      	b.n	8003e0c <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800

08003e24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0x1a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x42>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_IC_Start_IT+0x2a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x42>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_IC_Start_IT+0x3a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_IC_Start_IT+0x42>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_TIM_IC_Start_IT+0x54>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e013      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x7c>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d104      	bne.n	8003e88 <HAL_TIM_IC_Start_IT+0x64>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e00b      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x7c>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d104      	bne.n	8003e98 <HAL_TIM_IC_Start_IT+0x74>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_IC_Start_IT+0x7c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d102      	bne.n	8003eae <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d001      	beq.n	8003eb2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0b3      	b.n	800401a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0x9e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	e013      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xc6>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0xae>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	e00b      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xc6>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_IC_Start_IT+0xbe>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee0:	e003      	b.n	8003eea <HAL_TIM_IC_Start_IT+0xc6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_IC_Start_IT+0xd6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef8:	e013      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0xfe>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_IC_Start_IT+0xe6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	e00b      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0xfe>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_IC_Start_IT+0xf6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	e003      	b.n	8003f22 <HAL_TIM_IC_Start_IT+0xfe>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d841      	bhi.n	8003fac <HAL_TIM_IC_Start_IT+0x188>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_TIM_IC_Start_IT+0x10c>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003fad 	.word	0x08003fad
 8003f38:	08003fad 	.word	0x08003fad
 8003f3c:	08003fad 	.word	0x08003fad
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08003fad 	.word	0x08003fad
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08003fad 	.word	0x08003fad
 8003f60:	08003f9b 	.word	0x08003f9b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0202 	orr.w	r2, r2, #2
 8003f72:	60da      	str	r2, [r3, #12]
      break;
 8003f74:	e01b      	b.n	8003fae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0204 	orr.w	r2, r2, #4
 8003f84:	60da      	str	r2, [r3, #12]
      break;
 8003f86:	e012      	b.n	8003fae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0208 	orr.w	r2, r2, #8
 8003f96:	60da      	str	r2, [r3, #12]
      break;
 8003f98:	e009      	b.n	8003fae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0210 	orr.w	r2, r2, #16
 8003fa8:	60da      	str	r2, [r3, #12]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003fac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ffd1 	bl	8004f5e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_TIM_IC_Start_IT+0x200>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d009      	beq.n	8003fe4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_TIM_IC_Start_IT+0x204>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <HAL_TIM_IC_Start_IT+0x208>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d010      	beq.n	8004018 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004006:	e007      	b.n	8004018 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800

08004030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0202 	mvn.w	r2, #2
 800405c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc f882 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb41 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fb47 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d122      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d11b      	bne.n	80040e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0204 	mvn.w	r2, #4
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc f858 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb17 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb1d 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d122      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d11b      	bne.n	8004134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0208 	mvn.w	r2, #8
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc f82e 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 faed 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 faf3 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b10      	cmp	r3, #16
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0210 	mvn.w	r2, #16
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2208      	movs	r2, #8
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc f804 	bl	800017c <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fac3 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fac9 	bl	8004714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0201 	mvn.w	r2, #1
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa9e 	bl	80046f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 ff9c 	bl	8005118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fc96 	bl	8000b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b20      	cmp	r3, #32
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0220 	mvn.w	r2, #32
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 ff67 	bl	8005106 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004256:	2302      	movs	r3, #2
 8004258:	e082      	b.n	8004360 <HAL_TIM_IC_ConfigChannel+0x120>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6819      	ldr	r1, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f000 fcce 	bl	8004c18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020c 	bic.w	r2, r2, #12
 800428a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	619a      	str	r2, [r3, #24]
 800429e:	e05a      	b.n	8004356 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d11c      	bne.n	80042e0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f000 fd37 	bl	8004d28 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6999      	ldr	r1, [r3, #24]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	021a      	lsls	r2, r3, #8
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	e03a      	b.n	8004356 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11b      	bne.n	800431e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f000 fd82 	bl	8004dfe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 020c 	bic.w	r2, r2, #12
 8004308:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69d9      	ldr	r1, [r3, #28]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	61da      	str	r2, [r3, #28]
 800431c:	e01b      	b.n	8004356 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f000 fda1 	bl	8004e74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004340:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69d9      	ldr	r1, [r3, #28]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800437e:	2302      	movs	r3, #2
 8004380:	e0ac      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	f200 809f 	bhi.w	80044d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080044d1 	.word	0x080044d1
 80043a0:	080044d1 	.word	0x080044d1
 80043a4:	080044d1 	.word	0x080044d1
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	080044d1 	.word	0x080044d1
 80043b0:	080044d1 	.word	0x080044d1
 80043b4:	080044d1 	.word	0x080044d1
 80043b8:	0800444f 	.word	0x0800444f
 80043bc:	080044d1 	.word	0x080044d1
 80043c0:	080044d1 	.word	0x080044d1
 80043c4:	080044d1 	.word	0x080044d1
 80043c8:	0800448f 	.word	0x0800448f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fa0a 	bl	80047ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0208 	orr.w	r2, r2, #8
 80043e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0204 	bic.w	r2, r2, #4
 80043f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	619a      	str	r2, [r3, #24]
      break;
 800440a:	e062      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa50 	bl	80048b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6999      	ldr	r1, [r3, #24]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	619a      	str	r2, [r3, #24]
      break;
 800444c:	e041      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fa99 	bl	800498c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0208 	orr.w	r2, r2, #8
 8004468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0204 	bic.w	r2, r2, #4
 8004478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	61da      	str	r2, [r3, #28]
      break;
 800448c:	e021      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fae3 	bl	8004a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69d9      	ldr	r1, [r3, #28]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	61da      	str	r2, [r3, #28]
      break;
 80044ce:	e000      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80044d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_ConfigClockSource+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0b3      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x180>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004534:	d03e      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	f200 8087 	bhi.w	800464c <HAL_TIM_ConfigClockSource+0x168>
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004542:	f000 8085 	beq.w	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454a:	d87f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800454c:	2b70      	cmp	r3, #112	; 0x70
 800454e:	d01a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xa2>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d87b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004554:	2b60      	cmp	r3, #96	; 0x60
 8004556:	d050      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x116>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d877      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d03c      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xf6>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d873      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d058      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x136>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d86f      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d064      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d86b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d060      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d867      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x168>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
 8004580:	2b10      	cmp	r3, #16
 8004582:	d05a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004584:	e062      	b.n	800464c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f000 fcc3 	bl	8004f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
      break;
 80045b2:	e04e      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 fcac 	bl	8004f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e03b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fb70 	bl	8004ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2150      	movs	r1, #80	; 0x50
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fc7a 	bl	8004eec <TIM_ITRx_SetConfig>
      break;
 80045f8:	e02b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fbca 	bl	8004da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2160      	movs	r1, #96	; 0x60
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fc6a 	bl	8004eec <TIM_ITRx_SetConfig>
      break;
 8004618:	e01b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fb50 	bl	8004ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fc5a 	bl	8004eec <TIM_ITRx_SetConfig>
      break;
 8004638:	e00b      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 fc51 	bl	8004eec <TIM_ITRx_SetConfig>
        break;
 800464a:	e002      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004680:	2302      	movs	r3, #2
 8004682:	e031      	b.n	80046e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa30 	bl	8004afc <TIM_SlaveTimer_SetConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e018      	b.n	80046e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
	...

08004728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <TIM_Base_SetConfig+0xbc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <TIM_Base_SetConfig+0xc0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <TIM_Base_SetConfig+0xbc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <TIM_Base_SetConfig+0xc0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	615a      	str	r2, [r3, #20]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800

080047ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0201 	bic.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 0302 	bic.w	r3, r3, #2
 8004834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <TIM_OC1_SetConfig+0xc8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10c      	bne.n	8004862 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0308 	bic.w	r3, r3, #8
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <TIM_OC1_SetConfig+0xc8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d111      	bne.n	800488e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00

080048b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0210 	bic.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0320 	bic.w	r3, r3, #32
 8004902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC2_SetConfig+0xd0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10d      	bne.n	8004934 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <TIM_OC2_SetConfig+0xd0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d113      	bne.n	8004964 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	621a      	str	r2, [r3, #32]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00

0800498c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <TIM_OC3_SetConfig+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10d      	bne.n	8004a06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <TIM_OC3_SetConfig+0xd0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d113      	bne.n	8004a36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40012c00 	.word	0x40012c00

08004a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	031b      	lsls	r3, r3, #12
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0f      	ldr	r2, [pc, #60]	; (8004af8 <TIM_OC4_SetConfig+0x98>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d109      	bne.n	8004ad4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00

08004afc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b70      	cmp	r3, #112	; 0x70
 8004b40:	d01a      	beq.n	8004b78 <TIM_SlaveTimer_SetConfig+0x7c>
 8004b42:	2b70      	cmp	r3, #112	; 0x70
 8004b44:	d860      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b46:	2b60      	cmp	r3, #96	; 0x60
 8004b48:	d054      	beq.n	8004bf4 <TIM_SlaveTimer_SetConfig+0xf8>
 8004b4a:	2b60      	cmp	r3, #96	; 0x60
 8004b4c:	d85c      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b4e:	2b50      	cmp	r3, #80	; 0x50
 8004b50:	d046      	beq.n	8004be0 <TIM_SlaveTimer_SetConfig+0xe4>
 8004b52:	2b50      	cmp	r3, #80	; 0x50
 8004b54:	d858      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d019      	beq.n	8004b8e <TIM_SlaveTimer_SetConfig+0x92>
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d854      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b5e:	2b30      	cmp	r3, #48	; 0x30
 8004b60:	d054      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x110>
 8004b62:	2b30      	cmp	r3, #48	; 0x30
 8004b64:	d850      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d050      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x110>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d84c      	bhi.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04c      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x110>
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d04a      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004b76:	e047      	b.n	8004c08 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68d9      	ldr	r1, [r3, #12]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f000 f9ca 	bl	8004f20 <TIM_ETR_SetConfig>
      break;
 8004b8c:	e03f      	b.n	8004c0e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	d101      	bne.n	8004b9a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e03a      	b.n	8004c10 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
      break;
 8004bde:	e016      	b.n	8004c0e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f000 f86d 	bl	8004ccc <TIM_TI1_ConfigInputStage>
      break;
 8004bf2:	e00c      	b.n	8004c0e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f000 f8cd 	bl	8004da0 <TIM_TI2_ConfigInputStage>
      break;
 8004c06:	e002      	b.n	8004c0e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004c0c:	bf00      	nop
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <TIM_TI1_SetConfig+0xa8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_TI1_SetConfig+0x46>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d007      	beq.n	8004c5e <TIM_TI1_SetConfig+0x46>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <TIM_TI1_SetConfig+0xac>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_TI1_SetConfig+0x46>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <TIM_TI1_SetConfig+0xb0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d101      	bne.n	8004c62 <TIM_TI1_SetConfig+0x4a>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <TIM_TI1_SetConfig+0x4c>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e003      	b.n	8004c82 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f023 030a 	bic.w	r3, r3, #10
 8004c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 030a 	and.w	r3, r3, #10
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800

08004ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 030a 	bic.w	r3, r3, #10
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	031b      	lsls	r3, r3, #12
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 0210 	bic.w	r2, r3, #16
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	031b      	lsls	r3, r3, #12
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	621a      	str	r2, [r3, #32]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b087      	sub	sp, #28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	031b      	lsls	r3, r3, #12
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	031b      	lsls	r3, r3, #12
 8004ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f043 0307 	orr.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	609a      	str	r2, [r3, #8]
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2201      	movs	r2, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	401a      	ands	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	431a      	orrs	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e046      	b.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d009      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a10      	ldr	r2, [pc, #64]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10c      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800

08005064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e03d      	b.n	80050fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
	...

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	2600      	movs	r6, #0
 8005130:	4d0c      	ldr	r5, [pc, #48]	; (8005164 <__libc_init_array+0x38>)
 8005132:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	f000 f822 	bl	8005184 <_init>
 8005140:	2600      	movs	r6, #0
 8005142:	4d0a      	ldr	r5, [pc, #40]	; (800516c <__libc_init_array+0x40>)
 8005144:	4c0a      	ldr	r4, [pc, #40]	; (8005170 <__libc_init_array+0x44>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	080051bc 	.word	0x080051bc
 8005168:	080051bc 	.word	0x080051bc
 800516c:	080051bc 	.word	0x080051bc
 8005170:	080051c0 	.word	0x080051c0

08005174 <memset>:
 8005174:	4603      	mov	r3, r0
 8005176:	4402      	add	r2, r0
 8005178:	4293      	cmp	r3, r2
 800517a:	d100      	bne.n	800517e <memset+0xa>
 800517c:	4770      	bx	lr
 800517e:	f803 1b01 	strb.w	r1, [r3], #1
 8005182:	e7f9      	b.n	8005178 <memset+0x4>

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
