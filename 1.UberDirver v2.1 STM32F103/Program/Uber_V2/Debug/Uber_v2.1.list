
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006024  08006024  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006024  08006024  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800602c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001370  20000014  08006040  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001384  08006040  00021384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010663  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00032d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00033e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001876c  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001188e  00000000  00000000  0004d55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de20  00000000  00000000  0005edea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecc0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004758  00000000  00000000  000ecc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08005fe4 	.word	0x08005fe4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08005fe4 	.word	0x08005fe4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 8000734:	b084      	sub	sp, #16
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
 800073a:	f107 0c08 	add.w	ip, r7, #8
 800073e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <DRV_Init+0x3c>)
 8000744:	4618      	mov	r0, r3
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2258      	movs	r2, #88	; 0x58
 800074c:	4619      	mov	r1, r3
 800074e:	f005 fc33 	bl	8005fb8 <memcpy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	2104      	movs	r1, #4
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <DRV_Init+0x40>)
 8000758:	f002 fff4 	bl	8003744 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f001 fedb 	bl	8002518 <HAL_Delay>
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800076a:	b004      	add	sp, #16
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000030 	.word	0x20000030
 8000774:	40010c00 	.word	0x40010c00

08000778 <HAL_UART_RxCpltCallback>:
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;
uint8_t Rotations[1] = {0};
float step_delay = 255;	// (255+1)/32 = 8 times shorter t3 = (t1+t2)/8

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	481e      	ldr	r0, [pc, #120]	; (8000800 <HAL_UART_RxCpltCallback+0x88>)
 8000786:	f002 fff5 	bl	8003774 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);		// Chcemy obierac dalej
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_UART_RxCpltCallback+0x8c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2203      	movs	r2, #3
 8000790:	491d      	ldr	r1, [pc, #116]	; (8000808 <HAL_UART_RxCpltCallback+0x90>)
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fea4 	bl	80054e0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(huart, Rotations, 1);			// Odsylamy warrtosc obrotow
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_UART_RxCpltCallback+0x8c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	491b      	ldr	r1, [pc, #108]	; (800080c <HAL_UART_RxCpltCallback+0x94>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fe31 	bl	8005408 <HAL_UART_Transmit_DMA>
	Rotations[0] = 0;										// resetujemy zmienna obrotow
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_UART_RxCpltCallback+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	// DONT UPDATE FUNCTION WHEN WE GET SPECIAL FUNCTION
	if(rx_buffer[0] == SCAN_ONE_VARIABLE){
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_UART_RxCpltCallback+0x90>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b50      	cmp	r3, #80	; 0x50
 80007b2:	d102      	bne.n	80007ba <HAL_UART_RxCpltCallback+0x42>
		EnableScan();
 80007b4:	f000 f972 	bl	8000a9c <EnableScan>
 80007b8:	e00f      	b.n	80007da <HAL_UART_RxCpltCallback+0x62>
	} else
	{
		Function = rx_buffer[0];
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <HAL_UART_RxCpltCallback+0x90>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_RxCpltCallback+0x98>)
 80007c0:	701a      	strb	r2, [r3, #0]
		Power = rx_buffer[1];
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_UART_RxCpltCallback+0x90>)
 80007c4:	785a      	ldrb	r2, [r3, #1]
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 80007c8:	701a      	strb	r2, [r3, #0]
		step_delay = rx_buffer[2];
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_UART_RxCpltCallback+0x90>)
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd72 	bl	80002b8 <__aeabi_ui2f>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_RxCpltCallback+0xa0>)
 80007d8:	6013      	str	r3, [r2, #0]
	}
	if ((Function == 0) || Power == 0){		// Zatrzymanie awaryjne
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_UART_RxCpltCallback+0x98>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <HAL_UART_RxCpltCallback+0x72>
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_UART_RxCpltCallback+0x9c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d105      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0x7e>
		SetFloating_A();
 80007ea:	f000 fae9 	bl	8000dc0 <SetFloating_A>
		SetFloating_B();
 80007ee:	f000 faff 	bl	8000df0 <SetFloating_B>
		SetFloating_C();
 80007f2:	f000 fb15 	bl	8000e20 <SetFloating_C>
	}
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010800 	.word	0x40010800
 8000804:	20000088 	.word	0x20000088
 8000808:	2000008c 	.word	0x2000008c
 800080c:	20000094 	.word	0x20000094
 8000810:	2000008f 	.word	0x2000008f
 8000814:	20000090 	.word	0x20000090
 8000818:	20000004 	.word	0x20000004

0800081c <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	//memcpy(&huart, &_huart, sizeof(_huart)); // This shit does not work
	huart = _huart;
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <Application_Init+0x24>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <Application_Init+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2203      	movs	r2, #3
 8000830:	4904      	ldr	r1, [pc, #16]	; (8000844 <Application_Init+0x28>)
 8000832:	4618      	mov	r0, r3
 8000834:	f004 fe54 	bl	80054e0 <HAL_UART_Receive_DMA>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000088 	.word	0x20000088
 8000844:	2000008c 	.word	0x2000008c

08000848 <NormalControl>:
	SetFloating_B();
	SetFloating_C();
	IsRunning = 0;
}

void NormalControl(){
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
	if(Power == 0){								// wartosc = 0, stop
 800084e:	4b88      	ldr	r3, [pc, #544]	; (8000a70 <NormalControl+0x228>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d111      	bne.n	800087a <NormalControl+0x32>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	4886      	ldr	r0, [pc, #536]	; (8000a74 <NormalControl+0x22c>)
 800085c:	f002 ff72 	bl	8003744 <HAL_GPIO_WritePin>
		SetFloating_A();
 8000860:	f000 faae 	bl	8000dc0 <SetFloating_A>
		SetFloating_B();
 8000864:	f000 fac4 	bl	8000df0 <SetFloating_B>
		SetFloating_C();
 8000868:	f000 fada 	bl	8000e20 <SetFloating_C>
		IsRunning = 0;
 800086c:	4b82      	ldr	r3, [pc, #520]	; (8000a78 <NormalControl+0x230>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000872:	4b82      	ldr	r3, [pc, #520]	; (8000a7c <NormalControl+0x234>)
 8000874:	220f      	movs	r2, #15
 8000876:	801a      	strh	r2, [r3, #0]
 8000878:	e0e6      	b.n	8000a48 <NormalControl+0x200>
		//Function = rx_buffer[0];				// Zmiana funkcji jest mzliwa jedynie gdy silnik stoi
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 800087a:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <NormalControl+0x238>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b3f      	cmp	r3, #63	; 0x3f
 8000880:	f240 80d1 	bls.w	8000a26 <NormalControl+0x1de>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	487a      	ldr	r0, [pc, #488]	; (8000a74 <NormalControl+0x22c>)
 800088a:	f002 ff5b 	bl	8003744 <HAL_GPIO_WritePin>
		uint16_t pwm = Power*3;
 800088e:	4b78      	ldr	r3, [pc, #480]	; (8000a70 <NormalControl+0x228>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	4413      	add	r3, r2
 800089a:	81fb      	strh	r3, [r7, #14]
		if (pwm < 8) pwm = 8;				// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	d802      	bhi.n	80008a8 <NormalControl+0x60>
 80008a2:	2308      	movs	r3, #8
 80008a4:	81fb      	strh	r3, [r7, #14]
 80008a6:	e006      	b.n	80008b6 <NormalControl+0x6e>
		else if (pwm > (640-1)-8) pwm = (640-1);	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 80008ae:	d302      	bcc.n	80008b6 <NormalControl+0x6e>
 80008b0:	f240 237f 	movw	r3, #639	; 0x27f
 80008b4:	81fb      	strh	r3, [r7, #14]

		if (IsRunning == 0){					// Startujemy
 80008b6:	4b70      	ldr	r3, [pc, #448]	; (8000a78 <NormalControl+0x230>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d178      	bne.n	80009b0 <NormalControl+0x168>
			int Speed;
			int cnt = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
			int val = 8;
 80008c2:	2308      	movs	r3, #8
 80008c4:	603b      	str	r3, [r7, #0]
			switch (Function){
 80008c6:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <NormalControl+0x238>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3b42      	subs	r3, #66	; 0x42
 80008cc:	2b05      	cmp	r3, #5
 80008ce:	d870      	bhi.n	80009b2 <NormalControl+0x16a>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <NormalControl+0x90>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008f1 	.word	0x080008f1
 80008dc:	08000951 	.word	0x08000951
 80008e0:	080009b3 	.word	0x080009b3
 80008e4:	080009b3 	.word	0x080009b3
 80008e8:	080009b3 	.word	0x080009b3
 80008ec:	080009b3 	.word	0x080009b3
			case SET_MOTOR_1_SPEED_FORWAD_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 80008f0:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80008f4:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 80008f6:	e016      	b.n	8000926 <NormalControl+0xde>
					SixStep(Speed, val);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	b292      	uxth	r2, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 faa5 	bl	8000e50 <SixStep>
					++cnt;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b04      	cmp	r3, #4
 8000910:	d104      	bne.n	800091c <NormalControl+0xd4>
						++val;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000922:	3b1f      	subs	r3, #31
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800092c:	dce4      	bgt.n	80008f8 <NormalControl+0xb0>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800092e:	e00a      	b.n	8000946 <NormalControl+0xfe>
					SixStep(Speed, val);
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	b292      	uxth	r2, r2
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fa89 	bl	8000e50 <SixStep>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800094c:	dcf0      	bgt.n	8000930 <NormalControl+0xe8>
				}
				break;
 800094e:	e030      	b.n	80009b2 <NormalControl+0x16a>
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 8000950:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000954:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000956:	e016      	b.n	8000986 <NormalControl+0x13e>
					SixStep_rev(Speed, val);
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	b292      	uxth	r2, r2
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fac1 	bl	8000ee8 <SixStep_rev>
					++cnt;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3301      	adds	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d104      	bne.n	800097c <NormalControl+0x134>
						++val;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000982:	3b1f      	subs	r3, #31
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800098c:	dce4      	bgt.n	8000958 <NormalControl+0x110>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800098e:	e00a      	b.n	80009a6 <NormalControl+0x15e>
					SixStep_rev(Speed, val);
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	b292      	uxth	r2, r2
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f000 faa5 	bl	8000ee8 <SixStep_rev>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80009ac:	dcf0      	bgt.n	8000990 <NormalControl+0x148>
				}
				break;
 80009ae:	e000      	b.n	80009b2 <NormalControl+0x16a>
				break;
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_3: {
				break;
			}
			default: {
 80009b0:	bf00      	nop
				// Błąd
			}
			}
		}
		// Kręcimy normalnie
		if(Function % 2 == 1){					// Kręcimy do tylu
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <NormalControl+0x238>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d014      	beq.n	80009ea <NormalControl+0x1a2>
			ticks = BEMF_SixStep_TEST_3_rev(pwm, ticks,step_delay/16);
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <NormalControl+0x234>)
 80009c2:	881c      	ldrh	r4, [r3, #0]
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <NormalControl+0x23c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd7f 	bl	80004d0 <__aeabi_fdiv>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	4621      	mov	r1, r4
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fb68 	bl	80010b0 <BEMF_SixStep_TEST_3_rev>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <NormalControl+0x234>)
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	e013      	b.n	8000a12 <NormalControl+0x1ca>

		}else{									// Kręcimy do przodu
			ticks = BEMF_SixStep_TEST_3_rev(pwm, ticks,step_delay/16);
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <NormalControl+0x234>)
 80009ec:	881c      	ldrh	r4, [r3, #0]
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <NormalControl+0x23c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fd6a 	bl	80004d0 <__aeabi_fdiv>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	4621      	mov	r1, r4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fb53 	bl	80010b0 <BEMF_SixStep_TEST_3_rev>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <NormalControl+0x234>)
 8000a10:	801a      	strh	r2, [r3, #0]
		}
		Rotations[0] += 1;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <NormalControl+0x240>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <NormalControl+0x240>)
 8000a1c:	701a      	strb	r2, [r3, #0]

		IsRunning = 1;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <NormalControl+0x230>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e010      	b.n	8000a48 <NormalControl+0x200>
	}else {								// Nie funkcja z wartoscia -> Bład
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <NormalControl+0x22c>)
 8000a2c:	f002 fe8a 	bl	8003744 <HAL_GPIO_WritePin>
		SetFloating_A();
 8000a30:	f000 f9c6 	bl	8000dc0 <SetFloating_A>
		SetFloating_B();
 8000a34:	f000 f9dc 	bl	8000df0 <SetFloating_B>
		SetFloating_C();
 8000a38:	f000 f9f2 	bl	8000e20 <SetFloating_C>
		IsRunning = 0;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <NormalControl+0x230>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <NormalControl+0x234>)
 8000a44:	220f      	movs	r2, #15
 8000a46:	801a      	strh	r2, [r3, #0]
	}
	if (IsScanReady() == 1){
 8000a48:	f000 f834 	bl	8000ab4 <IsScanReady>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d10a      	bne.n	8000a68 <NormalControl+0x220>
		HAL_UART_Transmit_DMA(huart, GetScanData(), 4096);
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <NormalControl+0x244>)
 8000a54:	681c      	ldr	r4, [r3, #0]
 8000a56:	f000 f83f 	bl	8000ad8 <GetScanData>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	4619      	mov	r1, r3
 8000a62:	4620      	mov	r0, r4
 8000a64:	f004 fcd0 	bl	8005408 <HAL_UART_Transmit_DMA>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000090 	.word	0x20000090
 8000a74:	40011400 	.word	0x40011400
 8000a78:	20000091 	.word	0x20000091
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	2000008f 	.word	0x2000008f
 8000a84:	20000004 	.word	0x20000004
 8000a88:	20000094 	.word	0x20000094
 8000a8c:	20000088 	.word	0x20000088

08000a90 <Application_Update>:

void Application_Update(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	}
	else if(SCOTTER_PROGRAM){
		ScotterProgram();
	}
	else if(NORMAL_CONTROL){
		NormalControl();
 8000a94:	f7ff fed8 	bl	8000848 <NormalControl>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
		SetZero_A();
		SetZero_B();
		SetZero_C();
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <EnableScan>:
uint8_t Scan_Data[4096];
uint16_t Scan_iter = 0;

char FloatingPhasae = 0;

void EnableScan(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	Scan_Is_enabled = 1;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <EnableScan+0x14>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000c0 	.word	0x200000c0

08000ab4 <IsScanReady>:

uint8_t IsScanReady(){
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	if (Scan_iter == 4095) return 1;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <IsScanReady+0x20>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d101      	bne.n	8000ac8 <IsScanReady+0x14>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <IsScanReady+0x16>
	else return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000c2 	.word	0x200000c2

08000ad8 <GetScanData>:

uint8_t* GetScanData(){
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	Scan_iter = 0;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <GetScanData+0x1c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	801a      	strh	r2, [r3, #0]
	Scan_Is_enabled = 0;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <GetScanData+0x20>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	return Scan_Data;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <GetScanData+0x24>)
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200000c2 	.word	0x200000c2
 8000af8:	200000c0 	.word	0x200000c0
 8000afc:	200000c8 	.word	0x200000c8

08000b00 <BEMF_Observer>:

void BEMF_Observer(){
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
	// Input Block
	uint16_t V_A = ADC_data[0];
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <BEMF_Observer+0x8c>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	81bb      	strh	r3, [r7, #12]
	uint16_t V_B = ADC_data[1];
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <BEMF_Observer+0x8c>)
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	817b      	strh	r3, [r7, #10]
	uint16_t V_C = ADC_data[2];
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <BEMF_Observer+0x8c>)
 8000b14:	889b      	ldrh	r3, [r3, #4]
 8000b16:	813b      	strh	r3, [r7, #8]
	uint16_t V_DC = ADC_data[3];
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <BEMF_Observer+0x8c>)
 8000b1a:	88db      	ldrh	r3, [r3, #6]
 8000b1c:	80fb      	strh	r3, [r7, #6]
	// Floating Phase Detect Block
	uint16_t V_Floating = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	81fb      	strh	r3, [r7, #14]
	switch(FloatingPhasae){
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <BEMF_Observer+0x90>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b43      	cmp	r3, #67	; 0x43
 8000b28:	d00c      	beq.n	8000b44 <BEMF_Observer+0x44>
 8000b2a:	2b43      	cmp	r3, #67	; 0x43
 8000b2c:	dc0d      	bgt.n	8000b4a <BEMF_Observer+0x4a>
 8000b2e:	2b41      	cmp	r3, #65	; 0x41
 8000b30:	d002      	beq.n	8000b38 <BEMF_Observer+0x38>
 8000b32:	2b42      	cmp	r3, #66	; 0x42
 8000b34:	d003      	beq.n	8000b3e <BEMF_Observer+0x3e>
 8000b36:	e008      	b.n	8000b4a <BEMF_Observer+0x4a>
		case 'A':{
			V_Floating = V_A;
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	81fb      	strh	r3, [r7, #14]
			break;
 8000b3c:	e005      	b.n	8000b4a <BEMF_Observer+0x4a>
		}
		case 'B':{
			V_Floating = V_B;
 8000b3e:	897b      	ldrh	r3, [r7, #10]
 8000b40:	81fb      	strh	r3, [r7, #14]
			break;
 8000b42:	e002      	b.n	8000b4a <BEMF_Observer+0x4a>
		}
		case 'C':{
			V_Floating = V_C;
 8000b44:	893b      	ldrh	r3, [r7, #8]
 8000b46:	81fb      	strh	r3, [r7, #14]
			break;
 8000b48:	bf00      	nop
		}
	}

	if (Scan_Is_enabled > 0){
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <BEMF_Observer+0x94>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d017      	beq.n	8000b82 <BEMF_Observer+0x82>
		Scan_Data[Scan_iter] = V_Floating/16;
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	b299      	uxth	r1, r3
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <BEMF_Observer+0x98>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	b2c9      	uxtb	r1, r1
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <BEMF_Observer+0x9c>)
 8000b62:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <BEMF_Observer+0x98>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <BEMF_Observer+0x98>)
 8000b6e:	801a      	strh	r2, [r3, #0]
		if (Scan_iter == 4095) Scan_Is_enabled = 0;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <BEMF_Observer+0x98>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d102      	bne.n	8000b82 <BEMF_Observer+0x82>
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <BEMF_Observer+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	200000ac 	.word	0x200000ac
 8000b90:	200000c4 	.word	0x200000c4
 8000b94:	200000c0 	.word	0x200000c0
 8000b98:	200000c2 	.word	0x200000c2
 8000b9c:	200000c8 	.word	0x200000c8

08000ba0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	BEMF_Observer();
 8000ba8:	f7ff ffaa 	bl	8000b00 <BEMF_Observer>
	// Collect data
	uint8_t div = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
			//TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(htim1);
			//TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(htim2);
			tim_num++;
		}
	}
	IsNewVal = 1;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	cnt ++;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000ba 	.word	0x200000ba
 8000bcc:	200000bc 	.word	0x200000bc

08000bd0 <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 8000bde:	4a35      	ldr	r2, [pc, #212]	; (8000cb4 <Control_Init+0xe4>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 8000be4:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <Control_Init+0xe8>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000bea:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <Control_Init+0xec>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 8000bf0:	4a33      	ldr	r2, [pc, #204]	; (8000cc0 <Control_Init+0xf0>)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 8000bf6:	4a33      	ldr	r2, [pc, #204]	; (8000cc4 <Control_Init+0xf4>)
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4831      	ldr	r0, [pc, #196]	; (8000cc8 <Control_Init+0xf8>)
 8000c02:	f002 fd9f 	bl	8003744 <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <Control_Init+0xf0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fb70 	bl	80042f0 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <Control_Init+0xe8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fc0c 	bl	8004434 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2); 	// LOW POLARITY
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <Control_Init+0xe8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2104      	movs	r1, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fc06 	bl	8004434 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <Control_Init+0xec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fc00 	bl	8004434 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);	// LOW POLARITY
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <Control_Init+0xec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fbfa 	bl	8004434 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <Control_Init+0xe4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2104      	movs	r1, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fbf4 	bl	8004434 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  	// LOW POLARITY
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <Control_Init+0xe4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fbee 	bl	8004434 <HAL_TIM_PWM_Start>

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <Control_Init+0xe4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fbe8 	bl	8004434 <HAL_TIM_PWM_Start>

	// Control timers basic synchronisation
	htim1->Instance->CNT = 0;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <Control_Init+0xe4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <Control_Init+0xe8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <Control_Init+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24


	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 7);
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <Control_Init+0xf4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2207      	movs	r2, #7
 8000c88:	4910      	ldr	r1, [pc, #64]	; (8000ccc <Control_Init+0xfc>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fd40 	bl	8002710 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <Control_Init+0xe4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2108      	movs	r1, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc6e 	bl	8004578 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 3);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <Control_Init+0xe4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f001 fc36 	bl	8002518 <HAL_Delay>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	2000009c 	.word	0x2000009c
 8000cbc:	200000a0 	.word	0x200000a0
 8000cc0:	200000a4 	.word	0x200000a4
 8000cc4:	200000a8 	.word	0x200000a8
 8000cc8:	40011400 	.word	0x40011400
 8000ccc:	200000ac 	.word	0x200000ac

08000cd0 <SetZero_A>:

void SetZero_A(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SetZero_A+0x20>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, 0);
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SetZero_A+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	2000009c 	.word	0x2000009c

08000cf4 <SetZero_B>:

void SetZero_B(){
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SetZero_B+0x20>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, 0);
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SetZero_B+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	200000a0 	.word	0x200000a0

08000d18 <SetZero_C>:

void SetZero_C(){
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SetZero_C+0x20>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, 0);
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SetZero_C+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000098 	.word	0x20000098

08000d3c <SetPulse_AH>:
///////////////////
void SetPulse_AH(uint16_t value){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <SetPulse_AH+0x28>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, value);
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SetPulse_AH+0x28>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	2000009c 	.word	0x2000009c

08000d68 <SetPulse_BH>:

void SetPulse_BH(uint16_t value){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <SetPulse_BH+0x28>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, value);
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SetPulse_BH+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200000a0 	.word	0x200000a0

08000d94 <SetPulse_CH>:

void SetPulse_CH(uint16_t value){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <SetPulse_CH+0x28>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	88fa      	ldrh	r2, [r7, #6]
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, value);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SetPulse_CH+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000098 	.word	0x20000098

08000dc0 <SetFloating_A>:
///////////////////
void SetFloating_A(){
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	FloatingPhasae = 'A';
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <SetFloating_A+0x28>)
 8000dc6:	2241      	movs	r2, #65	; 0x41
 8000dc8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <SetFloating_A+0x2c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, PWM_COUNTER);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SetFloating_A+0x2c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f240 227f 	movw	r2, #639	; 0x27f
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	200000c4 	.word	0x200000c4
 8000dec:	2000009c 	.word	0x2000009c

08000df0 <SetFloating_B>:

void SetFloating_B(){
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	FloatingPhasae = 'B';
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <SetFloating_B+0x28>)
 8000df6:	2242      	movs	r2, #66	; 0x42
 8000df8:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SetFloating_B+0x2c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, PWM_COUNTER);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SetFloating_B+0x2c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f240 227f 	movw	r2, #639	; 0x27f
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	200000c4 	.word	0x200000c4
 8000e1c:	200000a0 	.word	0x200000a0

08000e20 <SetFloating_C>:

void SetFloating_C(){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	FloatingPhasae = 'C';
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <SetFloating_C+0x28>)
 8000e26:	2243      	movs	r2, #67	; 0x43
 8000e28:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SetFloating_C+0x2c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, PWM_COUNTER);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SetFloating_C+0x2c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f240 227f 	movw	r2, #639	; 0x27f
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	20000098 	.word	0x20000098

08000e50 <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff6c 	bl	8000d3c <SetPulse_AH>
	SetZero_B();
 8000e64:	f7ff ff46 	bl	8000cf4 <SetZero_B>
	SetFloating_C();
 8000e68:	f7ff ffda 	bl	8000e20 <SetFloating_C>
	Delay_Tick(Speed);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fa91 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_AH(Value);
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff61 	bl	8000d3c <SetPulse_AH>
	SetFloating_B();
 8000e7a:	f7ff ffb9 	bl	8000df0 <SetFloating_B>
	SetZero_C();
 8000e7e:	f7ff ff4b 	bl	8000d18 <SetZero_C>
	Delay_Tick(Speed);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fa86 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_A();
 8000e88:	f7ff ff9a 	bl	8000dc0 <SetFloating_A>
	SetPulse_BH(Value);
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff6a 	bl	8000d68 <SetPulse_BH>
	SetZero_C();
 8000e94:	f7ff ff40 	bl	8000d18 <SetZero_C>
	Delay_Tick(Speed);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fa7b 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_A();
 8000e9e:	f7ff ff17 	bl	8000cd0 <SetZero_A>
	SetPulse_BH(Value);
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <SetPulse_BH>
	SetFloating_C();
 8000eaa:	f7ff ffb9 	bl	8000e20 <SetFloating_C>
	Delay_Tick(Speed);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fa70 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_A();
 8000eb4:	f7ff ff0c 	bl	8000cd0 <SetZero_A>
	SetFloating_B();
 8000eb8:	f7ff ff9a 	bl	8000df0 <SetFloating_B>
	SetPulse_CH(Value);
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff68 	bl	8000d94 <SetPulse_CH>
	Delay_Tick(Speed);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fa65 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_A();
 8000eca:	f7ff ff79 	bl	8000dc0 <SetFloating_A>
	SetZero_B();
 8000ece:	f7ff ff11 	bl	8000cf4 <SetZero_B>
	SetPulse_CH(Value);
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <SetPulse_CH>
	Delay_Tick(Speed);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fa5a 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SixStep_rev>:

void SixStep_rev(uint32_t Speed, uint16_t Value){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_CH(Value);
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff4c 	bl	8000d94 <SetPulse_CH>
	SetZero_B();
 8000efc:	f7ff fefa 	bl	8000cf4 <SetZero_B>
	SetFloating_A();
 8000f00:	f7ff ff5e 	bl	8000dc0 <SetFloating_A>
	Delay_Tick(Speed);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fa45 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_CH(Value);
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff41 	bl	8000d94 <SetPulse_CH>
	SetFloating_B();
 8000f12:	f7ff ff6d 	bl	8000df0 <SetFloating_B>
	SetZero_A();
 8000f16:	f7ff fedb 	bl	8000cd0 <SetZero_A>
	Delay_Tick(Speed);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fa3a 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_C();
 8000f20:	f7ff ff7e 	bl	8000e20 <SetFloating_C>
	SetPulse_BH(Value);
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff1e 	bl	8000d68 <SetPulse_BH>
	SetZero_A();
 8000f2c:	f7ff fed0 	bl	8000cd0 <SetZero_A>
	Delay_Tick(Speed);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 fa2f 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_C();
 8000f36:	f7ff feef 	bl	8000d18 <SetZero_C>
	SetPulse_BH(Value);
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff13 	bl	8000d68 <SetPulse_BH>
	SetFloating_A();
 8000f42:	f7ff ff3d 	bl	8000dc0 <SetFloating_A>
	Delay_Tick(Speed);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fa24 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_C();
 8000f4c:	f7ff fee4 	bl	8000d18 <SetZero_C>
	SetFloating_B();
 8000f50:	f7ff ff4e 	bl	8000df0 <SetFloating_B>
	SetPulse_AH(Value);
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fef0 	bl	8000d3c <SetPulse_AH>
	Delay_Tick(Speed);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa19 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_C();
 8000f62:	f7ff ff5d 	bl	8000e20 <SetFloating_C>
	SetZero_B();
 8000f66:	f7ff fec5 	bl	8000cf4 <SetZero_B>
	SetPulse_AH(Value);
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fee5 	bl	8000d3c <SetPulse_AH>
	Delay_Tick(Speed);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fa0e 	bl	8001394 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <WaitForCross>:

uint32_t WaitForCross(uint8_t num, uint8_t val){
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <WaitForCross+0x90>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] > val+ADC_data[3]/2){
 8000f9e:	e01b      	b.n	8000fd8 <WaitForCross+0x58>
		if (__HAL_TIM_GET_COUNTER(htim4) > 0x7fff){
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <WaitForCross+0x90>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fac:	d30b      	bcc.n	8000fc6 <WaitForCross+0x46>
			ret_val += __HAL_TIM_GET_COUNTER(htim4);
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <WaitForCross+0x90>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(htim4,0);
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <WaitForCross+0x90>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(htim4) ) > MAX_TICKS){
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <WaitForCross+0x90>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fd6:	d20d      	bcs.n	8000ff4 <WaitForCross+0x74>
	while(ADC_data[num] > val+ADC_data[3]/2){
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <WaitForCross+0x94>)
 8000fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <WaitForCross+0x94>)
 8000fe6:	88d2      	ldrh	r2, [r2, #6]
 8000fe8:	0852      	lsrs	r2, r2, #1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	4413      	add	r3, r2
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	dcd6      	bgt.n	8000fa0 <WaitForCross+0x20>
 8000ff2:	e000      	b.n	8000ff6 <WaitForCross+0x76>
			break;
 8000ff4:	bf00      	nop
			}
			IsNewVal = 0;
		}
	}*/

	ret_val += __HAL_TIM_GET_COUNTER(htim4);
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <WaitForCross+0x90>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
	return ret_val;
 8001004:	68fb      	ldr	r3, [r7, #12]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	200000a4 	.word	0x200000a4
 8001014:	200000ac 	.word	0x200000ac

08001018 <WaitForCross2>:

uint32_t WaitForCross2(uint8_t num, uint8_t val){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <WaitForCross2+0x90>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] < val+ADC_data[3]/2){
 8001036:	e01b      	b.n	8001070 <WaitForCross2+0x58>
		if (__HAL_TIM_GET_COUNTER(htim4) > 0x7fff){
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <WaitForCross2+0x90>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001044:	d30b      	bcc.n	800105e <WaitForCross2+0x46>
			ret_val += __HAL_TIM_GET_COUNTER(htim4);
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <WaitForCross2+0x90>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(htim4,0);
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <WaitForCross2+0x90>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(htim4) ) > MAX_TICKS){
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <WaitForCross2+0x90>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800106e:	d20d      	bcs.n	800108c <WaitForCross2+0x74>
	while(ADC_data[num] < val+ADC_data[3]/2){
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <WaitForCross2+0x94>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	4619      	mov	r1, r3
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <WaitForCross2+0x94>)
 800107e:	88d2      	ldrh	r2, [r2, #6]
 8001080:	0852      	lsrs	r2, r2, #1
 8001082:	b292      	uxth	r2, r2
 8001084:	4413      	add	r3, r2
 8001086:	4299      	cmp	r1, r3
 8001088:	dbd6      	blt.n	8001038 <WaitForCross2+0x20>
 800108a:	e000      	b.n	800108e <WaitForCross2+0x76>
			break;
 800108c:	bf00      	nop
		}
	}

	ret_val += __HAL_TIM_GET_COUNTER(htim4);
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <WaitForCross2+0x90>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	return ret_val;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	200000ac 	.word	0x200000ac

080010b0 <BEMF_SixStep_TEST_3_rev>:

	//data[ data_num-1] = 0;
	return ticks;
}

uint32_t BEMF_SixStep_TEST_3_rev(uint16_t Value, uint16_t LastTicks, float div){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	603a      	str	r2, [r7, #0]
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	460b      	mov	r3, r1
 80010be:	80bb      	strh	r3, [r7, #4]

	if (div < 1) div = 1;
 80010c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f7ff faed 	bl	80006a4 <__aeabi_fcmplt>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <BEMF_SixStep_TEST_3_rev+0x26>
 80010d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d4:	603b      	str	r3, [r7, #0]
	float ticks = 0;
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
	//float div = 1.5;//1.5;
	////////////////////////////////////////////////////////// 1
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_CH(Value);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe58 	bl	8000d94 <SetPulse_CH>
	SetZero_B();
 80010e4:	f7ff fe06 	bl	8000cf4 <SetZero_B>
	SetFloating_A();
 80010e8:	f7ff fe6a 	bl	8000dc0 <SetFloating_A>
	ticks = LastTicks/2;	// 1/4
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	085b      	lsrs	r3, r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f8e4 	bl	80002c0 <__aeabi_i2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff faf9 	bl	80006f4 <__aeabi_f2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f945 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross(0,0);
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ff37 	bl	8000f80 <WaitForCross>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8cf 	bl	80002b8 <__aeabi_ui2f>
 800111a:	4603      	mov	r3, r0
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff f81a 	bl	8000158 <__addsf3>
 8001124:	4603      	mov	r3, r0
 8001126:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 8001128:	4999      	ldr	r1, [pc, #612]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff faba 	bl	80006a4 <__aeabi_fcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <BEMF_SixStep_TEST_3_rev+0x9e>
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff f9c9 	bl	80004d0 <__aeabi_fdiv>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fad7 	bl	80006f4 <__aeabi_f2uiz>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f923 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 2
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_CH(Value);
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe1f 	bl	8000d94 <SetPulse_CH>
	SetFloating_B();
 8001156:	f7ff fe4b 	bl	8000df0 <SetFloating_B>
	SetZero_A();
 800115a:	f7ff fdb9 	bl	8000cd0 <SetZero_A>
	ticks = ticks/2;	// 1/4
 800115e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff f9b4 	bl	80004d0 <__aeabi_fdiv>
 8001168:	4603      	mov	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fac1 	bl	80006f4 <__aeabi_f2uiz>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f90d 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross2(1,0);	// 1/2
 800117a:	2100      	movs	r1, #0
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ff4b 	bl	8001018 <WaitForCross2>
 8001182:	4603      	mov	r3, r0
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f897 	bl	80002b8 <__aeabi_ui2f>
 800118a:	4603      	mov	r3, r0
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7fe ffe2 	bl	8000158 <__addsf3>
 8001194:	4603      	mov	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 8001198:	497d      	ldr	r1, [pc, #500]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f7ff fa82 	bl	80006a4 <__aeabi_fcmplt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <BEMF_SixStep_TEST_3_rev+0x10e>
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f7ff f991 	bl	80004d0 <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fa9f 	bl	80006f4 <__aeabi_f2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f8eb 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 3
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_C();
 80011be:	f7ff fe2f 	bl	8000e20 <SetFloating_C>
	SetPulse_BH(Value);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdcf 	bl	8000d68 <SetPulse_BH>
	SetZero_A();
 80011ca:	f7ff fd81 	bl	8000cd0 <SetZero_A>
	ticks = ticks/2;	// 1/4
 80011ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f97c 	bl	80004d0 <__aeabi_fdiv>
 80011d8:	4603      	mov	r3, r0
 80011da:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff fa89 	bl	80006f4 <__aeabi_f2uiz>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8d5 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross(2,0);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2002      	movs	r0, #2
 80011ee:	f7ff fec7 	bl	8000f80 <WaitForCross>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f85f 	bl	80002b8 <__aeabi_ui2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7fe ffaa 	bl	8000158 <__addsf3>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 8001208:	4961      	ldr	r1, [pc, #388]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff fa4a 	bl	80006a4 <__aeabi_fcmplt>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <BEMF_SixStep_TEST_3_rev+0x17e>
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff f959 	bl	80004d0 <__aeabi_fdiv>
 800121e:	4603      	mov	r3, r0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fa67 	bl	80006f4 <__aeabi_f2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f8b3 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 4
	//if(rx_buffer[0] == 0) return 0;
	SetZero_C();
 800122e:	f7ff fd73 	bl	8000d18 <SetZero_C>
	SetPulse_BH(Value);
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd97 	bl	8000d68 <SetPulse_BH>
	SetFloating_A();
 800123a:	f7ff fdc1 	bl	8000dc0 <SetFloating_A>
	ticks = ticks/2;	// 1/4
 800123e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff f944 	bl	80004d0 <__aeabi_fdiv>
 8001248:	4603      	mov	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fa51 	bl	80006f4 <__aeabi_f2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f89d 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross2(0,0);
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fedb 	bl	8001018 <WaitForCross2>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f827 	bl	80002b8 <__aeabi_ui2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7fe ff72 	bl	8000158 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 8001278:	4945      	ldr	r1, [pc, #276]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff fa12 	bl	80006a4 <__aeabi_fcmplt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <BEMF_SixStep_TEST_3_rev+0x1ee>
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff f921 	bl	80004d0 <__aeabi_fdiv>
 800128e:	4603      	mov	r3, r0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fa2f 	bl	80006f4 <__aeabi_f2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f87b 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 5
	//if(rx_buffer[0] == 0) return 0;
	SetZero_C();
 800129e:	f7ff fd3b 	bl	8000d18 <SetZero_C>
	SetFloating_B();
 80012a2:	f7ff fda5 	bl	8000df0 <SetFloating_B>
	SetPulse_AH(Value);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd47 	bl	8000d3c <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff f90c 	bl	80004d0 <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff fa19 	bl	80006f4 <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f865 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross(1,0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fe57 	bl	8000f80 <WaitForCross>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ffef 	bl	80002b8 <__aeabi_ui2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7fe ff3a 	bl	8000158 <__addsf3>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 80012e8:	4929      	ldr	r1, [pc, #164]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff f9da 	bl	80006a4 <__aeabi_fcmplt>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <BEMF_SixStep_TEST_3_rev+0x25e>
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff f8e9 	bl	80004d0 <__aeabi_fdiv>
 80012fe:	4603      	mov	r3, r0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f9f7 	bl	80006f4 <__aeabi_f2uiz>
 8001306:	4603      	mov	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f843 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 6
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_C();
 800130e:	f7ff fd87 	bl	8000e20 <SetFloating_C>
	SetZero_B();
 8001312:	f7ff fcef 	bl	8000cf4 <SetZero_B>
	SetPulse_AH(Value);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd0f 	bl	8000d3c <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 800131e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff f8d4 	bl	80004d0 <__aeabi_fdiv>
 8001328:	4603      	mov	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff f9e1 	bl	80006f4 <__aeabi_f2uiz>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82d 	bl	8001394 <Delay_Tick>
	ticks += WaitForCross2(2,0);
 800133a:	2100      	movs	r1, #0
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe6b 	bl	8001018 <WaitForCross2>
 8001342:	4603      	mov	r3, r0
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ffb7 	bl	80002b8 <__aeabi_ui2f>
 800134a:	4603      	mov	r3, r0
 800134c:	4619      	mov	r1, r3
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7fe ff02 	bl	8000158 <__addsf3>
 8001354:	4603      	mov	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]
	if (div < 10 ) Delay_Tick(ticks/(float)div);
 8001358:	490d      	ldr	r1, [pc, #52]	; (8001390 <BEMF_SixStep_TEST_3_rev+0x2e0>)
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f7ff f9a2 	bl	80006a4 <__aeabi_fcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <BEMF_SixStep_TEST_3_rev+0x2ce>
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff f8b1 	bl	80004d0 <__aeabi_fdiv>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f9bf 	bl	80006f4 <__aeabi_f2uiz>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f80b 	bl	8001394 <Delay_Tick>

	//data[ data_num-1] = 0;
	return ticks;
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff f9b8 	bl	80006f4 <__aeabi_f2uiz>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	41200000 	.word	0x41200000

08001394 <Delay_Tick>:
		SixStep(Speed, Value);
	}
}


void Delay_Tick(uint32_t val){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim4,0);
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <Delay_Tick+0x6c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (val > MAX_TICKS) val = MAX_TICKS;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013ac:	d315      	bcc.n	80013da <Delay_Tick+0x46>
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <Delay_Tick+0x70>)
 80013b0:	607b      	str	r3, [r7, #4]
	while(val > 0x00007fff){
 80013b2:	e012      	b.n	80013da <Delay_Tick+0x46>
		val -= 0x00007fff;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80013ba:	3b7f      	subs	r3, #127	; 0x7f
 80013bc:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(htim4) < 0x7fff);
 80013be:	bf00      	nop
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <Delay_Tick+0x6c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d9f7      	bls.n	80013c0 <Delay_Tick+0x2c>
		__HAL_TIM_SET_COUNTER(htim4,0);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <Delay_Tick+0x6c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e0:	d2e8      	bcs.n	80013b4 <Delay_Tick+0x20>
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
 80013e2:	bf00      	nop
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <Delay_Tick+0x6c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8f8      	bhi.n	80013e4 <Delay_Tick+0x50>
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000a4 	.word	0x200000a4
 8001404:	000fffff 	.word	0x000fffff

08001408 <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	uint8_t test = __HAL_TIM_GET_COUNTER(htim1);
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_TriggerCallback+0x44>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	73fb      	strb	r3, [r7, #15]
	if(htim->Instance == TIM1){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_TIM_TriggerCallback+0x48>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d10d      	bne.n	8001440 <HAL_TIM_TriggerCallback+0x38>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7f1b      	ldrb	r3, [r3, #28]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d109      	bne.n	8001440 <HAL_TIM_TriggerCallback+0x38>
			test = __HAL_TIM_GET_COUNTER(htim1);
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_TIM_TriggerCallback+0x44>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	73fb      	strb	r3, [r7, #15]
			test = __HAL_TIM_GET_COUNTER(htim1);
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_TIM_TriggerCallback+0x44>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000098 	.word	0x20000098
 8001450:	40012c00 	.word	0x40012c00

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b093      	sub	sp, #76	; 0x4c
 8001458:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 fffb 	bl	8002454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f84d 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 fbd7 	bl	8001c14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001466:	f000 fba7 	bl	8001bb8 <MX_DMA_Init>
  MX_ADC1_Init();
 800146a:	f000 f89f 	bl	80015ac <MX_ADC1_Init>
  MX_SPI1_Init();
 800146e:	f000 f931 	bl	80016d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001472:	f000 f967 	bl	8001744 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001476:	f000 faa3 	bl	80019c0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800147a:	f000 fa1f 	bl	80018bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800147e:	f000 fb71 	bl	8001b64 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001482:	f000 fb21 	bl	8001ac8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <main+0x84>)
 800148e:	f002 f959 	bl	8003744 <HAL_GPIO_WritePin>

	DRV_Init(hspi1);
 8001492:	4c12      	ldr	r4, [pc, #72]	; (80014dc <main+0x88>)
 8001494:	4668      	mov	r0, sp
 8001496:	f104 0310 	add.w	r3, r4, #16
 800149a:	2248      	movs	r2, #72	; 0x48
 800149c:	4619      	mov	r1, r3
 800149e:	f004 fd8b 	bl	8005fb8 <memcpy>
 80014a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014a6:	f7ff f945 	bl	8000734 <DRV_Init>
	//DRV_Write(SHUNT_AMPLIFIER_CONTROL,
	//		(GAIN_CS1 & 0xffff) +
	//		(GAIN_CS2 & 0xffff) +
	//		(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <main+0x8c>)
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <main+0x90>)
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <main+0x94>)
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <main+0x98>)
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <main+0x9c>)
 80014b6:	f7ff fb8b 	bl	8000bd0 <Control_Init>
	Application_Init(&huart1);
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <main+0xa0>)
 80014bc:	f7ff f9ae 	bl	800081c <Application_Init>

	HAL_Delay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f001 f829 	bl	8002518 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <main+0xa4>)
 80014cc:	f002 f93a 	bl	8003744 <HAL_GPIO_WritePin>
while (1){
	Application_Update();
 80014d0:	f7ff fade 	bl	8000a90 <Application_Update>
 80014d4:	e7fc      	b.n	80014d0 <main+0x7c>
 80014d6:	bf00      	nop
 80014d8:	40010800 	.word	0x40010800
 80014dc:	200012e0 	.word	0x200012e0
 80014e0:	2000119c 	.word	0x2000119c
 80014e4:	200010c8 	.word	0x200010c8
 80014e8:	20001110 	.word	0x20001110
 80014ec:	20001338 	.word	0x20001338
 80014f0:	20001298 	.word	0x20001298
 80014f4:	20001210 	.word	0x20001210
 80014f8:	40011400 	.word	0x40011400

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	2228      	movs	r2, #40	; 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f004 fd62 	bl	8005fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800153c:	2300      	movs	r3, #0
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001540:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f92c 	bl	80037a8 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001556:	f000 fbfb 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fb96 	bl	8003ca8 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001582:	f000 fbe5 	bl	8001d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001586:	2302      	movs	r3, #2
 8001588:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800158a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fd22 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800159e:	f000 fbd7 	bl	8001d50 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <MX_ADC1_Init+0x120>)
 80015be:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <MX_ADC1_Init+0x124>)
 80015c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c2:	4b42      	ldr	r3, [pc, #264]	; (80016cc <MX_ADC1_Init+0x120>)
 80015c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <MX_ADC1_Init+0x120>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d0:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <MX_ADC1_Init+0x120>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <MX_ADC1_Init+0x120>)
 80015d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <MX_ADC1_Init+0x120>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <MX_ADC1_Init+0x120>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ea:	4838      	ldr	r0, [pc, #224]	; (80016cc <MX_ADC1_Init+0x120>)
 80015ec:	f000 ffb8 	bl	8002560 <HAL_ADC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015f6:	f000 fbab 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015fa:	2304      	movs	r3, #4
 80015fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fe:	2301      	movs	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4830      	ldr	r0, [pc, #192]	; (80016cc <MX_ADC1_Init+0x120>)
 800160c:	f001 f970 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001616:	f000 fb9b 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800161a:	2303      	movs	r3, #3
 800161c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800161e:	2302      	movs	r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4829      	ldr	r0, [pc, #164]	; (80016cc <MX_ADC1_Init+0x120>)
 8001628:	f001 f962 	bl	80028f0 <HAL_ADC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001632:	f000 fb8d 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001636:	2302      	movs	r3, #2
 8001638:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800163a:	2303      	movs	r3, #3
 800163c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4822      	ldr	r0, [pc, #136]	; (80016cc <MX_ADC1_Init+0x120>)
 8001644:	f001 f954 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800164e:	f000 fb7f 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001652:	2301      	movs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001656:	2304      	movs	r3, #4
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <MX_ADC1_Init+0x120>)
 8001660:	f001 f946 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800166a:	f000 fb71 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800166e:	2309      	movs	r3, #9
 8001670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001672:	2305      	movs	r3, #5
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_ADC1_Init+0x120>)
 800167c:	f001 f938 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001686:	f000 fb63 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800168a:	2308      	movs	r3, #8
 800168c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800168e:	2306      	movs	r3, #6
 8001690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_ADC1_Init+0x120>)
 8001698:	f001 f92a 	bl	80028f0 <HAL_ADC_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80016a2:	f000 fb55 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80016aa:	2307      	movs	r3, #7
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_ADC1_Init+0x120>)
 80016b4:	f001 f91c 	bl	80028f0 <HAL_ADC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80016be:	f000 fb47 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000119c 	.word	0x2000119c
 80016d0:	40012400 	.word	0x40012400

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_SPI1_Init+0x68>)
 80016da:	4a19      	ldr	r2, [pc, #100]	; (8001740 <MX_SPI1_Init+0x6c>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_SPI1_Init+0x68>)
 80016e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_SPI1_Init+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <MX_SPI1_Init+0x68>)
 80016ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_SPI1_Init+0x68>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_SPI1_Init+0x68>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_SPI1_Init+0x68>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_SPI1_Init+0x68>)
 800170a:	2220      	movs	r2, #32
 800170c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <MX_SPI1_Init+0x68>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_SPI1_Init+0x68>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <MX_SPI1_Init+0x68>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_SPI1_Init+0x68>)
 8001722:	220a      	movs	r2, #10
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_SPI1_Init+0x68>)
 8001728:	f002 fd0e 	bl	8004148 <HAL_SPI_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001732:	f000 fb0d 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200012e0 	.word	0x200012e0
 8001740:	40013000 	.word	0x40013000

08001744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b096      	sub	sp, #88	; 0x58
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2220      	movs	r2, #32
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fc29 	bl	8005fd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001782:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <MX_TIM1_Init+0x170>)
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <MX_TIM1_Init+0x174>)
 8001786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8001788:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <MX_TIM1_Init+0x170>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <MX_TIM1_Init+0x170>)
 8001790:	2220      	movs	r2, #32
 8001792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8001794:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <MX_TIM1_Init+0x170>)
 8001796:	f240 227f 	movw	r2, #639	; 0x27f
 800179a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <MX_TIM1_Init+0x170>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ae:	4841      	ldr	r0, [pc, #260]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017b0:	f002 fd4e 	bl	8004250 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ba:	f000 fac9 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017c8:	4619      	mov	r1, r3
 80017ca:	483a      	ldr	r0, [pc, #232]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017cc:	f003 f982 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017d6:	f000 fabb 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017da:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017dc:	f002 fdd2 	bl	8004384 <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017e6:	f000 fab3 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 80017ea:	2360      	movs	r3, #96	; 0x60
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f6:	4619      	mov	r1, r3
 80017f8:	482e      	ldr	r0, [pc, #184]	; (80018b4 <MX_TIM1_Init+0x170>)
 80017fa:	f003 fcf7 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001804:	f000 faa4 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001810:	2302      	movs	r3, #2
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	4821      	ldr	r0, [pc, #132]	; (80018b4 <MX_TIM1_Init+0x170>)
 800182e:	f003 f893 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001838:	f000 fa8a 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	2204      	movs	r2, #4
 8001846:	4619      	mov	r1, r3
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <MX_TIM1_Init+0x170>)
 800184a:	f003 f885 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001854:	f000 fa7c 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001858:	2302      	movs	r3, #2
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	2208      	movs	r2, #8
 8001862:	4619      	mov	r1, r3
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_TIM1_Init+0x170>)
 8001866:	f003 f877 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001870:	f000 fa6e 	bl	8001d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM1_Init+0x170>)
 8001898:	f003 fd06 	bl	80052a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80018a2:	f000 fa55 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a6:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM1_Init+0x170>)
 80018a8:	f000 fbb4 	bl	8002014 <HAL_TIM_MspPostInit>

}
 80018ac:	bf00      	nop
 80018ae:	3758      	adds	r7, #88	; 0x58
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20001298 	.word	0x20001298
 80018b8:	40012c00 	.word	0x40012c00

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_TIM2_Init+0x100>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_TIM2_Init+0x100>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_TIM2_Init+0x100>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_TIM2_Init+0x100>)
 8001902:	f240 227f 	movw	r2, #639	; 0x27f
 8001906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <MX_TIM2_Init+0x100>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_TIM2_Init+0x100>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001914:	4829      	ldr	r0, [pc, #164]	; (80019bc <MX_TIM2_Init+0x100>)
 8001916:	f002 fc9b 	bl	8004250 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001920:	f000 fa16 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192e:	4619      	mov	r1, r3
 8001930:	4822      	ldr	r0, [pc, #136]	; (80019bc <MX_TIM2_Init+0x100>)
 8001932:	f003 f8cf 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800193c:	f000 fa08 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001940:	481e      	ldr	r0, [pc, #120]	; (80019bc <MX_TIM2_Init+0x100>)
 8001942:	f002 fd1f 	bl	8004384 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800194c:	f000 fa00 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4619      	mov	r1, r3
 800195e:	4817      	ldr	r0, [pc, #92]	; (80019bc <MX_TIM2_Init+0x100>)
 8001960:	f003 fc44 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800196a:	f000 f9f1 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_TIM2_Init+0x100>)
 8001986:	f002 ffe7 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001990:	f000 f9de 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001994:	2302      	movs	r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2204      	movs	r2, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM2_Init+0x100>)
 80019a0:	f002 ffda 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80019aa:	f000 f9d1 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM2_Init+0x100>)
 80019b0:	f000 fb30 	bl	8002014 <HAL_TIM_MspPostInit>

}
 80019b4:	bf00      	nop
 80019b6:	3738      	adds	r7, #56	; 0x38
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20001338 	.word	0x20001338

080019c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	; 0x38
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <MX_TIM3_Init+0x100>)
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <MX_TIM3_Init+0x104>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <MX_TIM3_Init+0x100>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <MX_TIM3_Init+0x100>)
 80019fe:	2220      	movs	r2, #32
 8001a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a04:	f240 227f 	movw	r2, #639	; 0x27f
 8001a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a18:	f002 fc1a 	bl	8004250 <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a22:	f000 f995 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a34:	f003 f84e 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a3e:	f000 f987 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a42:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a44:	f002 fc9e 	bl	8004384 <HAL_TIM_PWM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a4e:	f000 f97f 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a62:	f003 fbc3 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a6c:	f000 f970 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	2360      	movs	r3, #96	; 0x60
 8001a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001a88:	f002 ff66 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a92:	f000 f95d 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a96:	2302      	movs	r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001aa2:	f002 ff59 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001aac:	f000 f950 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM3_Init+0x100>)
 8001ab2:	f000 faaf 	bl	8002014 <HAL_TIM_MspPostInit>

}
 8001ab6:	bf00      	nop
 8001ab8:	3738      	adds	r7, #56	; 0x38
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001110 	.word	0x20001110
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <MX_TIM4_Init+0x98>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b0c:	f002 fba0 	bl	8004250 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b16:	f000 f91b 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b28:	f002 ffd4 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f000 f90d 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b44:	f003 fb52 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001b4e:	f000 f8ff 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200010c8 	.word	0x200010c8
 8001b60:	40000800 	.word	0x40000800

08001b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_USART1_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART1_UART_Init+0x4c>)
 8001b9c:	f003 fbe7 	bl	800536e <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f000 f8d3 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20001210 	.word	0x20001210
 8001bb4:	40013800 	.word	0x40013800

08001bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_DMA_Init+0x58>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <MX_DMA_Init+0x58>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_DMA_Init+0x58>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	200b      	movs	r0, #11
 8001bdc:	f001 f959 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001be0:	200b      	movs	r0, #11
 8001be2:	f001 f972 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	200e      	movs	r0, #14
 8001bec:	f001 f951 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bf0:	200e      	movs	r0, #14
 8001bf2:	f001 f96a 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f001 f949 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c00:	200f      	movs	r0, #15
 8001c02:	f001 f962 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a3d      	ldr	r2, [pc, #244]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a37      	ldr	r2, [pc, #220]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <MX_GPIO_Init+0x128>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2101      	movs	r1, #1
 8001c74:	4832      	ldr	r0, [pc, #200]	; (8001d40 <MX_GPIO_Init+0x12c>)
 8001c76:	f001 fd65 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4831      	ldr	r0, [pc, #196]	; (8001d44 <MX_GPIO_Init+0x130>)
 8001c80:	f001 fd60 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8a:	482f      	ldr	r0, [pc, #188]	; (8001d48 <MX_GPIO_Init+0x134>)
 8001c8c:	f001 fd5a 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 8001c90:	2301      	movs	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4826      	ldr	r0, [pc, #152]	; (8001d40 <MX_GPIO_Init+0x12c>)
 8001ca8:	f001 fbc8 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001cac:	2302      	movs	r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4820      	ldr	r0, [pc, #128]	; (8001d40 <MX_GPIO_Init+0x12c>)
 8001cc0:	f001 fbbc 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481a      	ldr	r0, [pc, #104]	; (8001d44 <MX_GPIO_Init+0x130>)
 8001cdc:	f001 fbae 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <MX_GPIO_Init+0x134>)
 8001cfa:	f001 fb9f 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_INPUT_Pin D1_INPUT_Pin */
  GPIO_InitStruct.Pin = D2_INPUT_Pin|D1_INPUT_Pin;
 8001cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <MX_GPIO_Init+0x134>)
 8001d14:	f001 fb92 	bl	800343c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_GPIO_Init+0x138>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <MX_GPIO_Init+0x138>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	6053      	str	r3, [r2, #4]

}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40010000 	.word	0x40010000

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_MspInit+0x60>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_MspInit+0x60>)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_ADC_MspInit+0xe8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d15f      	bne.n	8001ea0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_ADC_MspInit+0xec>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8001e28:	231f      	movs	r3, #31
 8001e2a:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4619      	mov	r1, r3
 8001e36:	481e      	ldr	r0, [pc, #120]	; (8001eb0 <HAL_ADC_MspInit+0xf0>)
 8001e38:	f001 fb00 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e40:	2303      	movs	r3, #3
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <HAL_ADC_MspInit+0xf4>)
 8001e4c:	f001 faf6 	bl	800343c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_ADC_MspInit+0xfc>)
 8001e54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e86:	f001 f83b 	bl	8002f00 <HAL_DMA_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001e90:	f7ff ff5e 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e98:	621a      	str	r2, [r3, #32]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_ADC_MspInit+0xf8>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40012400 	.word	0x40012400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	20001254 	.word	0x20001254
 8001ebc:	40020008 	.word	0x40020008

08001ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_SPI_MspInit+0x88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d12f      	bne.n	8001f40 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_SPI_MspInit+0x8c>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 8001f10:	23a0      	movs	r3, #160	; 0xa0
 8001f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4619      	mov	r1, r3
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <HAL_SPI_MspInit+0x90>)
 8001f24:	f001 fa8a 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001f28:	2340      	movs	r3, #64	; 0x40
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_SPI_MspInit+0x90>)
 8001f3c:	f001 fa7e 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010800 	.word	0x40010800

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a28      	ldr	r2, [pc, #160]	; (8002004 <HAL_TIM_Base_MspInit+0xb0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d114      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f70:	6193      	str	r3, [r2, #24]
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2019      	movs	r0, #25
 8001f84:	f000 ff85 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f88:	2019      	movs	r0, #25
 8001f8a:	f000 ff9e 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f8e:	e034      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
}
 8001fb2:	e022      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_TIM_Base_MspInit+0xb8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	e010      	b.n	8001ffa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0xbc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_TIM_Base_MspInit+0xb4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800

08002014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_TIM_MspPostInit+0x14c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d119      	bne.n	8002068 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CL_Pin|PWM_CH_Pin;
 800204c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2302      	movs	r3, #2
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0318 	add.w	r3, r7, #24
 800205e:	4619      	mov	r1, r3
 8002060:	4841      	ldr	r0, [pc, #260]	; (8002168 <HAL_TIM_MspPostInit+0x154>)
 8002062:	f001 f9eb 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002066:	e077      	b.n	8002158 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d143      	bne.n	80020fa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6193      	str	r3, [r2, #24]
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4a35      	ldr	r2, [pc, #212]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6193      	str	r3, [r2, #24]
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 80020a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2302      	movs	r3, #2
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0318 	add.w	r3, r7, #24
 80020b4:	4619      	mov	r1, r3
 80020b6:	482c      	ldr	r0, [pc, #176]	; (8002168 <HAL_TIM_MspPostInit+0x154>)
 80020b8:	f001 f9c0 	bl	800343c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AL_Pin;
 80020bc:	2308      	movs	r3, #8
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2302      	movs	r3, #2
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AL_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <HAL_TIM_MspPostInit+0x158>)
 80020d0:	f001 f9b4 	bl	800343c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_TIM_MspPostInit+0x15c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_TIM_MspPostInit+0x15c>)
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	6053      	str	r3, [r2, #4]
}
 80020f8:	e02e      	b.n	8002158 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_TIM_MspPostInit+0x160>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d129      	bne.n	8002158 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_TIM_MspPostInit+0x150>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_Pin|PWM_BL_Pin;
 800211c:	2330      	movs	r3, #48	; 0x30
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2302      	movs	r3, #2
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0318 	add.w	r3, r7, #24
 800212c:	4619      	mov	r1, r3
 800212e:	480f      	ldr	r0, [pc, #60]	; (800216c <HAL_TIM_MspPostInit+0x158>)
 8002130:	f001 f984 	bl	800343c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_TIM_MspPostInit+0x15c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_TIM_MspPostInit+0x15c>)
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	6053      	str	r3, [r2, #4]
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40010000 	.word	0x40010000
 8002174:	40000400 	.word	0x40000400

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_UART_MspInit+0x150>)
 8002194:	4293      	cmp	r3, r2
 8002196:	f040 8092 	bne.w	80022be <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_UART_MspInit+0x154>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_UART_MspInit+0x154>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_UART_MspInit+0x154>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_UART_MspInit+0x154>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_UART_MspInit+0x154>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_UART_MspInit+0x154>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	483c      	ldr	r0, [pc, #240]	; (80022d0 <HAL_UART_MspInit+0x158>)
 80021de:	f001 f92d 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4836      	ldr	r0, [pc, #216]	; (80022d0 <HAL_UART_MspInit+0x158>)
 80021f6:	f001 f921 	bl	800343c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_UART_MspInit+0x15c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	4a30      	ldr	r2, [pc, #192]	; (80022d4 <HAL_UART_MspInit+0x15c>)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002218:	4a30      	ldr	r2, [pc, #192]	; (80022dc <HAL_UART_MspInit+0x164>)
 800221a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_UART_MspInit+0x160>)
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_UART_MspInit+0x160>)
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_UART_MspInit+0x160>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002246:	4824      	ldr	r0, [pc, #144]	; (80022d8 <HAL_UART_MspInit+0x160>)
 8002248:	f000 fe5a 	bl	8002f00 <HAL_DMA_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002252:	f7ff fd7d 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_UART_MspInit+0x160>)
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
 800225c:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_UART_MspInit+0x160>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_UART_MspInit+0x16c>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_UART_MspInit+0x168>)
 800226a:	2210      	movs	r2, #16
 800226c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_UART_MspInit+0x168>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_UART_MspInit+0x168>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002292:	4813      	ldr	r0, [pc, #76]	; (80022e0 <HAL_UART_MspInit+0x168>)
 8002294:	f000 fe34 	bl	8002f00 <HAL_DMA_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800229e:	f7ff fd57 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_UART_MspInit+0x168>)
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_UART_MspInit+0x168>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2025      	movs	r0, #37	; 0x25
 80022b4:	f000 fded 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022b8:	2025      	movs	r0, #37	; 0x25
 80022ba:	f000 fe06 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010c00 	.word	0x40010c00
 80022d4:	40010000 	.word	0x40010000
 80022d8:	200011cc 	.word	0x200011cc
 80022dc:	40020058 	.word	0x40020058
 80022e0:	20001158 	.word	0x20001158
 80022e4:	40020044 	.word	0x40020044

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <HardFault_Handler+0x4>

080022fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <MemManage_Handler+0x4>

08002300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <BusFault_Handler+0x4>

08002306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <UsageFault_Handler+0x4>

0800230c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002334:	f000 f8d4 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <DMA1_Channel1_IRQHandler+0x10>)
 8002342:	f000 ff47 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20001254 	.word	0x20001254

08002350 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <DMA1_Channel4_IRQHandler+0x10>)
 8002356:	f000 ff3d 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20001158 	.word	0x20001158

08002364 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA1_Channel5_IRQHandler+0x10>)
 800236a:	f000 ff33 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200011cc 	.word	0x200011cc

08002378 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM1_UP_IRQHandler+0x10>)
 800237e:	f002 f9e3 	bl	8004748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20001298 	.word	0x20001298

0800238c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USART1_IRQHandler+0x10>)
 8002392:	f003 f8d5 	bl	8005540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20001210 	.word	0x20001210

080023a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <SystemInit+0x5c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <SystemInit+0x5c>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <SystemInit+0x5c>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4911      	ldr	r1, [pc, #68]	; (80023fc <SystemInit+0x5c>)
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <SystemInit+0x60>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <SystemInit+0x5c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <SystemInit+0x5c>)
 80023c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <SystemInit+0x5c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SystemInit+0x5c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <SystemInit+0x5c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <SystemInit+0x5c>)
 80023de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SystemInit+0x5c>)
 80023e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SystemInit+0x64>)
 80023ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f2:	609a      	str	r2, [r3, #8]
#endif 
 }
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	f8ff0000 	.word	0xf8ff0000
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002408:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800240a:	e003      	b.n	8002414 <LoopCopyDataInit>

0800240c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800240e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002410:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002412:	3104      	adds	r1, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002414:	480a      	ldr	r0, [pc, #40]	; (8002440 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002418:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800241a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800241c:	d3f6      	bcc.n	800240c <CopyDataInit>
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002420:	e002      	b.n	8002428 <LoopFillZerobss>

08002422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002424:	f842 3b04 	str.w	r3, [r2], #4

08002428 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800242a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800242c:	d3f9      	bcc.n	8002422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800242e:	f7ff ffb7 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f003 fd9d 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002436:	f7ff f80d 	bl	8001454 <main>
  bx lr
 800243a:	4770      	bx	lr
  ldr r3, =_sidata
 800243c:	0800602c 	.word	0x0800602c
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002444:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002448:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800244c:	20001384 	.word	0x20001384

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_Init+0x28>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_Init+0x28>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 fd09 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f808 	bl	8002480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002470:	f7ff fc74 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x54>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fd21 	bl	8002ee6 <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 fce9 	bl	8002e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_InitTick+0x5c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000010 	.word	0x20000010
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_IncTick+0x1c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_IncTick+0x20>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a03      	ldr	r2, [pc, #12]	; (8002500 <HAL_IncTick+0x20>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000010 	.word	0x20000010
 8002500:	20001380 	.word	0x20001380

08002504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <HAL_GetTick+0x10>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20001380 	.word	0x20001380

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff fff0 	bl	8002504 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffe0 	bl	8002504 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000010 	.word	0x20000010

08002560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0be      	b.n	8002700 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fc0e 	bl	8001dc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 faf5 	bl	8002b94 <ADC_ConversionStop_Disable>
 80025aa:	4603      	mov	r3, r0
 80025ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 8099 	bne.w	80026ee <HAL_ADC_Init+0x18e>
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8095 	bne.w	80026ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025cc:	f023 0302 	bic.w	r3, r3, #2
 80025d0:	f043 0202 	orr.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_Init+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_ADC_Init+0xa8>
 8002602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002606:	e000      	b.n	800260a <HAL_ADC_Init+0xaa>
 8002608:	2300      	movs	r3, #0
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7d1b      	ldrb	r3, [r3, #20]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d119      	bne.n	800264c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	3b01      	subs	r3, #1
 8002626:	035a      	lsls	r2, r3, #13
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e00b      	b.n	800264c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_ADC_Init+0x1a8>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	430b      	orrs	r3, r1
 8002672:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267c:	d003      	beq.n	8002686 <HAL_ADC_Init+0x126>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d104      	bne.n	8002690 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	3b01      	subs	r3, #1
 800268c:	051b      	lsls	r3, r3, #20
 800268e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_ADC_Init+0x1ac>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10b      	bne.n	80026cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ca:	e018      	b.n	80026fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f023 0312 	bic.w	r3, r3, #18
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ec:	e007      	b.n	80026fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	ffe1f7fd 	.word	0xffe1f7fd
 800270c:	ff1f0efe 	.word	0xff1f0efe

08002710 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a64      	ldr	r2, [pc, #400]	; (80028b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <HAL_ADC_Start_DMA+0x24>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a63      	ldr	r2, [pc, #396]	; (80028bc <HAL_ADC_Start_DMA+0x1ac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d106      	bne.n	8002742 <HAL_ADC_Start_DMA+0x32>
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 80b3 	bne.w	80028a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADC_Start_DMA+0x40>
 800274c:	2302      	movs	r3, #2
 800274e:	e0ae      	b.n	80028ae <HAL_ADC_Start_DMA+0x19e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f9c1 	bl	8002ae0 <ADC_Enable>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 809a 	bne.w	800289e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4e      	ldr	r2, [pc, #312]	; (80028bc <HAL_ADC_Start_DMA+0x1ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d105      	bne.n	8002794 <HAL_ADC_Start_DMA+0x84>
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_ADC_Start_DMA+0x1a8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d115      	bne.n	80027c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d026      	beq.n	80027fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027be:	e01d      	b.n	80027fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <HAL_ADC_Start_DMA+0x1a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_Start_DMA+0xd0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_ADC_Start_DMA+0x1ac>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10d      	bne.n	80027fc <HAL_ADC_Start_DMA+0xec>
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_ADC_Start_DMA+0x1a8>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f023 0206 	bic.w	r2, r3, #6
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
 8002814:	e002      	b.n	800281c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <HAL_ADC_Start_DMA+0x1b0>)
 800282a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_ADC_Start_DMA+0x1b4>)
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_ADC_Start_DMA+0x1b8>)
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002854:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a18      	ldr	r0, [r3, #32]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	334c      	adds	r3, #76	; 0x4c
 8002860:	4619      	mov	r1, r3
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f000 fba5 	bl	8002fb4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002874:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002878:	d108      	bne.n	800288c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002888:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800288a:	e00f      	b.n	80028ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800289a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800289c:	e006      	b.n	80028ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80028a6:	e001      	b.n	80028ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40012400 	.word	0x40012400
 80028bc:	40012800 	.word	0x40012800
 80028c0:	08002c17 	.word	0x08002c17
 80028c4:	08002c93 	.word	0x08002c93
 80028c8:	08002caf 	.word	0x08002caf

080028cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x20>
 800290c:	2302      	movs	r3, #2
 800290e:	e0dc      	b.n	8002aca <HAL_ADC_ConfigChannel+0x1da>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b06      	cmp	r3, #6
 800291e:	d81c      	bhi.n	800295a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b05      	subs	r3, #5
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b05      	subs	r3, #5
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34
 8002958:	e03c      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d81c      	bhi.n	800299c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b23      	subs	r3, #35	; 0x23
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	4019      	ands	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b23      	subs	r3, #35	; 0x23
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
 800299a:	e01b      	b.n	80029d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b41      	subs	r3, #65	; 0x41
 80029ae:	221f      	movs	r2, #31
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b41      	subs	r3, #65	; 0x41
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d91c      	bls.n	8002a16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	2207      	movs	r2, #7
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e019      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6919      	ldr	r1, [r3, #16]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	2207      	movs	r2, #7
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4019      	ands	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a56:	2b11      	cmp	r3, #17
 8002a58:	d132      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1ec>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012400 	.word	0x40012400
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d040      	beq.n	8002b80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <ADC_Enable+0xac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <ADC_Enable+0xb0>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9b      	lsrs	r3, r3, #18
 8002b1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b1c:	e002      	b.n	8002b24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fceb 	bl	8002504 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b30:	e01f      	b.n	8002b72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b32:	f7ff fce7 	bl	8002504 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d918      	bls.n	8002b72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d011      	beq.n	8002b72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d1d8      	bne.n	8002b32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000008 	.word	0x20000008
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12e      	bne.n	8002c0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bbe:	f7ff fca1 	bl	8002504 <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc4:	e01b      	b.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bc6:	f7ff fc9d 	bl	8002504 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d914      	bls.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10d      	bne.n	8002bfe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d0dc      	beq.n	8002bc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d127      	bne.n	8002c80 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c4a:	d115      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7fd ff91 	bl	8000ba0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c7e:	e004      	b.n	8002c8a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fe13 	bl	80028cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe02 	bl	80028de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4906      	ldr	r1, [pc, #24]	; (8002d7c <__NVIC_EnableIRQ+0x34>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff90 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff2d 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff42 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff90 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5f 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff35 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e043      	b.n	8002f9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_DMA_Init+0xa8>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_DMA_Init+0xac>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_DMA_Init+0xb0>)
 8002f32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	bffdfff8 	.word	0xbffdfff8
 8002fac:	cccccccd 	.word	0xcccccccd
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Start_IT+0x20>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e04a      	b.n	800306a <HAL_DMA_Start_IT+0xb6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d13a      	bne.n	800305c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f9e8 	bl	80033e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 020e 	orr.w	r2, r2, #14
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00f      	b.n	800304a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0204 	bic.w	r2, r2, #4
 8003038:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 020a 	orr.w	r2, r2, #10
 8003048:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e005      	b.n	8003068 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003084:	2b02      	cmp	r3, #2
 8003086:	d008      	beq.n	800309a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2204      	movs	r2, #4
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e020      	b.n	80030dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 020e 	bic.w	r2, r2, #14
 80030a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d005      	beq.n	800310a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e051      	b.n	80031ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 020e 	bic.w	r2, r2, #14
 8003118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <HAL_DMA_Abort_IT+0xd0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d029      	beq.n	8003188 <HAL_DMA_Abort_IT+0xa0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a20      	ldr	r2, [pc, #128]	; (80031bc <HAL_DMA_Abort_IT+0xd4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_Abort_IT+0x9c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_DMA_Abort_IT+0xd8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01a      	beq.n	800317e <HAL_DMA_Abort_IT+0x96>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_DMA_Abort_IT+0xdc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d012      	beq.n	8003178 <HAL_DMA_Abort_IT+0x90>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_DMA_Abort_IT+0xe0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00a      	beq.n	8003172 <HAL_DMA_Abort_IT+0x8a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <HAL_DMA_Abort_IT+0xe4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d102      	bne.n	800316c <HAL_DMA_Abort_IT+0x84>
 8003166:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800316a:	e00e      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 800316c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003170:	e00b      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 8003172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003176:	e008      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 8003178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800317c:	e005      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 800317e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003182:	e002      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 8003184:	2310      	movs	r3, #16
 8003186:	e000      	b.n	800318a <HAL_DMA_Abort_IT+0xa2>
 8003188:	2301      	movs	r3, #1
 800318a:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_DMA_Abort_IT+0xe8>)
 800318c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
    } 
  }
  return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40020008 	.word	0x40020008
 80031bc:	4002001c 	.word	0x4002001c
 80031c0:	40020030 	.word	0x40020030
 80031c4:	40020044 	.word	0x40020044
 80031c8:	40020058 	.word	0x40020058
 80031cc:	4002006c 	.word	0x4002006c
 80031d0:	40020000 	.word	0x40020000

080031d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d04f      	beq.n	800329c <HAL_DMA_IRQHandler+0xc8>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04a      	beq.n	800329c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <HAL_DMA_IRQHandler+0x1f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d029      	beq.n	8003282 <HAL_DMA_IRQHandler+0xae>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_DMA_IRQHandler+0x1f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_DMA_IRQHandler+0xaa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a63      	ldr	r2, [pc, #396]	; (80033cc <HAL_DMA_IRQHandler+0x1f8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0xa4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a62      	ldr	r2, [pc, #392]	; (80033d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d012      	beq.n	8003272 <HAL_DMA_IRQHandler+0x9e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_DMA_IRQHandler+0x200>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00a      	beq.n	800326c <HAL_DMA_IRQHandler+0x98>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <HAL_DMA_IRQHandler+0x204>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d102      	bne.n	8003266 <HAL_DMA_IRQHandler+0x92>
 8003260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003264:	e00e      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 8003266:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800326a:	e00b      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 800326c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003270:	e008      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 8003272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003276:	e005      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 8003278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800327c:	e002      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	e000      	b.n	8003284 <HAL_DMA_IRQHandler+0xb0>
 8003282:	2304      	movs	r3, #4
 8003284:	4a55      	ldr	r2, [pc, #340]	; (80033dc <HAL_DMA_IRQHandler+0x208>)
 8003286:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8094 	beq.w	80033ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800329a:	e08e      	b.n	80033ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2202      	movs	r2, #2
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d056      	beq.n	800335a <HAL_DMA_IRQHandler+0x186>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d051      	beq.n	800335a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020a 	bic.w	r2, r2, #10
 80032d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a38      	ldr	r2, [pc, #224]	; (80033c4 <HAL_DMA_IRQHandler+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d029      	beq.n	800333a <HAL_DMA_IRQHandler+0x166>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a37      	ldr	r2, [pc, #220]	; (80033c8 <HAL_DMA_IRQHandler+0x1f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x162>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	; (80033cc <HAL_DMA_IRQHandler+0x1f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0x15c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0x156>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_DMA_IRQHandler+0x200>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x150>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <HAL_DMA_IRQHandler+0x204>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <HAL_DMA_IRQHandler+0x14a>
 8003318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800331c:	e00e      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 800331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003322:	e00b      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 8003324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003328:	e008      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 800332a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800332e:	e005      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 8003330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003334:	e002      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 8003336:	2320      	movs	r3, #32
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0x168>
 800333a:	2302      	movs	r3, #2
 800333c:	4a27      	ldr	r2, [pc, #156]	; (80033dc <HAL_DMA_IRQHandler+0x208>)
 800333e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d034      	beq.n	80033ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003358:	e02f      	b.n	80033ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_DMA_IRQHandler+0x1e8>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 020e 	bic.w	r2, r2, #14
 8003382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    }
  }
  return;
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
}
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40020008 	.word	0x40020008
 80033c8:	4002001c 	.word	0x4002001c
 80033cc:	40020030 	.word	0x40020030
 80033d0:	40020044 	.word	0x40020044
 80033d4:	40020058 	.word	0x40020058
 80033d8:	4002006c 	.word	0x4002006c
 80033dc:	40020000 	.word	0x40020000

080033e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f202 	lsl.w	r2, r1, r2
 80033fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b10      	cmp	r3, #16
 800340c:	d108      	bne.n	8003420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800341e:	e007      	b.n	8003430 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
	...

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b08b      	sub	sp, #44	; 0x2c
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344e:	e169      	b.n	8003724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003450:	2201      	movs	r2, #1
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 8158 	bne.w	800371e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a9a      	ldr	r2, [pc, #616]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d05e      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003478:	4a98      	ldr	r2, [pc, #608]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d875      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800347e:	4a98      	ldr	r2, [pc, #608]	; (80036e0 <HAL_GPIO_Init+0x2a4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d058      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003484:	4a96      	ldr	r2, [pc, #600]	; (80036e0 <HAL_GPIO_Init+0x2a4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d86f      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800348a:	4a96      	ldr	r2, [pc, #600]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d052      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003490:	4a94      	ldr	r2, [pc, #592]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d869      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 8003496:	4a94      	ldr	r2, [pc, #592]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04c      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 800349c:	4a92      	ldr	r2, [pc, #584]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d863      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034a2:	4a92      	ldr	r2, [pc, #584]	; (80036ec <HAL_GPIO_Init+0x2b0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d046      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 80034a8:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_GPIO_Init+0x2b0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d85d      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d82a      	bhi.n	8003508 <HAL_GPIO_Init+0xcc>
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d859      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_GPIO_Init+0x80>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003523 	.word	0x08003523
 80034c8:	08003565 	.word	0x08003565
 80034cc:	0800356b 	.word	0x0800356b
 80034d0:	0800356b 	.word	0x0800356b
 80034d4:	0800356b 	.word	0x0800356b
 80034d8:	0800356b 	.word	0x0800356b
 80034dc:	0800356b 	.word	0x0800356b
 80034e0:	0800356b 	.word	0x0800356b
 80034e4:	0800356b 	.word	0x0800356b
 80034e8:	0800356b 	.word	0x0800356b
 80034ec:	0800356b 	.word	0x0800356b
 80034f0:	0800356b 	.word	0x0800356b
 80034f4:	0800356b 	.word	0x0800356b
 80034f8:	0800356b 	.word	0x0800356b
 80034fc:	0800356b 	.word	0x0800356b
 8003500:	08003519 	.word	0x08003519
 8003504:	0800352d 	.word	0x0800352d
 8003508:	4a79      	ldr	r2, [pc, #484]	; (80036f0 <HAL_GPIO_Init+0x2b4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800350e:	e02c      	b.n	800356a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e029      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e024      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	3308      	adds	r3, #8
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e01f      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	330c      	adds	r3, #12
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e01a      	b.n	800356c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800353e:	2304      	movs	r3, #4
 8003540:	623b      	str	r3, [r7, #32]
          break;
 8003542:	e013      	b.n	800356c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800354c:	2308      	movs	r3, #8
 800354e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	611a      	str	r2, [r3, #16]
          break;
 8003556:	e009      	b.n	800356c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003558:	2308      	movs	r3, #8
 800355a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	615a      	str	r2, [r3, #20]
          break;
 8003562:	e003      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x130>
          break;
 800356a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d801      	bhi.n	8003576 <HAL_GPIO_Init+0x13a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	e001      	b.n	800357a <HAL_GPIO_Init+0x13e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2bff      	cmp	r3, #255	; 0xff
 8003580:	d802      	bhi.n	8003588 <HAL_GPIO_Init+0x14c>
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x152>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3b08      	subs	r3, #8
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	210f      	movs	r1, #15
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80b1 	beq.w	800371e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035bc:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6193      	str	r3, [r2, #24]
 80035c8:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_GPIO_Init+0x2bc>)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <HAL_GPIO_Init+0x2c0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_GPIO_Init+0x1ec>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <HAL_GPIO_Init+0x2c4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00d      	beq.n	8003624 <HAL_GPIO_Init+0x1e8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <HAL_GPIO_Init+0x1e4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_GPIO_Init+0x2cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_GPIO_Init+0x1e0>
 8003618:	2303      	movs	r3, #3
 800361a:	e006      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 800361c:	2304      	movs	r3, #4
 800361e:	e004      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003620:	2302      	movs	r3, #2
 8003622:	e002      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_GPIO_Init+0x1ee>
 8003628:	2300      	movs	r3, #0
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	f002 0203 	and.w	r2, r2, #3
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	4093      	lsls	r3, r2
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800363a:	492f      	ldr	r1, [pc, #188]	; (80036f8 <HAL_GPIO_Init+0x2bc>)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3302      	adds	r3, #2
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	492c      	ldr	r1, [pc, #176]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	43db      	mvns	r3, r3
 800366a:	4928      	ldr	r1, [pc, #160]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800366c:	4013      	ands	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4922      	ldr	r1, [pc, #136]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e006      	b.n	8003698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_GPIO_Init+0x2d0>)
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	43db      	mvns	r3, r3
 8003692:	491e      	ldr	r1, [pc, #120]	; (800370c <HAL_GPIO_Init+0x2d0>)
 8003694:	4013      	ands	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	4918      	ldr	r1, [pc, #96]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4914      	ldr	r1, [pc, #80]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d021      	beq.n	8003710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_GPIO_Init+0x2d0>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
 80036d8:	e021      	b.n	800371e <HAL_GPIO_Init+0x2e2>
 80036da:	bf00      	nop
 80036dc:	10320000 	.word	0x10320000
 80036e0:	10310000 	.word	0x10310000
 80036e4:	10220000 	.word	0x10220000
 80036e8:	10210000 	.word	0x10210000
 80036ec:	10120000 	.word	0x10120000
 80036f0:	10110000 	.word	0x10110000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40010800 	.word	0x40010800
 8003700:	40010c00 	.word	0x40010c00
 8003704:	40011000 	.word	0x40011000
 8003708:	40011400 	.word	0x40011400
 800370c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_GPIO_Init+0x304>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	43db      	mvns	r3, r3
 8003718:	4909      	ldr	r1, [pc, #36]	; (8003740 <HAL_GPIO_Init+0x304>)
 800371a:	4013      	ands	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	3301      	adds	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f47f ae8e 	bne.w	8003450 <HAL_GPIO_Init+0x14>
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	372c      	adds	r7, #44	; 0x2c
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43d9      	mvns	r1, r3
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	400b      	ands	r3, r1
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	611a      	str	r2, [r3, #16]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e26c      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8087 	beq.w	80038d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d00c      	beq.n	80037ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d4:	4b8f      	ldr	r3, [pc, #572]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d112      	bne.n	8003806 <HAL_RCC_OscConfig+0x5e>
 80037e0:	4b8c      	ldr	r3, [pc, #560]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d10b      	bne.n	8003806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ee:	4b89      	ldr	r3, [pc, #548]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d06c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x12c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d168      	bne.n	80038d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e246      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x76>
 8003810:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a7f      	ldr	r2, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e02e      	b.n	800387c <HAL_RCC_OscConfig+0xd4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7a      	ldr	r2, [pc, #488]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800382c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b78      	ldr	r3, [pc, #480]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a77      	ldr	r2, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xd4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0xbc>
 800384a:	4b72      	ldr	r3, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a71      	ldr	r2, [pc, #452]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xd4>
 8003864:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6a      	ldr	r2, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fe3e 	bl	8002504 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fe fe3a 	bl	8002504 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1fa      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xe4>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fe fe2a 	bl	8002504 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fe fe26 	bl	8002504 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1e6      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x10c>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d063      	beq.n	80039aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e2:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ee:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11c      	bne.n	8003934 <HAL_RCC_OscConfig+0x18c>
 80038fa:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x176>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1ba      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4939      	ldr	r1, [pc, #228]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	e03a      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393c:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCC_OscConfig+0x270>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fe fddf 	bl	8002504 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394a:	f7fe fddb 	bl	8002504 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e19b      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4927      	ldr	r1, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_RCC_OscConfig+0x270>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fdbe 	bl	8002504 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398c:	f7fe fdba 	bl	8002504 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e17a      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d03a      	beq.n	8003a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d019      	beq.n	80039f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c4:	f7fe fd9e 	bl	8002504 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fe fd9a 	bl	8002504 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e15a      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ea:	2001      	movs	r0, #1
 80039ec:	f000 fad8 	bl	8003fa0 <RCC_Delay>
 80039f0:	e01c      	b.n	8003a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_OscConfig+0x274>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f8:	f7fe fd84 	bl	8002504 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fe:	e00f      	b.n	8003a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fd80 	bl	8002504 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d908      	bls.n	8003a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e140      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	42420000 	.word	0x42420000
 8003a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b9e      	ldr	r3, [pc, #632]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e9      	bne.n	8003a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a6 	beq.w	8003b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b97      	ldr	r3, [pc, #604]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	4b94      	ldr	r3, [pc, #592]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a93      	ldr	r2, [pc, #588]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a54:	61d3      	str	r3, [r2, #28]
 8003a56:	4b91      	ldr	r3, [pc, #580]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a62:	2301      	movs	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a66:	4b8e      	ldr	r3, [pc, #568]	; (8003ca0 <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d118      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a72:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a8a      	ldr	r2, [pc, #552]	; (8003ca0 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fd41 	bl	8002504 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fe fd3d 	bl	8002504 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	; 0x64
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0fd      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x312>
 8003aac:	4b7b      	ldr	r3, [pc, #492]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a7a      	ldr	r2, [pc, #488]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e02d      	b.n	8003b16 <HAL_RCC_OscConfig+0x36e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x334>
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4a75      	ldr	r2, [pc, #468]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6213      	str	r3, [r2, #32]
 8003ace:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a72      	ldr	r2, [pc, #456]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	6213      	str	r3, [r2, #32]
 8003ada:	e01c      	b.n	8003b16 <HAL_RCC_OscConfig+0x36e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCC_OscConfig+0x356>
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4a6c      	ldr	r2, [pc, #432]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6213      	str	r3, [r2, #32]
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0x36e>
 8003afe:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a66      	ldr	r2, [pc, #408]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6213      	str	r3, [r2, #32]
 8003b0a:	4b64      	ldr	r3, [pc, #400]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4a63      	ldr	r2, [pc, #396]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fcf1 	bl	8002504 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fced 	bl	8002504 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0ab      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ee      	beq.n	8003b26 <HAL_RCC_OscConfig+0x37e>
 8003b48:	e014      	b.n	8003b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fcdb 	bl	8002504 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe fcd7 	bl	8002504 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e095      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8081 	beq.w	8003c92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d061      	beq.n	8003c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d146      	bne.n	8003c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_OscConfig+0x4fc>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe fcab 	bl	8002504 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe fca7 	bl	8002504 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e067      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d108      	bne.n	8003bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	492d      	ldr	r1, [pc, #180]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a19      	ldr	r1, [r3, #32]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	4927      	ldr	r1, [pc, #156]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_OscConfig+0x4fc>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fc7b 	bl	8002504 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fe fc77 	bl	8002504 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e037      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x46a>
 8003c30:	e02f      	b.n	8003c92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_RCC_OscConfig+0x4fc>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fe fc64 	bl	8002504 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fe fc60 	bl	8002504 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e020      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x498>
 8003c5e:	e018      	b.n	8003c92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e013      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	42420060 	.word	0x42420060

08003ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	4965      	ldr	r1, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4936      	ldr	r1, [pc, #216]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe fbb4 	bl	8002504 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fe fbb0 	bl	8002504 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e053      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d210      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1cc>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1d0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fb12 	bl	8002480 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40022000 	.word	0x40022000
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	0800600c 	.word	0x0800600c
 8003e74:	20000008 	.word	0x20000008
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b490      	push	{r4, r7}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e84:	1d3c      	adds	r4, r7, #4
 8003e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e8c:	f240 2301 	movw	r3, #513	; 0x201
 8003e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x40>
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8003eba:	e02d      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebe:	623b      	str	r3, [r7, #32]
      break;
 8003ec0:	e02d      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	0c9b      	lsrs	r3, r3, #18
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ece:	4413      	add	r3, r2
 8003ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ed4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c5b      	lsrs	r3, r3, #17
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eee:	4413      	add	r3, r2
 8003ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ef4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efa:	fb02 f203 	mul.w	r2, r2, r3
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e004      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	623b      	str	r3, [r7, #32]
      break;
 8003f16:	e002      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	623b      	str	r3, [r7, #32]
      break;
 8003f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	; 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc90      	pop	{r4, r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	08005ffc 	.word	0x08005ffc
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	003d0900 	.word	0x003d0900

08003f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f7ff fff2 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	0800601c 	.word	0x0800601c

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f7c:	f7ff ffde 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0adb      	lsrs	r3, r3, #11
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800601c 	.word	0x0800601c

08003fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <RCC_Delay+0x34>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <RCC_Delay+0x38>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0a5b      	lsrs	r3, r3, #9
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fbc:	bf00      	nop
  }
  while (Delay --);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f9      	bne.n	8003fbc <RCC_Delay+0x1c>
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07d      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffc:	4b4f      	ldr	r3, [pc, #316]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4a4b      	ldr	r2, [pc, #300]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	61d3      	str	r3, [r2, #28]
 8004014:	4b49      	ldr	r3, [pc, #292]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	4b46      	ldr	r3, [pc, #280]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d118      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403c:	f7fe fa62 	bl	8002504 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe fa5e 	bl	8002504 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e06d      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02e      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d027      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004090:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004096:	4a29      	ldr	r2, [pc, #164]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d014      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe fa2d 	bl	8002504 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe fa29 	bl	8002504 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e036      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d0:	4b1a      	ldr	r3, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4917      	ldr	r1, [pc, #92]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	490b      	ldr	r1, [pc, #44]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	42420440 	.word	0x42420440

08004148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e076      	b.n	8004248 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416a:	d009      	beq.n	8004180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
 8004172:	e005      	b.n	8004180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fe90 	bl	8001ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	ea42 0103 	orr.w	r1, r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	0c1a      	lsrs	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 0204 	and.w	r2, r2, #4
 8004226:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004236:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e041      	b.n	80042e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fe6c 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 fd08 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_TIM_Base_Start+0x88>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_Base_Start+0x48>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d009      	beq.n	8004338 <HAL_TIM_Base_Start+0x48>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <HAL_TIM_Base_Start+0x8c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_Base_Start+0x48>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a13      	ldr	r2, [pc, #76]	; (8004380 <HAL_TIM_Base_Start+0x90>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d010      	beq.n	800436c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	e007      	b.n	800436c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800

08004384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e041      	b.n	800441a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f839 	bl	8004422 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f000 fc6e 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_TIM_PWM_Start+0x24>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	e022      	b.n	800449e <HAL_TIM_PWM_Start+0x6a>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b04      	cmp	r3, #4
 800445c:	d109      	bne.n	8004472 <HAL_TIM_PWM_Start+0x3e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	e015      	b.n	800449e <HAL_TIM_PWM_Start+0x6a>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d109      	bne.n	800448c <HAL_TIM_PWM_Start+0x58>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e008      	b.n	800449e <HAL_TIM_PWM_Start+0x6a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e05e      	b.n	8004564 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0x82>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b4:	e013      	b.n	80044de <HAL_TIM_PWM_Start+0xaa>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Start+0x92>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	e00b      	b.n	80044de <HAL_TIM_PWM_Start+0xaa>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Start+0xa2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	e003      	b.n	80044de <HAL_TIM_PWM_Start+0xaa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2201      	movs	r2, #1
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fe5c 	bl	80051a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_TIM_PWM_Start+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_TIM_PWM_Start+0x138>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIM_PWM_Start+0xfa>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d009      	beq.n	800452e <HAL_TIM_PWM_Start+0xfa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <HAL_TIM_PWM_Start+0x13c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_PWM_Start+0xfa>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <HAL_TIM_PWM_Start+0x140>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d111      	bne.n	8004552 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d010      	beq.n	8004562 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	e007      	b.n	8004562 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800

08004578 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_TIM_PWM_Start_IT+0x24>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e022      	b.n	80045e2 <HAL_TIM_PWM_Start_IT+0x6a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d109      	bne.n	80045b6 <HAL_TIM_PWM_Start_IT+0x3e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e015      	b.n	80045e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d109      	bne.n	80045d0 <HAL_TIM_PWM_Start_IT+0x58>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e008      	b.n	80045e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0a4      	b.n	8004734 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start_IT+0x82>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	e013      	b.n	8004622 <HAL_TIM_PWM_Start_IT+0xaa>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start_IT+0x92>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	e00b      	b.n	8004622 <HAL_TIM_PWM_Start_IT+0xaa>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start_IT+0xa2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	e003      	b.n	8004622 <HAL_TIM_PWM_Start_IT+0xaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d841      	bhi.n	80046ac <HAL_TIM_PWM_Start_IT+0x134>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_TIM_PWM_Start_IT+0xb8>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004665 	.word	0x08004665
 8004634:	080046ad 	.word	0x080046ad
 8004638:	080046ad 	.word	0x080046ad
 800463c:	080046ad 	.word	0x080046ad
 8004640:	08004677 	.word	0x08004677
 8004644:	080046ad 	.word	0x080046ad
 8004648:	080046ad 	.word	0x080046ad
 800464c:	080046ad 	.word	0x080046ad
 8004650:	08004689 	.word	0x08004689
 8004654:	080046ad 	.word	0x080046ad
 8004658:	080046ad 	.word	0x080046ad
 800465c:	080046ad 	.word	0x080046ad
 8004660:	0800469b 	.word	0x0800469b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0202 	orr.w	r2, r2, #2
 8004672:	60da      	str	r2, [r3, #12]
      break;
 8004674:	e01b      	b.n	80046ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0204 	orr.w	r2, r2, #4
 8004684:	60da      	str	r2, [r3, #12]
      break;
 8004686:	e012      	b.n	80046ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0208 	orr.w	r2, r2, #8
 8004696:	60da      	str	r2, [r3, #12]
      break;
 8004698:	e009      	b.n	80046ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0210 	orr.w	r2, r2, #16
 80046a8:	60da      	str	r2, [r3, #12]
      break;
 80046aa:	e000      	b.n	80046ae <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80046ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fd74 	bl	80051a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d107      	bne.n	80046d6 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIM_PWM_Start_IT+0x1c4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIM_PWM_Start_IT+0x186>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d009      	beq.n	80046fe <HAL_TIM_PWM_Start_IT+0x186>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIM_PWM_Start_IT+0x186>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d111      	bne.n	8004722 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d010      	beq.n	8004732 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	e007      	b.n	8004732 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0202 	mvn.w	r2, #2
 8004774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa78 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa6b 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fa7a 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d122      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11b      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0204 	mvn.w	r2, #4
 80047c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa4e 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fa41 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fa50 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b08      	cmp	r3, #8
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0208 	mvn.w	r2, #8
 800481c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2204      	movs	r2, #4
 8004822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa24 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa17 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa26 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0210 	mvn.w	r2, #16
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2208      	movs	r2, #8
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f9fa 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9ed 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f9fc 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9c8 	bl	8004c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd32 	bl	800535c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d10e      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d107      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fd72 	bl	8001408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d10e      	bne.n	8004950 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b20      	cmp	r3, #32
 800493e:	d107      	bne.n	8004950 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0220 	mvn.w	r2, #32
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fcfd 	bl	800534a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800496e:	2302      	movs	r3, #2
 8004970:	e0ac      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	f200 809f 	bhi.w	8004ac0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049bd 	.word	0x080049bd
 800498c:	08004ac1 	.word	0x08004ac1
 8004990:	08004ac1 	.word	0x08004ac1
 8004994:	08004ac1 	.word	0x08004ac1
 8004998:	080049fd 	.word	0x080049fd
 800499c:	08004ac1 	.word	0x08004ac1
 80049a0:	08004ac1 	.word	0x08004ac1
 80049a4:	08004ac1 	.word	0x08004ac1
 80049a8:	08004a3f 	.word	0x08004a3f
 80049ac:	08004ac1 	.word	0x08004ac1
 80049b0:	08004ac1 	.word	0x08004ac1
 80049b4:	08004ac1 	.word	0x08004ac1
 80049b8:	08004a7f 	.word	0x08004a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f9d0 	bl	8004d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6999      	ldr	r1, [r3, #24]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	619a      	str	r2, [r3, #24]
      break;
 80049fa:	e062      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fa16 	bl	8004e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
      break;
 8004a3c:	e041      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fa5f 	bl	8004f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0208 	orr.w	r2, r2, #8
 8004a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
      break;
 8004a7c:	e021      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 faa9 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	61da      	str	r2, [r3, #28]
      break;
 8004abe:	e000      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0b3      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x180>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b24:	d03e      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xd0>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	f200 8087 	bhi.w	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	f000 8085 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d87f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d01a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xa2>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d87b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d050      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x116>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d877      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d03c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xf6>
 8004b50:	2b50      	cmp	r3, #80	; 0x50
 8004b52:	d873      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x136>
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d86f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d064      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x156>
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d86b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d060      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x156>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d867      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x156>
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b74:	e062      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f000 faee 	bl	8005166 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e04e      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f000 fad7 	bl	8005166 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
      break;
 8004bc8:	e03b      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 fa4e 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2150      	movs	r1, #80	; 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 faa5 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004be8:	e02b      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 fa6c 	bl	80050d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2160      	movs	r1, #96	; 0x60
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa95 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004c08:	e01b      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa2e 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2140      	movs	r1, #64	; 0x40
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fa85 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e00b      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f000 fa7c 	bl	8005132 <TIM_ITRx_SetConfig>
        break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <TIM_Base_SetConfig+0xb8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <TIM_Base_SetConfig+0xbc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <TIM_Base_SetConfig+0xc0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <TIM_Base_SetConfig+0xb8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d007      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <TIM_Base_SetConfig+0xbc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <TIM_Base_SetConfig+0xc0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <TIM_Base_SetConfig+0xb8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800

08004d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f023 0201 	bic.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 0302 	bic.w	r3, r3, #2
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <TIM_OC1_SetConfig+0xc8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <TIM_OC1_SetConfig+0xc8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d111      	bne.n	8004e0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00

08004e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0320 	bic.w	r3, r3, #32
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <TIM_OC2_SetConfig+0xd0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d10d      	bne.n	8004eb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <TIM_OC2_SetConfig+0xd0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	40012c00 	.word	0x40012c00

08004f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <TIM_OC3_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10d      	bne.n	8004f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC3_SetConfig+0xd0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40012c00 	.word	0x40012c00

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <TIM_OC4_SetConfig+0x98>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d109      	bne.n	8005050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	40012c00 	.word	0x40012c00

08005078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0201 	bic.w	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 030a 	bic.w	r3, r3, #10
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 0210 	bic.w	r2, r3, #16
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	031b      	lsls	r3, r3, #12
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	f043 0307 	orr.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	431a      	orrs	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2201      	movs	r2, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	401a      	ands	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e046      	b.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d009      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10c      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800

080052a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e03d      	b.n	8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e03f      	b.n	8005400 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc feef 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	; 0x24
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd4e 	bl	8005e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	d153      	bne.n	80054ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_UART_Transmit_DMA+0x26>
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e04c      	b.n	80054cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_UART_Transmit_DMA+0x38>
 800543c:	2302      	movs	r3, #2
 800543e:	e045      	b.n	80054cc <HAL_UART_Transmit_DMA+0xc4>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2221      	movs	r2, #33	; 0x21
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_UART_Transmit_DMA+0xcc>)
 800546e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_UART_Transmit_DMA+0xd0>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <HAL_UART_Transmit_DMA+0xd4>)
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	2200      	movs	r2, #0
 8005486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6819      	ldr	r1, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3304      	adds	r3, #4
 800549c:	461a      	mov	r2, r3
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	f7fd fd88 	bl	8002fb4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080058f3 	.word	0x080058f3
 80054d8:	08005945 	.word	0x08005945
 80054dc:	08005a2d 	.word	0x08005a2d

080054e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d11d      	bne.n	8005536 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Receive_DMA+0x26>
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e016      	b.n	8005538 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UART_Receive_DMA+0x38>
 8005514:	2302      	movs	r3, #2
 8005516:	e00f      	b.n	8005538 <HAL_UART_Receive_DMA+0x58>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	461a      	mov	r2, r3
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fac7 	bl	8005ac0 <UART_Start_Receive_DMA>
 8005532:	4603      	mov	r3, r0
 8005534:	e000      	b.n	8005538 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_UART_IRQHandler+0x52>
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fbb8 	bl	8005d00 <UART_Receive_IT>
      return;
 8005590:	e17b      	b.n	800588a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80b1 	beq.w	80056fc <HAL_UART_IRQHandler+0x1bc>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_UART_IRQHandler+0x70>
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80a6 	beq.w	80056fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_UART_IRQHandler+0x90>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_UART_IRQHandler+0xb0>
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f043 0202 	orr.w	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_UART_IRQHandler+0xd0>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	f043 0204 	orr.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <HAL_UART_IRQHandler+0xfa>
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_UART_IRQHandler+0xee>
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0208 	orr.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 811e 	beq.w	8005880 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_UART_IRQHandler+0x11e>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb51 	bl	8005d00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <HAL_UART_IRQHandler+0x146>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d031      	beq.n	80056ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa93 	bl	8005bb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d023      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d013      	beq.n	80056da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	4a76      	ldr	r2, [pc, #472]	; (8005890 <HAL_UART_IRQHandler+0x350>)
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fd fd12 	bl	80030e8 <HAL_DMA_Abort_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e00e      	b.n	80056f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8f5 	bl	80058ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e00a      	b.n	80056f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8f1 	bl	80058ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e006      	b.n	80056f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8ed 	bl	80058ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056f6:	e0c3      	b.n	8005880 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	bf00      	nop
    return;
 80056fa:	e0c1      	b.n	8005880 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 80a1 	bne.w	8005848 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 809b 	beq.w	8005848 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8095 	beq.w	8005848 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04e      	beq.n	80057e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800574c:	8a3b      	ldrh	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8098 	beq.w	8005884 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005758:	8a3a      	ldrh	r2, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	f080 8092 	bcs.w	8005884 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8a3a      	ldrh	r2, [r7, #16]
 8005764:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b20      	cmp	r3, #32
 800576e:	d02b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0210 	bic.w	r2, r2, #16
 80057bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd fc55 	bl	8003072 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f87f 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057de:	e051      	b.n	8005884 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d047      	beq.n	8005888 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80057f8:	8a7b      	ldrh	r3, [r7, #18]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800580c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0210 	bic.w	r2, r2, #16
 800583a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800583c:	8a7b      	ldrh	r3, [r7, #18]
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f84b 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005846:	e01f      	b.n	8005888 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_UART_IRQHandler+0x324>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f9e8 	bl	8005c32 <UART_Transmit_IT>
    return;
 8005862:	e012      	b.n	800588a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <HAL_UART_IRQHandler+0x34a>
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fa29 	bl	8005cd0 <UART_EndTransmit_IT>
    return;
 800587e:	e004      	b.n	800588a <HAL_UART_IRQHandler+0x34a>
    return;
 8005880:	bf00      	nop
 8005882:	e002      	b.n	800588a <HAL_UART_IRQHandler+0x34a>
      return;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <HAL_UART_IRQHandler+0x34a>
      return;
 8005888:	bf00      	nop
  }
}
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08005c0b 	.word	0x08005c0b

08005894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d113      	bne.n	8005936 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005922:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005934:	e002      	b.n	800593c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ffac 	bl	8005894 <HAL_UART_TxCpltCallback>
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ffa7 	bl	80058a6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d12a      	bne.n	80059d2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005990:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d107      	bne.n	80059d2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0210 	bic.w	r2, r2, #16
 80059d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d106      	bne.n	80059e8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff7b 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059e6:	e002      	b.n	80059ee <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7fa fec5 	bl	8000778 <HAL_UART_RxCpltCallback>
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	4619      	mov	r1, r3
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ff60 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a1c:	e002      	b.n	8005a24 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff ff4a 	bl	80058b8 <HAL_UART_RxHalfCpltCallback>
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b21      	cmp	r3, #33	; 0x21
 8005a5e:	d108      	bne.n	8005a72 <UART_DMAError+0x46>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a6c:	68b8      	ldr	r0, [r7, #8]
 8005a6e:	f000 f88b 	bl	8005b88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b22      	cmp	r3, #34	; 0x22
 8005a92:	d108      	bne.n	8005aa6 <UART_DMAError+0x7a>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f000 f886 	bl	8005bb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f043 0210 	orr.w	r2, r3, #16
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f7ff ff09 	bl	80058ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2222      	movs	r2, #34	; 0x22
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <UART_Start_Receive_DMA+0xbc>)
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <UART_Start_Receive_DMA+0xc0>)
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <UART_Start_Receive_DMA+0xc4>)
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2200      	movs	r2, #0
 8005b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	f7fd fa48 	bl	8002fb4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b50:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b70:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	08005961 	.word	0x08005961
 8005b80:	080059f7 	.word	0x080059f7
 8005b84:	08005a2d 	.word	0x08005a2d

08005b88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b9e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bc8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d107      	bne.n	8005bf2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0210 	bic.w	r2, r2, #16
 8005bf0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fe50 	bl	80058ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b21      	cmp	r3, #33	; 0x21
 8005c44:	d13e      	bne.n	8005cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d114      	bne.n	8005c7a <UART_Transmit_IT+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]
 8005c78:	e008      	b.n	8005c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6211      	str	r1, [r2, #32]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fdcf 	bl	8005894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b22      	cmp	r3, #34	; 0x22
 8005d12:	f040 8099 	bne.w	8005e48 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	d117      	bne.n	8005d50 <UART_Receive_IT+0x50>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d113      	bne.n	8005d50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8005d4e:	e026      	b.n	8005d9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d007      	beq.n	8005d74 <UART_Receive_IT+0x74>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <UART_Receive_IT+0x82>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e008      	b.n	8005d94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4619      	mov	r1, r3
 8005dac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d148      	bne.n	8005e44 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0220 	bic.w	r2, r2, #32
 8005dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d123      	bne.n	8005e3a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0210 	bic.w	r2, r2, #16
 8005e06:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d10a      	bne.n	8005e2c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fd52 	bl	80058dc <HAL_UARTEx_RxEventCallback>
 8005e38:	e002      	b.n	8005e40 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fa fc9c 	bl	8000778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e002      	b.n	8005e4a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e8e:	f023 030c 	bic.w	r3, r3, #12
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <UART_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe f85c 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	e002      	b.n	8005eca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fe f844 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009a      	lsls	r2, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <UART_SetConfig+0x118>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	0119      	lsls	r1, r3, #4
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009a      	lsls	r2, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <UART_SetConfig+0x118>)
 8005f02:	fba3 0302 	umull	r0, r3, r3, r2
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	2064      	movs	r0, #100	; 0x64
 8005f0a:	fb00 f303 	mul.w	r3, r0, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	3332      	adds	r3, #50	; 0x32
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <UART_SetConfig+0x118>)
 8005f16:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f20:	4419      	add	r1, r3
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009a      	lsls	r2, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <UART_SetConfig+0x118>)
 8005f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	2064      	movs	r0, #100	; 0x64
 8005f42:	fb00 f303 	mul.w	r3, r0, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	3332      	adds	r3, #50	; 0x32
 8005f4c:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <UART_SetConfig+0x118>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	51eb851f 	.word	0x51eb851f

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	2600      	movs	r6, #0
 8005f74:	4d0c      	ldr	r5, [pc, #48]	; (8005fa8 <__libc_init_array+0x38>)
 8005f76:	4c0d      	ldr	r4, [pc, #52]	; (8005fac <__libc_init_array+0x3c>)
 8005f78:	1b64      	subs	r4, r4, r5
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	f000 f830 	bl	8005fe4 <_init>
 8005f84:	2600      	movs	r6, #0
 8005f86:	4d0a      	ldr	r5, [pc, #40]	; (8005fb0 <__libc_init_array+0x40>)
 8005f88:	4c0a      	ldr	r4, [pc, #40]	; (8005fb4 <__libc_init_array+0x44>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	08006024 	.word	0x08006024
 8005fac:	08006024 	.word	0x08006024
 8005fb0:	08006024 	.word	0x08006024
 8005fb4:	08006028 	.word	0x08006028

08005fb8 <memcpy>:
 8005fb8:	440a      	add	r2, r1
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fc0:	d100      	bne.n	8005fc4 <memcpy+0xc>
 8005fc2:	4770      	bx	lr
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd0:	d1f9      	bne.n	8005fc6 <memcpy+0xe>
 8005fd2:	bd10      	pop	{r4, pc}

08005fd4 <memset>:
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4402      	add	r2, r0
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d100      	bne.n	8005fde <memset+0xa>
 8005fdc:	4770      	bx	lr
 8005fde:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe2:	e7f9      	b.n	8005fd8 <memset+0x4>

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
