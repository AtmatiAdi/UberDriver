
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b0  080058b0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080058b0  080058b0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058b0  080058b0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080058b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004334  20000020  080058d8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004354  080058d8  00024354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108db  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271f  00000000  00000000  00030924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00034120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018790  00000000  00000000  00035100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119b2  00000000  00000000  0004d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e01a  00000000  00000000  0005f242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  000ed2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08005870 	.word	0x08005870

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08005870 	.word	0x08005870

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef *DRV_spi;

void DRV_Init(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//Copy SPI handle variable
	DRV_spi = hspi;
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <DRV_Init+0x28>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800015a:	2201      	movs	r2, #1
 800015c:	2104      	movs	r1, #4
 800015e:	4806      	ldr	r0, [pc, #24]	; (8000178 <DRV_Init+0x2c>)
 8000160:	f002 feb3 	bl	8002eca <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000164:	2001      	movs	r0, #1
 8000166:	f001 fd37 	bl	8001bd8 <HAL_Delay>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	2000003c 	.word	0x2000003c
 8000178:	40010c00 	.word	0x40010c00

0800017c <HAL_UART_RxCpltCallback>:
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;
uint8_t Rotations[1] = {0};
uint8_t step_delay = 255;	// (255+1)/32 = 8 times shorter t3 = (t1+t2)/8

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);		// Chcemy obierac dalej
 8000184:	4b20      	ldr	r3, [pc, #128]	; (8000208 <HAL_UART_RxCpltCallback+0x8c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2203      	movs	r2, #3
 800018a:	4920      	ldr	r1, [pc, #128]	; (800020c <HAL_UART_RxCpltCallback+0x90>)
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fdfb 	bl	8004d88 <HAL_UART_Receive_DMA>

	HAL_UART_Transmit_DMA(huart, Rotations, 1);			// Odsylamy warrtosc obrotow
 8000192:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <HAL_UART_RxCpltCallback+0x8c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2201      	movs	r2, #1
 8000198:	491d      	ldr	r1, [pc, #116]	; (8000210 <HAL_UART_RxCpltCallback+0x94>)
 800019a:	4618      	mov	r0, r3
 800019c:	f004 fd88 	bl	8004cb0 <HAL_UART_Transmit_DMA>
	Rotations[0] = 0;										// resetujemy zmienna obrotow
 80001a0:	4b1b      	ldr	r3, [pc, #108]	; (8000210 <HAL_UART_RxCpltCallback+0x94>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
	// DONT UPDATE FUNCTION WHEN WE GET SPECIAL FUNCTION
	if(rx_buffer[0] == SCAN_ONE_VARIABLE){
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <HAL_UART_RxCpltCallback+0x90>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b50      	cmp	r3, #80	; 0x50
 80001ac:	d102      	bne.n	80001b4 <HAL_UART_RxCpltCallback+0x38>
		EnableScan();
 80001ae:	f000 f8e9 	bl	8000384 <EnableScan>
 80001b2:	e00b      	b.n	80001cc <HAL_UART_RxCpltCallback+0x50>
	} else
	{
		Function = rx_buffer[0];
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <HAL_UART_RxCpltCallback+0x90>)
 80001b6:	781a      	ldrb	r2, [r3, #0]
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_UART_RxCpltCallback+0x98>)
 80001ba:	701a      	strb	r2, [r3, #0]
		Power = rx_buffer[1];
 80001bc:	4b13      	ldr	r3, [pc, #76]	; (800020c <HAL_UART_RxCpltCallback+0x90>)
 80001be:	785a      	ldrb	r2, [r3, #1]
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_UART_RxCpltCallback+0x9c>)
 80001c2:	701a      	strb	r2, [r3, #0]
		step_delay = rx_buffer[2];
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <HAL_UART_RxCpltCallback+0x90>)
 80001c6:	789a      	ldrb	r2, [r3, #2]
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <HAL_UART_RxCpltCallback+0xa0>)
 80001ca:	701a      	strb	r2, [r3, #0]
		//if (Power > 64) HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);

	}
	if ((Function == 0) || Power == 0){		// Zatrzymanie awaryjne
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <HAL_UART_RxCpltCallback+0x98>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d003      	beq.n	80001dc <HAL_UART_RxCpltCallback+0x60>
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <HAL_UART_RxCpltCallback+0x9c>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d10b      	bne.n	80001f4 <HAL_UART_RxCpltCallback+0x78>
		SetFloating_A();
 80001dc:	f000 fc40 	bl	8000a60 <SetFloating_A>
		SetFloating_B();
 80001e0:	f000 fc52 	bl	8000a88 <SetFloating_B>
		SetFloating_C();
 80001e4:	f000 fc64 	bl	8000ab0 <SetFloating_C>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2101      	movs	r1, #1
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <HAL_UART_RxCpltCallback+0xa4>)
 80001ee:	f002 fe6c 	bl	8002eca <HAL_GPIO_WritePin>
 80001f2:	e005      	b.n	8000200 <HAL_UART_RxCpltCallback+0x84>
	}else {
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2101      	movs	r1, #1
 80001f8:	4809      	ldr	r0, [pc, #36]	; (8000220 <HAL_UART_RxCpltCallback+0xa4>)
 80001fa:	f002 fe66 	bl	8002eca <HAL_GPIO_WritePin>
	}
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000040 	.word	0x20000040
 800020c:	20000044 	.word	0x20000044
 8000210:	2000004c 	.word	0x2000004c
 8000214:	20000047 	.word	0x20000047
 8000218:	20000048 	.word	0x20000048
 800021c:	20000002 	.word	0x20000002
 8000220:	40011400 	.word	0x40011400

08000224 <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	//memcpy(&huart, &_huart, sizeof(_huart)); // This shit does not work
	huart = _huart;
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <Application_Init+0x24>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <Application_Init+0x24>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2203      	movs	r2, #3
 8000238:	4904      	ldr	r1, [pc, #16]	; (800024c <Application_Init+0x28>)
 800023a:	4618      	mov	r0, r3
 800023c:	f004 fda4 	bl	8004d88 <HAL_UART_Receive_DMA>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000040 	.word	0x20000040
 800024c:	20000044 	.word	0x20000044

08000250 <NormalControl>:
	SetFloating_B();
	SetFloating_C();
	IsRunning = 0;
}

void NormalControl(){
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	if(Power == 0){								// wartosc = 0, stop
 8000256:	4b40      	ldr	r3, [pc, #256]	; (8000358 <NormalControl+0x108>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d10c      	bne.n	8000278 <NormalControl+0x28>
		Set_PWM(0);
 800025e:	2000      	movs	r0, #0
 8000260:	f000 faf2 	bl	8000848 <Set_PWM>
		//Six_Step_Block(0);
		//HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
//		SetFloating_A();
//		SetFloating_B();
//		SetFloating_C();
		IsRunning = 0;
 8000264:	4b3d      	ldr	r3, [pc, #244]	; (800035c <NormalControl+0x10c>)
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 800026a:	4b3d      	ldr	r3, [pc, #244]	; (8000360 <NormalControl+0x110>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000270:	4b3c      	ldr	r3, [pc, #240]	; (8000364 <NormalControl+0x114>)
 8000272:	220f      	movs	r2, #15
 8000274:	801a      	strh	r2, [r3, #0]
 8000276:	e05b      	b.n	8000330 <NormalControl+0xe0>
		//Function = rx_buffer[0];				// Zmiana funkcji jest mzliwa jedynie gdy silnik stoi
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 8000278:	4b3b      	ldr	r3, [pc, #236]	; (8000368 <NormalControl+0x118>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b3f      	cmp	r3, #63	; 0x3f
 800027e:	d93d      	bls.n	80002fc <NormalControl+0xac>
		//HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
		uint16_t pwm = Power*3;
 8000280:	4b35      	ldr	r3, [pc, #212]	; (8000358 <NormalControl+0x108>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	b29b      	uxth	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	4413      	add	r3, r2
 800028c:	80fb      	strh	r3, [r7, #6]
		if (pwm < 8) pwm = 8;				// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d802      	bhi.n	800029a <NormalControl+0x4a>
 8000294:	2308      	movs	r3, #8
 8000296:	80fb      	strh	r3, [r7, #6]
 8000298:	e006      	b.n	80002a8 <NormalControl+0x58>
		else if (pwm > (640-1)-8) pwm = (640-1);	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 80002a0:	d302      	bcc.n	80002a8 <NormalControl+0x58>
 80002a2:	f240 237f 	movw	r3, #639	; 0x27f
 80002a6:	80fb      	strh	r3, [r7, #6]
//			}
//			}
//		}
		//if(rx_buffer[0] == SCAN_ONE_VARIABLE){
			// Kręcimy normalnie
			if(Function % 2 == 1){					// Kręcimy do tylu
 80002a8:	4b2f      	ldr	r3, [pc, #188]	; (8000368 <NormalControl+0x118>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d00f      	beq.n	80002d6 <NormalControl+0x86>
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fac5 	bl	8000848 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <NormalControl+0x11c>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fa12 	bl	80006f0 <Set_Observer_Div>
				//Six_Step_Block(pwm);
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <NormalControl+0x110>)
 80002d2:	701a      	strb	r2, [r3, #0]
 80002d4:	e00e      	b.n	80002f4 <NormalControl+0xa4>
			}else{									// Kręcimy do przodu
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 80002d6:	88fb      	ldrh	r3, [r7, #6]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fab5 	bl	8000848 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 80002de:	4b23      	ldr	r3, [pc, #140]	; (800036c <NormalControl+0x11c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	08db      	lsrs	r3, r3, #3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fa02 	bl	80006f0 <Set_Observer_Div>
				//Six_Step_Block(pwm);
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <NormalControl+0x110>)
 80002f2:	701a      	strb	r2, [r3, #0]
			}
		//}

		//Rotations[0] += 1;

		IsRunning = 1;
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <NormalControl+0x10c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e019      	b.n	8000330 <NormalControl+0xe0>
	}else {								// Nie funkcja z wartoscia -> Bład
		Set_PWM(0);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 faa3 	bl	8000848 <Set_PWM>
		Six_Step_Block(0);
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fa0a 	bl	800071c <Six_Step_Block>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2101      	movs	r1, #1
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <NormalControl+0x120>)
 800030e:	f002 fddc 	bl	8002eca <HAL_GPIO_WritePin>
		SetFloating_A();
 8000312:	f000 fba5 	bl	8000a60 <SetFloating_A>
		SetFloating_B();
 8000316:	f000 fbb7 	bl	8000a88 <SetFloating_B>
		SetFloating_C();
 800031a:	f000 fbc9 	bl	8000ab0 <SetFloating_C>
		IsRunning = 0;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <NormalControl+0x10c>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <NormalControl+0x110>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <NormalControl+0x114>)
 800032c:	220f      	movs	r2, #15
 800032e:	801a      	strh	r2, [r3, #0]
	}
	if (IsScanReady() == 1){
 8000330:	f000 f834 	bl	800039c <IsScanReady>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10a      	bne.n	8000350 <NormalControl+0x100>
		HAL_UART_Transmit_DMA(huart, GetScanData(), SCAN_SIZE);
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <NormalControl+0x124>)
 800033c:	681c      	ldr	r4, [r3, #0]
 800033e:	f000 f83d 	bl	80003bc <GetScanData>
 8000342:	4603      	mov	r3, r0
 8000344:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000348:	4619      	mov	r1, r3
 800034a:	4620      	mov	r0, r4
 800034c:	f004 fcb0 	bl	8004cb0 <HAL_UART_Transmit_DMA>
	}
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bd90      	pop	{r4, r7, pc}
 8000358:	20000048 	.word	0x20000048
 800035c:	20000049 	.word	0x20000049
 8000360:	2000004c 	.word	0x2000004c
 8000364:	20000000 	.word	0x20000000
 8000368:	20000047 	.word	0x20000047
 800036c:	20000002 	.word	0x20000002
 8000370:	40011400 	.word	0x40011400
 8000374:	20000040 	.word	0x20000040

08000378 <Application_Update>:

void Application_Update(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	NormalControl();
 800037c:	f7ff ff68 	bl	8000250 <NormalControl>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <EnableScan>:
uint32_t AfterCross_Ticks = 0;
uint32_t Step_Ticks = 0;
GPIO_TypeDef* Hall_GPIO_Port = HALL_A_GPIO_Port;
uint16_t Hall_GPIO_Pin = HALL_A_Pin;

void EnableScan(){
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	Scan_Is_enabled = 1;
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EnableScan+0x14>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000080 	.word	0x20000080

0800039c <IsScanReady>:

uint8_t IsScanReady(){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	if (Scan_iter >= SCAN_SIZE) return 1;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <IsScanReady+0x1c>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003a8:	d301      	bcc.n	80003ae <IsScanReady+0x12>
 80003aa:	2301      	movs	r3, #1
 80003ac:	e000      	b.n	80003b0 <IsScanReady+0x14>
	else return 0;
 80003ae:	2300      	movs	r3, #0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000082 	.word	0x20000082

080003bc <GetScanData>:

uint8_t* GetScanData(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	Scan_iter = 0;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <GetScanData+0x20>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	801a      	strh	r2, [r3, #0]
	Scan_Is_enabled = 0;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <GetScanData+0x24>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	trace_num = 0;
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <GetScanData+0x28>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
	return Scan_Data;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <GetScanData+0x2c>)
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000082 	.word	0x20000082
 80003e0:	20000080 	.word	0x20000080
 80003e4:	20000084 	.word	0x20000084
 80003e8:	20000098 	.word	0x20000098

080003ec <BEMF_Observer_Block>:
uint16_t BEMF_Treshold = 0;
uint16_t PWM_Value = 0;
uint16_t BEMF_delay = 32;
uint16_t Angle = 0;
//uint16_t Ticks_Diff = 0;
void BEMF_Observer_Block(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	//uint16_t Ticks = htim1->Instance->CNT;
// Input Block
	uint16_t V_Floating = ADC_data[0];
 80003f2:	4b93      	ldr	r3, [pc, #588]	; (8000640 <BEMF_Observer_Block+0x254>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	80fb      	strh	r3, [r7, #6]
	uint16_t V_DC = ADC_data[1];
 80003f8:	4b91      	ldr	r3, [pc, #580]	; (8000640 <BEMF_Observer_Block+0x254>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	80bb      	strh	r3, [r7, #4]
	//uint16_t V_Floating_Diff = 4095;
// 0 Cross Detection Block
	// differentiate BEMF to obtain value and sign of changes
	//V_Floating_Diff = (4095 + V_Floating) - V_Floating_Old;
	if((Cross == 0) && (BEMF_cnt_sign == 1) && (BEMF_time_cnt > BEMF_delay)){
 80003fe:	4b91      	ldr	r3, [pc, #580]	; (8000644 <BEMF_Observer_Block+0x258>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d134      	bne.n	8000470 <BEMF_Observer_Block+0x84>
 8000406:	4b90      	ldr	r3, [pc, #576]	; (8000648 <BEMF_Observer_Block+0x25c>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d130      	bne.n	8000470 <BEMF_Observer_Block+0x84>
 800040e:	4b8f      	ldr	r3, [pc, #572]	; (800064c <BEMF_Observer_Block+0x260>)
 8000410:	881a      	ldrh	r2, [r3, #0]
 8000412:	4b8f      	ldr	r3, [pc, #572]	; (8000650 <BEMF_Observer_Block+0x264>)
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	429a      	cmp	r2, r3
 8000418:	d92a      	bls.n	8000470 <BEMF_Observer_Block+0x84>
		if((Step_Num == 1) || (Step_Num == 3) || (Step_Num == 5)){
 800041a:	4b8e      	ldr	r3, [pc, #568]	; (8000654 <BEMF_Observer_Block+0x268>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d007      	beq.n	8000432 <BEMF_Observer_Block+0x46>
 8000422:	4b8c      	ldr	r3, [pc, #560]	; (8000654 <BEMF_Observer_Block+0x268>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d003      	beq.n	8000432 <BEMF_Observer_Block+0x46>
 800042a:	4b8a      	ldr	r3, [pc, #552]	; (8000654 <BEMF_Observer_Block+0x268>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b05      	cmp	r3, #5
 8000430:	d109      	bne.n	8000446 <BEMF_Observer_Block+0x5a>
			// BEMF voltage will be decreasing -> '\'
			//if (V_Floating_Diff < 4095){
				// If BEMF actually '\'

				if (V_Floating < V_DC/2 ) Cross = 1;
 8000432:	88bb      	ldrh	r3, [r7, #4]
 8000434:	085b      	lsrs	r3, r3, #1
 8000436:	b29b      	uxth	r3, r3
 8000438:	88fa      	ldrh	r2, [r7, #6]
 800043a:	429a      	cmp	r2, r3
 800043c:	d218      	bcs.n	8000470 <BEMF_Observer_Block+0x84>
 800043e:	4b81      	ldr	r3, [pc, #516]	; (8000644 <BEMF_Observer_Block+0x258>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e014      	b.n	8000470 <BEMF_Observer_Block+0x84>
			//}
		}else if((Step_Num == 2) || (Step_Num == 4) || (Step_Num == 6)){
 8000446:	4b83      	ldr	r3, [pc, #524]	; (8000654 <BEMF_Observer_Block+0x268>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d007      	beq.n	800045e <BEMF_Observer_Block+0x72>
 800044e:	4b81      	ldr	r3, [pc, #516]	; (8000654 <BEMF_Observer_Block+0x268>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b04      	cmp	r3, #4
 8000454:	d003      	beq.n	800045e <BEMF_Observer_Block+0x72>
 8000456:	4b7f      	ldr	r3, [pc, #508]	; (8000654 <BEMF_Observer_Block+0x268>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b06      	cmp	r3, #6
 800045c:	d108      	bne.n	8000470 <BEMF_Observer_Block+0x84>
			// Bemf voltage will be increasing -> '/'
			//if (V_Floating_Diff > 4095){
				// If BEMF actually '/'
				//if (V_Floating > 0 && V_Floating_Old) BEMF_delay = BEMF_time_cnt * 1.5;
				if (V_Floating > V_DC/2 ) Cross = 1;
 800045e:	88bb      	ldrh	r3, [r7, #4]
 8000460:	085b      	lsrs	r3, r3, #1
 8000462:	b29b      	uxth	r3, r3
 8000464:	88fa      	ldrh	r2, [r7, #6]
 8000466:	429a      	cmp	r2, r3
 8000468:	d902      	bls.n	8000470 <BEMF_Observer_Block+0x84>
 800046a:	4b76      	ldr	r3, [pc, #472]	; (8000644 <BEMF_Observer_Block+0x258>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
		}
	}
	//V_Floating_Old = V_Floating;
// 0 Cross Counter Block
	// Change counting sign when 0-cross is detected
	if (Cross == 1) {
 8000470:	4b74      	ldr	r3, [pc, #464]	; (8000644 <BEMF_Observer_Block+0x258>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d123      	bne.n	80004c0 <BEMF_Observer_Block+0xd4>
		BEMF_cnt_sign = 0;
 8000478:	4b73      	ldr	r3, [pc, #460]	; (8000648 <BEMF_Observer_Block+0x25c>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
		BEMF_delay = BEMF_time_cnt/4;
 800047e:	4b73      	ldr	r3, [pc, #460]	; (800064c <BEMF_Observer_Block+0x260>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	089b      	lsrs	r3, r3, #2
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b72      	ldr	r3, [pc, #456]	; (8000650 <BEMF_Observer_Block+0x264>)
 8000488:	801a      	strh	r2, [r3, #0]
		//if(BEMF_delay > 32) BEMF_delay = 32;
		Cross = 0;
 800048a:	4b6e      	ldr	r3, [pc, #440]	; (8000644 <BEMF_Observer_Block+0x258>)
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
		BEMF_Angle += 30;
 8000490:	4b71      	ldr	r3, [pc, #452]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	331e      	adds	r3, #30
 8000496:	b29a      	uxth	r2, r3
 8000498:	4b6f      	ldr	r3, [pc, #444]	; (8000658 <BEMF_Observer_Block+0x26c>)
 800049a:	801a      	strh	r2, [r3, #0]
		if (Div > 30) BEMF_Treshold = 0;
 800049c:	4b6f      	ldr	r3, [pc, #444]	; (800065c <BEMF_Observer_Block+0x270>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b1e      	cmp	r3, #30
 80004a2:	d903      	bls.n	80004ac <BEMF_Observer_Block+0xc0>
 80004a4:	4b6e      	ldr	r3, [pc, #440]	; (8000660 <BEMF_Observer_Block+0x274>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	e009      	b.n	80004c0 <BEMF_Observer_Block+0xd4>
		else BEMF_Treshold = BEMF_time_cnt/Div;
 80004ac:	4b67      	ldr	r3, [pc, #412]	; (800064c <BEMF_Observer_Block+0x260>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b6a      	ldr	r3, [pc, #424]	; (800065c <BEMF_Observer_Block+0x270>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b68      	ldr	r3, [pc, #416]	; (8000660 <BEMF_Observer_Block+0x274>)
 80004be:	801a      	strh	r2, [r3, #0]
	}
	//Old_Cross = Cross;
	// Counter
	if (BEMF_cnt_sign) {
 80004c0:	4b61      	ldr	r3, [pc, #388]	; (8000648 <BEMF_Observer_Block+0x25c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d006      	beq.n	80004d6 <BEMF_Observer_Block+0xea>
		BEMF_time_cnt ++;
 80004c8:	4b60      	ldr	r3, [pc, #384]	; (800064c <BEMF_Observer_Block+0x260>)
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b5e      	ldr	r3, [pc, #376]	; (800064c <BEMF_Observer_Block+0x260>)
 80004d2:	801a      	strh	r2, [r3, #0]
 80004d4:	e009      	b.n	80004ea <BEMF_Observer_Block+0xfe>
	}else {
		if (BEMF_time_cnt > 0) BEMF_time_cnt --;
 80004d6:	4b5d      	ldr	r3, [pc, #372]	; (800064c <BEMF_Observer_Block+0x260>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d005      	beq.n	80004ea <BEMF_Observer_Block+0xfe>
 80004de:	4b5b      	ldr	r3, [pc, #364]	; (800064c <BEMF_Observer_Block+0x260>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	4b59      	ldr	r3, [pc, #356]	; (800064c <BEMF_Observer_Block+0x260>)
 80004e8:	801a      	strh	r2, [r3, #0]
	}
	// When Counter reached TRESHOLD then change sign and update BEMF_Angle
	if((BEMF_time_cnt <= BEMF_Treshold) && (BEMF_cnt_sign == 0)){
 80004ea:	4b58      	ldr	r3, [pc, #352]	; (800064c <BEMF_Observer_Block+0x260>)
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <BEMF_Observer_Block+0x274>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d80f      	bhi.n	8000516 <BEMF_Observer_Block+0x12a>
 80004f6:	4b54      	ldr	r3, [pc, #336]	; (8000648 <BEMF_Observer_Block+0x25c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10b      	bne.n	8000516 <BEMF_Observer_Block+0x12a>
		BEMF_Angle += 30;
 80004fe:	4b56      	ldr	r3, [pc, #344]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	331e      	adds	r3, #30
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b54      	ldr	r3, [pc, #336]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000508:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 800050a:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <BEMF_Observer_Block+0x25c>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 8000510:	4b4e      	ldr	r3, [pc, #312]	; (800064c <BEMF_Observer_Block+0x260>)
 8000512:	2200      	movs	r2, #0
 8000514:	801a      	strh	r2, [r3, #0]
	}
	// Counter buffor reset before overflow
	if(BEMF_time_cnt >= 1024){
 8000516:	4b4d      	ldr	r3, [pc, #308]	; (800064c <BEMF_Observer_Block+0x260>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051e:	d311      	bcc.n	8000544 <BEMF_Observer_Block+0x158>
		BEMF_delay = BEMF_time_cnt/4;
 8000520:	4b4a      	ldr	r3, [pc, #296]	; (800064c <BEMF_Observer_Block+0x260>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b49      	ldr	r3, [pc, #292]	; (8000650 <BEMF_Observer_Block+0x264>)
 800052a:	801a      	strh	r2, [r3, #0]
		BEMF_Angle += 60;
 800052c:	4b4a      	ldr	r3, [pc, #296]	; (8000658 <BEMF_Observer_Block+0x26c>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	333c      	adds	r3, #60	; 0x3c
 8000532:	b29a      	uxth	r2, r3
 8000534:	4b48      	ldr	r3, [pc, #288]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000536:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 8000538:	4b43      	ldr	r3, [pc, #268]	; (8000648 <BEMF_Observer_Block+0x25c>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 800053e:	4b43      	ldr	r3, [pc, #268]	; (800064c <BEMF_Observer_Block+0x260>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]

	}
	//Old_Step = Step_Num;
	if (BEMF_Angle >= 360) BEMF_Angle = 0;
 8000544:	4b44      	ldr	r3, [pc, #272]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800054c:	d302      	bcc.n	8000554 <BEMF_Observer_Block+0x168>
 800054e:	4b42      	ldr	r3, [pc, #264]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
	Angle = BEMF_Angle;
 8000554:	4b40      	ldr	r3, [pc, #256]	; (8000658 <BEMF_Observer_Block+0x26c>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	4b42      	ldr	r3, [pc, #264]	; (8000664 <BEMF_Observer_Block+0x278>)
 800055a:	801a      	strh	r2, [r3, #0]

	if (Scan_Is_enabled > 0){
 800055c:	4b42      	ldr	r3, [pc, #264]	; (8000668 <BEMF_Observer_Block+0x27c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f000 8090 	beq.w	8000686 <BEMF_Observer_Block+0x29a>
		Scan_iter += trace_num * 4;
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <BEMF_Observer_Block+0x280>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4413      	add	r3, r2
 8000576:	b29a      	uxth	r2, r3
 8000578:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <BEMF_Observer_Block+0x284>)
 800057a:	801a      	strh	r2, [r3, #0]

		Scan_Data[Scan_iter] = V_Floating/8;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	b299      	uxth	r1, r3
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	b2c9      	uxtb	r1, r1
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <BEMF_Observer_Block+0x288>)
 800058c:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	b29a      	uxth	r2, r3
 8000596:	4b36      	ldr	r3, [pc, #216]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000598:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = HAL_GPIO_ReadPin(Hall_GPIO_Port, Hall_GPIO_Pin)*64;
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <BEMF_Observer_Block+0x28c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a37      	ldr	r2, [pc, #220]	; (800067c <BEMF_Observer_Block+0x290>)
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fc79 	bl	8002e9c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4619      	mov	r1, r3
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	018b      	lsls	r3, r1, #6
 80005b6:	b2d9      	uxtb	r1, r3
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <BEMF_Observer_Block+0x288>)
 80005ba:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005c6:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = Step_Num * 16;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <BEMF_Observer_Block+0x268>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005ce:	8812      	ldrh	r2, [r2, #0]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b2d9      	uxtb	r1, r3
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <BEMF_Observer_Block+0x288>)
 80005d6:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005e2:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = BEMF_time_cnt;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <BEMF_Observer_Block+0x260>)
 80005e6:	8819      	ldrh	r1, [r3, #0]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <BEMF_Observer_Block+0x288>)
 80005f2:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <BEMF_Observer_Block+0x284>)
 80005fe:	801a      	strh	r2, [r3, #0]

		Scan_iter += (MORE_TRACES-trace_num) * 4;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <BEMF_Observer_Block+0x280>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f1c3 0307 	rsb	r3, r3, #7
 8000608:	b29b      	uxth	r3, r3
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <BEMF_Observer_Block+0x284>)
 8000618:	801a      	strh	r2, [r3, #0]
		if (Scan_iter >= SCAN_SIZE) {
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <BEMF_Observer_Block+0x284>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000622:	d330      	bcc.n	8000686 <BEMF_Observer_Block+0x29a>
			trace_num++;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <BEMF_Observer_Block+0x280>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <BEMF_Observer_Block+0x280>)
 800062e:	701a      	strb	r2, [r3, #0]
			if(trace_num > MORE_TRACES){
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <BEMF_Observer_Block+0x280>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d923      	bls.n	8000680 <BEMF_Observer_Block+0x294>
				Scan_Is_enabled = 0;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <BEMF_Observer_Block+0x27c>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	e022      	b.n	8000686 <BEMF_Observer_Block+0x29a>
 8000640:	20000064 	.word	0x20000064
 8000644:	20000091 	.word	0x20000091
 8000648:	2000000a 	.word	0x2000000a
 800064c:	2000000c 	.word	0x2000000c
 8000650:	20000012 	.word	0x20000012
 8000654:	2000008c 	.word	0x2000008c
 8000658:	2000000e 	.word	0x2000000e
 800065c:	20000010 	.word	0x20000010
 8000660:	20000092 	.word	0x20000092
 8000664:	20000096 	.word	0x20000096
 8000668:	20000080 	.word	0x20000080
 800066c:	20000084 	.word	0x20000084
 8000670:	20000082 	.word	0x20000082
 8000674:	20000098 	.word	0x20000098
 8000678:	20000004 	.word	0x20000004
 800067c:	20000008 	.word	0x20000008
			} else Scan_iter = 0;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <BEMF_Observer_Block+0x2e0>)
 8000682:	2200      	movs	r2, #0
 8000684:	801a      	strh	r2, [r3, #0]
		}
	}
	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <BEMF_Observer_Block+0x2e4>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d115      	bne.n	80006ba <BEMF_Observer_Block+0x2ce>
		Old_Cross = 0;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <BEMF_Observer_Block+0x2e8>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		Cross = 0;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <BEMF_Observer_Block+0x2ec>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
		BEMF_cnt_sign = 0;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <BEMF_Observer_Block+0x2f0>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <BEMF_Observer_Block+0x2f4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	801a      	strh	r2, [r3, #0]
		BEMF_Angle = 330;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <BEMF_Observer_Block+0x2f8>)
 80006a8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80006ac:	801a      	strh	r2, [r3, #0]
		V_Floating_Old = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <BEMF_Observer_Block+0x2fc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	801a      	strh	r2, [r3, #0]
		BEMF_delay = 32;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <BEMF_Observer_Block+0x300>)
 80006b6:	2220      	movs	r2, #32
 80006b8:	801a      	strh	r2, [r3, #0]
	}

	Six_Step_Block(PWM_Value);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <BEMF_Observer_Block+0x2e4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f82c 	bl	800071c <Six_Step_Block>
	//Ticks_Diff = Ticks -  htim1->Instance->CNT;
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000082 	.word	0x20000082
 80006d0:	20000094 	.word	0x20000094
 80006d4:	20000090 	.word	0x20000090
 80006d8:	20000091 	.word	0x20000091
 80006dc:	2000000a 	.word	0x2000000a
 80006e0:	2000000c 	.word	0x2000000c
 80006e4:	2000000e 	.word	0x2000000e
 80006e8:	2000008e 	.word	0x2000008e
 80006ec:	20000012 	.word	0x20000012

080006f0 <Set_Observer_Div>:

void Set_Observer_Div(uint8_t div){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if(div < 1) Div = 1;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <Set_Observer_Div+0x18>
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <Set_Observer_Div+0x28>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	else Div = div;
}
 8000706:	e002      	b.n	800070e <Set_Observer_Div+0x1e>
	else Div = div;
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <Set_Observer_Div+0x28>)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	7013      	strb	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000010 	.word	0x20000010

0800071c <Six_Step_Block>:
	// Do nothing if pwm is ste to 0

	DupkoSin_Block(PWM_Value);
}

void Six_Step_Block(uint16_t PWM_Value){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10c      	bne.n	8000746 <Six_Step_Block+0x2a>
		SetFloating_A();
 800072c:	f000 f998 	bl	8000a60 <SetFloating_A>
		SetFloating_B();
 8000730:	f000 f9aa 	bl	8000a88 <SetFloating_B>
		SetFloating_C();
 8000734:	f000 f9bc 	bl	8000ab0 <SetFloating_C>
		Step_Num = 0;
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <Six_Step_Block+0x11c>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
		Old_Step = 0;
 800073e:	4b3f      	ldr	r3, [pc, #252]	; (800083c <Six_Step_Block+0x120>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		return;
 8000744:	e074      	b.n	8000830 <Six_Step_Block+0x114>
	}
	Step_Num = (Angle/60)+1;
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <Six_Step_Block+0x124>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	4a3e      	ldr	r2, [pc, #248]	; (8000844 <Six_Step_Block+0x128>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	b29b      	uxth	r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <Six_Step_Block+0x11c>)
 800075c:	701a      	strb	r2, [r3, #0]
	if(Step_Num != Old_Step){
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <Six_Step_Block+0x11c>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <Six_Step_Block+0x120>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	d062      	beq.n	8000830 <Six_Step_Block+0x114>
		if(Step_Num == 1){
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <Six_Step_Block+0x11c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10b      	bne.n	800078a <Six_Step_Block+0x6e>
			SetPulse_CH(PWM_Value);
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f95d 	bl	8000a34 <SetPulse_CH>
			SetZero_B();
 800077a:	f000 f90b 	bl	8000994 <SetZero_B>
			SetFloating_A();
 800077e:	f000 f96f 	bl	8000a60 <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 8000782:	2004      	movs	r0, #4
 8000784:	f000 f9d4 	bl	8000b30 <ADC_Change_Order>
 8000788:	e04e      	b.n	8000828 <Six_Step_Block+0x10c>
		}else if(Step_Num == 2){
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <Six_Step_Block+0x11c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d10b      	bne.n	80007aa <Six_Step_Block+0x8e>
			SetPulse_CH(PWM_Value);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f94d 	bl	8000a34 <SetPulse_CH>
			SetFloating_B();
 800079a:	f000 f975 	bl	8000a88 <SetFloating_B>
			SetZero_A();
 800079e:	f000 f8e7 	bl	8000970 <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_B);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 f9c4 	bl	8000b30 <ADC_Change_Order>
 80007a8:	e03e      	b.n	8000828 <Six_Step_Block+0x10c>
		}else if(Step_Num == 3){
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <Six_Step_Block+0x11c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d10b      	bne.n	80007ca <Six_Step_Block+0xae>
			SetFloating_C();
 80007b2:	f000 f97d 	bl	8000ab0 <SetFloating_C>
			SetPulse_BH(PWM_Value);
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f925 	bl	8000a08 <SetPulse_BH>
			SetZero_A();
 80007be:	f000 f8d7 	bl	8000970 <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_C);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 f9b4 	bl	8000b30 <ADC_Change_Order>
 80007c8:	e02e      	b.n	8000828 <Six_Step_Block+0x10c>
		}else if(Step_Num == 4){
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <Six_Step_Block+0x11c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d10b      	bne.n	80007ea <Six_Step_Block+0xce>
			SetZero_C();
 80007d2:	f000 f8f1 	bl	80009b8 <SetZero_C>
			SetPulse_BH(PWM_Value);
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f915 	bl	8000a08 <SetPulse_BH>
			SetFloating_A();
 80007de:	f000 f93f 	bl	8000a60 <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 f9a4 	bl	8000b30 <ADC_Change_Order>
 80007e8:	e01e      	b.n	8000828 <Six_Step_Block+0x10c>
		}else if(Step_Num == 5){
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <Six_Step_Block+0x11c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d10b      	bne.n	800080a <Six_Step_Block+0xee>
			SetZero_C();
 80007f2:	f000 f8e1 	bl	80009b8 <SetZero_C>
			SetFloating_B();
 80007f6:	f000 f947 	bl	8000a88 <SetFloating_B>
			SetPulse_AH(PWM_Value);
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f8ed 	bl	80009dc <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_B);
 8000802:	2003      	movs	r0, #3
 8000804:	f000 f994 	bl	8000b30 <ADC_Change_Order>
 8000808:	e00e      	b.n	8000828 <Six_Step_Block+0x10c>
		}else if(Step_Num == 6){
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <Six_Step_Block+0x11c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b06      	cmp	r3, #6
 8000810:	d10a      	bne.n	8000828 <Six_Step_Block+0x10c>
			SetFloating_C();
 8000812:	f000 f94d 	bl	8000ab0 <SetFloating_C>
			SetZero_B();
 8000816:	f000 f8bd 	bl	8000994 <SetZero_B>
			SetPulse_AH(PWM_Value);
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f8dd 	bl	80009dc <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_C);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f984 	bl	8000b30 <ADC_Change_Order>
		}
		Old_Step = Step_Num;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <Six_Step_Block+0x11c>)
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <Six_Step_Block+0x120>)
 800082e:	701a      	strb	r2, [r3, #0]
	}
}
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000008c 	.word	0x2000008c
 800083c:	2000008d 	.word	0x2000008d
 8000840:	20000096 	.word	0x20000096
 8000844:	88888889 	.word	0x88888889

08000848 <Set_PWM>:
		}
		Old_Step = Step_Num;
	}
}

void Set_PWM(uint16_t value){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	PWM_Value = value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <Set_PWM+0x1c>)
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	8013      	strh	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000094 	.word	0x20000094

08000868 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	BEMF_Observer_Block();
 8000870:	f7ff fdbc 	bl	80003ec <BEMF_Observer_Block>
	//HALL_Observer_Block();

	ADC_Ticks ++;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_ADC_ConvCpltCallback+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_ADC_ConvCpltCallback+0x20>)
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000088 	.word	0x20000088

0800088c <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <Control_Init+0xc8>)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 80008a0:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <Control_Init+0xcc>)
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 80008a6:	4a2d      	ldr	r2, [pc, #180]	; (800095c <Control_Init+0xd0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <Control_Init+0xd4>)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <Control_Init+0xd8>)
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	482a      	ldr	r0, [pc, #168]	; (8000968 <Control_Init+0xdc>)
 80008be:	f002 fb04 	bl	8002eca <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <Control_Init+0xd4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 f8bc 	bl	8003a44 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <Control_Init+0xcc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f958 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2); 	// LOW POLARITY
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <Control_Init+0xcc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f952 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <Control_Init+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f94c 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);	// LOW POLARITY
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <Control_Init+0xd0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 f946 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <Control_Init+0xc8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2104      	movs	r1, #4
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f940 	bl	8003b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  	// LOW POLARITY
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <Control_Init+0xc8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f93a 	bl	8003b88 <HAL_TIM_PWM_Start>

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <Control_Init+0xc8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2108      	movs	r1, #8
 800091a:	4618      	mov	r0, r3
 800091c:	f003 f934 	bl	8003b88 <HAL_TIM_PWM_Start>
	//htim2->Instance->CNT = 0;
	//htim3->Instance->CNT = 0;


	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 2);
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <Control_Init+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2202      	movs	r2, #2
 8000926:	4911      	ldr	r1, [pc, #68]	; (800096c <Control_Init+0xe0>)
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fa51 	bl	8001dd0 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <Control_Init+0xc8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2108      	movs	r1, #8
 8000934:	4618      	mov	r0, r3
 8000936:	f003 f9c9 	bl	8003ccc <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <Control_Init+0xc8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f001 f947 	bl	8001bd8 <HAL_Delay>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000050 	.word	0x20000050
 8000958:	20000054 	.word	0x20000054
 800095c:	20000058 	.word	0x20000058
 8000960:	2000005c 	.word	0x2000005c
 8000964:	20000060 	.word	0x20000060
 8000968:	40011400 	.word	0x40011400
 800096c:	20000064 	.word	0x20000064

08000970 <SetZero_A>:

void SetZero_A(){
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SetZero_A+0x20>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, 0);
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SetZero_A+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2200      	movs	r2, #0
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000054 	.word	0x20000054

08000994 <SetZero_B>:

void SetZero_B(){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SetZero_B+0x20>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2200      	movs	r2, #0
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, 0);
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SetZero_B+0x20>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000058 	.word	0x20000058

080009b8 <SetZero_C>:

void SetZero_C(){
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SetZero_C+0x20>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, 0);
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SetZero_C+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000050 	.word	0x20000050

080009dc <SetPulse_AH>:
///////////////////
void SetPulse_AH(uint16_t value){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <SetPulse_AH+0x28>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, value);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SetPulse_AH+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	88fa      	ldrh	r2, [r7, #6]
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000054 	.word	0x20000054

08000a08 <SetPulse_BH>:

void SetPulse_BH(uint16_t value){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <SetPulse_BH+0x28>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	88fa      	ldrh	r2, [r7, #6]
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, value);
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SetPulse_BH+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	88fa      	ldrh	r2, [r7, #6]
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000058 	.word	0x20000058

08000a34 <SetPulse_CH>:

void SetPulse_CH(uint16_t value){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <SetPulse_CH+0x28>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	88fa      	ldrh	r2, [r7, #6]
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, value);
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SetPulse_CH+0x28>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000050 	.word	0x20000050

08000a60 <SetFloating_A>:
///////////////////
void SetFloating_A(){
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <SetFloating_A+0x24>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, PWM_COUNTER);
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SetFloating_A+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f240 227f 	movw	r2, #639	; 0x27f
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000054 	.word	0x20000054

08000a88 <SetFloating_B>:

void SetFloating_B(){
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <SetFloating_B+0x24>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2200      	movs	r2, #0
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, PWM_COUNTER);
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SetFloating_B+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f240 227f 	movw	r2, #639	; 0x27f
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000058 	.word	0x20000058

08000ab0 <SetFloating_C>:

void SetFloating_C(){
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <SetFloating_C+0x24>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, PWM_COUNTER);
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SetFloating_C+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f240 227f 	movw	r2, #639	; 0x27f
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000050 	.word	0x20000050

08000ad8 <Hall_Change_Active>:
	ADC_Ticks = 0;
	while (ADC_Ticks <= ticks){}
}


void Hall_Change_Active(uint32_t pin){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if (pin == ADC_CHANNEL_A){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d107      	bne.n	8000af6 <Hall_Change_Active+0x1e>
		Hall_GPIO_Port = HALL_A_GPIO_Port;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <Hall_Change_Active+0x4c>)
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <Hall_Change_Active+0x50>)
 8000aea:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_A_Pin;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <Hall_Change_Active+0x54>)
 8000aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af2:	801a      	strh	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
	}else{
		Hall_GPIO_Port = HALL_C_GPIO_Port;
		Hall_GPIO_Pin = HALL_C_Pin;
	}
}
 8000af4:	e011      	b.n	8000b1a <Hall_Change_Active+0x42>
	}else if (pin == ADC_CHANNEL_B){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d107      	bne.n	8000b0c <Hall_Change_Active+0x34>
		Hall_GPIO_Port = HALL_B_GPIO_Port;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <Hall_Change_Active+0x4c>)
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <Hall_Change_Active+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <Hall_Change_Active+0x54>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b08:	801a      	strh	r2, [r3, #0]
}
 8000b0a:	e006      	b.n	8000b1a <Hall_Change_Active+0x42>
		Hall_GPIO_Port = HALL_C_GPIO_Port;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <Hall_Change_Active+0x4c>)
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <Hall_Change_Active+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_C_Pin;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Hall_Change_Active+0x54>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	801a      	strh	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000004 	.word	0x20000004
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	20000008 	.word	0x20000008

08000b30 <ADC_Change_Order>:

void ADC_Change_Order(uint32_t channel){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
	// Stop timer what triggers ADC conversions
	HAL_TIM_PWM_Stop_IT(htim1, TIM_CHANNEL_3);
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <ADC_Change_Order+0xa0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 f9a6 	bl	8003e9c <HAL_TIM_PWM_Stop_IT>
	// Stop ADC DMA
	HAL_ADC_Stop_DMA(hadc1);
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <ADC_Change_Order+0xa4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fa19 	bl	8001f8c <HAL_ADC_Stop_DMA>
	// Change order of conversions
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
	sConfig.Channel = channel;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)  Error_Handler();
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <ADC_Change_Order+0xa4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f107 020c 	add.w	r2, r7, #12
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fa69 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <ADC_Change_Order+0x50>
 8000b7c:	f000 fc48 	bl	8001410 <Error_Handler>
	// Start ADC DMA
	HAL_ADC_Start_DMA(hadc1, ADC_data, 2);
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <ADC_Change_Order+0xa4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <ADC_Change_Order+0xa8>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f921 	bl	8001dd0 <HAL_ADC_Start_DMA>
	// Start timer what triggers ADC conversions
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <ADC_Change_Order+0xa0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2108      	movs	r1, #8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 f899 	bl	8003ccc <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <ADC_Change_Order+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	// Timers synchonisation
	htim1->Instance->CNT = 0;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <ADC_Change_Order+0xa0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <ADC_Change_Order+0xac>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <ADC_Change_Order+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
	Hall_Change_Active(channel);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff88 	bl	8000ad8 <Hall_Change_Active>
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000050 	.word	0x20000050
 8000bd4:	20000060 	.word	0x20000060
 8000bd8:	20000064 	.word	0x20000064
 8000bdc:	20000054 	.word	0x20000054
 8000be0:	20000058 	.word	0x20000058

08000be4 <HAL_TIM_TriggerCallback>:
		__HAL_TIM_SET_COUNTER(htim4,0);
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
}

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
//		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
//			test = __HAL_TIM_GET_COUNTER(htim1);
//			test = __HAL_TIM_GET_COUNTER(htim1);
//		}
//	}
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfe:	f000 ff89 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f835 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f000 fb79 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0a:	f000 fb49 	bl	80012a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c0e:	f000 f887 	bl	8000d20 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000c12:	f000 f8d3 	bl	8000dbc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c16:	f000 f909 	bl	8000e2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c1a:	f000 fa45 	bl	80010a8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000c1e:	f000 f9c1 	bl	8000fa4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c22:	f000 fb13 	bl	800124c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000c26:	f000 fac3 	bl	80011b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

	DRV_Init(&hspi1);
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <main+0x5c>)
 8000c2c:	f7ff fa8e 	bl	800014c <DRV_Init>
	//DRV_Write(SHUNT_AMPLIFIER_CONTROL,
	//		(GAIN_CS1 & 0xffff) +
	//		(GAIN_CS2 & 0xffff) +
	//		(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <main+0x60>)
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <main+0x64>)
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <main+0x68>)
 8000c38:	490a      	ldr	r1, [pc, #40]	; (8000c64 <main+0x6c>)
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <main+0x70>)
 8000c3c:	f7ff fe26 	bl	800088c <Control_Init>
	Application_Init(&huart1);
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <main+0x74>)
 8000c42:	f7ff faef 	bl	8000224 <Application_Init>

	HAL_Delay(1);
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 ffc6 	bl	8001bd8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	Application_Update();
 8000c4c:	f7ff fb94 	bl	8000378 <Application_Update>
 8000c50:	e7fc      	b.n	8000c4c <main+0x54>
 8000c52:	bf00      	nop
 8000c54:	200042b0 	.word	0x200042b0
 8000c58:	2000416c 	.word	0x2000416c
 8000c5c:	20004098 	.word	0x20004098
 8000c60:	200040e0 	.word	0x200040e0
 8000c64:	20004308 	.word	0x20004308
 8000c68:	20004268 	.word	0x20004268
 8000c6c:	200041e0 	.word	0x200041e0

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	; 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fdee 	bl	8005860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cb4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 f91c 	bl	8002efc <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000cca:	f000 fba1 	bl	8001410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fb86 	bl	80033fc <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cf6:	f000 fb8b 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd12 	bl	8003730 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d12:	f000 fb7d 	bl	8001410 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d32:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5e:	4815      	ldr	r0, [pc, #84]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d60:	f000 ff5e 	bl	8001c20 <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d6a:	f000 fb51 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d80:	f001 f962 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 fb41 	bl	8001410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_ADC1_Init+0x94>)
 8000d9c:	f001 f954 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000da6:	f000 fb33 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000416c 	.word	0x2000416c
 8000db8:	40012400 	.word	0x40012400

08000dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <MX_SPI1_Init+0x6c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_SPI1_Init+0x68>)
 8000e10:	f002 fd44 	bl	800389c <HAL_SPI_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e1a:	f000 faf9 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200042b0 	.word	0x200042b0
 8000e28:	40013000 	.word	0x40013000

08000e2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fcfb 	bl	8005860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <MX_TIM1_Init+0x174>)
 8000e6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8000e70:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e76:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e78:	2220      	movs	r2, #32
 8000e7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8000e7c:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e7e:	f240 227f 	movw	r2, #639	; 0x27f
 8000e82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000e98:	f002 fd84 	bl	80039a4 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ea2:	f000 fab5 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	483a      	ldr	r0, [pc, #232]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000eb4:	f003 fa62 	bl	800437c <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f000 faa7 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ec2:	4836      	ldr	r0, [pc, #216]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000ec4:	f002 fe08 	bl	8003ad8 <HAL_TIM_PWM_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ece:	f000 fa9f 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000ed2:	2360      	movs	r3, #96	; 0x60
 8000ed4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ede:	4619      	mov	r1, r3
 8000ee0:	482e      	ldr	r0, [pc, #184]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000ee2:	f003 fdd7 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000eec:	f000 fa90 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4821      	ldr	r0, [pc, #132]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000f16:	f003 f973 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f20:	f000 fa76 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481a      	ldr	r0, [pc, #104]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000f32:	f003 f965 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f3c:	f000 fa68 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000f4e:	f003 f957 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000f58:	f000 fa5a 	bl	8001410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000f80:	f003 fde6 	bl	8004b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000f8a:	f000 fa41 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <MX_TIM1_Init+0x170>)
 8000f90:	f000 fba0 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3758      	adds	r7, #88	; 0x58
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20004268 	.word	0x20004268
 8000fa0:	40012c00 	.word	0x40012c00

08000fa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000fea:	f240 227f 	movw	r2, #639	; 0x27f
 8000fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffc:	4829      	ldr	r0, [pc, #164]	; (80010a4 <MX_TIM2_Init+0x100>)
 8000ffe:	f002 fcd1 	bl	80039a4 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001008:	f000 fa02 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001016:	4619      	mov	r1, r3
 8001018:	4822      	ldr	r0, [pc, #136]	; (80010a4 <MX_TIM2_Init+0x100>)
 800101a:	f003 f9af 	bl	800437c <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001024:	f000 f9f4 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001028:	481e      	ldr	r0, [pc, #120]	; (80010a4 <MX_TIM2_Init+0x100>)
 800102a:	f002 fd55 	bl	8003ad8 <HAL_TIM_PWM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001034:	f000 f9ec 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4619      	mov	r1, r3
 8001046:	4817      	ldr	r0, [pc, #92]	; (80010a4 <MX_TIM2_Init+0x100>)
 8001048:	f003 fd24 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001052:	f000 f9dd 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_TIM2_Init+0x100>)
 800106e:	f003 f8c7 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001078:	f000 f9ca 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2204      	movs	r2, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM2_Init+0x100>)
 8001088:	f003 f8ba 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001092:	f000 f9bd 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM2_Init+0x100>)
 8001098:	f000 fb1c 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20004308 	.word	0x20004308

080010a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_TIM3_Init+0x104>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010e6:	2220      	movs	r2, #32
 80010e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010ec:	f240 227f 	movw	r2, #639	; 0x27f
 80010f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_TIM3_Init+0x100>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010fe:	482a      	ldr	r0, [pc, #168]	; (80011a8 <MX_TIM3_Init+0x100>)
 8001100:	f002 fc50 	bl	80039a4 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800110a:	f000 f981 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001118:	4619      	mov	r1, r3
 800111a:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_TIM3_Init+0x100>)
 800111c:	f003 f92e 	bl	800437c <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001126:	f000 f973 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800112a:	481f      	ldr	r0, [pc, #124]	; (80011a8 <MX_TIM3_Init+0x100>)
 800112c:	f002 fcd4 	bl	8003ad8 <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001136:	f000 f96b 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4619      	mov	r1, r3
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <MX_TIM3_Init+0x100>)
 800114a:	f003 fca3 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001154:	f000 f95c 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_TIM3_Init+0x100>)
 8001170:	f003 f846 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800117a:	f000 f949 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2204      	movs	r2, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM3_Init+0x100>)
 800118a:	f003 f839 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001194:	f000 f93c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM3_Init+0x100>)
 800119a:	f000 fa9b 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	; 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200040e0 	.word	0x200040e0
 80011ac:	40000400 	.word	0x40000400

080011b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM4_Init+0x94>)
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <MX_TIM4_Init+0x98>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_TIM4_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_TIM4_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM4_Init+0x94>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_TIM4_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM4_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MX_TIM4_Init+0x94>)
 80011f4:	f002 fbd6 	bl	80039a4 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 f907 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_TIM4_Init+0x94>)
 8001210:	f003 f8b4 	bl	800437c <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f8f9 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_TIM4_Init+0x94>)
 800122c:	f003 fc32 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 f8eb 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20004098 	.word	0x20004098
 8001248:	40000800 	.word	0x40000800

0800124c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_USART1_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001258:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART1_UART_Init+0x4c>)
 8001284:	f003 fcc7 	bl	8004c16 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f8bf 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200041e0 	.word	0x200041e0
 800129c:	40013800 	.word	0x40013800

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_DMA_Init+0x58>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_DMA_Init+0x58>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6153      	str	r3, [r2, #20]
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_DMA_Init+0x58>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	200b      	movs	r0, #11
 80012c4:	f001 f991 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c8:	200b      	movs	r0, #11
 80012ca:	f001 f9aa 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200e      	movs	r0, #14
 80012d4:	f001 f989 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012d8:	200e      	movs	r0, #14
 80012da:	f001 f9a2 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200f      	movs	r0, #15
 80012e4:	f001 f981 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012e8:	200f      	movs	r0, #15
 80012ea:	f001 f99a 	bl	8002622 <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <MX_GPIO_Init+0x100>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a39      	ldr	r2, [pc, #228]	; (80013fc <MX_GPIO_Init+0x100>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_GPIO_Init+0x100>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_GPIO_Init+0x100>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <MX_GPIO_Init+0x100>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <MX_GPIO_Init+0x100>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <MX_GPIO_Init+0x100>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <MX_GPIO_Init+0x100>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <MX_GPIO_Init+0x100>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2101      	movs	r1, #1
 800135c:	4828      	ldr	r0, [pc, #160]	; (8001400 <MX_GPIO_Init+0x104>)
 800135e:	f001 fdb4 	bl	8002eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2104      	movs	r1, #4
 8001366:	4827      	ldr	r0, [pc, #156]	; (8001404 <MX_GPIO_Init+0x108>)
 8001368:	f001 fdaf 	bl	8002eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	481f      	ldr	r0, [pc, #124]	; (8001400 <MX_GPIO_Init+0x104>)
 8001384:	f001 fc06 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001388:	2302      	movs	r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <MX_GPIO_Init+0x104>)
 800139c:	f001 fbfa 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80013a0:	2304      	movs	r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_GPIO_Init+0x108>)
 80013b8:	f001 fbec 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_B_Pin HALL_A_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_B_Pin|HALL_A_Pin|HALL_C_Pin;
 80013bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_GPIO_Init+0x10c>)
 80013d2:	f001 fbdf 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_GPIO_Init+0x110>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <MX_GPIO_Init+0x110>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	6053      	str	r3, [r2, #4]

}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40011400 	.word	0x40011400
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40010800 	.word	0x40010800
 800140c:	40010000 	.word	0x40010000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a33      	ldr	r2, [pc, #204]	; (8001568 <HAL_ADC_MspInit+0xe8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d15f      	bne.n	8001560 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_ADC_MspInit+0xec>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 80014e8:	231f      	movs	r3, #31
 80014ea:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	4619      	mov	r1, r3
 80014f6:	481e      	ldr	r0, [pc, #120]	; (8001570 <HAL_ADC_MspInit+0xf0>)
 80014f8:	f001 fb4c 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 80014fc:	2303      	movs	r3, #3
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4619      	mov	r1, r3
 800150a:	481a      	ldr	r0, [pc, #104]	; (8001574 <HAL_ADC_MspInit+0xf4>)
 800150c:	f001 fb42 	bl	8002b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001512:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_ADC_MspInit+0xfc>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001536:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800153a:	2220      	movs	r2, #32
 800153c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001546:	f001 f887 	bl	8002658 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001550:	f7ff ff5e 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 8001558:	621a      	str	r2, [r3, #32]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_ADC_MspInit+0xf8>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012400 	.word	0x40012400
 800156c:	40021000 	.word	0x40021000
 8001570:	40010800 	.word	0x40010800
 8001574:	40010c00 	.word	0x40010c00
 8001578:	20004224 	.word	0x20004224
 800157c:	40020008 	.word	0x40020008

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_SPI_MspInit+0x88>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12f      	bne.n	8001600 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 80015d0:	23a0      	movs	r3, #160	; 0xa0
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015e4:	f001 fad6 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_SPI_MspInit+0x90>)
 80015fc:	f001 faca 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 800162c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2019      	movs	r0, #25
 8001644:	f000 ffd1 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001648:	2019      	movs	r0, #25
 800164a:	f000 ffea 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164e:	e034      	b.n	80016ba <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001658:	d10c      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
}
 8001672:	e022      	b.n	80016ba <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_TIM_Base_MspInit+0xb8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10c      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	e010      	b.n	80016ba <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_TIM_Base_MspInit+0xbc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10b      	bne.n	80016ba <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_TIM_Base_MspInit+0xb4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40012c00 	.word	0x40012c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800

080016d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_TIM_MspPostInit+0x14c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d119      	bne.n	8001728 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CL_Pin|PWM_CH_Pin;
 800170c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2302      	movs	r3, #2
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	4619      	mov	r1, r3
 8001720:	4841      	ldr	r0, [pc, #260]	; (8001828 <HAL_TIM_MspPostInit+0x154>)
 8001722:	f001 fa37 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001726:	e077      	b.n	8001818 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d143      	bne.n	80017ba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a35      	ldr	r2, [pc, #212]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 8001762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0318 	add.w	r3, r7, #24
 8001774:	4619      	mov	r1, r3
 8001776:	482c      	ldr	r0, [pc, #176]	; (8001828 <HAL_TIM_MspPostInit+0x154>)
 8001778:	f001 fa0c 	bl	8002b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AL_Pin;
 800177c:	2308      	movs	r3, #8
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2302      	movs	r3, #2
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AL_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4619      	mov	r1, r3
 800178e:	4827      	ldr	r0, [pc, #156]	; (800182c <HAL_TIM_MspPostInit+0x158>)
 8001790:	f001 fa00 	bl	8002b94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_TIM_MspPostInit+0x15c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_TIM_MspPostInit+0x15c>)
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	6053      	str	r3, [r2, #4]
}
 80017b8:	e02e      	b.n	8001818 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_TIM_MspPostInit+0x160>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d129      	bne.n	8001818 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_TIM_MspPostInit+0x150>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_Pin|PWM_BL_Pin;
 80017dc:	2330      	movs	r3, #48	; 0x30
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2302      	movs	r3, #2
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4619      	mov	r1, r3
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <HAL_TIM_MspPostInit+0x158>)
 80017f0:	f001 f9d0 	bl	8002b94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_MspPostInit+0x15c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001812:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_TIM_MspPostInit+0x15c>)
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	6053      	str	r3, [r2, #4]
}
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800
 800182c:	40010c00 	.word	0x40010c00
 8001830:	40010000 	.word	0x40010000
 8001834:	40000400 	.word	0x40000400

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <HAL_UART_MspInit+0x150>)
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 8092 	bne.w	800197e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <HAL_UART_MspInit+0x154>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_UART_MspInit+0x154>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_UART_MspInit+0x154>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b46      	ldr	r3, [pc, #280]	; (800198c <HAL_UART_MspInit+0x154>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <HAL_UART_MspInit+0x154>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_UART_MspInit+0x154>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800188a:	2340      	movs	r3, #64	; 0x40
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	483c      	ldr	r0, [pc, #240]	; (8001990 <HAL_UART_MspInit+0x158>)
 800189e:	f001 f979 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4836      	ldr	r0, [pc, #216]	; (8001990 <HAL_UART_MspInit+0x158>)
 80018b6:	f001 f96d 	bl	8002b94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_UART_MspInit+0x15c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_UART_MspInit+0x15c>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_UART_MspInit+0x164>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_UART_MspInit+0x160>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_UART_MspInit+0x160>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001906:	4824      	ldr	r0, [pc, #144]	; (8001998 <HAL_UART_MspInit+0x160>)
 8001908:	f000 fea6 	bl	8002658 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001912:	f7ff fd7d 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <HAL_UART_MspInit+0x160>)
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_UART_MspInit+0x160>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_UART_MspInit+0x16c>)
 8001926:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_UART_MspInit+0x168>)
 800192a:	2210      	movs	r2, #16
 800192c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0x168>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0x168>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001952:	4813      	ldr	r0, [pc, #76]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001954:	f000 fe80 	bl	8002658 <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800195e:	f7ff fd57 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_UART_MspInit+0x168>)
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_UART_MspInit+0x168>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2025      	movs	r0, #37	; 0x25
 8001974:	f000 fe39 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001978:	2025      	movs	r0, #37	; 0x25
 800197a:	f000 fe52 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40013800 	.word	0x40013800
 800198c:	40021000 	.word	0x40021000
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40010000 	.word	0x40010000
 8001998:	2000419c 	.word	0x2000419c
 800199c:	40020058 	.word	0x40020058
 80019a0:	20004128 	.word	0x20004128
 80019a4:	40020044 	.word	0x40020044

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <HardFault_Handler+0x4>

080019ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <MemManage_Handler+0x4>

080019c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <BusFault_Handler+0x4>

080019c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <UsageFault_Handler+0x4>

080019cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f8d4 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA1_Channel1_IRQHandler+0x10>)
 8001a02:	f000 ff93 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20004224 	.word	0x20004224

08001a10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA1_Channel4_IRQHandler+0x10>)
 8001a16:	f000 ff89 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20004128 	.word	0x20004128

08001a24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA1_Channel5_IRQHandler+0x10>)
 8001a2a:	f000 ff7f 	bl	800292c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000419c 	.word	0x2000419c

08001a38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM1_UP_IRQHandler+0x10>)
 8001a3e:	f002 fad7 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20004268 	.word	0x20004268

08001a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART1_IRQHandler+0x10>)
 8001a52:	f003 f9c9 	bl	8004de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200041e0 	.word	0x200041e0

08001a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <SystemInit+0x5c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <SystemInit+0x5c>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <SystemInit+0x5c>)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4911      	ldr	r1, [pc, #68]	; (8001abc <SystemInit+0x5c>)
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <SystemInit+0x60>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <SystemInit+0x5c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <SystemInit+0x5c>)
 8001a82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <SystemInit+0x5c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SystemInit+0x5c>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <SystemInit+0x5c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x5c>)
 8001a9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001aa2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SystemInit+0x5c>)
 8001aa6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001aaa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SystemInit+0x64>)
 8001aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab2:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	f8ff0000 	.word	0xf8ff0000
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ac8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001aca:	e003      	b.n	8001ad4 <LoopCopyDataInit>

08001acc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ace:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ad0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ad2:	3104      	adds	r1, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ad8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ada:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001adc:	d3f6      	bcc.n	8001acc <CopyDataInit>
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ae0:	e002      	b.n	8001ae8 <LoopFillZerobss>

08001ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ae4:	f842 3b04 	str.w	r3, [r2], #4

08001ae8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001aea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001aec:	d3f9      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aee:	f7ff ffb7 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f003 fe91 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af6:	f7ff f87f 	bl	8000bf8 <main>
  bx lr
 8001afa:	4770      	bx	lr
  ldr r3, =_sidata
 8001afc:	080058b8 	.word	0x080058b8
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b04:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8001b08:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8001b0c:	20004354 	.word	0x20004354

08001b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC1_2_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_Init+0x28>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_Init+0x28>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 fd55 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fc74 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd6d 	bl	800263e <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 fd35 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000014 	.word	0x20000014
 8001b98:	2000001c 	.word	0x2000001c
 8001b9c:	20000018 	.word	0x20000018

08001ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x1c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x20>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <HAL_IncTick+0x20>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000001c 	.word	0x2000001c
 8001bc0:	20004350 	.word	0x20004350

08001bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <HAL_GetTick+0x10>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20004350 	.word	0x20004350

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffe0 	bl	8001bc4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000001c 	.word	0x2000001c

08001c20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0be      	b.n	8001dc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fc0e 	bl	8001480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fb41 	bl	80022ec <ADC_ConversionStop_Disable>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8099 	bne.w	8001dae <HAL_ADC_Init+0x18e>
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8095 	bne.w	8001dae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c8c:	f023 0302 	bic.w	r3, r3, #2
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7b1b      	ldrb	r3, [r3, #12]
 8001ca6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ADC_Init+0xa2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_ADC_Init+0xa8>
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	e000      	b.n	8001cca <HAL_ADC_Init+0xaa>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7d1b      	ldrb	r3, [r3, #20]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d119      	bne.n	8001d0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7b1b      	ldrb	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	035a      	lsls	r2, r3, #13
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e00b      	b.n	8001d0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f043 0220 	orr.w	r2, r3, #32
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_ADC_Init+0x1a8>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d003      	beq.n	8001d46 <HAL_ADC_Init+0x126>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d104      	bne.n	8001d50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	051b      	lsls	r3, r3, #20
 8001d4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_ADC_Init+0x1ac>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d10b      	bne.n	8001d8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d8a:	e018      	b.n	8001dbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f023 0312 	bic.w	r3, r3, #18
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dac:	e007      	b.n	8001dbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	ffe1f7fd 	.word	0xffe1f7fd
 8001dcc:	ff1f0efe 	.word	0xff1f0efe

08001dd0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a64      	ldr	r2, [pc, #400]	; (8001f78 <HAL_ADC_Start_DMA+0x1a8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_Start_DMA+0x24>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_ADC_Start_DMA+0x1ac>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d106      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x32>
 8001df4:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_ADC_Start_DMA+0x1a8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 80b3 	bne.w	8001f68 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_Start_DMA+0x40>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e0ae      	b.n	8001f6e <HAL_ADC_Start_DMA+0x19e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fa0d 	bl	8002238 <ADC_Enable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 809a 	bne.w	8001f5e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_ADC_Start_DMA+0x1ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_Start_DMA+0x84>
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_ADC_Start_DMA+0x1a8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d115      	bne.n	8001e80 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d026      	beq.n	8001ebc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e7e:	e01d      	b.n	8001ebc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a39      	ldr	r2, [pc, #228]	; (8001f78 <HAL_ADC_Start_DMA+0x1a8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_ADC_Start_DMA+0xd0>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a38      	ldr	r2, [pc, #224]	; (8001f7c <HAL_ADC_Start_DMA+0x1ac>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10d      	bne.n	8001ebc <HAL_ADC_Start_DMA+0xec>
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_ADC_Start_DMA+0x1a8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f023 0206 	bic.w	r2, r3, #6
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <HAL_ADC_Start_DMA+0x1b0>)
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_ADC_Start_DMA+0x1b4>)
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_ADC_Start_DMA+0x1b8>)
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f14:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a18      	ldr	r0, [r3, #32]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	334c      	adds	r3, #76	; 0x4c
 8001f20:	4619      	mov	r1, r3
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f000 fbf1 	bl	800270c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f38:	d108      	bne.n	8001f4c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f48:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f4a:	e00f      	b.n	8001f6c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f5a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f5c:	e006      	b.n	8001f6c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f66:	e001      	b.n	8001f6c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012400 	.word	0x40012400
 8001f7c:	40012800 	.word	0x40012800
 8001f80:	0800236f 	.word	0x0800236f
 8001f84:	080023eb 	.word	0x080023eb
 8001f88:	08002407 	.word	0x08002407

08001f8c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Stop_DMA+0x1a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e039      	b.n	800201a <HAL_ADC_Stop_DMA+0x8e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f99c 	bl	80022ec <ADC_ConversionStop_Disable>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d128      	bne.n	8002010 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d11a      	bne.n	8002010 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fbf3 	bl	80027ca <HAL_DMA_Abort>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
 8002002:	e005      	b.n	8002010 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x20>
 8002064:	2302      	movs	r3, #2
 8002066:	e0dc      	b.n	8002222 <HAL_ADC_ConfigChannel+0x1da>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d81c      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b05      	subs	r3, #5
 800208a:	221f      	movs	r2, #31
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	4019      	ands	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b05      	subs	r3, #5
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34
 80020b0:	e03c      	b.n	800212c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d81c      	bhi.n	80020f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b23      	subs	r3, #35	; 0x23
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4019      	ands	r1, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b23      	subs	r3, #35	; 0x23
 80020e6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
 80020f2:	e01b      	b.n	800212c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b41      	subs	r3, #65	; 0x41
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b41      	subs	r3, #65	; 0x41
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b09      	cmp	r3, #9
 8002132:	d91c      	bls.n	800216e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68d9      	ldr	r1, [r3, #12]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	3b1e      	subs	r3, #30
 8002146:	2207      	movs	r2, #7
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	4019      	ands	r1, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6898      	ldr	r0, [r3, #8]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	3b1e      	subs	r3, #30
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	e019      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6919      	ldr	r1, [r3, #16]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	2207      	movs	r2, #7
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	4019      	ands	r1, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6898      	ldr	r0, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	fa00 f203 	lsl.w	r2, r0, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d003      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ae:	2b11      	cmp	r3, #17
 80021b0:	d132      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_ADC_ConfigChannel+0x1e4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d125      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d126      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d11a      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_ADC_ConfigChannel+0x1e8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <HAL_ADC_ConfigChannel+0x1ec>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9a      	lsrs	r2, r3, #18
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x1b2>
 8002206:	e007      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012400 	.word	0x40012400
 8002230:	20000014 	.word	0x20000014
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d040      	beq.n	80022d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <ADC_Enable+0xac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <ADC_Enable+0xb0>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9b      	lsrs	r3, r3, #18
 8002272:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002274:	e002      	b.n	800227c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3b01      	subs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002282:	f7ff fc9f 	bl	8001bc4 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002288:	e01f      	b.n	80022ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800228a:	f7ff fc9b 	bl	8001bc4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d918      	bls.n	80022ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d011      	beq.n	80022ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f043 0210 	orr.w	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e007      	b.n	80022da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d1d8      	bne.n	800228a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014
 80022e8:	431bde83 	.word	0x431bde83

080022ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d12e      	bne.n	8002364 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002316:	f7ff fc55 	bl	8001bc4 <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	e01b      	b.n	8002356 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231e:	f7ff fc51 	bl	8001bc4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d914      	bls.n	8002356 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10d      	bne.n	8002356 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d0dc      	beq.n	800231e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002384:	2b00      	cmp	r3, #0
 8002386:	d127      	bne.n	80023d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800239e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a2:	d115      	bne.n	80023d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7fe fa49 	bl	8000868 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023d6:	e004      	b.n	80023e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff fe12 	bl	8002022 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff fe01 	bl	8002034 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db0b      	blt.n	80024ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4906      	ldr	r1, [pc, #24]	; (80024d4 <__NVIC_EnableIRQ+0x34>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2001      	movs	r0, #1
 80024c2:	fa00 f202 	lsl.w	r2, r0, r2
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	; (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff90 	bl	80024d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff2d 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff42 	bl	8002484 <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff90 	bl	800252c <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5f 	bl	80024d8 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff35 	bl	80024a0 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e043      	b.n	80026f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_DMA_Init+0xa8>)
 8002676:	4413      	add	r3, r2
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Init+0xac>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_DMA_Init+0xb0>)
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	bffdfff8 	.word	0xbffdfff8
 8002704:	cccccccd 	.word	0xcccccccd
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_DMA_Start_IT+0x20>
 8002728:	2302      	movs	r3, #2
 800272a:	e04a      	b.n	80027c2 <HAL_DMA_Start_IT+0xb6>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800273a:	2b01      	cmp	r3, #1
 800273c:	d13a      	bne.n	80027b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9e8 	bl	8002b38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 020e 	orr.w	r2, r2, #14
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0204 	bic.w	r2, r2, #4
 8002790:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 020a 	orr.w	r2, r2, #10
 80027a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e005      	b.n	80027c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d008      	beq.n	80027f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2204      	movs	r2, #4
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e020      	b.n	8002834 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020e 	bic.w	r2, r2, #14
 8002800:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002852:	2b02      	cmp	r3, #2
 8002854:	d005      	beq.n	8002862 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2204      	movs	r2, #4
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e051      	b.n	8002906 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020e 	bic.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_DMA_Abort_IT+0xd0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d029      	beq.n	80028e0 <HAL_DMA_Abort_IT+0xa0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_DMA_Abort_IT+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_DMA_Abort_IT+0x9c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_DMA_Abort_IT+0xd8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01a      	beq.n	80028d6 <HAL_DMA_Abort_IT+0x96>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_DMA_Abort_IT+0xdc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d012      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x90>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_DMA_Abort_IT+0xe0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00a      	beq.n	80028ca <HAL_DMA_Abort_IT+0x8a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_DMA_Abort_IT+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d102      	bne.n	80028c4 <HAL_DMA_Abort_IT+0x84>
 80028be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c2:	e00e      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	e00b      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ce:	e008      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	e005      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028da:	e002      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028dc:	2310      	movs	r3, #16
 80028de:	e000      	b.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 80028e0:	2301      	movs	r3, #1
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_DMA_Abort_IT+0xe8>)
 80028e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
    } 
  }
  return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40020008 	.word	0x40020008
 8002914:	4002001c 	.word	0x4002001c
 8002918:	40020030 	.word	0x40020030
 800291c:	40020044 	.word	0x40020044
 8002920:	40020058 	.word	0x40020058
 8002924:	4002006c 	.word	0x4002006c
 8002928:	40020000 	.word	0x40020000

0800292c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2204      	movs	r2, #4
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d04f      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xc8>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_DMA_IRQHandler+0x1f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d029      	beq.n	80029da <HAL_DMA_IRQHandler+0xae>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_DMA_IRQHandler+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xaa>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a63      	ldr	r2, [pc, #396]	; (8002b24 <HAL_DMA_IRQHandler+0x1f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xa4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a62      	ldr	r2, [pc, #392]	; (8002b28 <HAL_DMA_IRQHandler+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0x9e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a60      	ldr	r2, [pc, #384]	; (8002b2c <HAL_DMA_IRQHandler+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x98>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5f      	ldr	r2, [pc, #380]	; (8002b30 <HAL_DMA_IRQHandler+0x204>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_DMA_IRQHandler+0x92>
 80029b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029bc:	e00e      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c2:	e00b      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c8:	e008      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ce:	e005      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	e002      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	e000      	b.n	80029dc <HAL_DMA_IRQHandler+0xb0>
 80029da:	2304      	movs	r3, #4
 80029dc:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_DMA_IRQHandler+0x208>)
 80029de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8094 	beq.w	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029f2:	e08e      	b.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2202      	movs	r2, #2
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d056      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x186>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d051      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020a 	bic.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a38      	ldr	r2, [pc, #224]	; (8002b1c <HAL_DMA_IRQHandler+0x1f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d029      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x166>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <HAL_DMA_IRQHandler+0x1f4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x162>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <HAL_DMA_IRQHandler+0x1f8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x15c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_DMA_IRQHandler+0x1fc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d012      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x156>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <HAL_DMA_IRQHandler+0x200>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x150>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_DMA_IRQHandler+0x204>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x14a>
 8002a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a74:	e00e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	e00b      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a80:	e008      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a86:	e005      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8c:	e002      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x168>
 8002a92:	2302      	movs	r3, #2
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_DMA_IRQHandler+0x208>)
 8002a96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d034      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ab0:	e02f      	b.n	8002b12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 020e 	bic.w	r2, r2, #14
 8002ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
    }
  }
  return;
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
}
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40020008 	.word	0x40020008
 8002b20:	4002001c 	.word	0x4002001c
 8002b24:	40020030 	.word	0x40020030
 8002b28:	40020044 	.word	0x40020044
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	4002006c 	.word	0x4002006c
 8002b34:	40020000 	.word	0x40020000

08002b38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d108      	bne.n	8002b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b76:	e007      	b.n	8002b88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b08b      	sub	sp, #44	; 0x2c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba6:	e169      	b.n	8002e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8158 	bne.w	8002e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a9a      	ldr	r2, [pc, #616]	; (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d05e      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bd0:	4a98      	ldr	r2, [pc, #608]	; (8002e34 <HAL_GPIO_Init+0x2a0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d875      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bd6:	4a98      	ldr	r2, [pc, #608]	; (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d058      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bdc:	4a96      	ldr	r2, [pc, #600]	; (8002e38 <HAL_GPIO_Init+0x2a4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d86f      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002be2:	4a96      	ldr	r2, [pc, #600]	; (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d052      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002be8:	4a94      	ldr	r2, [pc, #592]	; (8002e3c <HAL_GPIO_Init+0x2a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d869      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bee:	4a94      	ldr	r2, [pc, #592]	; (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04c      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002bf4:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_GPIO_Init+0x2ac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d863      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002bfa:	4a92      	ldr	r2, [pc, #584]	; (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d046      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
 8002c00:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d85d      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d82a      	bhi.n	8002c60 <HAL_GPIO_Init+0xcc>
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d859      	bhi.n	8002cc2 <HAL_GPIO_Init+0x12e>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_GPIO_Init+0x80>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c8f 	.word	0x08002c8f
 8002c18:	08002c69 	.word	0x08002c69
 8002c1c:	08002c7b 	.word	0x08002c7b
 8002c20:	08002cbd 	.word	0x08002cbd
 8002c24:	08002cc3 	.word	0x08002cc3
 8002c28:	08002cc3 	.word	0x08002cc3
 8002c2c:	08002cc3 	.word	0x08002cc3
 8002c30:	08002cc3 	.word	0x08002cc3
 8002c34:	08002cc3 	.word	0x08002cc3
 8002c38:	08002cc3 	.word	0x08002cc3
 8002c3c:	08002cc3 	.word	0x08002cc3
 8002c40:	08002cc3 	.word	0x08002cc3
 8002c44:	08002cc3 	.word	0x08002cc3
 8002c48:	08002cc3 	.word	0x08002cc3
 8002c4c:	08002cc3 	.word	0x08002cc3
 8002c50:	08002cc3 	.word	0x08002cc3
 8002c54:	08002cc3 	.word	0x08002cc3
 8002c58:	08002c71 	.word	0x08002c71
 8002c5c:	08002c85 	.word	0x08002c85
 8002c60:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_GPIO_Init+0x2b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c66:	e02c      	b.n	8002cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	623b      	str	r3, [r7, #32]
          break;
 8002c6e:	e029      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	3304      	adds	r3, #4
 8002c76:	623b      	str	r3, [r7, #32]
          break;
 8002c78:	e024      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e01f      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c96:	2304      	movs	r3, #4
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e013      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
          break;
 8002cae:	e009      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	615a      	str	r2, [r3, #20]
          break;
 8002cba:	e003      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
          break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x130>
          break;
 8002cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d801      	bhi.n	8002cce <HAL_GPIO_Init+0x13a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e001      	b.n	8002cd2 <HAL_GPIO_Init+0x13e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2bff      	cmp	r3, #255	; 0xff
 8002cd8:	d802      	bhi.n	8002ce0 <HAL_GPIO_Init+0x14c>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x152>
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	3b08      	subs	r3, #8
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	210f      	movs	r1, #15
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	431a      	orrs	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80b1 	beq.w	8002e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d14:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a4c      	ldr	r2, [pc, #304]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_GPIO_Init+0x2b8>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d2c:	4a48      	ldr	r2, [pc, #288]	; (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <HAL_GPIO_Init+0x2c0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_GPIO_Init+0x1ec>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <HAL_GPIO_Init+0x2c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00d      	beq.n	8002d7c <HAL_GPIO_Init+0x1e8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <HAL_GPIO_Init+0x2c8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <HAL_GPIO_Init+0x1e4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <HAL_GPIO_Init+0x2cc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_GPIO_Init+0x1e0>
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e004      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e002      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_GPIO_Init+0x1ee>
 8002d80:	2300      	movs	r3, #0
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	f002 0203 	and.w	r2, r2, #3
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	4093      	lsls	r3, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d92:	492f      	ldr	r1, [pc, #188]	; (8002e50 <HAL_GPIO_Init+0x2bc>)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	492c      	ldr	r1, [pc, #176]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4928      	ldr	r1, [pc, #160]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4922      	ldr	r1, [pc, #136]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	491e      	ldr	r1, [pc, #120]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4918      	ldr	r1, [pc, #96]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	4914      	ldr	r1, [pc, #80]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d021      	beq.n	8002e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
 8002e30:	e021      	b.n	8002e76 <HAL_GPIO_Init+0x2e2>
 8002e32:	bf00      	nop
 8002e34:	10320000 	.word	0x10320000
 8002e38:	10310000 	.word	0x10310000
 8002e3c:	10220000 	.word	0x10220000
 8002e40:	10210000 	.word	0x10210000
 8002e44:	10120000 	.word	0x10120000
 8002e48:	10110000 	.word	0x10110000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010800 	.word	0x40010800
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4909      	ldr	r1, [pc, #36]	; (8002e98 <HAL_GPIO_Init+0x304>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3301      	adds	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f ae8e 	bne.w	8002ba8 <HAL_GPIO_Init+0x14>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e001      	b.n	8002ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eda:	787b      	ldrb	r3, [r7, #1]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee0:	887a      	ldrh	r2, [r7, #2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ee6:	e003      	b.n	8002ef0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	041a      	lsls	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e26c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
 8002f34:	4b8c      	ldr	r3, [pc, #560]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x12c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e246      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x76>
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7f      	ldr	r2, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
 8002f9e:	4b72      	ldr	r3, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fdf4 	bl	8001bc4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fdf0 	bl	8001bc4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1fa      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fde0 	bl	8001bc4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fddc 	bl	8001bc4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1e6      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x10c>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1ba      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4939      	ldr	r1, [pc, #228]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe fd95 	bl	8001bc4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe fd91 	bl	8001bc4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e19b      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4927      	ldr	r1, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fd74 	bl	8001bc4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fe fd70 	bl	8001bc4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e17a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d019      	beq.n	8003146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fe fd54 	bl	8001bc4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fe fd50 	bl	8001bc4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e15a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f000 fad8 	bl	80036f4 <RCC_Delay>
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe fd3a 	bl	8001bc4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe fd36 	bl	8001bc4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e140      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b97      	ldr	r3, [pc, #604]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a93      	ldr	r2, [pc, #588]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b91      	ldr	r3, [pc, #580]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b8e      	ldr	r3, [pc, #568]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a8a      	ldr	r2, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fcf7 	bl	8001bc4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fcf3 	bl	8001bc4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0fd      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 8003200:	4b7b      	ldr	r3, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a75      	ldr	r2, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x356>
 8003238:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a6c      	ldr	r2, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe fca7 	bl	8001bc4 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe fca3 	bl	8001bc4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ab      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x37e>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7fe fc91 	bl	8001bc4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fc8d 	bl	8001bc4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e095      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b48      	ldr	r3, [pc, #288]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8081 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fc61 	bl	8001bc4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fc5d 	bl	8001bc4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e067      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	492d      	ldr	r1, [pc, #180]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a19      	ldr	r1, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	4927      	ldr	r1, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fc31 	bl	8001bc4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe fc2d 	bl	8001bc4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e037      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
 8003384:	e02f      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fc1a 	bl	8001bc4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fc16 	bl	8001bc4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e020      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x498>
 80033b2:	e018      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e013      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420060 	.word	0x42420060

080033fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0d0      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4965      	ldr	r1, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d040      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e073      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06b      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4936      	ldr	r1, [pc, #216]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fe fb6a 	bl	8001bc4 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fe fb66 	bl	8001bc4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e053      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d210      	bcs.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4922      	ldr	r1, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1cc>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fac8 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08005898 	.word	0x08005898
 80035c8:	20000014 	.word	0x20000014
 80035cc:	20000018 	.word	0x20000018

080035d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b490      	push	{r4, r7}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035d8:	1d3c      	adds	r4, r7, #4
 80035da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e0:	f240 2301 	movw	r3, #513	; 0x201
 80035e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x46>
 800360e:	e02d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	e02d      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003622:	4413      	add	r3, r2
 8003624:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003628:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c5b      	lsrs	r3, r3, #17
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003642:	4413      	add	r3, r2
 8003644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003648:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364e:	fb02 f203 	mul.w	r2, r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e004      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	623b      	str	r3, [r7, #32]
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	623b      	str	r3, [r7, #32]
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6a3b      	ldr	r3, [r7, #32]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	08005888 	.word	0x08005888
 8003684:	40021000 	.word	0x40021000
 8003688:	007a1200 	.word	0x007a1200
 800368c:	003d0900 	.word	0x003d0900

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000014 	.word	0x20000014

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	080058a8 	.word	0x080058a8

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff ffde 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080058a8 	.word	0x080058a8

080036f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <RCC_Delay+0x34>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <RCC_Delay+0x38>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a5b      	lsrs	r3, r3, #9
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003710:	bf00      	nop
  }
  while (Delay --);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	60fa      	str	r2, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f9      	bne.n	8003710 <RCC_Delay+0x1c>
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000014 	.word	0x20000014
 800372c:	10624dd3 	.word	0x10624dd3

08003730 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07d      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10d      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	61d3      	str	r3, [r2, #28]
 8003768:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d118      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003784:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a42      	ldr	r2, [pc, #264]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003790:	f7fe fa18 	bl	8001bc4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	e008      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fe fa14 	bl	8001bc4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e06d      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d027      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d4:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037de:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe f9e3 	bl	8001bc4 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe f9df 	bl	8001bc4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e036      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4917      	ldr	r1, [pc, #92]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	4313      	orrs	r3, r2
 8003834:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	490b      	ldr	r1, [pc, #44]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4904      	ldr	r1, [pc, #16]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
 8003898:	42420440 	.word	0x42420440

0800389c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e076      	b.n	800399c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038be:	d009      	beq.n	80038d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	61da      	str	r2, [r3, #28]
 80038c6:	e005      	b.n	80038d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe46 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	ea42 0103 	orr.w	r1, r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	0c1a      	lsrs	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f002 0204 	and.w	r2, r2, #4
 800397a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e041      	b.n	8003a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fe22 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f000 fdb2 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_Base_Start+0x88>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_TIM_Base_Start+0x48>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a76:	d009      	beq.n	8003a8c <HAL_TIM_Base_Start+0x48>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <HAL_TIM_Base_Start+0x8c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIM_Base_Start+0x48>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <HAL_TIM_Base_Start+0x90>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d111      	bne.n	8003ab0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d010      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	e007      	b.n	8003ac0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800

08003ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f839 	bl	8003b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 fd18 	bl	800454c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x24>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e022      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d109      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x3e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e015      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x58>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e008      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x6a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e05e      	b.n	8003cb8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x82>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	e013      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x92>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	e00b      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	e003      	b.n	8003c32 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 ff06 	bl	8004a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_TIM_PWM_Start+0x138>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d107      	bne.n	8003c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIM_PWM_Start+0x138>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_TIM_PWM_Start+0xfa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIM_PWM_Start+0xfa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <HAL_TIM_PWM_Start+0x13c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIM_PWM_Start+0xfa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_TIM_PWM_Start+0x140>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d111      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d010      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	e007      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_TIM_PWM_Start_IT+0x24>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e022      	b.n	8003d36 <HAL_TIM_PWM_Start_IT+0x6a>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d109      	bne.n	8003d0a <HAL_TIM_PWM_Start_IT+0x3e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e015      	b.n	8003d36 <HAL_TIM_PWM_Start_IT+0x6a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d109      	bne.n	8003d24 <HAL_TIM_PWM_Start_IT+0x58>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e008      	b.n	8003d36 <HAL_TIM_PWM_Start_IT+0x6a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0a4      	b.n	8003e88 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start_IT+0x82>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	e013      	b.n	8003d76 <HAL_TIM_PWM_Start_IT+0xaa>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start_IT+0x92>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5c:	e00b      	b.n	8003d76 <HAL_TIM_PWM_Start_IT+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start_IT+0xa2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d6c:	e003      	b.n	8003d76 <HAL_TIM_PWM_Start_IT+0xaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d841      	bhi.n	8003e00 <HAL_TIM_PWM_Start_IT+0x134>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <HAL_TIM_PWM_Start_IT+0xb8>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003e01 	.word	0x08003e01
 8003d8c:	08003e01 	.word	0x08003e01
 8003d90:	08003e01 	.word	0x08003e01
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003def 	.word	0x08003def
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0202 	orr.w	r2, r2, #2
 8003dc6:	60da      	str	r2, [r3, #12]
      break;
 8003dc8:	e01b      	b.n	8003e02 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0204 	orr.w	r2, r2, #4
 8003dd8:	60da      	str	r2, [r3, #12]
      break;
 8003dda:	e012      	b.n	8003e02 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0208 	orr.w	r2, r2, #8
 8003dea:	60da      	str	r2, [r3, #12]
      break;
 8003dec:	e009      	b.n	8003e02 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0210 	orr.w	r2, r2, #16
 8003dfc:	60da      	str	r2, [r3, #12]
      break;
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003e00:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fe1e 	bl	8004a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_TIM_PWM_Start_IT+0x186>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIM_PWM_Start_IT+0x186>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_TIM_PWM_Start_IT+0x186>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d111      	bne.n	8003e76 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b06      	cmp	r3, #6
 8003e62:	d010      	beq.n	8003e86 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	e007      	b.n	8003e86 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800

08003e9c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d841      	bhi.n	8003f30 <HAL_TIM_PWM_Stop_IT+0x94>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <HAL_TIM_PWM_Stop_IT+0x18>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08003f31 	.word	0x08003f31
 8003ebc:	08003f31 	.word	0x08003f31
 8003ec0:	08003f31 	.word	0x08003f31
 8003ec4:	08003efb 	.word	0x08003efb
 8003ec8:	08003f31 	.word	0x08003f31
 8003ecc:	08003f31 	.word	0x08003f31
 8003ed0:	08003f31 	.word	0x08003f31
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f1f 	.word	0x08003f1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0202 	bic.w	r2, r2, #2
 8003ef6:	60da      	str	r2, [r3, #12]
      break;
 8003ef8:	e01b      	b.n	8003f32 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0204 	bic.w	r2, r2, #4
 8003f08:	60da      	str	r2, [r3, #12]
      break;
 8003f0a:	e012      	b.n	8003f32 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0208 	bic.w	r2, r2, #8
 8003f1a:	60da      	str	r2, [r3, #12]
      break;
 8003f1c:	e009      	b.n	8003f32 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0210 	bic.w	r2, r2, #16
 8003f2c:	60da      	str	r2, [r3, #12]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003f30:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd86 	bl	8004a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_TIM_PWM_Stop_IT+0x150>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d117      	bne.n	8003f7a <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_TIM_PWM_Stop_IT+0xde>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	f240 4344 	movw	r3, #1092	; 0x444
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_PWM_Stop_IT+0xde>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <HAL_TIM_PWM_Stop_IT+0x10e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	f240 4344 	movw	r3, #1092	; 0x444
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_TIM_PWM_Stop_IT+0x10e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Stop_IT+0x11e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_PWM_Stop_IT+0x146>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Stop_IT+0x12e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_PWM_Stop_IT+0x146>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Stop_IT+0x13e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_PWM_Stop_IT+0x146>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40012c00 	.word	0x40012c00

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa78 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa6b 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa7a 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa4e 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa41 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa50 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa24 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa17 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa26 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f9fa 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f9ed 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f9fc 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9c8 	bl	8004504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fd32 	bl	8004c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fd0c 	bl	8000be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fcfd 	bl	8004bf2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004216:	2302      	movs	r3, #2
 8004218:	e0ac      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x174>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	f200 809f 	bhi.w	8004368 <HAL_TIM_PWM_ConfigChannel+0x168>
 800422a:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004265 	.word	0x08004265
 8004234:	08004369 	.word	0x08004369
 8004238:	08004369 	.word	0x08004369
 800423c:	08004369 	.word	0x08004369
 8004240:	080042a5 	.word	0x080042a5
 8004244:	08004369 	.word	0x08004369
 8004248:	08004369 	.word	0x08004369
 800424c:	08004369 	.word	0x08004369
 8004250:	080042e7 	.word	0x080042e7
 8004254:	08004369 	.word	0x08004369
 8004258:	08004369 	.word	0x08004369
 800425c:	08004369 	.word	0x08004369
 8004260:	08004327 	.word	0x08004327
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f9d0 	bl	8004610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0208 	orr.w	r2, r2, #8
 800427e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0204 	bic.w	r2, r2, #4
 800428e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6999      	ldr	r1, [r3, #24]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	619a      	str	r2, [r3, #24]
      break;
 80042a2:	e062      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fa16 	bl	80046dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6999      	ldr	r1, [r3, #24]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	619a      	str	r2, [r3, #24]
      break;
 80042e4:	e041      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fa5f 	bl	80047b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0208 	orr.w	r2, r2, #8
 8004300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0204 	bic.w	r2, r2, #4
 8004310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69d9      	ldr	r1, [r3, #28]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	61da      	str	r2, [r3, #28]
      break;
 8004324:	e021      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f000 faa9 	bl	8004884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69d9      	ldr	r1, [r3, #28]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	021a      	lsls	r2, r3, #8
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	61da      	str	r2, [r3, #28]
      break;
 8004366:	e000      	b.n	800436a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e0b3      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x180>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043cc:	d03e      	beq.n	800444c <HAL_TIM_ConfigClockSource+0xd0>
 80043ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d2:	f200 8087 	bhi.w	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	f000 8085 	beq.w	80044e8 <HAL_TIM_ConfigClockSource+0x16c>
 80043de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e2:	d87f      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d01a      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xa2>
 80043e8:	2b70      	cmp	r3, #112	; 0x70
 80043ea:	d87b      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 80043ec:	2b60      	cmp	r3, #96	; 0x60
 80043ee:	d050      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x116>
 80043f0:	2b60      	cmp	r3, #96	; 0x60
 80043f2:	d877      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 80043f4:	2b50      	cmp	r3, #80	; 0x50
 80043f6:	d03c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0xf6>
 80043f8:	2b50      	cmp	r3, #80	; 0x50
 80043fa:	d873      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d058      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x136>
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d86f      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d064      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x156>
 8004408:	2b30      	cmp	r3, #48	; 0x30
 800440a:	d86b      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 800440c:	2b20      	cmp	r3, #32
 800440e:	d060      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x156>
 8004410:	2b20      	cmp	r3, #32
 8004412:	d867      	bhi.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05c      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x156>
 8004418:	2b10      	cmp	r3, #16
 800441a:	d05a      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800441c:	e062      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f000 faee 	bl	8004a0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	609a      	str	r2, [r3, #8]
      break;
 800444a:	e04e      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f000 fad7 	bl	8004a0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800446e:	609a      	str	r2, [r3, #8]
      break;
 8004470:	e03b      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	461a      	mov	r2, r3
 8004480:	f000 fa4e 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2150      	movs	r1, #80	; 0x50
 800448a:	4618      	mov	r0, r3
 800448c:	f000 faa5 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004490:	e02b      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	461a      	mov	r2, r3
 80044a0:	f000 fa6c 	bl	800497c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2160      	movs	r1, #96	; 0x60
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fa95 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80044b0:	e01b      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	461a      	mov	r2, r3
 80044c0:	f000 fa2e 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fa85 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80044d0:	e00b      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f000 fa7c 	bl	80049da <TIM_ITRx_SetConfig>
        break;
 80044e2:	e002      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <TIM_Base_SetConfig+0xb8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x30>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x30>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a26      	ldr	r2, [pc, #152]	; (8004608 <TIM_Base_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x30>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a25      	ldr	r2, [pc, #148]	; (800460c <TIM_Base_SetConfig+0xc0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <TIM_Base_SetConfig+0xb8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x62>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x62>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a19      	ldr	r2, [pc, #100]	; (8004608 <TIM_Base_SetConfig+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a18      	ldr	r2, [pc, #96]	; (800460c <TIM_Base_SetConfig+0xc0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <TIM_Base_SetConfig+0xb8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	615a      	str	r2, [r3, #20]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800

08004610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <TIM_OC1_SetConfig+0xc8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10c      	bne.n	8004686 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0308 	bic.w	r3, r3, #8
 8004672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <TIM_OC1_SetConfig+0xc8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d111      	bne.n	80046b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00

080046dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0210 	bic.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0320 	bic.w	r3, r3, #32
 8004726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <TIM_OC2_SetConfig+0xd0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10d      	bne.n	8004758 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a14      	ldr	r2, [pc, #80]	; (80047ac <TIM_OC2_SetConfig+0xd0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d113      	bne.n	8004788 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40012c00 	.word	0x40012c00

080047b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <TIM_OC3_SetConfig+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10d      	bne.n	800482a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <TIM_OC3_SetConfig+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d113      	bne.n	800485a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00

08004884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	031b      	lsls	r3, r3, #12
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a0f      	ldr	r2, [pc, #60]	; (800491c <TIM_OC4_SetConfig+0x98>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d109      	bne.n	80048f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00

08004920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	021a      	lsls	r2, r3, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	609a      	str	r2, [r3, #8]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e046      	b.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d009      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10c      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800

08004b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e03d      	b.n	8004be8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e03f      	b.n	8004ca8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc fdfb 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2224      	movs	r2, #36	; 0x24
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fd4e 	bl	80056fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d153      	bne.n	8004d72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_UART_Transmit_DMA+0x26>
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e04c      	b.n	8004d74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UART_Transmit_DMA+0x38>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e045      	b.n	8004d74 <HAL_UART_Transmit_DMA+0xc4>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2221      	movs	r2, #33	; 0x21
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_UART_Transmit_DMA+0xcc>)
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_UART_Transmit_DMA+0xd0>)
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <HAL_UART_Transmit_DMA+0xd4>)
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004d30:	f107 0308 	add.w	r3, r7, #8
 8004d34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3304      	adds	r3, #4
 8004d44:	461a      	mov	r2, r3
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	f7fd fce0 	bl	800270c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e000      	b.n	8004d74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	0800519b 	.word	0x0800519b
 8004d80:	080051ed 	.word	0x080051ed
 8004d84:	080052d5 	.word	0x080052d5

08004d88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d11d      	bne.n	8004dde <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Receive_DMA+0x26>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e016      	b.n	8004de0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Receive_DMA+0x38>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e00f      	b.n	8004de0 <HAL_UART_Receive_DMA+0x58>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fac7 	bl	8005368 <UART_Start_Receive_DMA>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	e000      	b.n	8004de0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x52>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fbb8 	bl	80055a8 <UART_Receive_IT>
      return;
 8004e38:	e17b      	b.n	8005132 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80b1 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x1bc>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_UART_IRQHandler+0x70>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a6 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_UART_IRQHandler+0x90>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_UART_IRQHandler+0xb0>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f043 0202 	orr.w	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xd0>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00f      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xfa>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_UART_IRQHandler+0xee>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0208 	orr.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 811e 	beq.w	8005128 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_UART_IRQHandler+0x11e>
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb51 	bl	80055a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_UART_IRQHandler+0x146>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d031      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa93 	bl	800545a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d023      	beq.n	8004f8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d013      	beq.n	8004f82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	4a76      	ldr	r2, [pc, #472]	; (8005138 <HAL_UART_IRQHandler+0x350>)
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd fc6a 	bl	8002840 <HAL_DMA_Abort_IT>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e00e      	b.n	8004fa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8f5 	bl	8005172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e00a      	b.n	8004fa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8f1 	bl	8005172 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	e006      	b.n	8004fa0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8ed 	bl	8005172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f9e:	e0c3      	b.n	8005128 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	bf00      	nop
    return;
 8004fa2:	e0c1      	b.n	8005128 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 80a1 	bne.w	80050f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 809b 	beq.w	80050f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8095 	beq.w	80050f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04e      	beq.n	8005088 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ff4:	8a3b      	ldrh	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8098 	beq.w	800512c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005000:	8a3a      	ldrh	r2, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	f080 8092 	bcs.w	800512c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8a3a      	ldrh	r2, [r7, #16]
 800500c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b20      	cmp	r3, #32
 8005016:	d02b      	beq.n	8005070 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005026:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005046:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0210 	bic.w	r2, r2, #16
 8005064:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fbad 	bl	80027ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f87f 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005086:	e051      	b.n	800512c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005090:	b29b      	uxth	r3, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d047      	beq.n	8005130 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80050a0:	8a7b      	ldrh	r3, [r7, #18]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d044      	beq.n	8005130 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0210 	bic.w	r2, r2, #16
 80050e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e4:	8a7b      	ldrh	r3, [r7, #18]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f84b 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ee:	e01f      	b.n	8005130 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_UART_IRQHandler+0x324>
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f9e8 	bl	80054da <UART_Transmit_IT>
    return;
 800510a:	e012      	b.n	8005132 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <HAL_UART_IRQHandler+0x34a>
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa29 	bl	8005578 <UART_EndTransmit_IT>
    return;
 8005126:	e004      	b.n	8005132 <HAL_UART_IRQHandler+0x34a>
    return;
 8005128:	bf00      	nop
 800512a:	e002      	b.n	8005132 <HAL_UART_IRQHandler+0x34a>
      return;
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <HAL_UART_IRQHandler+0x34a>
      return;
 8005130:	bf00      	nop
  }
}
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	080054b3 	.word	0x080054b3

0800513c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d113      	bne.n	80051de <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051da:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051dc:	e002      	b.n	80051e4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ffac 	bl	800513c <HAL_UART_TxCpltCallback>
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff ffa7 	bl	800514e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d12a      	bne.n	800527a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005238:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	2b01      	cmp	r3, #1
 8005268:	d107      	bne.n	800527a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0210 	bic.w	r2, r2, #16
 8005278:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	2b01      	cmp	r3, #1
 8005280:	d106      	bne.n	8005290 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005286:	4619      	mov	r1, r3
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff ff7b 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800528e:	e002      	b.n	8005296 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7fa ff73 	bl	800017c <HAL_UART_RxCpltCallback>
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d108      	bne.n	80052c6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff60 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052c4:	e002      	b.n	80052cc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ff4a 	bl	8005160 <HAL_UART_RxHalfCpltCallback>
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b21      	cmp	r3, #33	; 0x21
 8005306:	d108      	bne.n	800531a <UART_DMAError+0x46>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2200      	movs	r2, #0
 8005312:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005314:	68b8      	ldr	r0, [r7, #8]
 8005316:	f000 f88b 	bl	8005430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b22      	cmp	r3, #34	; 0x22
 800533a:	d108      	bne.n	800534e <UART_DMAError+0x7a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	f000 f886 	bl	800545a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f043 0210 	orr.w	r2, r3, #16
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f7ff ff09 	bl	8005172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2222      	movs	r2, #34	; 0x22
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	4a23      	ldr	r2, [pc, #140]	; (8005424 <UART_Start_Receive_DMA+0xbc>)
 8005396:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <UART_Start_Receive_DMA+0xc0>)
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <UART_Start_Receive_DMA+0xc4>)
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	2200      	movs	r2, #0
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053b0:	f107 0308 	add.w	r3, r7, #8
 80053b4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	f7fd f9a0 	bl	800270c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005418:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	08005209 	.word	0x08005209
 8005428:	0800529f 	.word	0x0800529f
 800542c:	080052d5 	.word	0x080052d5

08005430 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005446:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005470:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0210 	bic.w	r2, r2, #16
 8005498:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff fe50 	bl	8005172 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b21      	cmp	r3, #33	; 0x21
 80054ec:	d13e      	bne.n	800556c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d114      	bne.n	8005522 <UART_Transmit_IT+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e008      	b.n	8005534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6211      	str	r1, [r2, #32]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fdcf 	bl	800513c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b22      	cmp	r3, #34	; 0x22
 80055ba:	f040 8099 	bne.w	80056f0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c6:	d117      	bne.n	80055f8 <UART_Receive_IT+0x50>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d113      	bne.n	80055f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
 80055f6:	e026      	b.n	8005646 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d007      	beq.n	800561c <UART_Receive_IT+0x74>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <UART_Receive_IT+0x82>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	e008      	b.n	800563c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005636:	b2da      	uxtb	r2, r3
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4619      	mov	r1, r3
 8005654:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005656:	2b00      	cmp	r3, #0
 8005658:	d148      	bne.n	80056ec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0220 	bic.w	r2, r2, #32
 8005668:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005678:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	2b01      	cmp	r3, #1
 8005698:	d123      	bne.n	80056e2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0210 	bic.w	r2, r2, #16
 80056ae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d10a      	bne.n	80056d4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fd52 	bl	8005184 <HAL_UARTEx_RxEventCallback>
 80056e0:	e002      	b.n	80056e8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fa fd4a 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e002      	b.n	80056f2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005736:	f023 030c 	bic.w	r3, r3, #12
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	430b      	orrs	r3, r1
 8005742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <UART_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fd ffb2 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	e002      	b.n	8005772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fd ff9a 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8005770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009a      	lsls	r2, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <UART_SetConfig+0x118>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	0119      	lsls	r1, r3, #4
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <UART_SetConfig+0x118>)
 80057aa:	fba3 0302 	umull	r0, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2064      	movs	r0, #100	; 0x64
 80057b2:	fb00 f303 	mul.w	r3, r0, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	3332      	adds	r3, #50	; 0x32
 80057bc:	4a15      	ldr	r2, [pc, #84]	; (8005814 <UART_SetConfig+0x118>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c8:	4419      	add	r1, r3
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <UART_SetConfig+0x118>)
 80057e2:	fba3 0302 	umull	r0, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2064      	movs	r0, #100	; 0x64
 80057ea:	fb00 f303 	mul.w	r3, r0, r3
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	3332      	adds	r3, #50	; 0x32
 80057f4:	4a07      	ldr	r2, [pc, #28]	; (8005814 <UART_SetConfig+0x118>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	440a      	add	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40013800 	.word	0x40013800
 8005814:	51eb851f 	.word	0x51eb851f

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	2600      	movs	r6, #0
 800581c:	4d0c      	ldr	r5, [pc, #48]	; (8005850 <__libc_init_array+0x38>)
 800581e:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	f000 f822 	bl	8005870 <_init>
 800582c:	2600      	movs	r6, #0
 800582e:	4d0a      	ldr	r5, [pc, #40]	; (8005858 <__libc_init_array+0x40>)
 8005830:	4c0a      	ldr	r4, [pc, #40]	; (800585c <__libc_init_array+0x44>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080058b0 	.word	0x080058b0
 8005854:	080058b0 	.word	0x080058b0
 8005858:	080058b0 	.word	0x080058b0
 800585c:	080058b4 	.word	0x080058b4

08005860 <memset>:
 8005860:	4603      	mov	r3, r0
 8005862:	4402      	add	r2, r0
 8005864:	4293      	cmp	r3, r2
 8005866:	d100      	bne.n	800586a <memset+0xa>
 8005868:	4770      	bx	lr
 800586a:	f803 1b01 	strb.w	r1, [r3], #1
 800586e:	e7f9      	b.n	8005864 <memset+0x4>

08005870 <_init>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr

0800587c <_fini>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr
