
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  00020300  2**0
                  CONTENTS
  4 .ARM          00000000  0800696c  0800696c  00020300  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800696c  0800696c  00020300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08006974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000438c  20000300  08006c74  00020300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000468c  08006c74  0002468c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011117  00000000  00000000  00020329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002890  00000000  00000000  00031440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00034db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018963  00000000  00000000  00035d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012253  00000000  00000000  0004e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e24c  00000000  00000000  0006093e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eeb8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004758  00000000  00000000  000eebe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000300 	.word	0x20000300
 800012c:	00000000 	.word	0x00000000
 8000130:	0800691c 	.word	0x0800691c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000304 	.word	0x20000304
 800014c:	0800691c 	.word	0x0800691c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef *DRV_spi;

void DRV_Init(SPI_HandleTypeDef *hspi){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	//Copy SPI handle variable
	DRV_spi = hspi;
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <DRV_Init+0x28>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2104      	movs	r1, #4
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <DRV_Init+0x2c>)
 8000950:	f003 f8a5 	bl	8003a9e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f001 fdf1 	bl	800253c <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000031c 	.word	0x2000031c
 8000968:	40010c00 	.word	0x40010c00

0800096c <DRV_Write>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
	return res;
}

uint8_t DRV_Write(uint8_t addr, uint16_t data){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2] = {(uint8_t)(data), ( addr << 3) + (uint8_t)(data >> 8)};
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	733b      	strb	r3, [r7, #12]
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	737b      	strb	r3, [r7, #13]
	uint8_t ret[2];
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <DRV_Write+0x70>)
 800099c:	f003 f87f 	bl	8003a9e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f001 fdcb 	bl	800253c <HAL_Delay>
	uint8_t res = HAL_SPI_TransmitReceive(DRV_spi, buf, ret, 1, 100);
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <DRV_Write+0x74>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	f107 0208 	add.w	r2, r7, #8
 80009ae:	f107 010c 	add.w	r1, r7, #12
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2301      	movs	r3, #1
 80009b8:	f003 fea2 	bl	8004700 <HAL_SPI_TransmitReceive>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f001 fdbb 	bl	800253c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2104      	movs	r1, #4
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <DRV_Write+0x70>)
 80009cc:	f003 f867 	bl	8003a9e <HAL_GPIO_WritePin>
	return res;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	2000031c 	.word	0x2000031c

080009e4 <HAL_UART_RxCpltCallback>:
uint8_t IsRunning = 0;
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;
uint8_t step_delay = 255;	// (255+1)/32 = 8 times shorter t3 = (t1+t2)/8
uint8_t MessageRecived = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	MessageRecived = 1;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_UART_RxCpltCallback+0x18>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	2000032c 	.word	0x2000032c

08000a00 <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <Application_Init+0x24>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <Application_Init+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2203      	movs	r2, #3
 8000a14:	4904      	ldr	r1, [pc, #16]	; (8000a28 <Application_Init+0x28>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fa0c 	bl	8005e34 <HAL_UART_Receive_DMA>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000320 	.word	0x20000320
 8000a28:	20000324 	.word	0x20000324

08000a2c <NormalControl>:


void NormalControl(){
 8000a2c:	b598      	push	{r3, r4, r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	if(MessageRecived){
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <NormalControl+0xd4>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d050      	beq.n	8000ada <NormalControl+0xae>
		MessageRecived = 0;
 8000a38:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <NormalControl+0xd4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		Function = rx_buffer[0];
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <NormalControl+0xd8>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <NormalControl+0xdc>)
 8000a44:	701a      	strb	r2, [r3, #0]
		Power = rx_buffer[1] * 3;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <NormalControl+0xd8>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <NormalControl+0xe0>)
 8000a56:	801a      	strh	r2, [r3, #0]
		step_delay = rx_buffer[2];
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <NormalControl+0xd8>)
 8000a5a:	789a      	ldrb	r2, [r3, #2]
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <NormalControl+0xe4>)
 8000a5e:	701a      	strb	r2, [r3, #0]
		if((Function == SET_MOTOR_1_SPEED_FORWAD) && (Power > 0)){					// Jezeli to funkcja z jakas wartoscia
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <NormalControl+0xdc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b40      	cmp	r3, #64	; 0x40
 8000a66:	d115      	bne.n	8000a94 <NormalControl+0x68>
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <NormalControl+0xe0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d011      	beq.n	8000a94 <NormalControl+0x68>
			HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4827      	ldr	r0, [pc, #156]	; (8000b14 <NormalControl+0xe8>)
 8000a76:	f003 f812 	bl	8003a9e <HAL_GPIO_WritePin>
			Set_PWM(Power);
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <NormalControl+0xe0>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fc36 	bl	80012f0 <Set_PWM>
			Set_Observer_Div(step_delay/8);
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <NormalControl+0xe4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f919 	bl	8000cc4 <Set_Observer_Div>
 8000a92:	e014      	b.n	8000abe <NormalControl+0x92>
		}else if(Function == SCAN_ONE_VARIABLE){
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <NormalControl+0xdc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b50      	cmp	r3, #80	; 0x50
 8000a9a:	d102      	bne.n	8000aa2 <NormalControl+0x76>
			EnableScan();
 8000a9c:	f000 f8de 	bl	8000c5c <EnableScan>
 8000aa0:	e00d      	b.n	8000abe <NormalControl+0x92>
		}else{
			Set_PWM(0);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fc24 	bl	80012f0 <Set_PWM>
			SetFloating_A();
 8000aa8:	f000 fc74 	bl	8001394 <SetFloating_A>
			SetFloating_B();
 8000aac:	f000 fc86 	bl	80013bc <SetFloating_B>
			SetFloating_C();
 8000ab0:	f000 fc98 	bl	80013e4 <SetFloating_C>
			HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4816      	ldr	r0, [pc, #88]	; (8000b14 <NormalControl+0xe8>)
 8000aba:	f002 fff0 	bl	8003a9e <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_DMA(huart, rx_buffer, 3);		// Chcemy obierac dalej
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <NormalControl+0xec>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	490f      	ldr	r1, [pc, #60]	; (8000b04 <NormalControl+0xd8>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 f9b4 	bl	8005e34 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(huart, tx_buffer, 1);			// Odsylamy warrtosc obrotow
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <NormalControl+0xec>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4912      	ldr	r1, [pc, #72]	; (8000b1c <NormalControl+0xf0>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 f941 	bl	8005d5c <HAL_UART_Transmit_DMA>
	}
	if (IsScanReady() == 1){
 8000ada:	f000 f8cb 	bl	8000c74 <IsScanReady>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d10a      	bne.n	8000afa <NormalControl+0xce>
		HAL_UART_Transmit_DMA(huart, GetScanData(), SCAN_SIZE);
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <NormalControl+0xec>)
 8000ae6:	681c      	ldr	r4, [r3, #0]
 8000ae8:	f000 f8d4 	bl	8000c94 <GetScanData>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	4619      	mov	r1, r3
 8000af4:	4620      	mov	r0, r4
 8000af6:	f005 f931 	bl	8005d5c <HAL_UART_Transmit_DMA>
	}
}
 8000afa:	bf00      	nop
 8000afc:	bd98      	pop	{r3, r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000032c 	.word	0x2000032c
 8000b04:	20000324 	.word	0x20000324
 8000b08:	20000329 	.word	0x20000329
 8000b0c:	2000032a 	.word	0x2000032a
 8000b10:	20000000 	.word	0x20000000
 8000b14:	40011400 	.word	0x40011400
 8000b18:	20000320 	.word	0x20000320
 8000b1c:	20000328 	.word	0x20000328

08000b20 <Application_Update>:

void Application_Update(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	NormalControl();
 8000b24:	f7ff ff82 	bl	8000a2c <NormalControl>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_ADC_ConvCpltCallback>:
uint32_t AfterCross_Ticks = 0;
uint32_t Step_Ticks = 0;
GPIO_TypeDef* Hall_GPIO_Port = HALL_A_GPIO_Port;
uint16_t Hall_GPIO_Pin = HALL_A_Pin;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	//BEMF_Observer_Block();
	HALL_Observer_Block();
 8000b34:	f000 f8dc 	bl	8000cf0 <HALL_Observer_Block>

	ADC_Ticks ++;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_ADC_ConvCpltCallback+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_ADC_ConvCpltCallback+0x20>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000037c 	.word	0x2000037c

08000b50 <Control_Init>:
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1,
		ADC_HandleTypeDef *_hadc2){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 8000b5e:	4a37      	ldr	r2, [pc, #220]	; (8000c3c <Control_Init+0xec>)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 8000b64:	4a36      	ldr	r2, [pc, #216]	; (8000c40 <Control_Init+0xf0>)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <Control_Init+0xf4>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 8000b70:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <Control_Init+0xf8>)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 8000b76:	4a35      	ldr	r2, [pc, #212]	; (8000c4c <Control_Init+0xfc>)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	6013      	str	r3, [r2, #0]
	hadc2 = _hadc2;
 8000b7c:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <Control_Init+0x100>)
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <Control_Init+0x104>)
 8000b88:	f002 ff89 	bl	8003a9e <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <Control_Init+0xf8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 f84d 	bl	8004c30 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <Control_Init+0xf0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f8e9 	bl	8004d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2); 	// LOW POLARITY
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <Control_Init+0xf0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f8e3 	bl	8004d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <Control_Init+0xf4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 f8dd 	bl	8004d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);	// LOW POLARITY
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <Control_Init+0xf4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 f8d7 	bl	8004d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <Control_Init+0xec>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 f8d1 	bl	8004d74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  	// LOW POLARITY
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <Control_Init+0xec>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 f8cb 	bl	8004d74 <HAL_TIM_PWM_Start>

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <Control_Init+0xec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2108      	movs	r1, #8
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 f8c5 	bl	8004d74 <HAL_TIM_PWM_Start>
	//htim3->Instance->CNT = 0;


	// ADC and Timer Configuration
	//HAL_ADC_Start_DMA(hadc, ADC_data, 2);
	HAL_ADCEx_Calibration_Start(hadc1);
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Control_Init+0xfc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 f85a 	bl	8002ca8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(hadc2);
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <Control_Init+0x100>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f855 	bl	8002ca8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(hadc2);
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <Control_Init+0x100>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fd96 	bl	8002734 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(hadc1, ADC_data, 2);
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <Control_Init+0xfc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4912      	ldr	r1, [pc, #72]	; (8000c58 <Control_Init+0x108>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 f8f5 	bl	8002e00 <HAL_ADCEx_MultiModeStart_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <Control_Init+0xec>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 f94b 	bl	8004eb8 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <Control_Init+0xec>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fc85 	bl	800253c <HAL_Delay>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000330 	.word	0x20000330
 8000c40:	20000334 	.word	0x20000334
 8000c44:	20000338 	.word	0x20000338
 8000c48:	2000033c 	.word	0x2000033c
 8000c4c:	20000340 	.word	0x20000340
 8000c50:	20000344 	.word	0x20000344
 8000c54:	40011400 	.word	0x40011400
 8000c58:	20000348 	.word	0x20000348

08000c5c <EnableScan>:

void EnableScan(){
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	Scan_Is_enabled = 1;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <EnableScan+0x14>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000374 	.word	0x20000374

08000c74 <IsScanReady>:

uint8_t IsScanReady(){
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	if (Scan_iter >= SCAN_SIZE) return 1;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <IsScanReady+0x1c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c80:	d301      	bcc.n	8000c86 <IsScanReady+0x12>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <IsScanReady+0x14>
	else return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000376 	.word	0x20000376

08000c94 <GetScanData>:

uint8_t* GetScanData(){
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	Scan_iter = 0;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <GetScanData+0x20>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
	Scan_Is_enabled = 0;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <GetScanData+0x24>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
	trace_num = 0;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <GetScanData+0x28>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
	return Scan_Data;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <GetScanData+0x2c>)
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000376 	.word	0x20000376
 8000cb8:	20000374 	.word	0x20000374
 8000cbc:	20000378 	.word	0x20000378
 8000cc0:	2000039c 	.word	0x2000039c

08000cc4 <Set_Observer_Div>:

	Six_Step_Block(PWM_Value);
	//Ticks_Diff = Ticks -  htim1->Instance->CNT;
}

void Set_Observer_Div(uint8_t div){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	if(div < 1) Div = 1;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <Set_Observer_Div+0x18>
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <Set_Observer_Div+0x28>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
	else Div = div;
}
 8000cda:	e002      	b.n	8000ce2 <Set_Observer_Div+0x1e>
	else Div = div;
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <Set_Observer_Div+0x28>)
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	7013      	strb	r3, [r2, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	2000000a 	.word	0x2000000a

08000cf0 <HALL_Observer_Block>:
short I_B;
short I_C;
short I_Alfa;
short I_Beta;

void HALL_Observer_Block(){
 8000cf0:	b598      	push	{r3, r4, r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	// A, B, C Currents
	I_A = (ADC_data[1] >> 16) - 2087; // Crurrent A
 8000cf4:	4ba0      	ldr	r3, [pc, #640]	; (8000f78 <HALL_Observer_Block+0x288>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	0c1b      	lsrs	r3, r3, #16
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f6a3 0327 	subw	r3, r3, #2087	; 0x827
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	4b9d      	ldr	r3, [pc, #628]	; (8000f7c <HALL_Observer_Block+0x28c>)
 8000d06:	801a      	strh	r2, [r3, #0]
	I_B = (ADC_data[0] >> 16) - 2143; // Current B
 8000d08:	4b9b      	ldr	r3, [pc, #620]	; (8000f78 <HALL_Observer_Block+0x288>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0c1b      	lsrs	r3, r3, #16
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f6a3 035f 	subw	r3, r3, #2143	; 0x85f
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	4b99      	ldr	r3, [pc, #612]	; (8000f80 <HALL_Observer_Block+0x290>)
 8000d1a:	801a      	strh	r2, [r3, #0]
	I_C = (ADC_data[0]) - 2079;	// Current C
 8000d1c:	4b96      	ldr	r3, [pc, #600]	; (8000f78 <HALL_Observer_Block+0x288>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f6a3 031f 	subw	r3, r3, #2079	; 0x81f
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <HALL_Observer_Block+0x294>)
 8000d2c:	801a      	strh	r2, [r3, #0]
	Meas[3] = ADC_data[1];	// Voltage DC
 8000d2e:	4b92      	ldr	r3, [pc, #584]	; (8000f78 <HALL_Observer_Block+0x288>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <HALL_Observer_Block+0x298>)
 8000d36:	80da      	strh	r2, [r3, #6]
	// Alfa, Beta Currents
	I_Alfa = I_A;
 8000d38:	4b90      	ldr	r3, [pc, #576]	; (8000f7c <HALL_Observer_Block+0x28c>)
 8000d3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d3e:	4b93      	ldr	r3, [pc, #588]	; (8000f8c <HALL_Observer_Block+0x29c>)
 8000d40:	801a      	strh	r2, [r3, #0]
	I_Beta = (I_B - I_C)/sqrt(3);
 8000d42:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <HALL_Observer_Block+0x290>)
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b8e      	ldr	r3, [pc, #568]	; (8000f84 <HALL_Observer_Block+0x294>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fb4e 	bl	80003f4 <__aeabi_i2d>
 8000d58:	a385      	add	r3, pc, #532	; (adr r3, 8000f70 <HALL_Observer_Block+0x280>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f7ff fcdd 	bl	800071c <__aeabi_ddiv>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fdbf 	bl	80008ec <__aeabi_d2iz>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	4b87      	ldr	r3, [pc, #540]	; (8000f90 <HALL_Observer_Block+0x2a0>)
 8000d74:	801a      	strh	r2, [r3, #0]

	if(PWM_Value == 0){
 8000d76:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <HALL_Observer_Block+0x2a4>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d117      	bne.n	8000dae <HALL_Observer_Block+0xbe>
		HALL_Is_Running = 0;
 8000d7e:	4b86      	ldr	r3, [pc, #536]	; (8000f98 <HALL_Observer_Block+0x2a8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		OldHall = 0xff;
 8000d84:	4b85      	ldr	r3, [pc, #532]	; (8000f9c <HALL_Observer_Block+0x2ac>)
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	701a      	strb	r2, [r3, #0]
		HALL_cnt_sign = 1;
 8000d8a:	4b85      	ldr	r3, [pc, #532]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
		HALL_time_cnt = 0;
 8000d90:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
		First_Half_Upper = 0;
 8000d96:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <HALL_Observer_Block+0x2b8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
		HALL_Angle = 0;	// UWAZAC Z GOWNO PRZESUNIECIAMI
 8000d9c:	4b83      	ldr	r3, [pc, #524]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
		DupkoSin_Block(PWM_Value);
 8000da2:	4b7c      	ldr	r3, [pc, #496]	; (8000f94 <HALL_Observer_Block+0x2a4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f9de 	bl	8001168 <DupkoSin_Block>
		return;
 8000dac:	e1c0      	b.n	8001130 <HALL_Observer_Block+0x440>
	}
	// Input Block
	Hall = HAL_GPIO_ReadPin(Hall_GPIO_Port, Hall_GPIO_Pin);
 8000dae:	4b80      	ldr	r3, [pc, #512]	; (8000fb0 <HALL_Observer_Block+0x2c0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a80      	ldr	r2, [pc, #512]	; (8000fb4 <HALL_Observer_Block+0x2c4>)
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fe59 	bl	8003a70 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b7d      	ldr	r3, [pc, #500]	; (8000fb8 <HALL_Observer_Block+0x2c8>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	// Initail state reading
	if (HALL_Is_Running == 0){
 8000dc6:	4b74      	ldr	r3, [pc, #464]	; (8000f98 <HALL_Observer_Block+0x2a8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d140      	bne.n	8000e50 <HALL_Observer_Block+0x160>
		HALL_Is_Running = 1;
 8000dce:	4b72      	ldr	r3, [pc, #456]	; (8000f98 <HALL_Observer_Block+0x2a8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
		HALL_Start_Pos = HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin)
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	4878      	ldr	r0, [pc, #480]	; (8000fbc <HALL_Observer_Block+0x2cc>)
 8000dda:	f002 fe49 	bl	8003a70 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461c      	mov	r4, r3
						+ (HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin) << 1)
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	4875      	ldr	r0, [pc, #468]	; (8000fbc <HALL_Observer_Block+0x2cc>)
 8000de8:	f002 fe42 	bl	8003a70 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4423      	add	r3, r4
 8000df4:	b2dc      	uxtb	r4, r3
						+ (HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin) << 2);
 8000df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfa:	4870      	ldr	r0, [pc, #448]	; (8000fbc <HALL_Observer_Block+0x2cc>)
 8000dfc:	f002 fe38 	bl	8003a70 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4423      	add	r3, r4
 8000e08:	b2da      	uxtb	r2, r3
		HALL_Start_Pos = HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin)
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <HALL_Observer_Block+0x2d0>)
 8000e0c:	701a      	strb	r2, [r3, #0]
		HALL_Angle = HALL_Angles[HALL_Start_Pos];
 8000e0e:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <HALL_Observer_Block+0x2d0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HALL_Observer_Block+0x2d4>)
 8000e16:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000e1a:	4b64      	ldr	r3, [pc, #400]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000e1c:	801a      	strh	r2, [r3, #0]
		Angle = HALL_Angle;
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	4b69      	ldr	r3, [pc, #420]	; (8000fc8 <HALL_Observer_Block+0x2d8>)
 8000e24:	801a      	strh	r2, [r3, #0]
		HALL_cnt_sign = 1;
 8000e26:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
		DupkoSin_Block(PWM_Value);	// it sets up hall pin
 8000e2c:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <HALL_Observer_Block+0x2a4>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f999 	bl	8001168 <DupkoSin_Block>
		OldHall = HAL_GPIO_ReadPin(Hall_GPIO_Port, Hall_GPIO_Pin);
 8000e36:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <HALL_Observer_Block+0x2c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <HALL_Observer_Block+0x2c4>)
 8000e3c:	8812      	ldrh	r2, [r2, #0]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fe15 	bl	8003a70 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <HALL_Observer_Block+0x2ac>)
 8000e4c:	701a      	strb	r2, [r3, #0]
		return;
 8000e4e:	e16f      	b.n	8001130 <HALL_Observer_Block+0x440>
	}

// 0 Cross Counter Block
	// Change counting sign when 0-cross is detected
	if (Hall != OldHall){
 8000e50:	4b59      	ldr	r3, [pc, #356]	; (8000fb8 <HALL_Observer_Block+0x2c8>)
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HALL_Observer_Block+0x2ac>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d026      	beq.n	8000eaa <HALL_Observer_Block+0x1ba>
		HALL_cnt_sign = 0;
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		HALL_Angle  += 30;
 8000e62:	4b52      	ldr	r3, [pc, #328]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	331e      	adds	r3, #30
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b50      	ldr	r3, [pc, #320]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000e6c:	801a      	strh	r2, [r3, #0]
		if (Div > 30) HALL_Treshold = 0;
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <HALL_Observer_Block+0x2dc>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b1e      	cmp	r3, #30
 8000e74:	d903      	bls.n	8000e7e <HALL_Observer_Block+0x18e>
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HALL_Observer_Block+0x2e0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	801a      	strh	r2, [r3, #0]
 8000e7c:	e009      	b.n	8000e92 <HALL_Observer_Block+0x1a2>
		else HALL_Treshold = HALL_time_cnt/Div;
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b51      	ldr	r3, [pc, #324]	; (8000fcc <HALL_Observer_Block+0x2dc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HALL_Observer_Block+0x2e0>)
 8000e90:	801a      	strh	r2, [r3, #0]
		// For angle aproximation
		First_Half_Upper = HALL_time_cnt;
 8000e92:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HALL_Observer_Block+0x2b8>)
 8000e98:	801a      	strh	r2, [r3, #0]
		Second_Half_Upper = HALL_time_cnt - HALL_Treshold;
 8000e9a:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <HALL_Observer_Block+0x2e0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <HALL_Observer_Block+0x2e4>)
 8000ea8:	801a      	strh	r2, [r3, #0]
	}
	OldHall = Hall;
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <HALL_Observer_Block+0x2c8>)
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HALL_Observer_Block+0x2ac>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	// Countter
	if(HALL_cnt_sign){
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <HALL_Observer_Block+0x1d8>
		HALL_time_cnt++;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000ec4:	801a      	strh	r2, [r3, #0]
 8000ec6:	e009      	b.n	8000edc <HALL_Observer_Block+0x1ec>
	} else {
		if (HALL_time_cnt > 0) HALL_time_cnt--;
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <HALL_Observer_Block+0x1ec>
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000eda:	801a      	strh	r2, [r3, #0]
	}
	// When Counter reached TRESHOLD then change sign and update BEMF_Angle
	if((HALL_time_cnt <= HALL_Treshold) && (HALL_cnt_sign == 0)){
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HALL_Observer_Block+0x2e0>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d80f      	bhi.n	8000f08 <HALL_Observer_Block+0x218>
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10b      	bne.n	8000f08 <HALL_Observer_Block+0x218>
		HALL_Angle += 30;
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	331e      	adds	r3, #30
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HALL_Observer_Block+0x2bc>)
 8000efa:	801a      	strh	r2, [r3, #0]
		HALL_cnt_sign = 1;
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
		HALL_time_cnt = 0;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
	}
	// Counter buffor reset before overflow
	if(HALL_time_cnt == 1024){
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f10:	d10c      	bne.n	8000f2c <HALL_Observer_Block+0x23c>
//		HALL_Angle += 60;
		HALL_cnt_sign = 1;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
		HALL_time_cnt = 0;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	801a      	strh	r2, [r3, #0]
		First_Half_Upper = 0;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <HALL_Observer_Block+0x2b8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
		HALL_Is_Running = 0;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HALL_Observer_Block+0x2a8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
		return;
 8000f2a:	e101      	b.n	8001130 <HALL_Observer_Block+0x440>
	}
	if(First_Half_Upper){
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HALL_Observer_Block+0x2b8>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d06d      	beq.n	8001010 <HALL_Observer_Block+0x320>
		if(HALL_cnt_sign){
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HALL_Observer_Block+0x2b0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d04f      	beq.n	8000fdc <HALL_Observer_Block+0x2ec>
			// cnt is increasing
			Approx_Angle = ((uint16_t)(HALL_time_cnt)*30)/First_Half_Upper;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HALL_Observer_Block+0x2b4>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4613      	mov	r3, r2
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HALL_Observer_Block+0x2b8>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HALL_Observer_Block+0x2e8>)
 8000f58:	701a      	strb	r2, [r3, #0]
			if(Approx_Angle > 30 ) Approx_Angle = 30;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HALL_Observer_Block+0x2e8>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b1e      	cmp	r3, #30
 8000f60:	d956      	bls.n	8001010 <HALL_Observer_Block+0x320>
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HALL_Observer_Block+0x2e8>)
 8000f64:	221e      	movs	r2, #30
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e052      	b.n	8001010 <HALL_Observer_Block+0x320>
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	e8584caa 	.word	0xe8584caa
 8000f74:	3ffbb67a 	.word	0x3ffbb67a
 8000f78:	20000348 	.word	0x20000348
 8000f7c:	2000439e 	.word	0x2000439e
 8000f80:	20000398 	.word	0x20000398
 8000f84:	20000394 	.word	0x20000394
 8000f88:	20000368 	.word	0x20000368
 8000f8c:	2000439c 	.word	0x2000439c
 8000f90:	20000396 	.word	0x20000396
 8000f94:	20000382 	.word	0x20000382
 8000f98:	20000390 	.word	0x20000390
 8000f9c:	2000000b 	.word	0x2000000b
 8000fa0:	20000387 	.word	0x20000387
 8000fa4:	2000000c 	.word	0x2000000c
 8000fa8:	2000000e 	.word	0x2000000e
 8000fac:	20000388 	.word	0x20000388
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000386 	.word	0x20000386
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	20000391 	.word	0x20000391
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	20000384 	.word	0x20000384
 8000fcc:	2000000a 	.word	0x2000000a
 8000fd0:	2000038e 	.word	0x2000038e
 8000fd4:	2000038a 	.word	0x2000038a
 8000fd8:	2000038c 	.word	0x2000038c
		}else{
			// cnt is decreasing
			Approx_Angle = ((uint16_t)(HALL_time_cnt-HALL_Treshold)*30)/Second_Half_Upper;
 8000fdc:	4b55      	ldr	r3, [pc, #340]	; (8001134 <HALL_Observer_Block+0x444>)
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HALL_Observer_Block+0x448>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b51      	ldr	r3, [pc, #324]	; (800113c <HALL_Observer_Block+0x44c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b50      	ldr	r3, [pc, #320]	; (8001140 <HALL_Observer_Block+0x450>)
 8001000:	701a      	strb	r2, [r3, #0]
			Approx_Angle = 30 - Approx_Angle;
 8001002:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <HALL_Observer_Block+0x450>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f1c3 031e 	rsb	r3, r3, #30
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <HALL_Observer_Block+0x450>)
 800100e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(HALL_Angle >= 360) HALL_Angle = 0;
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HALL_Observer_Block+0x454>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001018:	d302      	bcc.n	8001020 <HALL_Observer_Block+0x330>
 800101a:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <HALL_Observer_Block+0x454>)
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
	Angle = HALL_Angle + Approx_Angle;
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HALL_Observer_Block+0x450>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <HALL_Observer_Block+0x454>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <HALL_Observer_Block+0x458>)
 8001030:	801a      	strh	r2, [r3, #0]

	if (Scan_Is_enabled > 0){
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <HALL_Observer_Block+0x45c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d075      	beq.n	8001126 <HALL_Observer_Block+0x436>
		Scan_iter += trace_num * 4;
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HALL_Observer_Block+0x460>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HALL_Observer_Block+0x464>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <HALL_Observer_Block+0x464>)
 800104e:	801a      	strh	r2, [r3, #0]

		Scan_Data[Scan_iter] = Angle/2;
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HALL_Observer_Block+0x458>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	b299      	uxth	r1, r3
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <HALL_Observer_Block+0x464>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <HALL_Observer_Block+0x468>)
 8001062:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HALL_Observer_Block+0x464>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HALL_Observer_Block+0x464>)
 800106e:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = (I_Alfa+2047)/16;
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HALL_Observer_Block+0x46c>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800107a:	2b00      	cmp	r3, #0
 800107c:	da00      	bge.n	8001080 <HALL_Observer_Block+0x390>
 800107e:	330f      	adds	r3, #15
 8001080:	111b      	asrs	r3, r3, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HALL_Observer_Block+0x464>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <HALL_Observer_Block+0x468>)
 800108e:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HALL_Observer_Block+0x464>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HALL_Observer_Block+0x464>)
 800109a:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = (I_Beta+2047)/16;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HALL_Observer_Block+0x470>)
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da00      	bge.n	80010ac <HALL_Observer_Block+0x3bc>
 80010aa:	330f      	adds	r3, #15
 80010ac:	111b      	asrs	r3, r3, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HALL_Observer_Block+0x464>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HALL_Observer_Block+0x468>)
 80010ba:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HALL_Observer_Block+0x464>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HALL_Observer_Block+0x464>)
 80010c6:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = 2047/16;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HALL_Observer_Block+0x464>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HALL_Observer_Block+0x468>)
 80010d0:	217f      	movs	r1, #127	; 0x7f
 80010d2:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HALL_Observer_Block+0x464>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HALL_Observer_Block+0x464>)
 80010de:	801a      	strh	r2, [r3, #0]
		//		if(tmpAngle >= 360) tmpAngle -= 360;
		//
		//		Scan_Data[Scan_iter] = ((((uint32_t)DupkoSin[tmpAngle])*PWM_Value)/640)/3;
		//		Scan_iter ++ ;

		Scan_iter += (MORE_TRACES-trace_num) * 4;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HALL_Observer_Block+0x460>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f1c3 0307 	rsb	r3, r3, #7
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HALL_Observer_Block+0x464>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HALL_Observer_Block+0x464>)
 80010f8:	801a      	strh	r2, [r3, #0]
		if (Scan_iter >= SCAN_SIZE) {
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HALL_Observer_Block+0x464>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001102:	d310      	bcc.n	8001126 <HALL_Observer_Block+0x436>
			trace_num++;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HALL_Observer_Block+0x460>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HALL_Observer_Block+0x460>)
 800110e:	701a      	strb	r2, [r3, #0]
			if(trace_num > MORE_TRACES){
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HALL_Observer_Block+0x460>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b07      	cmp	r3, #7
 8001116:	d903      	bls.n	8001120 <HALL_Observer_Block+0x430>
				Scan_Is_enabled = 0;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HALL_Observer_Block+0x45c>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e002      	b.n	8001126 <HALL_Observer_Block+0x436>
			} else Scan_iter = 0;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HALL_Observer_Block+0x464>)
 8001122:	2200      	movs	r2, #0
 8001124:	801a      	strh	r2, [r3, #0]
		}
	}

	// Do nothing if pwm is ste to 0

	DupkoSin_Block(PWM_Value);
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HALL_Observer_Block+0x474>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f81c 	bl	8001168 <DupkoSin_Block>
//	SetZero_A();
//	SetZero_B();
//	SetZero_C();
}
 8001130:	bd98      	pop	{r3, r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	2000000c 	.word	0x2000000c
 8001138:	2000038e 	.word	0x2000038e
 800113c:	2000038a 	.word	0x2000038a
 8001140:	2000038c 	.word	0x2000038c
 8001144:	20000388 	.word	0x20000388
 8001148:	20000384 	.word	0x20000384
 800114c:	20000374 	.word	0x20000374
 8001150:	20000378 	.word	0x20000378
 8001154:	20000376 	.word	0x20000376
 8001158:	2000039c 	.word	0x2000039c
 800115c:	2000439c 	.word	0x2000439c
 8001160:	20000396 	.word	0x20000396
 8001164:	20000382 	.word	0x20000382

08001168 <DupkoSin_Block>:
}

uint16_t DupkoSin[360] = {553,559,564,569,574,579,584,588,592,597,600,604,608,611,614,617,620,623,625,627,629,631,633,634,635,637,637,638,639,639,639,639,639,638,637,637,635,634,633,631,629,627,625,623,620,617,614,611,608,604,600,597,592,588,584,579,574,569,564,559,553,559,564,569,574,579,584,588,592,597,600,604,608,611,614,617,620,623,625,627,629,631,633,634,635,637,637,638,639,639,639,639,639,638,637,637,635,634,633,631,629,627,625,623,620,617,614,611,608,604,600,597,592,588,584,579,574,569,564,559,553,548,542,536,530,523,517,510,504,497,490,482,475,467,460,452,444,436,428,419,411,402,393,385,376,367,357,348,339,329,320,310,300,290,280,270,260,250,239,229,219,208,197,187,176,165,155,144,133,122,111,100,89,78,67,56,45,33,22,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,22,33,45,56,67,78,89,100,111,122,133,144,155,165,176,187,197,208,219,229,239,250,260,270,280,290,300,310,319,329,339,348,357,367,376,385,393,402,411,419,428,436,444,452,460,467,475,482,490,497,504,510,517,523,530,536,542,548};
uint16_t OldAngle = 0xffff;

void DupkoSin_Block(uint16_t PWM_Value){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	uint16_t tmpAngle = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	81fb      	strh	r3, [r7, #14]
	// REMEMBER THAT MAXIMUM PWM VALUE IS 640
	if(PWM_Value == 0){
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d110      	bne.n	800119e <DupkoSin_Block+0x36>
		SetFloating_A();
 800117c:	f000 f90a 	bl	8001394 <SetFloating_A>
		SetFloating_B();
 8001180:	f000 f91c 	bl	80013bc <SetFloating_B>
		SetFloating_C();
 8001184:	f000 f92e 	bl	80013e4 <SetFloating_C>
		Step_Num = 0;
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <DupkoSin_Block+0x16c>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
		Old_Step = 0;
 800118e:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <DupkoSin_Block+0x170>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		OldAngle = 0xffff;
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <DupkoSin_Block+0x174>)
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	801a      	strh	r2, [r3, #0]
		return;
 800119c:	e097      	b.n	80012ce <DupkoSin_Block+0x166>
	}
	if(Angle != OldAngle){
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <DupkoSin_Block+0x178>)
 80011a0:	881a      	ldrh	r2, [r3, #0]
 80011a2:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <DupkoSin_Block+0x174>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d04c      	beq.n	8001244 <DupkoSin_Block+0xdc>
		OldAngle = Angle;
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <DupkoSin_Block+0x178>)
 80011ac:	881a      	ldrh	r2, [r3, #0]
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <DupkoSin_Block+0x174>)
 80011b0:	801a      	strh	r2, [r3, #0]
		tmpAngle = Angle;
 80011b2:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <DupkoSin_Block+0x178>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	81fb      	strh	r3, [r7, #14]

		SetPulse_CH((((uint32_t)DupkoSin[tmpAngle])*PWM_Value)/640);
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <DupkoSin_Block+0x17c>)
 80011bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c0:	461a      	mov	r2, r3
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	fb03 f302 	mul.w	r3, r3, r2
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <DupkoSin_Block+0x180>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0a5b      	lsrs	r3, r3, #9
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f8c8 	bl	8001368 <SetPulse_CH>

		tmpAngle += 120;
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	3378      	adds	r3, #120	; 0x78
 80011dc:	81fb      	strh	r3, [r7, #14]
		if(tmpAngle >= 360) tmpAngle -= 360;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011e4:	d303      	bcc.n	80011ee <DupkoSin_Block+0x86>
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80011ec:	81fb      	strh	r3, [r7, #14]
		SetPulse_AH((((uint32_t)DupkoSin[tmpAngle])*PWM_Value)/640);
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	4a3c      	ldr	r2, [pc, #240]	; (80012e4 <DupkoSin_Block+0x17c>)
 80011f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f6:	461a      	mov	r2, r3
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	fb03 f302 	mul.w	r3, r3, r2
 80011fe:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <DupkoSin_Block+0x180>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0a5b      	lsrs	r3, r3, #9
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f881 	bl	8001310 <SetPulse_AH>

		tmpAngle += 120;
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	3378      	adds	r3, #120	; 0x78
 8001212:	81fb      	strh	r3, [r7, #14]
		if(tmpAngle >= 360) tmpAngle -= 360;
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800121a:	d303      	bcc.n	8001224 <DupkoSin_Block+0xbc>
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001222:	81fb      	strh	r3, [r7, #14]
		SetPulse_BH((((uint32_t)DupkoSin[tmpAngle])*PWM_Value)/640);
 8001224:	89fb      	ldrh	r3, [r7, #14]
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <DupkoSin_Block+0x17c>)
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	461a      	mov	r2, r3
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	fb03 f302 	mul.w	r3, r3, r2
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <DupkoSin_Block+0x180>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0a5b      	lsrs	r3, r3, #9
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f87c 	bl	800133c <SetPulse_BH>
	}
	Step_Num = (Angle/60)+1;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <DupkoSin_Block+0x178>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <DupkoSin_Block+0x184>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <DupkoSin_Block+0x16c>)
 800125a:	701a      	strb	r2, [r3, #0]
	if(Step_Num != Old_Step){
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <DupkoSin_Block+0x16c>)
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <DupkoSin_Block+0x170>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d032      	beq.n	80012ce <DupkoSin_Block+0x166>
		if(Step_Num == 1){
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <DupkoSin_Block+0x16c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d103      	bne.n	8001278 <DupkoSin_Block+0x110>
			Hall_Change_Active(ADC_CHANNEL_A);
 8001270:	2004      	movs	r0, #4
 8001272:	f000 f8cb 	bl	800140c <Hall_Change_Active>
 8001276:	e026      	b.n	80012c6 <DupkoSin_Block+0x15e>
		}else if(Step_Num == 2){
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <DupkoSin_Block+0x16c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d103      	bne.n	8001288 <DupkoSin_Block+0x120>
			Hall_Change_Active(ADC_CHANNEL_B);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f8c3 	bl	800140c <Hall_Change_Active>
 8001286:	e01e      	b.n	80012c6 <DupkoSin_Block+0x15e>
		}else if(Step_Num == 3){
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <DupkoSin_Block+0x16c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d103      	bne.n	8001298 <DupkoSin_Block+0x130>
			Hall_Change_Active(ADC_CHANNEL_C);
 8001290:	2002      	movs	r0, #2
 8001292:	f000 f8bb 	bl	800140c <Hall_Change_Active>
 8001296:	e016      	b.n	80012c6 <DupkoSin_Block+0x15e>
		}else if(Step_Num == 4){
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <DupkoSin_Block+0x16c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d103      	bne.n	80012a8 <DupkoSin_Block+0x140>
			Hall_Change_Active(ADC_CHANNEL_A);
 80012a0:	2004      	movs	r0, #4
 80012a2:	f000 f8b3 	bl	800140c <Hall_Change_Active>
 80012a6:	e00e      	b.n	80012c6 <DupkoSin_Block+0x15e>
		}else if(Step_Num == 5){
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <DupkoSin_Block+0x16c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d103      	bne.n	80012b8 <DupkoSin_Block+0x150>
			Hall_Change_Active(ADC_CHANNEL_B);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f8ab 	bl	800140c <Hall_Change_Active>
 80012b6:	e006      	b.n	80012c6 <DupkoSin_Block+0x15e>
		}else if(Step_Num == 6){
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <DupkoSin_Block+0x16c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d102      	bne.n	80012c6 <DupkoSin_Block+0x15e>
			Hall_Change_Active(ADC_CHANNEL_C);
 80012c0:	2002      	movs	r0, #2
 80012c2:	f000 f8a3 	bl	800140c <Hall_Change_Active>
		}
		Old_Step = Step_Num;
 80012c6:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <DupkoSin_Block+0x16c>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <DupkoSin_Block+0x170>)
 80012cc:	701a      	strb	r2, [r3, #0]
	}
}
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000380 	.word	0x20000380
 80012d8:	20000381 	.word	0x20000381
 80012dc:	200002f0 	.word	0x200002f0
 80012e0:	20000384 	.word	0x20000384
 80012e4:	20000020 	.word	0x20000020
 80012e8:	cccccccd 	.word	0xcccccccd
 80012ec:	88888889 	.word	0x88888889

080012f0 <Set_PWM>:

void Set_PWM(uint16_t value){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
	PWM_Value = value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <Set_PWM+0x1c>)
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	8013      	strh	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000382 	.word	0x20000382

08001310 <SetPulse_AH>:
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, 0);
}
///////////////////
void SetPulse_AH(uint16_t value){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <SetPulse_AH+0x28>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, value);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SetPulse_AH+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000334 	.word	0x20000334

0800133c <SetPulse_BH>:

void SetPulse_BH(uint16_t value){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <SetPulse_BH+0x28>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, value);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SetPulse_BH+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000338 	.word	0x20000338

08001368 <SetPulse_CH>:

void SetPulse_CH(uint16_t value){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <SetPulse_CH+0x28>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, value);
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SetPulse_CH+0x28>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000330 	.word	0x20000330

08001394 <SetFloating_A>:
///////////////////
void SetFloating_A(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <SetFloating_A+0x24>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, PWM_COUNTER);
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SetFloating_A+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f240 227f 	movw	r2, #639	; 0x27f
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000334 	.word	0x20000334

080013bc <SetFloating_B>:

void SetFloating_B(){
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <SetFloating_B+0x24>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, PWM_COUNTER);
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SetFloating_B+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f240 227f 	movw	r2, #639	; 0x27f
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000338 	.word	0x20000338

080013e4 <SetFloating_C>:

void SetFloating_C(){
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <SetFloating_C+0x24>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, PWM_COUNTER);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SetFloating_C+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f240 227f 	movw	r2, #639	; 0x27f
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000330 	.word	0x20000330

0800140c <Hall_Change_Active>:

void Hall_Change_Active(uint32_t pin){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if (pin == ADC_CHANNEL_A){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d107      	bne.n	800142a <Hall_Change_Active+0x1e>
		Hall_GPIO_Port = HALL_A_GPIO_Port;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <Hall_Change_Active+0x4c>)
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <Hall_Change_Active+0x50>)
 800141e:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_A_Pin;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <Hall_Change_Active+0x54>)
 8001422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001426:	801a      	strh	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
	}else{
		Hall_GPIO_Port = HALL_C_GPIO_Port;
		Hall_GPIO_Pin = HALL_C_Pin;
	}
}
 8001428:	e011      	b.n	800144e <Hall_Change_Active+0x42>
	}else if (pin == ADC_CHANNEL_B){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d107      	bne.n	8001440 <Hall_Change_Active+0x34>
		Hall_GPIO_Port = HALL_B_GPIO_Port;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Hall_Change_Active+0x4c>)
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <Hall_Change_Active+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <Hall_Change_Active+0x54>)
 8001438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143c:	801a      	strh	r2, [r3, #0]
}
 800143e:	e006      	b.n	800144e <Hall_Change_Active+0x42>
		Hall_GPIO_Port = HALL_C_GPIO_Port;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <Hall_Change_Active+0x4c>)
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <Hall_Change_Active+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_C_Pin;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <Hall_Change_Active+0x54>)
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	801a      	strh	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000004 	.word	0x20000004
 800145c:	40010800 	.word	0x40010800
 8001460:	20000008 	.word	0x20000008

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f001 f805 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f83f 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 fbe1 	bl	8001c38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001476:	f000 fbb1 	bl	8001bdc <MX_DMA_Init>
  MX_ADC1_Init();
 800147a:	f000 f891 	bl	80015a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800147e:	f000 f93b 	bl	80016f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001482:	f000 f971 	bl	8001768 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001486:	f000 faad 	bl	80019e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800148a:	f000 fa29 	bl	80018e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800148e:	f000 fb7b 	bl	8001b88 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001492:	f000 fb2b 	bl	8001aec <MX_TIM4_Init>
  MX_ADC2_Init();
 8001496:	f000 f8e1 	bl	800165c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

	DRV_Init(&hspi1);
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <main+0x6c>)
 800149c:	f7ff fa4e 	bl	800093c <DRV_Init>
	DRV_Write(SHUNT_AMPLIFIER_CONTROL,
 80014a0:	213f      	movs	r1, #63	; 0x3f
 80014a2:	200a      	movs	r0, #10
 80014a4:	f7ff fa62 	bl	800096c <DRV_Write>
			(GAIN_CS1 & 0xffff) +
			(GAIN_CS2 & 0xffff) +
			(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1, &hadc2);
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <main+0x70>)
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <main+0x74>)
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <main+0x78>)
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <main+0x7c>)
 80014b4:	490b      	ldr	r1, [pc, #44]	; (80014e4 <main+0x80>)
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <main+0x84>)
 80014b8:	f7ff fb4a 	bl	8000b50 <Control_Init>
	Application_Init(&huart1);
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <main+0x88>)
 80014be:	f7ff fa9f 	bl	8000a00 <Application_Init>

	HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f001 f83a 	bl	800253c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	Application_Update();
 80014c8:	f7ff fb2a 	bl	8000b20 <Application_Update>
 80014cc:	e7fc      	b.n	80014c8 <main+0x64>
 80014ce:	bf00      	nop
 80014d0:	200045e8 	.word	0x200045e8
 80014d4:	200043e8 	.word	0x200043e8
 80014d8:	200044a4 	.word	0x200044a4
 80014dc:	200043a0 	.word	0x200043a0
 80014e0:	20004418 	.word	0x20004418
 80014e4:	20004640 	.word	0x20004640
 80014e8:	200045a0 	.word	0x200045a0
 80014ec:	20004518 	.word	0x20004518

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fa04 	bl	800690c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001530:	2300      	movs	r3, #0
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001534:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fac6 	bl	8003ad0 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800154a:	f000 fbff 	bl	8001d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fd30 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001576:	f000 fbe9 	bl	8001d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800157a:	2302      	movs	r3, #2
 800157c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800157e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001582:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f002 febc 	bl	8004304 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001592:	f000 fbdb 	bl	8001d4c <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	; 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015b6:	4a28      	ldr	r2, [pc, #160]	; (8001658 <MX_ADC1_Init+0xb8>)
 80015b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015de:	2202      	movs	r2, #2
 80015e0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e2:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_ADC1_Init+0xb4>)
 80015e4:	f000 ffce 	bl	8002584 <HAL_ADC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 80015ee:	f000 fbad 	bl	8001d4c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80015f2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80015f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <MX_ADC1_Init+0xb4>)
 8001600:	f001 fcb4 	bl	8002f6c <HAL_ADCEx_MultiModeConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800160a:	f000 fb9f 	bl	8001d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001612:	2301      	movs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_ADC1_Init+0xb4>)
 8001620:	f001 f948 	bl	80028b4 <HAL_ADC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 fb8f 	bl	8001d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800162e:	2301      	movs	r3, #1
 8001630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001632:	2302      	movs	r3, #2
 8001634:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_ADC1_Init+0xb4>)
 800163c:	f001 f93a 	bl	80028b4 <HAL_ADC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001646:	f000 fb81 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200044a4 	.word	0x200044a4
 8001658:	40012400 	.word	0x40012400

0800165c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <MX_ADC2_Init+0x94>)
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001670:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_ADC2_Init+0x94>)
 8001674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001678:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_ADC2_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_ADC2_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_ADC2_Init+0x94>)
 8001688:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800168c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_ADC2_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 2;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_ADC2_Init+0x94>)
 8001696:	2202      	movs	r2, #2
 8001698:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <MX_ADC2_Init+0x94>)
 800169c:	f000 ff72 	bl	8002584 <HAL_ADC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 80016a6:	f000 fb51 	bl	8001d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016aa:	2308      	movs	r3, #8
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_ADC2_Init+0x94>)
 80016bc:	f001 f8fa 	bl	80028b4 <HAL_ADC_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fb41 	bl	8001d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016ca:	2309      	movs	r3, #9
 80016cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_ADC2_Init+0x94>)
 80016d8:	f001 f8ec 	bl	80028b4 <HAL_ADC_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80016e2:	f000 fb33 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200043e8 	.word	0x200043e8
 80016f4:	40012800 	.word	0x40012800

080016f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_SPI1_Init+0x68>)
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <MX_SPI1_Init+0x6c>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_SPI1_Init+0x68>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_SPI1_Init+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_SPI1_Init+0x68>)
 8001712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_SPI1_Init+0x68>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_SPI1_Init+0x68>)
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_SPI1_Init+0x68>)
 8001726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_SPI1_Init+0x68>)
 800172e:	2220      	movs	r2, #32
 8001730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_SPI1_Init+0x68>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_SPI1_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_SPI1_Init+0x68>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_SPI1_Init+0x68>)
 8001746:	220a      	movs	r2, #10
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_SPI1_Init+0x68>)
 800174c:	f002 ff54 	bl	80045f8 <HAL_SPI_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001756:	f000 faf9 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200045e8 	.word	0x200045e8
 8001764:	40013000 	.word	0x40013000

08001768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2220      	movs	r2, #32
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f8b3 	bl	800690c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017a8:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <MX_TIM1_Init+0x174>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017b4:	2220      	movs	r2, #32
 80017b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017ba:	f240 227f 	movw	r2, #639	; 0x27f
 80017be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d2:	4841      	ldr	r0, [pc, #260]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017d4:	f003 f9dc 	bl	8004b90 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017de:	f000 fab5 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ec:	4619      	mov	r1, r3
 80017ee:	483a      	ldr	r0, [pc, #232]	; (80018d8 <MX_TIM1_Init+0x170>)
 80017f0:	f003 fe10 	bl	8005414 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017fa:	f000 faa7 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017fe:	4836      	ldr	r0, [pc, #216]	; (80018d8 <MX_TIM1_Init+0x170>)
 8001800:	f003 fa60 	bl	8004cc4 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800180a:	f000 fa9f 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800180e:	2360      	movs	r3, #96	; 0x60
 8001810:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181a:	4619      	mov	r1, r3
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <MX_TIM1_Init+0x170>)
 800181e:	f004 f98f 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001828:	f000 fa90 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001834:	2302      	movs	r3, #2
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4821      	ldr	r0, [pc, #132]	; (80018d8 <MX_TIM1_Init+0x170>)
 8001852:	f003 fd21 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800185c:	f000 fa76 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	481a      	ldr	r0, [pc, #104]	; (80018d8 <MX_TIM1_Init+0x170>)
 800186e:	f003 fd13 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001878:	f000 fa68 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800187c:	2302      	movs	r3, #2
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	2208      	movs	r2, #8
 8001886:	4619      	mov	r1, r3
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <MX_TIM1_Init+0x170>)
 800188a:	f003 fd05 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001894:	f000 fa5a 	bl	8001d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM1_Init+0x170>)
 80018bc:	f004 f99e 	bl	8005bfc <HAL_TIMEx_ConfigBreakDeadTime>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80018c6:	f000 fa41 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM1_Init+0x170>)
 80018cc:	f000 fbb4 	bl	8002038 <HAL_TIM_MspPostInit>

}
 80018d0:	bf00      	nop
 80018d2:	3758      	adds	r7, #88	; 0x58
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200045a0 	.word	0x200045a0
 80018dc:	40012c00 	.word	0x40012c00

080018e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <MX_TIM2_Init+0x100>)
 800191a:	2201      	movs	r2, #1
 800191c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800191e:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001920:	2220      	movs	r2, #32
 8001922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001926:	f240 227f 	movw	r2, #639	; 0x27f
 800192a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_TIM2_Init+0x100>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001938:	4829      	ldr	r0, [pc, #164]	; (80019e0 <MX_TIM2_Init+0x100>)
 800193a:	f003 f929 	bl	8004b90 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001944:	f000 fa02 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	4619      	mov	r1, r3
 8001954:	4822      	ldr	r0, [pc, #136]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001956:	f003 fd5d 	bl	8005414 <HAL_TIM_ConfigClockSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001960:	f000 f9f4 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001966:	f003 f9ad 	bl	8004cc4 <HAL_TIM_PWM_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001970:	f000 f9ec 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	4619      	mov	r1, r3
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <MX_TIM2_Init+0x100>)
 8001984:	f004 f8dc 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800198e:	f000 f9dd 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_TIM2_Init+0x100>)
 80019aa:	f003 fc75 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019b4:	f000 f9ca 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019b8:	2302      	movs	r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2204      	movs	r2, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM2_Init+0x100>)
 80019c4:	f003 fc68 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80019ce:	f000 f9bd 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM2_Init+0x100>)
 80019d4:	f000 fb30 	bl	8002038 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3738      	adds	r7, #56	; 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20004640 	.word	0x20004640

080019e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a16:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <MX_TIM3_Init+0x104>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a22:	2220      	movs	r2, #32
 8001a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a28:	f240 227f 	movw	r2, #639	; 0x27f
 8001a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3a:	482a      	ldr	r0, [pc, #168]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a3c:	f003 f8a8 	bl	8004b90 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a46:	f000 f981 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a58:	f003 fcdc 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a62:	f000 f973 	bl	8001d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a66:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a68:	f003 f92c 	bl	8004cc4 <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a72:	f000 f96b 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4619      	mov	r1, r3
 8001a84:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001a86:	f004 f85b 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a90:	f000 f95c 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	2360      	movs	r3, #96	; 0x60
 8001a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001aac:	f003 fbf4 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ab6:	f000 f949 	bl	8001d4c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001aba:	2302      	movs	r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001ac6:	f003 fbe7 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001ad0:	f000 f93c 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM3_Init+0x100>)
 8001ad6:	f000 faaf 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8001ada:	bf00      	nop
 8001adc:	3738      	adds	r7, #56	; 0x38
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20004418 	.word	0x20004418
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	463b      	mov	r3, r7
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <MX_TIM4_Init+0x98>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b30:	f003 f82e 	bl	8004b90 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f000 f907 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b4c:	f003 fc62 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001b56:	f000 f8f9 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b68:	f003 ffea 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001b72:	f000 f8eb 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200043a0 	.word	0x200043a0
 8001b84:	40000800 	.word	0x40000800

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART1_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f004 f87f 	bl	8005cc2 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f8bf 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20004518 	.word	0x20004518
 8001bd8:	40013800 	.word	0x40013800

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_DMA_Init+0x58>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <MX_DMA_Init+0x58>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6153      	str	r3, [r2, #20]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_DMA_Init+0x58>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	200b      	movs	r0, #11
 8001c00:	f001 fadd 	bl	80031be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c04:	200b      	movs	r0, #11
 8001c06:	f001 faf6 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200e      	movs	r0, #14
 8001c10:	f001 fad5 	bl	80031be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c14:	200e      	movs	r0, #14
 8001c16:	f001 faee 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f001 facd 	bl	80031be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c24:	200f      	movs	r0, #15
 8001c26:	f001 fae6 	bl	80031f6 <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a33      	ldr	r2, [pc, #204]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <MX_GPIO_Init+0x100>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2101      	movs	r1, #1
 8001c98:	4828      	ldr	r0, [pc, #160]	; (8001d3c <MX_GPIO_Init+0x104>)
 8001c9a:	f001 ff00 	bl	8003a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4827      	ldr	r0, [pc, #156]	; (8001d40 <MX_GPIO_Init+0x108>)
 8001ca4:	f001 fefb 	bl	8003a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481f      	ldr	r0, [pc, #124]	; (8001d3c <MX_GPIO_Init+0x104>)
 8001cc0:	f001 fd52 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_GPIO_Init+0x104>)
 8001cd8:	f001 fd46 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <MX_GPIO_Init+0x108>)
 8001cf4:	f001 fd38 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_B_Pin HALL_A_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_B_Pin|HALL_A_Pin|HALL_C_Pin;
 8001cf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <MX_GPIO_Init+0x10c>)
 8001d0e:	f001 fd2b 	bl	8003768 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <MX_GPIO_Init+0x110>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <MX_GPIO_Init+0x110>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	6053      	str	r3, [r2, #4]

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40011400 	.word	0x40011400
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010000 	.word	0x40010000

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6193      	str	r3, [r2, #24]
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x5c>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_MspInit+0x60>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_MspInit+0x60>)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000

08001dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <HAL_ADC_MspInit+0x10c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d14a      	bne.n	8001e72 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a3a      	ldr	r2, [pc, #232]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8001e0c:	231f      	movs	r3, #31
 8001e0e:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e10:	2303      	movs	r3, #3
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	482d      	ldr	r0, [pc, #180]	; (8001ed0 <HAL_ADC_MspInit+0x114>)
 8001e1c:	f001 fca4 	bl	8003768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e22:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <HAL_ADC_MspInit+0x11c>)
 8001e24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e54:	481f      	ldr	r0, [pc, #124]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e56:	f001 f9e9 	bl	800322c <HAL_DMA_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e60:	f7ff ff74 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e68:	621a      	str	r2, [r3, #32]
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_ADC_MspInit+0x118>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e70:	e026      	b.n	8001ec0 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_ADC_MspInit+0x120>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d121      	bne.n	8001ec0 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_ADC_MspInit+0x110>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 8001eac:	2303      	movs	r3, #3
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <HAL_ADC_MspInit+0x124>)
 8001ebc:	f001 fc54 	bl	8003768 <HAL_GPIO_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	2000455c 	.word	0x2000455c
 8001ed8:	40020008 	.word	0x40020008
 8001edc:	40012800 	.word	0x40012800
 8001ee0:	40010c00 	.word	0x40010c00

08001ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d12f      	bne.n	8001f64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 8001f34:	23a0      	movs	r3, #160	; 0xa0
 8001f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_SPI_MspInit+0x90>)
 8001f48:	f001 fc0e 	bl	8003768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_SPI_MspInit+0x90>)
 8001f60:	f001 fc02 	bl	8003768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40013000 	.word	0x40013000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010800 	.word	0x40010800

08001f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_TIM_Base_MspInit+0xb0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f94:	6193      	str	r3, [r2, #24]
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2019      	movs	r0, #25
 8001fa8:	f001 f909 	bl	80031be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fac:	2019      	movs	r0, #25
 8001fae:	f001 f922 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fb2:	e034      	b.n	800201e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
}
 8001fd6:	e022      	b.n	800201e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_TIM_Base_MspInit+0xb8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10c      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
}
 8001ffa:	e010      	b.n	800201e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_TIM_Base_MspInit+0xbc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10b      	bne.n	800201e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_TIM_Base_MspInit+0xb4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40000400 	.word	0x40000400
 8002034:	40000800 	.word	0x40000800

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_TIM_MspPostInit+0x14c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d119      	bne.n	800208c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CL_Pin|PWM_CH_Pin;
 8002070:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4619      	mov	r1, r3
 8002084:	4841      	ldr	r0, [pc, #260]	; (800218c <HAL_TIM_MspPostInit+0x154>)
 8002086:	f001 fb6f 	bl	8003768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800208a:	e077      	b.n	800217c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d143      	bne.n	800211e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a35      	ldr	r2, [pc, #212]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 80020c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4619      	mov	r1, r3
 80020da:	482c      	ldr	r0, [pc, #176]	; (800218c <HAL_TIM_MspPostInit+0x154>)
 80020dc:	f001 fb44 	bl	8003768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AL_Pin;
 80020e0:	2308      	movs	r3, #8
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2302      	movs	r3, #2
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AL_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4827      	ldr	r0, [pc, #156]	; (8002190 <HAL_TIM_MspPostInit+0x158>)
 80020f4:	f001 fb38 	bl	8003768 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_TIM_MspPostInit+0x15c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_TIM_MspPostInit+0x15c>)
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	6053      	str	r3, [r2, #4]
}
 800211c:	e02e      	b.n	800217c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_TIM_MspPostInit+0x160>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d129      	bne.n	800217c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_TIM_MspPostInit+0x150>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_Pin|PWM_BL_Pin;
 8002140:	2330      	movs	r3, #48	; 0x30
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2302      	movs	r3, #2
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4619      	mov	r1, r3
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <HAL_TIM_MspPostInit+0x158>)
 8002154:	f001 fb08 	bl	8003768 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_MspPostInit+0x15c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_TIM_MspPostInit+0x15c>)
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	6053      	str	r3, [r2, #4]
}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40010000 	.word	0x40010000
 8002198:	40000400 	.word	0x40000400

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <HAL_UART_MspInit+0x150>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	f040 8092 	bne.w	80022e2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021be:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6193      	str	r3, [r2, #24]
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_UART_MspInit+0x154>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ee:	2340      	movs	r3, #64	; 0x40
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	483c      	ldr	r0, [pc, #240]	; (80022f4 <HAL_UART_MspInit+0x158>)
 8002202:	f001 fab1 	bl	8003768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4836      	ldr	r0, [pc, #216]	; (80022f4 <HAL_UART_MspInit+0x158>)
 800221a:	f001 faa5 	bl	8003768 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_UART_MspInit+0x15c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_UART_MspInit+0x15c>)
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_UART_MspInit+0x160>)
 800223c:	4a30      	ldr	r2, [pc, #192]	; (8002300 <HAL_UART_MspInit+0x164>)
 800223e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_UART_MspInit+0x160>)
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_UART_MspInit+0x160>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800226a:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_UART_MspInit+0x160>)
 800226c:	f000 ffde 	bl	800322c <HAL_DMA_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002276:	f7ff fd69 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_UART_MspInit+0x160>)
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_UART_MspInit+0x160>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_UART_MspInit+0x168>)
 8002288:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_UART_MspInit+0x16c>)
 800228a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_UART_MspInit+0x168>)
 800228e:	2210      	movs	r2, #16
 8002290:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_UART_MspInit+0x168>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_UART_MspInit+0x168>)
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022b6:	4813      	ldr	r0, [pc, #76]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022b8:	f000 ffb8 	bl	800322c <HAL_DMA_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80022c2:	f7ff fd43 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_UART_MspInit+0x168>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	2025      	movs	r0, #37	; 0x25
 80022d8:	f000 ff71 	bl	80031be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022dc:	2025      	movs	r0, #37	; 0x25
 80022de:	f000 ff8a 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	; 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	40010000 	.word	0x40010000
 80022fc:	200044d4 	.word	0x200044d4
 8002300:	40020058 	.word	0x40020058
 8002304:	20004460 	.word	0x20004460
 8002308:	40020044 	.word	0x40020044

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <HardFault_Handler+0x4>

0800231e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <MemManage_Handler+0x4>

08002324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <BusFault_Handler+0x4>

0800232a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <UsageFault_Handler+0x4>

08002330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f8d4 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA1_Channel1_IRQHandler+0x10>)
 8002366:	f001 f8cb 	bl	8003500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000455c 	.word	0x2000455c

08002374 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA1_Channel4_IRQHandler+0x10>)
 800237a:	f001 f8c1 	bl	8003500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20004460 	.word	0x20004460

08002388 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA1_Channel5_IRQHandler+0x10>)
 800238e:	f001 f8b7 	bl	8003500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200044d4 	.word	0x200044d4

0800239c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM1_UP_IRQHandler+0x10>)
 80023a2:	f002 fe71 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200045a0 	.word	0x200045a0

080023b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <USART1_IRQHandler+0x10>)
 80023b6:	f003 fd6d 	bl	8005e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004518 	.word	0x20004518

080023c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <SystemInit+0x5c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <SystemInit+0x5c>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <SystemInit+0x5c>)
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4911      	ldr	r1, [pc, #68]	; (8002420 <SystemInit+0x5c>)
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <SystemInit+0x60>)
 80023dc:	4013      	ands	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <SystemInit+0x5c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <SystemInit+0x5c>)
 80023e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <SystemInit+0x5c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SystemInit+0x5c>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <SystemInit+0x5c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <SystemInit+0x5c>)
 8002402:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002406:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SystemInit+0x5c>)
 800240a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800240e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SystemInit+0x64>)
 8002412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002416:	609a      	str	r2, [r3, #8]
#endif 
 }
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	f8ff0000 	.word	0xf8ff0000
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800242c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800242e:	e003      	b.n	8002438 <LoopCopyDataInit>

08002430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002436:	3104      	adds	r1, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002438:	480a      	ldr	r0, [pc, #40]	; (8002464 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800243c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800243e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002440:	d3f6      	bcc.n	8002430 <CopyDataInit>
  ldr r2, =_sbss
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002444:	e002      	b.n	800244c <LoopFillZerobss>

08002446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002448:	f842 3b04 	str.w	r3, [r2], #4

0800244c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800244e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002450:	d3f9      	bcc.n	8002446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002452:	f7ff ffb7 	bl	80023c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002456:	f004 fa35 	bl	80068c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800245a:	f7ff f803 	bl	8001464 <main>
  bx lr
 800245e:	4770      	bx	lr
  ldr r3, =_sidata
 8002460:	08006974 	.word	0x08006974
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002468:	20000300 	.word	0x20000300
  ldr r2, =_sbss
 800246c:	20000300 	.word	0x20000300
  ldr r3, = _ebss
 8002470:	2000468c 	.word	0x2000468c

08002474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC1_2_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_Init+0x28>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_Init+0x28>)
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fe8d 	bl	80031a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fc60 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fea5 	bl	8003212 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 fe6d 	bl	80031be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200002f4 	.word	0x200002f4
 80024fc:	200002fc 	.word	0x200002fc
 8002500:	200002f8 	.word	0x200002f8

08002504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_IncTick+0x1c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_IncTick+0x20>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a03      	ldr	r2, [pc, #12]	; (8002524 <HAL_IncTick+0x20>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	200002fc 	.word	0x200002fc
 8002524:	20004688 	.word	0x20004688

08002528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b02      	ldr	r3, [pc, #8]	; (8002538 <HAL_GetTick+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20004688 	.word	0x20004688

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fff0 	bl	8002528 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffe0 	bl	8002528 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002fc 	.word	0x200002fc

08002584 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0be      	b.n	8002724 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fbfa 	bl	8001dbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fac5 	bl	8002b58 <ADC_ConversionStop_Disable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8099 	bne.w	8002712 <HAL_ADC_Init+0x18e>
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8095 	bne.w	8002712 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f0:	f023 0302 	bic.w	r3, r3, #2
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002604:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7b1b      	ldrb	r3, [r3, #12]
 800260a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800260c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d003      	beq.n	8002626 <HAL_ADC_Init+0xa2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_ADC_Init+0xa8>
 8002626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800262a:	e000      	b.n	800262e <HAL_ADC_Init+0xaa>
 800262c:	2300      	movs	r3, #0
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7d1b      	ldrb	r3, [r3, #20]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d119      	bne.n	8002670 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7b1b      	ldrb	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	3b01      	subs	r3, #1
 800264a:	035a      	lsls	r2, r3, #13
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	e00b      	b.n	8002670 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_ADC_Init+0x1a8>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	430b      	orrs	r3, r1
 8002696:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a0:	d003      	beq.n	80026aa <HAL_ADC_Init+0x126>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d104      	bne.n	80026b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_ADC_Init+0x1ac>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d10b      	bne.n	80026f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ee:	e018      	b.n	8002722 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f023 0312 	bic.w	r3, r3, #18
 80026f8:	f043 0210 	orr.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002710:	e007      	b.n	8002722 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffe1f7fd 	.word	0xffe1f7fd
 8002730:	ff1f0efe 	.word	0xff1f0efe

08002734 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_ADC_Start+0x1a>
 800274a:	2302      	movs	r3, #2
 800274c:	e098      	b.n	8002880 <HAL_ADC_Start+0x14c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9a4 	bl	8002aa4 <ADC_Enable>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8087 	bne.w	8002876 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a41      	ldr	r2, [pc, #260]	; (8002888 <HAL_ADC_Start+0x154>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d105      	bne.n	8002792 <HAL_ADC_Start+0x5e>
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_ADC_Start+0x158>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d026      	beq.n	80027fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027bc:	e01d      	b.n	80027fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <HAL_ADC_Start+0x158>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_ADC_Start+0xaa>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_ADC_Start+0x154>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10d      	bne.n	80027fa <HAL_ADC_Start+0xc6>
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_ADC_Start+0x158>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f023 0206 	bic.w	r2, r3, #6
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
 8002812:	e002      	b.n	800281a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0202 	mvn.w	r2, #2
 800282a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002836:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800283a:	d113      	bne.n	8002864 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_ADC_Start+0x154>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d105      	bne.n	8002852 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_ADC_Start+0x158>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	e00c      	b.n	800287e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e003      	b.n	800287e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40012800 	.word	0x40012800
 800288c:	40012400 	.word	0x40012400

08002890 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x20>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0dc      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x1da>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d81c      	bhi.n	800291e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b05      	subs	r3, #5
 80028f6:	221f      	movs	r2, #31
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4019      	ands	r1, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3b05      	subs	r3, #5
 8002910:	fa00 f203 	lsl.w	r2, r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
 800291c:	e03c      	b.n	8002998 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d81c      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b23      	subs	r3, #35	; 0x23
 8002938:	221f      	movs	r2, #31
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	4019      	ands	r1, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b23      	subs	r3, #35	; 0x23
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
 800295e:	e01b      	b.n	8002998 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b41      	subs	r3, #65	; 0x41
 8002972:	221f      	movs	r2, #31
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4019      	ands	r1, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b41      	subs	r3, #65	; 0x41
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d91c      	bls.n	80029da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	3b1e      	subs	r3, #30
 80029b2:	2207      	movs	r2, #7
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4019      	ands	r1, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6898      	ldr	r0, [r3, #8]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	3b1e      	subs	r3, #30
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	e019      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6919      	ldr	r1, [r3, #16]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4019      	ands	r1, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6898      	ldr	r0, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	fa00 f203 	lsl.w	r2, r0, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d003      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a1a:	2b11      	cmp	r3, #17
 8002a1c:	d132      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d125      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d126      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d11a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	0c9a      	lsrs	r2, r3, #18
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a64:	e002      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f9      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x1b2>
 8002a72:	e007      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40012400 	.word	0x40012400
 8002a9c:	200002f4 	.word	0x200002f4
 8002aa0:	431bde83 	.word	0x431bde83

08002aa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d040      	beq.n	8002b44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <ADC_Enable+0xac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <ADC_Enable+0xb0>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae0:	e002      	b.n	8002ae8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aee:	f7ff fd1b 	bl	8002528 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af4:	e01f      	b.n	8002b36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af6:	f7ff fd17 	bl	8002528 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d918      	bls.n	8002b36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d011      	beq.n	8002b36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e007      	b.n	8002b46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d1d8      	bne.n	8002af6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200002f4 	.word	0x200002f4
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d12e      	bne.n	8002bd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b82:	f7ff fcd1 	bl	8002528 <HAL_GetTick>
 8002b86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b88:	e01b      	b.n	8002bc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b8a:	f7ff fccd 	bl	8002528 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d914      	bls.n	8002bc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10d      	bne.n	8002bc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e007      	b.n	8002bd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d0dc      	beq.n	8002b8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d127      	bne.n	8002c44 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c0e:	d115      	bne.n	8002c3c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d111      	bne.n	8002c3c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f043 0201 	orr.w	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7fd ff75 	bl	8000b2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c42:	e004      	b.n	8002c4e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff fe13 	bl	8002890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fe02 	bl	80028a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e095      	b.n	8002df2 <HAL_ADCEx_Calibration_Start+0x14a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ff42 	bl	8002b58 <ADC_ConversionStop_Disable>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 8084 	bne.w	8002de8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ce8:	f023 0302 	bic.w	r3, r3, #2
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_ADCEx_Calibration_Start+0x154>)
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f001 fbb9 	bl	8004470 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002d04:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002d06:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002d08:	e002      	b.n	8002d10 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f9      	bne.n	8002d0a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fec4 	bl	8002aa4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d2c:	f7ff fbfc 	bl	8002528 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d32:	e01b      	b.n	8002d6c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d34:	f7ff fbf8 	bl	8002528 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b0a      	cmp	r3, #10
 8002d40:	d914      	bls.n	8002d6c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f023 0312 	bic.w	r3, r3, #18
 8002d58:	f043 0210 	orr.w	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e042      	b.n	8002df2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1dc      	bne.n	8002d34 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0204 	orr.w	r2, r2, #4
 8002d88:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d8a:	f7ff fbcd 	bl	8002528 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d90:	e01b      	b.n	8002dca <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d92:	f7ff fbc9 	bl	8002528 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b0a      	cmp	r3, #10
 8002d9e:	d914      	bls.n	8002dca <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f023 0312 	bic.w	r3, r3, #18
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e013      	b.n	8002df2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1dc      	bne.n	8002d92 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f023 0303 	bic.w	r3, r3, #3
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200002f4 	.word	0x200002f4

08002e00 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b092      	sub	sp, #72	; 0x48
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	2230      	movs	r2, #48	; 0x30
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fd76 	bl	800690c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e08f      	b.n	8002f4e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e36:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002e38:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e46:	d00b      	beq.n	8002e60 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e076      	b.n	8002f4e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fe1f 	bl	8002aa4 <ADC_Enable>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8002e6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fe13 	bl	8002aa4 <ADC_Enable>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d15a      	bne.n	8002f42 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0202 	mvn.w	r2, #2
 8002ee8:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a18      	ldr	r0, [r3, #32]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	4619      	mov	r1, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f000 f9e9 	bl	80032e0 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f1c:	d108      	bne.n	8002f30 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e00c      	b.n	8002f4a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e003      	b.n	8002f4a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3748      	adds	r7, #72	; 0x48
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40012800 	.word	0x40012800
 8002f5c:	ffeffcfe 	.word	0xffeffcfe
 8002f60:	08002bdb 	.word	0x08002bdb
 8002f64:	08002c57 	.word	0x08002c57
 8002f68:	08002c73 	.word	0x08002c73

08002f6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b090      	sub	sp, #64	; 0x40
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2230      	movs	r2, #48	; 0x30
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fcc1 	bl	800690c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e032      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8002fa2:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d016      	beq.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d010      	beq.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	e008      	b.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8002ffe:	4618      	mov	r0, r3
 8003000:	3740      	adds	r7, #64	; 0x40
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40012800 	.word	0x40012800
 800300c:	40012400 	.word	0x40012400

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4906      	ldr	r1, [pc, #24]	; (80030a8 <__NVIC_EnableIRQ+0x34>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003174:	d301      	bcc.n	800317a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003176:	2301      	movs	r3, #1
 8003178:	e00f      	b.n	800319a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <SysTick_Config+0x40>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003182:	210f      	movs	r1, #15
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f7ff ff90 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SysTick_Config+0x40>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <SysTick_Config+0x40>)
 8003194:	2207      	movs	r2, #7
 8003196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000e010 	.word	0xe000e010

080031a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff2d 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d0:	f7ff ff42 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f7ff ff90 	bl	8003100 <NVIC_EncodePriority>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff5f 	bl	80030ac <__NVIC_SetPriority>
}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff35 	bl	8003074 <__NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffa2 	bl	8003164 <SysTick_Config>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e043      	b.n	80032ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_DMA_Init+0xa8>)
 800324a:	4413      	add	r3, r2
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_DMA_Init+0xac>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_DMA_Init+0xb0>)
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003276:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800327a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000

080032e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_DMA_Start_IT+0x20>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e04a      	b.n	8003396 <HAL_DMA_Start_IT+0xb6>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800330e:	2b01      	cmp	r3, #1
 8003310:	d13a      	bne.n	8003388 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f9e8 	bl	800370c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 020e 	orr.w	r2, r2, #14
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e00f      	b.n	8003376 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 020a 	orr.w	r2, r2, #10
 8003374:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e005      	b.n	8003394 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003390:	2302      	movs	r3, #2
 8003392:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d008      	beq.n	80033c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2204      	movs	r2, #4
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e020      	b.n	8003408 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020e 	bic.w	r2, r2, #14
 80033d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
	...

08003414 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003426:	2b02      	cmp	r3, #2
 8003428:	d005      	beq.n	8003436 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2204      	movs	r2, #4
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e051      	b.n	80034da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020e 	bic.w	r2, r2, #14
 8003444:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_DMA_Abort_IT+0xd0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d029      	beq.n	80034b4 <HAL_DMA_Abort_IT+0xa0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_DMA_Abort_IT+0xd4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x9c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_DMA_Abort_IT+0xd8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01a      	beq.n	80034aa <HAL_DMA_Abort_IT+0x96>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_DMA_Abort_IT+0xdc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d012      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x90>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_DMA_Abort_IT+0xe0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00a      	beq.n	800349e <HAL_DMA_Abort_IT+0x8a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_DMA_Abort_IT+0xe4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d102      	bne.n	8003498 <HAL_DMA_Abort_IT+0x84>
 8003492:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003496:	e00e      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	e00b      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 800349e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a2:	e008      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 80034a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a8:	e005      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 80034aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ae:	e002      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 80034b0:	2310      	movs	r3, #16
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_Abort_IT+0xa2>
 80034b4:	2301      	movs	r3, #1
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_DMA_Abort_IT+0xe8>)
 80034b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    } 
  }
  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40020008 	.word	0x40020008
 80034e8:	4002001c 	.word	0x4002001c
 80034ec:	40020030 	.word	0x40020030
 80034f0:	40020044 	.word	0x40020044
 80034f4:	40020058 	.word	0x40020058
 80034f8:	4002006c 	.word	0x4002006c
 80034fc:	40020000 	.word	0x40020000

08003500 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2204      	movs	r2, #4
 800351e:	409a      	lsls	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d04f      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xc8>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04a      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d029      	beq.n	80035ae <HAL_DMA_IRQHandler+0xae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <HAL_DMA_IRQHandler+0xaa>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a63      	ldr	r2, [pc, #396]	; (80036f8 <HAL_DMA_IRQHandler+0x1f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0xa4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a62      	ldr	r2, [pc, #392]	; (80036fc <HAL_DMA_IRQHandler+0x1fc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d012      	beq.n	800359e <HAL_DMA_IRQHandler+0x9e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_DMA_IRQHandler+0x200>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00a      	beq.n	8003598 <HAL_DMA_IRQHandler+0x98>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5f      	ldr	r2, [pc, #380]	; (8003704 <HAL_DMA_IRQHandler+0x204>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d102      	bne.n	8003592 <HAL_DMA_IRQHandler+0x92>
 800358c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 8003592:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003596:	e00b      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 8003598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800359c:	e008      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 800359e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035a2:	e005      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 80035a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a8:	e002      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	e000      	b.n	80035b0 <HAL_DMA_IRQHandler+0xb0>
 80035ae:	2304      	movs	r3, #4
 80035b0:	4a55      	ldr	r2, [pc, #340]	; (8003708 <HAL_DMA_IRQHandler+0x208>)
 80035b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8094 	beq.w	80036e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035c6:	e08e      	b.n	80036e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2202      	movs	r2, #2
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d056      	beq.n	8003686 <HAL_DMA_IRQHandler+0x186>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d051      	beq.n	8003686 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020a 	bic.w	r2, r2, #10
 80035fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_DMA_IRQHandler+0x1f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d029      	beq.n	8003666 <HAL_DMA_IRQHandler+0x166>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a37      	ldr	r2, [pc, #220]	; (80036f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0x162>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01a      	beq.n	800365c <HAL_DMA_IRQHandler+0x15c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_DMA_IRQHandler+0x1fc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d012      	beq.n	8003656 <HAL_DMA_IRQHandler+0x156>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a32      	ldr	r2, [pc, #200]	; (8003700 <HAL_DMA_IRQHandler+0x200>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00a      	beq.n	8003650 <HAL_DMA_IRQHandler+0x150>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <HAL_DMA_IRQHandler+0x204>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <HAL_DMA_IRQHandler+0x14a>
 8003644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003648:	e00e      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	e00b      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	e008      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 8003656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800365a:	e005      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 800365c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003660:	e002      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 8003662:	2320      	movs	r3, #32
 8003664:	e000      	b.n	8003668 <HAL_DMA_IRQHandler+0x168>
 8003666:	2302      	movs	r3, #2
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_DMA_IRQHandler+0x208>)
 800366a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d034      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003684:	e02f      	b.n	80036e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2208      	movs	r2, #8
 800368c:	409a      	lsls	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d028      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x1e8>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020e 	bic.w	r2, r2, #14
 80036ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
    }
  }
  return;
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
}
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40020008 	.word	0x40020008
 80036f4:	4002001c 	.word	0x4002001c
 80036f8:	40020030 	.word	0x40020030
 80036fc:	40020044 	.word	0x40020044
 8003700:	40020058 	.word	0x40020058
 8003704:	4002006c 	.word	0x4002006c
 8003708:	40020000 	.word	0x40020000

0800370c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d108      	bne.n	800374c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
	...

08003768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003768:	b480      	push	{r7}
 800376a:	b08b      	sub	sp, #44	; 0x2c
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377a:	e169      	b.n	8003a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800377c:	2201      	movs	r2, #1
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	429a      	cmp	r2, r3
 8003796:	f040 8158 	bne.w	8003a4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a9a      	ldr	r2, [pc, #616]	; (8003a08 <HAL_GPIO_Init+0x2a0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d05e      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
 80037a4:	4a98      	ldr	r2, [pc, #608]	; (8003a08 <HAL_GPIO_Init+0x2a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d875      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037aa:	4a98      	ldr	r2, [pc, #608]	; (8003a0c <HAL_GPIO_Init+0x2a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d058      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
 80037b0:	4a96      	ldr	r2, [pc, #600]	; (8003a0c <HAL_GPIO_Init+0x2a4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d86f      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037b6:	4a96      	ldr	r2, [pc, #600]	; (8003a10 <HAL_GPIO_Init+0x2a8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d052      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
 80037bc:	4a94      	ldr	r2, [pc, #592]	; (8003a10 <HAL_GPIO_Init+0x2a8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d869      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037c2:	4a94      	ldr	r2, [pc, #592]	; (8003a14 <HAL_GPIO_Init+0x2ac>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d04c      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
 80037c8:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <HAL_GPIO_Init+0x2ac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d863      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037ce:	4a92      	ldr	r2, [pc, #584]	; (8003a18 <HAL_GPIO_Init+0x2b0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d046      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
 80037d4:	4a90      	ldr	r2, [pc, #576]	; (8003a18 <HAL_GPIO_Init+0x2b0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d85d      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d82a      	bhi.n	8003834 <HAL_GPIO_Init+0xcc>
 80037de:	2b12      	cmp	r3, #18
 80037e0:	d859      	bhi.n	8003896 <HAL_GPIO_Init+0x12e>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_GPIO_Init+0x80>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	08003863 	.word	0x08003863
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800384f 	.word	0x0800384f
 80037f4:	08003891 	.word	0x08003891
 80037f8:	08003897 	.word	0x08003897
 80037fc:	08003897 	.word	0x08003897
 8003800:	08003897 	.word	0x08003897
 8003804:	08003897 	.word	0x08003897
 8003808:	08003897 	.word	0x08003897
 800380c:	08003897 	.word	0x08003897
 8003810:	08003897 	.word	0x08003897
 8003814:	08003897 	.word	0x08003897
 8003818:	08003897 	.word	0x08003897
 800381c:	08003897 	.word	0x08003897
 8003820:	08003897 	.word	0x08003897
 8003824:	08003897 	.word	0x08003897
 8003828:	08003897 	.word	0x08003897
 800382c:	08003845 	.word	0x08003845
 8003830:	08003859 	.word	0x08003859
 8003834:	4a79      	ldr	r2, [pc, #484]	; (8003a1c <HAL_GPIO_Init+0x2b4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800383a:	e02c      	b.n	8003896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e029      	b.n	8003898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	3304      	adds	r3, #4
 800384a:	623b      	str	r3, [r7, #32]
          break;
 800384c:	e024      	b.n	8003898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	3308      	adds	r3, #8
 8003854:	623b      	str	r3, [r7, #32]
          break;
 8003856:	e01f      	b.n	8003898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	330c      	adds	r3, #12
 800385e:	623b      	str	r3, [r7, #32]
          break;
 8003860:	e01a      	b.n	8003898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800386a:	2304      	movs	r3, #4
 800386c:	623b      	str	r3, [r7, #32]
          break;
 800386e:	e013      	b.n	8003898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003878:	2308      	movs	r3, #8
 800387a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	611a      	str	r2, [r3, #16]
          break;
 8003882:	e009      	b.n	8003898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003884:	2308      	movs	r3, #8
 8003886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	615a      	str	r2, [r3, #20]
          break;
 800388e:	e003      	b.n	8003898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
          break;
 8003894:	e000      	b.n	8003898 <HAL_GPIO_Init+0x130>
          break;
 8003896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2bff      	cmp	r3, #255	; 0xff
 800389c:	d801      	bhi.n	80038a2 <HAL_GPIO_Init+0x13a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	e001      	b.n	80038a6 <HAL_GPIO_Init+0x13e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2bff      	cmp	r3, #255	; 0xff
 80038ac:	d802      	bhi.n	80038b4 <HAL_GPIO_Init+0x14c>
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	e002      	b.n	80038ba <HAL_GPIO_Init+0x152>
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	3b08      	subs	r3, #8
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	210f      	movs	r1, #15
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	6a39      	ldr	r1, [r7, #32]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	431a      	orrs	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80b1 	beq.w	8003a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038e8:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <HAL_GPIO_Init+0x2b8>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a4c      	ldr	r2, [pc, #304]	; (8003a20 <HAL_GPIO_Init+0x2b8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6193      	str	r3, [r2, #24]
 80038f4:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_GPIO_Init+0x2b8>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003900:	4a48      	ldr	r2, [pc, #288]	; (8003a24 <HAL_GPIO_Init+0x2bc>)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <HAL_GPIO_Init+0x2c0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d013      	beq.n	8003954 <HAL_GPIO_Init+0x1ec>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3f      	ldr	r2, [pc, #252]	; (8003a2c <HAL_GPIO_Init+0x2c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00d      	beq.n	8003950 <HAL_GPIO_Init+0x1e8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3e      	ldr	r2, [pc, #248]	; (8003a30 <HAL_GPIO_Init+0x2c8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <HAL_GPIO_Init+0x1e4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <HAL_GPIO_Init+0x2cc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_GPIO_Init+0x1e0>
 8003944:	2303      	movs	r3, #3
 8003946:	e006      	b.n	8003956 <HAL_GPIO_Init+0x1ee>
 8003948:	2304      	movs	r3, #4
 800394a:	e004      	b.n	8003956 <HAL_GPIO_Init+0x1ee>
 800394c:	2302      	movs	r3, #2
 800394e:	e002      	b.n	8003956 <HAL_GPIO_Init+0x1ee>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_GPIO_Init+0x1ee>
 8003954:	2300      	movs	r3, #0
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	f002 0203 	and.w	r2, r2, #3
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4093      	lsls	r3, r2
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003966:	492f      	ldr	r1, [pc, #188]	; (8003a24 <HAL_GPIO_Init+0x2bc>)
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	492c      	ldr	r1, [pc, #176]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800398e:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	43db      	mvns	r3, r3
 8003996:	4928      	ldr	r1, [pc, #160]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 8003998:	4013      	ands	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	e006      	b.n	80039c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	43db      	mvns	r3, r3
 80039be:	491e      	ldr	r1, [pc, #120]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4918      	ldr	r1, [pc, #96]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	4914      	ldr	r1, [pc, #80]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d021      	beq.n	8003a3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_GPIO_Init+0x2d0>)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e021      	b.n	8003a4a <HAL_GPIO_Init+0x2e2>
 8003a06:	bf00      	nop
 8003a08:	10320000 	.word	0x10320000
 8003a0c:	10310000 	.word	0x10310000
 8003a10:	10220000 	.word	0x10220000
 8003a14:	10210000 	.word	0x10210000
 8003a18:	10120000 	.word	0x10120000
 8003a1c:	10110000 	.word	0x10110000
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40010800 	.word	0x40010800
 8003a2c:	40010c00 	.word	0x40010c00
 8003a30:	40011000 	.word	0x40011000
 8003a34:	40011400 	.word	0x40011400
 8003a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_GPIO_Init+0x304>)
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	4909      	ldr	r1, [pc, #36]	; (8003a6c <HAL_GPIO_Init+0x304>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f47f ae8e 	bne.w	800377c <HAL_GPIO_Init+0x14>
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	372c      	adds	r7, #44	; 0x2c
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	887b      	ldrh	r3, [r7, #2]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e001      	b.n	8003a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	807b      	strh	r3, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aae:	787b      	ldrb	r3, [r7, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aba:	e003      	b.n	8003ac4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	041a      	lsls	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e26c      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003afc:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
 8003b08:	4b8c      	ldr	r3, [pc, #560]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x12c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e246      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x76>
 8003b38:	4b80      	ldr	r3, [pc, #512]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7f      	ldr	r2, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7a      	ldr	r2, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b78      	ldr	r3, [pc, #480]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a77      	ldr	r2, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xbc>
 8003b72:	4b72      	ldr	r3, [pc, #456]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a71      	ldr	r2, [pc, #452]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	4b6b      	ldr	r3, [pc, #428]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a67      	ldr	r2, [pc, #412]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fcbc 	bl	8002528 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fcb8 	bl	8002528 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1fa      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe4>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fca8 	bl	8002528 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fca4 	bl	8002528 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1e6      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x10c>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
 8003c22:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1ba      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4939      	ldr	r1, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e03a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe fc5d 	bl	8002528 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe fc59 	bl	8002528 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e19b      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4927      	ldr	r1, [pc, #156]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fc3c 	bl	8002528 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fc38 	bl	8002528 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e17a      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03a      	beq.n	8003d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d019      	beq.n	8003d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fe fc1c 	bl	8002528 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fc18 	bl	8002528 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e15a      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 fad8 	bl	80042c8 <RCC_Delay>
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fe fc02 	bl	8002528 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe fbfe 	bl	8002528 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d908      	bls.n	8003d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e140      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	42420000 	.word	0x42420000
 8003d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b9e      	ldr	r3, [pc, #632]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e9      	bne.n	8003d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a6 	beq.w	8003eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4a93      	ldr	r2, [pc, #588]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	61d3      	str	r3, [r2, #28]
 8003d7e:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b8e      	ldr	r3, [pc, #568]	; (8003fc8 <HAL_RCC_OscConfig+0x4f8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b8b      	ldr	r3, [pc, #556]	; (8003fc8 <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a8a      	ldr	r2, [pc, #552]	; (8003fc8 <HAL_RCC_OscConfig+0x4f8>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fe fbbf 	bl	8002528 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fbbb 	bl	8002528 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0fd      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b81      	ldr	r3, [pc, #516]	; (8003fc8 <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x312>
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a7a      	ldr	r2, [pc, #488]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e02d      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a75      	ldr	r2, [pc, #468]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	e01c      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x356>
 8003e0c:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a6c      	ldr	r2, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6213      	str	r3, [r2, #32]
 8003e18:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6213      	str	r3, [r2, #32]
 8003e24:	e00b      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a66      	ldr	r2, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a63      	ldr	r2, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fb6f 	bl	8002528 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fb6b 	bl	8002528 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0ab      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ee      	beq.n	8003e4e <HAL_RCC_OscConfig+0x37e>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fe fb59 	bl	8002528 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fb55 	bl	8002528 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e095      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ee      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4a47      	ldr	r2, [pc, #284]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8081 	beq.w	8003fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d061      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d146      	bne.n	8003f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <HAL_RCC_OscConfig+0x4fc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe fb29 	bl	8002528 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe fb25 	bl	8002528 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e067      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d108      	bne.n	8003f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f02:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	492d      	ldr	r1, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a19      	ldr	r1, [r3, #32]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	430b      	orrs	r3, r1
 8003f26:	4927      	ldr	r1, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_RCC_OscConfig+0x4fc>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe faf9 	bl	8002528 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe faf5 	bl	8002528 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e037      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x46a>
 8003f58:	e02f      	b.n	8003fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_RCC_OscConfig+0x4fc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe fae2 	bl	8002528 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fade 	bl	8002528 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e020      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x498>
 8003f86:	e018      	b.n	8003fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e013      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42420060 	.word	0x42420060

08003fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0d0      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d910      	bls.n	8004014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b67      	ldr	r3, [pc, #412]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	4965      	ldr	r1, [pc, #404]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b63      	ldr	r3, [pc, #396]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0b8      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a58      	ldr	r2, [pc, #352]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800404e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004050:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	494d      	ldr	r1, [pc, #308]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d040      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d115      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e07f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e073      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e06b      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4936      	ldr	r1, [pc, #216]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fe fa32 	bl	8002528 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fe fa2e 	bl	8002528 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e053      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d210      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 0207 	bic.w	r2, r3, #7
 8004106:	4922      	ldr	r1, [pc, #136]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e032      	b.n	8004186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4916      	ldr	r1, [pc, #88]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800415e:	f000 f821 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8004162:	4602      	mov	r2, r0
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	490a      	ldr	r1, [pc, #40]	; (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	5ccb      	ldrb	r3, [r1, r3]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1cc>)
 8004178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1d0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe f990 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40022000 	.word	0x40022000
 8004194:	40021000 	.word	0x40021000
 8004198:	08006954 	.word	0x08006954
 800419c:	200002f4 	.word	0x200002f4
 80041a0:	200002f8 	.word	0x200002f8

080041a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b490      	push	{r4, r7}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041aa:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041ac:	1d3c      	adds	r4, r7, #4
 80041ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041b4:	f240 2301 	movw	r3, #513	; 0x201
 80041b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x40>
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x46>
 80041e2:	e02d      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e6:	623b      	str	r3, [r7, #32]
      break;
 80041e8:	e02d      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	0c9b      	lsrs	r3, r3, #18
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041f6:	4413      	add	r3, r2
 80041f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_RCC_GetSysClockFreq+0xb4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c5b      	lsrs	r3, r3, #17
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004216:	4413      	add	r3, r2
 8004218:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800421c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	4a0e      	ldr	r2, [pc, #56]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004222:	fb02 f203 	mul.w	r2, r2, r3
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	e004      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	623b      	str	r3, [r7, #32]
      break;
 800423e:	e002      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004242:	623b      	str	r3, [r7, #32]
      break;
 8004244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004246:	6a3b      	ldr	r3, [r7, #32]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	; 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc90      	pop	{r4, r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	08006934 	.word	0x08006934
 8004258:	40021000 	.word	0x40021000
 800425c:	007a1200 	.word	0x007a1200
 8004260:	003d0900 	.word	0x003d0900

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b02      	ldr	r3, [pc, #8]	; (8004274 <HAL_RCC_GetHCLKFreq+0x10>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	200002f4 	.word	0x200002f4

08004278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800427c:	f7ff fff2 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	; (800429c <HAL_RCC_GetPCLK1Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08006964 	.word	0x08006964

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a4:	f7ff ffde 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	08006964 	.word	0x08006964

080042c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <RCC_Delay+0x34>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <RCC_Delay+0x38>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042e4:	bf00      	nop
  }
  while (Delay --);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	60fa      	str	r2, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f9      	bne.n	80042e4 <RCC_Delay+0x1c>
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	200002f4 	.word	0x200002f4
 8004300:	10624dd3 	.word	0x10624dd3

08004304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4a4b      	ldr	r2, [pc, #300]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	61d3      	str	r3, [r2, #28]
 800433c:	4b49      	ldr	r3, [pc, #292]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d118      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004358:	4b43      	ldr	r3, [pc, #268]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a42      	ldr	r2, [pc, #264]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004364:	f7fe f8e0 	bl	8002528 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	e008      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fe f8dc 	bl	8002528 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e06d      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d02e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d027      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe f8ab 	bl	8002528 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fe f8a7 	bl	8002528 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e036      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4917      	ldr	r1, [pc, #92]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	4313      	orrs	r3, r2
 8004408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	490b      	ldr	r1, [pc, #44]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	42420440 	.word	0x42420440

08004470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b08d      	sub	sp, #52	; 0x34
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004478:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800447a:	f107 040c 	add.w	r4, r7, #12
 800447e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004484:	f240 2301 	movw	r3, #513	; 0x201
 8004488:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	2300      	movs	r3, #0
 8004494:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	f200 8091 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d04c      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d07c      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044b8:	e089      	b.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80044ba:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80044c0:	4b49      	ldr	r3, [pc, #292]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8082 	beq.w	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	0c9b      	lsrs	r3, r3, #18
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044da:	4413      	add	r3, r2
 80044dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044e0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d018      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044ec:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c5b      	lsrs	r3, r3, #17
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044fa:	4413      	add	r3, r2
 80044fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800450c:	4a37      	ldr	r2, [pc, #220]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	fbb2 f2f3 	udiv	r2, r2, r3
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451c:	e004      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d102      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800453a:	e04a      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800454a:	e042      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455c:	d108      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
 800456e:	e01f      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457a:	d109      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004588:	f649 4340 	movw	r3, #40000	; 0x9c40
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
 800458e:	e00f      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459a:	d11c      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80045a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045ae:	e012      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80045b0:	e011      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80045b2:	f7ff fe75 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	0b9b      	lsrs	r3, r3, #14
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	3301      	adds	r3, #1
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045cc:	e004      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045d6:	bf00      	nop
    }
  }
  return (frequency);
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3734      	adds	r7, #52	; 0x34
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	08006944 	.word	0x08006944
 80045e8:	40021000 	.word	0x40021000
 80045ec:	007a1200 	.word	0x007a1200
 80045f0:	003d0900 	.word	0x003d0900
 80045f4:	aaaaaaab 	.word	0xaaaaaaab

080045f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e076      	b.n	80046f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d009      	beq.n	8004630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	61da      	str	r2, [r3, #28]
 8004622:	e005      	b.n	8004630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fc4a 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	0c1a      	lsrs	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f002 0204 	and.w	r2, r2, #4
 80046d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	; 0x30
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800470e:	2301      	movs	r3, #1
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x26>
 8004722:	2302      	movs	r3, #2
 8004724:	e18a      	b.n	8004a3c <HAL_SPI_TransmitReceive+0x33c>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800472e:	f7fd fefb 	bl	8002528 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800474c:	2b01      	cmp	r3, #1
 800474e:	d00f      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x70>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d107      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x68>
 8004760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004764:	2b04      	cmp	r3, #4
 8004766:	d003      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004768:	2302      	movs	r3, #2
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800476e:	e15b      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x82>
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004788:	e14e      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b04      	cmp	r3, #4
 8004794:	d003      	beq.n	800479e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2205      	movs	r2, #5
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	887a      	ldrh	r2, [r7, #2]
 80047ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d007      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d178      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_TransmitReceive+0x10a>
 8004804:	8b7b      	ldrh	r3, [r7, #26]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d166      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	881a      	ldrh	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	1c9a      	adds	r2, r3, #2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482e:	e053      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d11b      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x176>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d016      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x176>
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d113      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	881a      	ldrh	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d119      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x1b8>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	b292      	uxth	r2, r2
 800489a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048b4:	2301      	movs	r3, #1
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048b8:	f7fd fe36 	bl	8002528 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d807      	bhi.n	80048d8 <HAL_SPI_TransmitReceive+0x1d8>
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d003      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048d6:	e0a7      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1a6      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x130>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1a1      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x130>
 80048ec:	e07c      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x1fc>
 80048f6:	8b7b      	ldrh	r3, [r7, #26]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d16b      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004922:	e057      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d11c      	bne.n	800496c <HAL_SPI_TransmitReceive+0x26c>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d017      	beq.n	800496c <HAL_SPI_TransmitReceive+0x26c>
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d114      	bne.n	800496c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d119      	bne.n	80049ae <HAL_SPI_TransmitReceive+0x2ae>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d014      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049aa:	2301      	movs	r3, #1
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049ae:	f7fd fdbb 	bl	8002528 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d803      	bhi.n	80049c6 <HAL_SPI_TransmitReceive+0x2c6>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x2cc>
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049d2:	e029      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1a2      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x224>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d19d      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8b1 	bl	8004b54 <SPI_EndRxTxTransaction>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a04:	e010      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	e000      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a54:	f7fd fd68 	bl	8002528 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a64:	f7fd fd60 	bl	8002528 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	0d1b      	lsrs	r3, r3, #20
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7a:	e054      	b.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d050      	beq.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a84:	f7fd fd50 	bl	8002528 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d902      	bls.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d13d      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d111      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abc:	d004      	beq.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac6:	d107      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d10f      	bne.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e017      	b.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d19b      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200002f4 	.word	0x200002f4

08004b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff ff6a 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e000      	b.n	8004b88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e041      	b.n	8004c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd f9de 	bl	8001f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 fd12 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_TIM_Base_Start+0x88>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start+0x48>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start+0x48>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_TIM_Base_Start+0x8c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start+0x48>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_TIM_Base_Start+0x90>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d010      	beq.n	8004cac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	e007      	b.n	8004cac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800

08004cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e041      	b.n	8004d5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f839 	bl	8004d62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fc78 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start+0x24>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e022      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x3e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e015      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x58>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e05e      	b.n	8004ea4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x82>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df4:	e013      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x92>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	e00b      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	e003      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2201      	movs	r2, #1
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fe66 	bl	8005af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_TIM_PWM_Start+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_TIM_PWM_Start+0x138>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_PWM_Start+0xfa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_PWM_Start+0xfa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <HAL_TIM_PWM_Start+0x13c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_PWM_Start+0xfa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a12      	ldr	r2, [pc, #72]	; (8004eb4 <HAL_TIM_PWM_Start+0x140>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	d010      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e007      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800

08004eb8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start_IT+0x24>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e022      	b.n	8004f22 <HAL_TIM_PWM_Start_IT+0x6a>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d109      	bne.n	8004ef6 <HAL_TIM_PWM_Start_IT+0x3e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e015      	b.n	8004f22 <HAL_TIM_PWM_Start_IT+0x6a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start_IT+0x58>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_PWM_Start_IT+0x6a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0a4      	b.n	8005074 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start_IT+0x82>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	e013      	b.n	8004f62 <HAL_TIM_PWM_Start_IT+0xaa>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start_IT+0x92>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	e00b      	b.n	8004f62 <HAL_TIM_PWM_Start_IT+0xaa>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start_IT+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	e003      	b.n	8004f62 <HAL_TIM_PWM_Start_IT+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d841      	bhi.n	8004fec <HAL_TIM_PWM_Start_IT+0x134>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08004fed 	.word	0x08004fed
 8004f78:	08004fed 	.word	0x08004fed
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fdb 	.word	0x08004fdb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0202 	orr.w	r2, r2, #2
 8004fb2:	60da      	str	r2, [r3, #12]
      break;
 8004fb4:	e01b      	b.n	8004fee <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0204 	orr.w	r2, r2, #4
 8004fc4:	60da      	str	r2, [r3, #12]
      break;
 8004fc6:	e012      	b.n	8004fee <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	60da      	str	r2, [r3, #12]
      break;
 8004fd8:	e009      	b.n	8004fee <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0210 	orr.w	r2, r2, #16
 8004fe8:	60da      	str	r2, [r3, #12]
      break;
 8004fea:	e000      	b.n	8004fee <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004fec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fd7e 	bl	8005af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_TIM_PWM_Start_IT+0x1c4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d107      	bne.n	8005016 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a18      	ldr	r2, [pc, #96]	; (800507c <HAL_TIM_PWM_Start_IT+0x1c4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIM_PWM_Start_IT+0x186>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d009      	beq.n	800503e <HAL_TIM_PWM_Start_IT+0x186>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a14      	ldr	r2, [pc, #80]	; (8005080 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_PWM_Start_IT+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a12      	ldr	r2, [pc, #72]	; (8005084 <HAL_TIM_PWM_Start_IT+0x1cc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d111      	bne.n	8005062 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d010      	beq.n	8005072 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	e007      	b.n	8005072 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800

08005088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0202 	mvn.w	r2, #2
 80050b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa78 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa6b 	bl	80055ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fa7a 	bl	80055d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0204 	mvn.w	r2, #4
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa4e 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa41 	bl	80055ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa50 	bl	80055d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b08      	cmp	r3, #8
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0208 	mvn.w	r2, #8
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2204      	movs	r2, #4
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa24 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa17 	bl	80055ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa26 	bl	80055d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b10      	cmp	r3, #16
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0210 	mvn.w	r2, #16
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2208      	movs	r2, #8
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9fa 	bl	80055c0 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9ed 	bl	80055ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9fc 	bl	80055d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0201 	mvn.w	r2, #1
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9c8 	bl	800559c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b80      	cmp	r3, #128	; 0x80
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fd3c 	bl	8005cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9c0 	bl	80055e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b20      	cmp	r3, #32
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0220 	mvn.w	r2, #32
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fd07 	bl	8005c9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0ac      	b.n	800540c <HAL_TIM_PWM_ConfigChannel+0x174>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b0c      	cmp	r3, #12
 80052be:	f200 809f 	bhi.w	8005400 <HAL_TIM_PWM_ConfigChannel+0x168>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	08005401 	.word	0x08005401
 80052d0:	08005401 	.word	0x08005401
 80052d4:	08005401 	.word	0x08005401
 80052d8:	0800533d 	.word	0x0800533d
 80052dc:	08005401 	.word	0x08005401
 80052e0:	08005401 	.word	0x08005401
 80052e4:	08005401 	.word	0x08005401
 80052e8:	0800537f 	.word	0x0800537f
 80052ec:	08005401 	.word	0x08005401
 80052f0:	08005401 	.word	0x08005401
 80052f4:	08005401 	.word	0x08005401
 80052f8:	080053bf 	.word	0x080053bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f9da 	bl	80056bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0208 	orr.w	r2, r2, #8
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
      break;
 800533a:	e062      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fa20 	bl	8005788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]
      break;
 800537c:	e041      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fa69 	bl	800585c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0204 	bic.w	r2, r2, #4
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]
      break;
 80053bc:	e021      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fab3 	bl	8005930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
      break;
 80053fe:	e000      	b.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIM_ConfigClockSource+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e0b3      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x180>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800544a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005464:	d03e      	beq.n	80054e4 <HAL_TIM_ConfigClockSource+0xd0>
 8005466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546a:	f200 8087 	bhi.w	800557c <HAL_TIM_ConfigClockSource+0x168>
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005472:	f000 8085 	beq.w	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547a:	d87f      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 800547c:	2b70      	cmp	r3, #112	; 0x70
 800547e:	d01a      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xa2>
 8005480:	2b70      	cmp	r3, #112	; 0x70
 8005482:	d87b      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 8005484:	2b60      	cmp	r3, #96	; 0x60
 8005486:	d050      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x116>
 8005488:	2b60      	cmp	r3, #96	; 0x60
 800548a:	d877      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 800548c:	2b50      	cmp	r3, #80	; 0x50
 800548e:	d03c      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xf6>
 8005490:	2b50      	cmp	r3, #80	; 0x50
 8005492:	d873      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d058      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x136>
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d86f      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 800549c:	2b30      	cmp	r3, #48	; 0x30
 800549e:	d064      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x156>
 80054a0:	2b30      	cmp	r3, #48	; 0x30
 80054a2:	d86b      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d060      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x156>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d867      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x168>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05c      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x156>
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d05a      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054b4:	e062      	b.n	800557c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f000 faf8 	bl	8005aba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	609a      	str	r2, [r3, #8]
      break;
 80054e2:	e04e      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6899      	ldr	r1, [r3, #8]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f000 fae1 	bl	8005aba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005506:	609a      	str	r2, [r3, #8]
      break;
 8005508:	e03b      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	f000 fa58 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2150      	movs	r1, #80	; 0x50
 8005522:	4618      	mov	r0, r3
 8005524:	f000 faaf 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005528:	e02b      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 fa76 	bl	8005a28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2160      	movs	r1, #96	; 0x60
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fa9f 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005548:	e01b      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fa38 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa8f 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005568:	e00b      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f000 fa86 	bl	8005a86 <TIM_ITRx_SetConfig>
        break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005580:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
	...

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <TIM_Base_SetConfig+0xbc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x30>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <TIM_Base_SetConfig+0xc0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <TIM_Base_SetConfig+0xbc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0x62>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <TIM_Base_SetConfig+0xc0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d103      	bne.n	80056a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800

080056bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 0302 	bic.w	r3, r3, #2
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <TIM_OC1_SetConfig+0xc8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10c      	bne.n	8005732 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0308 	bic.w	r3, r3, #8
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0304 	bic.w	r3, r3, #4
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <TIM_OC1_SetConfig+0xc8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40012c00 	.word	0x40012c00

08005788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0320 	bic.w	r3, r3, #32
 80057d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <TIM_OC2_SetConfig+0xd0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10d      	bne.n	8005804 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <TIM_OC2_SetConfig+0xd0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d113      	bne.n	8005834 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	40012c00 	.word	0x40012c00

0800585c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <TIM_OC3_SetConfig+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10d      	bne.n	80058d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <TIM_OC3_SetConfig+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d113      	bne.n	8005906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00

08005930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <TIM_OC4_SetConfig+0x98>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	40012c00 	.word	0x40012c00

080059cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 030a 	bic.w	r3, r3, #10
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f023 0210 	bic.w	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b087      	sub	sp, #28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	021a      	lsls	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	609a      	str	r2, [r3, #8]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e046      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a10      	ldr	r2, [pc, #64]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800

08005bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e03d      	b.n	8005c94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e03f      	b.n	8005d54 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fc fa57 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2224      	movs	r2, #36	; 0x24
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fd4e 	bl	80067a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d153      	bne.n	8005e1e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_UART_Transmit_DMA+0x26>
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e04c      	b.n	8005e20 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Transmit_DMA+0x38>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e045      	b.n	8005e20 <HAL_UART_Transmit_DMA+0xc4>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2221      	movs	r2, #33	; 0x21
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_UART_Transmit_DMA+0xcc>)
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <HAL_UART_Transmit_DMA+0xd0>)
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	4a17      	ldr	r2, [pc, #92]	; (8005e30 <HAL_UART_Transmit_DMA+0xd4>)
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	2200      	movs	r2, #0
 8005dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005ddc:	f107 0308 	add.w	r3, r7, #8
 8005de0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3304      	adds	r3, #4
 8005df0:	461a      	mov	r2, r3
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	f7fd fa74 	bl	80032e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e18:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	08006247 	.word	0x08006247
 8005e2c:	08006299 	.word	0x08006299
 8005e30:	08006381 	.word	0x08006381

08005e34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d11d      	bne.n	8005e8a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_UART_Receive_DMA+0x26>
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e016      	b.n	8005e8c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Receive_DMA+0x38>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e00f      	b.n	8005e8c <HAL_UART_Receive_DMA+0x58>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fac7 	bl	8006414 <UART_Start_Receive_DMA>
 8005e86:	4603      	mov	r3, r0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x52>
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fbb8 	bl	8006654 <UART_Receive_IT>
      return;
 8005ee4:	e17b      	b.n	80061de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80b1 	beq.w	8006050 <HAL_UART_IRQHandler+0x1bc>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <HAL_UART_IRQHandler+0x70>
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a6 	beq.w	8006050 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_UART_IRQHandler+0x90>
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0201 	orr.w	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_UART_IRQHandler+0xb0>
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_UART_IRQHandler+0xd0>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <HAL_UART_IRQHandler+0xfa>
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <HAL_UART_IRQHandler+0xee>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f043 0208 	orr.w	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 811e 	beq.w	80061d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x11e>
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb51 	bl	8006654 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_UART_IRQHandler+0x146>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d031      	beq.n	800603e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa93 	bl	8006506 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d023      	beq.n	8006036 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	2b00      	cmp	r3, #0
 8006004:	d013      	beq.n	800602e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	4a76      	ldr	r2, [pc, #472]	; (80061e4 <HAL_UART_IRQHandler+0x350>)
 800600c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd f9fe 	bl	8003414 <HAL_DMA_Abort_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	e00e      	b.n	800604c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8f5 	bl	800621e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e00a      	b.n	800604c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8f1 	bl	800621e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e006      	b.n	800604c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8ed 	bl	800621e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800604a:	e0c3      	b.n	80061d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	bf00      	nop
    return;
 800604e:	e0c1      	b.n	80061d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	2b01      	cmp	r3, #1
 8006056:	f040 80a1 	bne.w	800619c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 809b 	beq.w	800619c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8095 	beq.w	800619c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d04e      	beq.n	8006134 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80060a0:	8a3b      	ldrh	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8098 	beq.w	80061d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ac:	8a3a      	ldrh	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	f080 8092 	bcs.w	80061d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8a3a      	ldrh	r2, [r7, #16]
 80060b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d02b      	beq.n	800611c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695a      	ldr	r2, [r3, #20]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0210 	bic.w	r2, r2, #16
 8006110:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd f941 	bl	800339e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f87f 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006132:	e051      	b.n	80061d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d047      	beq.n	80061dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800614c:	8a7b      	ldrh	r3, [r7, #18]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d044      	beq.n	80061dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006160:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695a      	ldr	r2, [r3, #20]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0210 	bic.w	r2, r2, #16
 800618e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006190:	8a7b      	ldrh	r3, [r7, #18]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f84b 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800619a:	e01f      	b.n	80061dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <HAL_UART_IRQHandler+0x324>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9e8 	bl	8006586 <UART_Transmit_IT>
    return;
 80061b6:	e012      	b.n	80061de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00d      	beq.n	80061de <HAL_UART_IRQHandler+0x34a>
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa29 	bl	8006624 <UART_EndTransmit_IT>
    return;
 80061d2:	e004      	b.n	80061de <HAL_UART_IRQHandler+0x34a>
    return;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <HAL_UART_IRQHandler+0x34a>
      return;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <HAL_UART_IRQHandler+0x34a>
      return;
 80061dc:	bf00      	nop
  }
}
 80061de:	3728      	adds	r7, #40	; 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	0800655f 	.word	0x0800655f

080061e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d113      	bne.n	800628a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006276:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006286:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006288:	e002      	b.n	8006290 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff ffac 	bl	80061e8 <HAL_UART_TxCpltCallback>
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff ffa7 	bl	80061fa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d12a      	bne.n	8006326 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695a      	ldr	r2, [r3, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	2b01      	cmp	r3, #1
 8006314:	d107      	bne.n	8006326 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0210 	bic.w	r2, r2, #16
 8006324:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	2b01      	cmp	r3, #1
 800632c:	d106      	bne.n	800633c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006332:	4619      	mov	r1, r3
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ff7b 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800633a:	e002      	b.n	8006342 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fa fb51 	bl	80009e4 <HAL_UART_RxCpltCallback>
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	2b01      	cmp	r3, #1
 800635e:	d108      	bne.n	8006372 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff ff60 	bl	8006230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006370:	e002      	b.n	8006378 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff4a 	bl	800620c <HAL_UART_RxHalfCpltCallback>
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b21      	cmp	r3, #33	; 0x21
 80063b2:	d108      	bne.n	80063c6 <UART_DMAError+0x46>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2200      	movs	r2, #0
 80063be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f000 f88b 	bl	80064dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	d108      	bne.n	80063fa <UART_DMAError+0x7a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063f4:	68b8      	ldr	r0, [r7, #8]
 80063f6:	f000 f886 	bl	8006506 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f043 0210 	orr.w	r2, r3, #16
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f7ff ff09 	bl	800621e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2222      	movs	r2, #34	; 0x22
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <UART_Start_Receive_DMA+0xbc>)
 8006442:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <UART_Start_Receive_DMA+0xc0>)
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <UART_Start_Receive_DMA+0xc4>)
 8006452:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2200      	movs	r2, #0
 800645a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	f7fc ff34 	bl	80032e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	080062b5 	.word	0x080062b5
 80064d4:	0800634b 	.word	0x0800634b
 80064d8:	08006381 	.word	0x08006381

080064dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800651c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0210 	bic.w	r2, r2, #16
 8006544:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fe50 	bl	800621e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b21      	cmp	r3, #33	; 0x21
 8006598:	d13e      	bne.n	8006618 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d114      	bne.n	80065ce <UART_Transmit_IT+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d110      	bne.n	80065ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	1c9a      	adds	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	e008      	b.n	80065e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	1c59      	adds	r1, r3, #1
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6211      	str	r1, [r2, #32]
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4619      	mov	r1, r3
 80065ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006602:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006612:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fdcf 	bl	80061e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b22      	cmp	r3, #34	; 0x22
 8006666:	f040 8099 	bne.w	800679c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d117      	bne.n	80066a4 <UART_Receive_IT+0x50>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d113      	bne.n	80066a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006692:	b29a      	uxth	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
 80066a2:	e026      	b.n	80066f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	d007      	beq.n	80066c8 <UART_Receive_IT+0x74>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <UART_Receive_IT+0x82>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e008      	b.n	80066e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4619      	mov	r1, r3
 8006700:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006702:	2b00      	cmp	r3, #0
 8006704:	d148      	bne.n	8006798 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0220 	bic.w	r2, r2, #32
 8006714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	2b01      	cmp	r3, #1
 8006744:	d123      	bne.n	800678e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0210 	bic.w	r2, r2, #16
 800675a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d10a      	bne.n	8006780 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fd52 	bl	8006230 <HAL_UARTEx_RxEventCallback>
 800678c:	e002      	b.n	8006794 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fa f928 	bl	80009e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	e002      	b.n	800679e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
  }
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80067e2:	f023 030c 	bic.w	r3, r3, #12
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	430b      	orrs	r3, r1
 80067ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <UART_SetConfig+0x114>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d103      	bne.n	8006818 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fd fd46 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	e002      	b.n	800681e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fd fd2e 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 800681c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009a      	lsls	r2, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <UART_SetConfig+0x118>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	0119      	lsls	r1, r3, #4
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	fbb2 f2f3 	udiv	r2, r2, r3
 8006854:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <UART_SetConfig+0x118>)
 8006856:	fba3 0302 	umull	r0, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2064      	movs	r0, #100	; 0x64
 800685e:	fb00 f303 	mul.w	r3, r0, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <UART_SetConfig+0x118>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006874:	4419      	add	r1, r3
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009a      	lsls	r2, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	fbb2 f2f3 	udiv	r2, r2, r3
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <UART_SetConfig+0x118>)
 800688e:	fba3 0302 	umull	r0, r3, r3, r2
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	2064      	movs	r0, #100	; 0x64
 8006896:	fb00 f303 	mul.w	r3, r0, r3
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	3332      	adds	r3, #50	; 0x32
 80068a0:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <UART_SetConfig+0x118>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	f003 020f 	and.w	r2, r3, #15
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	440a      	add	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40013800 	.word	0x40013800
 80068c0:	51eb851f 	.word	0x51eb851f

080068c4 <__libc_init_array>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	2600      	movs	r6, #0
 80068c8:	4d0c      	ldr	r5, [pc, #48]	; (80068fc <__libc_init_array+0x38>)
 80068ca:	4c0d      	ldr	r4, [pc, #52]	; (8006900 <__libc_init_array+0x3c>)
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	42a6      	cmp	r6, r4
 80068d2:	d109      	bne.n	80068e8 <__libc_init_array+0x24>
 80068d4:	f000 f822 	bl	800691c <_init>
 80068d8:	2600      	movs	r6, #0
 80068da:	4d0a      	ldr	r5, [pc, #40]	; (8006904 <__libc_init_array+0x40>)
 80068dc:	4c0a      	ldr	r4, [pc, #40]	; (8006908 <__libc_init_array+0x44>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	42a6      	cmp	r6, r4
 80068e4:	d105      	bne.n	80068f2 <__libc_init_array+0x2e>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ec:	4798      	blx	r3
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7ee      	b.n	80068d0 <__libc_init_array+0xc>
 80068f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f6:	4798      	blx	r3
 80068f8:	3601      	adds	r6, #1
 80068fa:	e7f2      	b.n	80068e2 <__libc_init_array+0x1e>
 80068fc:	0800696c 	.word	0x0800696c
 8006900:	0800696c 	.word	0x0800696c
 8006904:	0800696c 	.word	0x0800696c
 8006908:	08006970 	.word	0x08006970

0800690c <memset>:
 800690c:	4603      	mov	r3, r0
 800690e:	4402      	add	r2, r0
 8006910:	4293      	cmp	r3, r2
 8006912:	d100      	bne.n	8006916 <memset+0xa>
 8006914:	4770      	bx	lr
 8006916:	f803 1b01 	strb.w	r1, [r3], #1
 800691a:	e7f9      	b.n	8006910 <memset+0x4>

0800691c <_init>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr

08006928 <_fini>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr
