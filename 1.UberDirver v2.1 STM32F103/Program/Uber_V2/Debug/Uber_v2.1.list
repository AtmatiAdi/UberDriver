
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c4c  08005c4c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c4c  08005c4c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000137c  2000001c  08005c70  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  08005c70  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001092b  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002777  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000341c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018784  00000000  00000000  000351a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a63  00000000  00000000  0004d924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfe6  00000000  00000000  0005f387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000ed3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c0c 	.word	0x08005c0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08005c0c 	.word	0x08005c0c

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	af00      	add	r7, sp, #0
 8000152:	f107 0c08 	add.w	ip, r7, #8
 8000156:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DRV_Init+0x3c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f107 0308 	add.w	r3, r7, #8
 8000162:	2258      	movs	r2, #88	; 0x58
 8000164:	4619      	mov	r1, r3
 8000166:	f005 fd3b 	bl	8005be0 <memcpy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	2104      	movs	r1, #4
 800016e:	4807      	ldr	r0, [pc, #28]	; (800018c <DRV_Init+0x40>)
 8000170:	f003 f86b 	bl	800324a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000174:	2001      	movs	r0, #1
 8000176:	f001 feef 	bl	8001f58 <HAL_Delay>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000182:	b004      	add	sp, #16
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000038 	.word	0x20000038
 800018c:	40010c00 	.word	0x40010c00

08000190 <HAL_UART_RxCpltCallback>:
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;
uint8_t Rotations[1] = {0};
uint8_t step_delay = 255;	// (255+1)/32 = 8 times shorter t3 = (t1+t2)/8

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);		// Chcemy obierac dalej
 8000198:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <HAL_UART_RxCpltCallback+0x74>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2203      	movs	r2, #3
 800019e:	491a      	ldr	r1, [pc, #104]	; (8000208 <HAL_UART_RxCpltCallback+0x78>)
 80001a0:	4618      	mov	r0, r3
 80001a2:	f004 ffb1 	bl	8005108 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(huart, Rotations, 1);			// Odsylamy warrtosc obrotow
 80001a6:	4b17      	ldr	r3, [pc, #92]	; (8000204 <HAL_UART_RxCpltCallback+0x74>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2201      	movs	r2, #1
 80001ac:	4917      	ldr	r1, [pc, #92]	; (800020c <HAL_UART_RxCpltCallback+0x7c>)
 80001ae:	4618      	mov	r0, r3
 80001b0:	f004 ff3e 	bl	8005030 <HAL_UART_Transmit_DMA>
	Rotations[0] = 0;										// resetujemy zmienna obrotow
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <HAL_UART_RxCpltCallback+0x7c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
	// DONT UPDATE FUNCTION WHEN WE GET SPECIAL FUNCTION
	if(rx_buffer[0] == SCAN_ONE_VARIABLE){
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <HAL_UART_RxCpltCallback+0x78>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b50      	cmp	r3, #80	; 0x50
 80001c0:	d102      	bne.n	80001c8 <HAL_UART_RxCpltCallback+0x38>
		EnableScan();
 80001c2:	f000 f975 	bl	80004b0 <EnableScan>
 80001c6:	e00b      	b.n	80001e0 <HAL_UART_RxCpltCallback+0x50>
	} else
	{
		Function = rx_buffer[0];
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <HAL_UART_RxCpltCallback+0x78>)
 80001ca:	781a      	ldrb	r2, [r3, #0]
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <HAL_UART_RxCpltCallback+0x80>)
 80001ce:	701a      	strb	r2, [r3, #0]
		Power = rx_buffer[1];
 80001d0:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <HAL_UART_RxCpltCallback+0x78>)
 80001d2:	785a      	ldrb	r2, [r3, #1]
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <HAL_UART_RxCpltCallback+0x84>)
 80001d6:	701a      	strb	r2, [r3, #0]
		step_delay = rx_buffer[2];
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <HAL_UART_RxCpltCallback+0x78>)
 80001da:	789a      	ldrb	r2, [r3, #2]
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_UART_RxCpltCallback+0x88>)
 80001de:	701a      	strb	r2, [r3, #0]
	}
	if ((Function == 0) || Power == 0){		// Zatrzymanie awaryjne
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <HAL_UART_RxCpltCallback+0x80>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d003      	beq.n	80001f0 <HAL_UART_RxCpltCallback+0x60>
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <HAL_UART_RxCpltCallback+0x84>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d105      	bne.n	80001fc <HAL_UART_RxCpltCallback+0x6c>
		SetFloating_A();
 80001f0:	f000 fcf8 	bl	8000be4 <SetFloating_A>
		SetFloating_B();
 80001f4:	f000 fd0a 	bl	8000c0c <SetFloating_B>
		SetFloating_C();
 80001f8:	f000 fd1c 	bl	8000c34 <SetFloating_C>
	}
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000090 	.word	0x20000090
 8000208:	20000094 	.word	0x20000094
 800020c:	2000009c 	.word	0x2000009c
 8000210:	20000097 	.word	0x20000097
 8000214:	20000098 	.word	0x20000098
 8000218:	20000002 	.word	0x20000002

0800021c <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	//memcpy(&huart, &_huart, sizeof(_huart)); // This shit does not work
	huart = _huart;
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <Application_Init+0x24>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 3);
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <Application_Init+0x24>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2203      	movs	r2, #3
 8000230:	4904      	ldr	r1, [pc, #16]	; (8000244 <Application_Init+0x28>)
 8000232:	4618      	mov	r0, r3
 8000234:	f004 ff68 	bl	8005108 <HAL_UART_Receive_DMA>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000090 	.word	0x20000090
 8000244:	20000094 	.word	0x20000094

08000248 <NormalControl>:
	SetFloating_B();
	SetFloating_C();
	IsRunning = 0;
}

void NormalControl(){
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
	if(Power == 0){								// wartosc = 0, stop
 800024e:	4b8d      	ldr	r3, [pc, #564]	; (8000484 <NormalControl+0x23c>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d11a      	bne.n	800028c <NormalControl+0x44>
		Set_PWM(0);
 8000256:	2000      	movs	r0, #0
 8000258:	f000 fbaa 	bl	80009b0 <Set_PWM>
		Six_Step_Block(0);
 800025c:	2000      	movs	r0, #0
 800025e:	f000 fb11 	bl	8000884 <Six_Step_Block>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2101      	movs	r1, #1
 8000266:	4888      	ldr	r0, [pc, #544]	; (8000488 <NormalControl+0x240>)
 8000268:	f002 ffef 	bl	800324a <HAL_GPIO_WritePin>
		SetFloating_A();
 800026c:	f000 fcba 	bl	8000be4 <SetFloating_A>
		SetFloating_B();
 8000270:	f000 fccc 	bl	8000c0c <SetFloating_B>
		SetFloating_C();
 8000274:	f000 fcde 	bl	8000c34 <SetFloating_C>
		IsRunning = 0;
 8000278:	4b84      	ldr	r3, [pc, #528]	; (800048c <NormalControl+0x244>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 800027e:	4b84      	ldr	r3, [pc, #528]	; (8000490 <NormalControl+0x248>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000284:	4b83      	ldr	r3, [pc, #524]	; (8000494 <NormalControl+0x24c>)
 8000286:	220f      	movs	r2, #15
 8000288:	801a      	strh	r2, [r3, #0]
 800028a:	e0e6      	b.n	800045a <NormalControl+0x212>
		//Function = rx_buffer[0];				// Zmiana funkcji jest mzliwa jedynie gdy silnik stoi
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 800028c:	4b82      	ldr	r3, [pc, #520]	; (8000498 <NormalControl+0x250>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b3f      	cmp	r3, #63	; 0x3f
 8000292:	f240 80c8 	bls.w	8000426 <NormalControl+0x1de>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	487b      	ldr	r0, [pc, #492]	; (8000488 <NormalControl+0x240>)
 800029c:	f002 ffd5 	bl	800324a <HAL_GPIO_WritePin>
		uint16_t pwm = Power*3;
 80002a0:	4b78      	ldr	r3, [pc, #480]	; (8000484 <NormalControl+0x23c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	0052      	lsls	r2, r2, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	81fb      	strh	r3, [r7, #14]
		if (pwm < 8) pwm = 8;				// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 80002ae:	89fb      	ldrh	r3, [r7, #14]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d802      	bhi.n	80002ba <NormalControl+0x72>
 80002b4:	2308      	movs	r3, #8
 80002b6:	81fb      	strh	r3, [r7, #14]
 80002b8:	e006      	b.n	80002c8 <NormalControl+0x80>
		else if (pwm > (640-1)-8) pwm = (640-1);	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 80002ba:	89fb      	ldrh	r3, [r7, #14]
 80002bc:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 80002c0:	d302      	bcc.n	80002c8 <NormalControl+0x80>
 80002c2:	f240 237f 	movw	r3, #639	; 0x27f
 80002c6:	81fb      	strh	r3, [r7, #14]

		if (IsRunning == 0){					// Startujemy
 80002c8:	4b70      	ldr	r3, [pc, #448]	; (800048c <NormalControl+0x244>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d177      	bne.n	80003c0 <NormalControl+0x178>
			int Speed;
			int cnt = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
			int val = 8;
 80002d4:	2308      	movs	r3, #8
 80002d6:	603b      	str	r3, [r7, #0]
			switch (Function){
 80002d8:	4b6f      	ldr	r3, [pc, #444]	; (8000498 <NormalControl+0x250>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3b42      	subs	r3, #66	; 0x42
 80002de:	2b05      	cmp	r3, #5
 80002e0:	d86f      	bhi.n	80003c2 <NormalControl+0x17a>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <NormalControl+0xa0>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	08000301 	.word	0x08000301
 80002ec:	08000361 	.word	0x08000361
 80002f0:	080003c3 	.word	0x080003c3
 80002f4:	080003c3 	.word	0x080003c3
 80002f8:	080003c3 	.word	0x080003c3
 80002fc:	080003c3 	.word	0x080003c3
			case SET_MOTOR_1_SPEED_FORWAD_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 8000300:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000304:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000306:	e016      	b.n	8000336 <NormalControl+0xee>
					SixStep(Speed, val);
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b292      	uxth	r2, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fca3 	bl	8000c5c <SixStep>
					++cnt;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3301      	adds	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b04      	cmp	r3, #4
 8000320:	d104      	bne.n	800032c <NormalControl+0xe4>
						++val;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000332:	3b1f      	subs	r3, #31
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800033c:	dce4      	bgt.n	8000308 <NormalControl+0xc0>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800033e:	e00a      	b.n	8000356 <NormalControl+0x10e>
					SixStep(Speed, val);
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	b292      	uxth	r2, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fc87 	bl	8000c5c <SixStep>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800035c:	dcf0      	bgt.n	8000340 <NormalControl+0xf8>
				}
				break;
 800035e:	e030      	b.n	80003c2 <NormalControl+0x17a>
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 8000360:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000364:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000366:	e016      	b.n	8000396 <NormalControl+0x14e>
					SixStep_rev(Speed, val);
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	b292      	uxth	r2, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fcbf 	bl	8000cf4 <SixStep_rev>
					++cnt;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b04      	cmp	r3, #4
 8000380:	d104      	bne.n	800038c <NormalControl+0x144>
						++val;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000392:	3b1f      	subs	r3, #31
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800039c:	dce4      	bgt.n	8000368 <NormalControl+0x120>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800039e:	e00a      	b.n	80003b6 <NormalControl+0x16e>
					SixStep_rev(Speed, val);
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	683a      	ldr	r2, [r7, #0]
 80003a4:	b292      	uxth	r2, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fca3 	bl	8000cf4 <SixStep_rev>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80003bc:	dcf0      	bgt.n	80003a0 <NormalControl+0x158>
				}
				break;
 80003be:	e000      	b.n	80003c2 <NormalControl+0x17a>
				break;
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_3: {
				break;
			}
			default: {
 80003c0:	bf00      	nop
			}
			}
		}
		//if(rx_buffer[0] == SCAN_ONE_VARIABLE){
			// Kręcimy normalnie
			if(Function % 2 == 1){					// Kręcimy do tylu
 80003c2:	4b35      	ldr	r3, [pc, #212]	; (8000498 <NormalControl+0x250>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d013      	beq.n	80003f8 <NormalControl+0x1b0>
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 80003d0:	89fb      	ldrh	r3, [r7, #14]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 faec 	bl	80009b0 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <NormalControl+0x254>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	08db      	lsrs	r3, r3, #3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fa39 	bl	8000858 <Set_Observer_Div>
				Six_Step_Block(pwm);
 80003e6:	89fb      	ldrh	r3, [r7, #14]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fa4b 	bl	8000884 <Six_Step_Block>
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 80003ee:	89fb      	ldrh	r3, [r7, #14]
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <NormalControl+0x248>)
 80003f4:	701a      	strb	r2, [r3, #0]
 80003f6:	e012      	b.n	800041e <NormalControl+0x1d6>
			}else{									// Kręcimy do przodu
				//ticks = BEMF_SixStep(pwm, ticks,step_delay/8);
				//ticks = HALL_SixStep(pwm, ticks,step_delay/16);
				Set_PWM(pwm);
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fad8 	bl	80009b0 <Set_PWM>
				Set_Observer_Div(step_delay/8);
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <NormalControl+0x254>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	08db      	lsrs	r3, r3, #3
 8000406:	b2db      	uxtb	r3, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fa25 	bl	8000858 <Set_Observer_Div>
				Six_Step_Block(pwm);
 800040e:	89fb      	ldrh	r3, [r7, #14]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fa37 	bl	8000884 <Six_Step_Block>
				//Sin_Block(pwm);
				Rotations[0] = pwm;
 8000416:	89fb      	ldrh	r3, [r7, #14]
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <NormalControl+0x248>)
 800041c:	701a      	strb	r2, [r3, #0]
			}
		//}

		//Rotations[0] += 1;

		IsRunning = 1;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <NormalControl+0x244>)
 8000420:	2201      	movs	r2, #1
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	e019      	b.n	800045a <NormalControl+0x212>
	}else {								// Nie funkcja z wartoscia -> Bład
		Set_PWM(0);
 8000426:	2000      	movs	r0, #0
 8000428:	f000 fac2 	bl	80009b0 <Set_PWM>
		Six_Step_Block(0);
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fa29 	bl	8000884 <Six_Step_Block>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2101      	movs	r1, #1
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <NormalControl+0x240>)
 8000438:	f002 ff07 	bl	800324a <HAL_GPIO_WritePin>
		SetFloating_A();
 800043c:	f000 fbd2 	bl	8000be4 <SetFloating_A>
		SetFloating_B();
 8000440:	f000 fbe4 	bl	8000c0c <SetFloating_B>
		SetFloating_C();
 8000444:	f000 fbf6 	bl	8000c34 <SetFloating_C>
		IsRunning = 0;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <NormalControl+0x244>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
		Rotations[0] = 0;
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <NormalControl+0x248>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <NormalControl+0x24c>)
 8000456:	220f      	movs	r2, #15
 8000458:	801a      	strh	r2, [r3, #0]
	}
	if (IsScanReady() == 1){
 800045a:	f000 f835 	bl	80004c8 <IsScanReady>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10a      	bne.n	800047a <NormalControl+0x232>
		HAL_UART_Transmit_DMA(huart, GetScanData(), 4096);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <NormalControl+0x258>)
 8000466:	681c      	ldr	r4, [r3, #0]
 8000468:	f000 f840 	bl	80004ec <GetScanData>
 800046c:	4603      	mov	r3, r0
 800046e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000472:	4619      	mov	r1, r3
 8000474:	4620      	mov	r0, r4
 8000476:	f004 fddb 	bl	8005030 <HAL_UART_Transmit_DMA>
	}
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bd90      	pop	{r4, r7, pc}
 8000482:	bf00      	nop
 8000484:	20000098 	.word	0x20000098
 8000488:	40011400 	.word	0x40011400
 800048c:	20000099 	.word	0x20000099
 8000490:	2000009c 	.word	0x2000009c
 8000494:	20000000 	.word	0x20000000
 8000498:	20000097 	.word	0x20000097
 800049c:	20000002 	.word	0x20000002
 80004a0:	20000090 	.word	0x20000090

080004a4 <Application_Update>:

void Application_Update(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	}
	else if(SCOTTER_PROGRAM){
		ScotterProgram();
	}
	else if(NORMAL_CONTROL){
		NormalControl();
 80004a8:	f7ff fece 	bl	8000248 <NormalControl>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
		SetZero_A();
		SetZero_B();
		SetZero_C();
	}
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <EnableScan>:
uint32_t AfterCross_Ticks = 0;
uint32_t Step_Ticks = 0;
GPIO_TypeDef* Hall_GPIO_Port = HALL_A_GPIO_Port;
uint16_t Hall_GPIO_Pin = HALL_A_Pin;

void EnableScan(){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	Scan_Is_enabled = 1;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EnableScan+0x14>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	200000c8 	.word	0x200000c8

080004c8 <IsScanReady>:

uint8_t IsScanReady(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	if (Scan_iter >= 4095) return 1;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <IsScanReady+0x20>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d901      	bls.n	80004dc <IsScanReady+0x14>
 80004d8:	2301      	movs	r3, #1
 80004da:	e000      	b.n	80004de <IsScanReady+0x16>
	else return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200000ca 	.word	0x200000ca

080004ec <GetScanData>:

uint8_t* GetScanData(){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	Scan_iter = 0;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <GetScanData+0x1c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	801a      	strh	r2, [r3, #0]
	Scan_Is_enabled = 0;
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <GetScanData+0x20>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
	return Scan_Data;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <GetScanData+0x24>)
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000ca 	.word	0x200000ca
 800050c:	200000c8 	.word	0x200000c8
 8000510:	200000dc 	.word	0x200000dc

08000514 <BEMF_Observer_Block>:
uint8_t Div = 16;
uint16_t BEMF_Treshold = 0;
uint16_t PWM_Value = 0;
uint8_t BEMF_delay = 32;

void BEMF_Observer_Block(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
// Input Block
	uint16_t V_Floating = ADC_data[0];
 800051a:	4b45      	ldr	r3, [pc, #276]	; (8000630 <BEMF_Observer_Block+0x11c>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	80fb      	strh	r3, [r7, #6]
	uint16_t V_DC = ADC_data[1];
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <BEMF_Observer_Block+0x11c>)
 8000522:	885b      	ldrh	r3, [r3, #2]
 8000524:	80bb      	strh	r3, [r7, #4]
	uint16_t V_Floating_Diff = 4095;
 8000526:	f640 73ff 	movw	r3, #4095	; 0xfff
 800052a:	807b      	strh	r3, [r7, #2]
// 0 Cross Detection Block
	// differentiate BEMF to obtain value and sign of changes
	V_Floating_Diff = (4095 + V_Floating) - V_Floating_Old;
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <BEMF_Observer_Block+0x120>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	b29b      	uxth	r3, r3
 8000536:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800053a:	807b      	strh	r3, [r7, #2]
	V_Floating_Old = V_Floating;
 800053c:	4a3d      	ldr	r2, [pc, #244]	; (8000634 <BEMF_Observer_Block+0x120>)
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	8013      	strh	r3, [r2, #0]
	if((Cross == 0) && (BEMF_cnt_sign == 1) && (BEMF_time_cnt > BEMF_delay)){
 8000542:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <BEMF_Observer_Block+0x124>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d13f      	bne.n	80005ca <BEMF_Observer_Block+0xb6>
 800054a:	4b3c      	ldr	r3, [pc, #240]	; (800063c <BEMF_Observer_Block+0x128>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d13b      	bne.n	80005ca <BEMF_Observer_Block+0xb6>
 8000552:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <BEMF_Observer_Block+0x12c>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <BEMF_Observer_Block+0x130>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d935      	bls.n	80005ca <BEMF_Observer_Block+0xb6>
		if((Step_Num == 1) || (Step_Num == 3) || (Step_Num == 5)){
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <BEMF_Observer_Block+0x134>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d007      	beq.n	8000576 <BEMF_Observer_Block+0x62>
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <BEMF_Observer_Block+0x134>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d003      	beq.n	8000576 <BEMF_Observer_Block+0x62>
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <BEMF_Observer_Block+0x134>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d10e      	bne.n	8000594 <BEMF_Observer_Block+0x80>
			// BEMF voltage will be decreasing -> '\'
			if (V_Floating_Diff < 4095){
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	f640 72fe 	movw	r2, #4094	; 0xffe
 800057c:	4293      	cmp	r3, r2
 800057e:	d823      	bhi.n	80005c8 <BEMF_Observer_Block+0xb4>
				// If BEMF actually '\'
				if (V_Floating < V_DC/2 ) Cross = 1;
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	429a      	cmp	r2, r3
 800058a:	d21d      	bcs.n	80005c8 <BEMF_Observer_Block+0xb4>
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <BEMF_Observer_Block+0x124>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			if (V_Floating_Diff < 4095){
 8000592:	e019      	b.n	80005c8 <BEMF_Observer_Block+0xb4>
			}
		}else if((Step_Num == 2) || (Step_Num == 4) || (Step_Num == 6)){
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <BEMF_Observer_Block+0x134>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d007      	beq.n	80005ac <BEMF_Observer_Block+0x98>
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <BEMF_Observer_Block+0x134>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d003      	beq.n	80005ac <BEMF_Observer_Block+0x98>
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <BEMF_Observer_Block+0x134>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d10e      	bne.n	80005ca <BEMF_Observer_Block+0xb6>
			// Bemf voltage will be increasing -> '/'
			if (V_Floating_Diff > 4095){
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005b2:	d30a      	bcc.n	80005ca <BEMF_Observer_Block+0xb6>
				// If BEMF actually '/'
				if (V_Floating > V_DC/2 ) Cross = 1;
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	085b      	lsrs	r3, r3, #1
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d904      	bls.n	80005ca <BEMF_Observer_Block+0xb6>
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <BEMF_Observer_Block+0x124>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e000      	b.n	80005ca <BEMF_Observer_Block+0xb6>
			if (V_Floating_Diff < 4095){
 80005c8:	bf00      	nop
			}
		}
	}
// 0 Cross Counter Block
	// Change counting sign when 0-cross is detected
	if (Cross == 1) {
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <BEMF_Observer_Block+0x124>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d123      	bne.n	800061a <BEMF_Observer_Block+0x106>
		BEMF_cnt_sign = 0;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <BEMF_Observer_Block+0x128>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
		BEMF_delay = BEMF_time_cnt/4;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <BEMF_Observer_Block+0x12c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <BEMF_Observer_Block+0x130>)
 80005e2:	701a      	strb	r2, [r3, #0]
		Cross = 0;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <BEMF_Observer_Block+0x124>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		BEMF_Angle += 30;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <BEMF_Observer_Block+0x138>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	331e      	adds	r3, #30
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <BEMF_Observer_Block+0x138>)
 80005f4:	801a      	strh	r2, [r3, #0]
		if (Div > 30) BEMF_Treshold = 0;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <BEMF_Observer_Block+0x13c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b1e      	cmp	r3, #30
 80005fc:	d903      	bls.n	8000606 <BEMF_Observer_Block+0xf2>
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <BEMF_Observer_Block+0x140>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	e009      	b.n	800061a <BEMF_Observer_Block+0x106>
		else BEMF_Treshold = BEMF_time_cnt/Div;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <BEMF_Observer_Block+0x12c>)
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <BEMF_Observer_Block+0x13c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <BEMF_Observer_Block+0x140>)
 8000618:	801a      	strh	r2, [r3, #0]
	}
	//Old_Cross = Cross;
	// Counter
	if (BEMF_cnt_sign) {
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <BEMF_Observer_Block+0x128>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d01a      	beq.n	8000658 <BEMF_Observer_Block+0x144>
		BEMF_time_cnt ++;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <BEMF_Observer_Block+0x12c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <BEMF_Observer_Block+0x12c>)
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e01d      	b.n	800066c <BEMF_Observer_Block+0x158>
 8000630:	200000b4 	.word	0x200000b4
 8000634:	200000d2 	.word	0x200000d2
 8000638:	200000d5 	.word	0x200000d5
 800063c:	2000000a 	.word	0x2000000a
 8000640:	2000000b 	.word	0x2000000b
 8000644:	2000000f 	.word	0x2000000f
 8000648:	200000d0 	.word	0x200000d0
 800064c:	2000000c 	.word	0x2000000c
 8000650:	2000000e 	.word	0x2000000e
 8000654:	200000d6 	.word	0x200000d6
	}else {
		if (BEMF_time_cnt > 0) BEMF_time_cnt --;
 8000658:	4b70      	ldr	r3, [pc, #448]	; (800081c <BEMF_Observer_Block+0x308>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d005      	beq.n	800066c <BEMF_Observer_Block+0x158>
 8000660:	4b6e      	ldr	r3, [pc, #440]	; (800081c <BEMF_Observer_Block+0x308>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3b01      	subs	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b6c      	ldr	r3, [pc, #432]	; (800081c <BEMF_Observer_Block+0x308>)
 800066a:	701a      	strb	r2, [r3, #0]
	}
	// When Counter reached TRESHOLD then change sign and update BEMF_Angle
	if((BEMF_time_cnt <= BEMF_Treshold) && (BEMF_cnt_sign == 0)){
 800066c:	4b6b      	ldr	r3, [pc, #428]	; (800081c <BEMF_Observer_Block+0x308>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b6b      	ldr	r3, [pc, #428]	; (8000820 <BEMF_Observer_Block+0x30c>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d80f      	bhi.n	800069a <BEMF_Observer_Block+0x186>
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <BEMF_Observer_Block+0x310>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10b      	bne.n	800069a <BEMF_Observer_Block+0x186>
		BEMF_Angle += 30;
 8000682:	4b69      	ldr	r3, [pc, #420]	; (8000828 <BEMF_Observer_Block+0x314>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	331e      	adds	r3, #30
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <BEMF_Observer_Block+0x314>)
 800068c:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 800068e:	4b65      	ldr	r3, [pc, #404]	; (8000824 <BEMF_Observer_Block+0x310>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 8000694:	4b61      	ldr	r3, [pc, #388]	; (800081c <BEMF_Observer_Block+0x308>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	}
	// Counter buffor reset before overflow
	if(BEMF_time_cnt == 255){
 800069a:	4b60      	ldr	r3, [pc, #384]	; (800081c <BEMF_Observer_Block+0x308>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d10b      	bne.n	80006ba <BEMF_Observer_Block+0x1a6>
		BEMF_Angle += 60;
 80006a2:	4b61      	ldr	r3, [pc, #388]	; (8000828 <BEMF_Observer_Block+0x314>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	333c      	adds	r3, #60	; 0x3c
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <BEMF_Observer_Block+0x314>)
 80006ac:	801a      	strh	r2, [r3, #0]
		BEMF_cnt_sign = 1;
 80006ae:	4b5d      	ldr	r3, [pc, #372]	; (8000824 <BEMF_Observer_Block+0x310>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 0;
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <BEMF_Observer_Block+0x308>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	}
	//Old_Step = Step_Num;
	if (BEMF_Angle >= 360) BEMF_Angle = 0;
 80006ba:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <BEMF_Observer_Block+0x314>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80006c2:	d302      	bcc.n	80006ca <BEMF_Observer_Block+0x1b6>
 80006c4:	4b58      	ldr	r3, [pc, #352]	; (8000828 <BEMF_Observer_Block+0x314>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]

	if (Scan_Is_enabled > 0){
 80006ca:	4b58      	ldr	r3, [pc, #352]	; (800082c <BEMF_Observer_Block+0x318>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 8085 	beq.w	80007de <BEMF_Observer_Block+0x2ca>
		Scan_Data[Scan_iter] = V_Floating/16;
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	091b      	lsrs	r3, r3, #4
 80006d8:	b299      	uxth	r1, r3
 80006da:	4b55      	ldr	r3, [pc, #340]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	b2c9      	uxtb	r1, r1
 80006e2:	4b54      	ldr	r3, [pc, #336]	; (8000834 <BEMF_Observer_Block+0x320>)
 80006e4:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80006e6:	4b52      	ldr	r3, [pc, #328]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b50      	ldr	r3, [pc, #320]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80006f0:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = V_DC/16;
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	b299      	uxth	r1, r3
 80006f8:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <BEMF_Observer_Block+0x320>)
 8000702:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000704:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b48      	ldr	r3, [pc, #288]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800070e:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = Step_Num * 8;
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <BEMF_Observer_Block+0x324>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4a46      	ldr	r2, [pc, #280]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <BEMF_Observer_Block+0x320>)
 800071e:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000720:	4b43      	ldr	r3, [pc, #268]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b41      	ldr	r3, [pc, #260]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800072a:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = BEMF_time_cnt;
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <BEMF_Observer_Block+0x308>)
 8000734:	7819      	ldrb	r1, [r3, #0]
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <BEMF_Observer_Block+0x320>)
 8000738:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000744:	801a      	strh	r2, [r3, #0]

		Scan_Data[Scan_iter] = BEMF_Treshold;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <BEMF_Observer_Block+0x30c>)
 8000748:	8819      	ldrh	r1, [r3, #0]
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	b2c9      	uxtb	r1, r1
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <BEMF_Observer_Block+0x320>)
 8000754:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000760:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = BEMF_Angle/4;
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <BEMF_Observer_Block+0x314>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	b299      	uxth	r1, r3
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	b2c9      	uxtb	r1, r1
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <BEMF_Observer_Block+0x320>)
 8000774:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000780:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = Step_Num * 8;
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <BEMF_Observer_Block+0x324>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000788:	8812      	ldrh	r2, [r2, #0]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	b2d9      	uxtb	r1, r3
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <BEMF_Observer_Block+0x320>)
 8000790:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <BEMF_Observer_Block+0x31c>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <BEMF_Observer_Block+0x31c>)
 800079c:	801a      	strh	r2, [r3, #0]
		Scan_Data[Scan_iter] = HAL_GPIO_ReadPin(Hall_GPIO_Port, Hall_GPIO_Pin)*64;
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <BEMF_Observer_Block+0x328>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <BEMF_Observer_Block+0x32c>)
 80007a4:	8812      	ldrh	r2, [r2, #0]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fd37 	bl	800321c <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	018b      	lsls	r3, r1, #6
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <BEMF_Observer_Block+0x320>)
 80007be:	5499      	strb	r1, [r3, r2]
		Scan_iter ++ ;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80007ca:	801a      	strh	r2, [r3, #0]
		if (Scan_iter >= 4095) Scan_Is_enabled = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <BEMF_Observer_Block+0x31c>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d902      	bls.n	80007de <BEMF_Observer_Block+0x2ca>
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <BEMF_Observer_Block+0x318>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	}
	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <BEMF_Observer_Block+0x330>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d115      	bne.n	8000812 <BEMF_Observer_Block+0x2fe>
		Old_Cross = 0;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <BEMF_Observer_Block+0x334>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
		Cross = 0;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <BEMF_Observer_Block+0x338>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		BEMF_cnt_sign = 0;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <BEMF_Observer_Block+0x310>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		BEMF_time_cnt = 1;
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <BEMF_Observer_Block+0x308>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
		BEMF_Angle = 330;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <BEMF_Observer_Block+0x314>)
 8000800:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000804:	801a      	strh	r2, [r3, #0]
		V_Floating_Old = 0;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <BEMF_Observer_Block+0x33c>)
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
		BEMF_delay = 32;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <BEMF_Observer_Block+0x340>)
 800080e:	2220      	movs	r2, #32
 8000810:	701a      	strb	r2, [r3, #0]
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000000b 	.word	0x2000000b
 8000820:	200000d6 	.word	0x200000d6
 8000824:	2000000a 	.word	0x2000000a
 8000828:	2000000c 	.word	0x2000000c
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200000ca 	.word	0x200000ca
 8000834:	200000dc 	.word	0x200000dc
 8000838:	200000d0 	.word	0x200000d0
 800083c:	20000004 	.word	0x20000004
 8000840:	20000008 	.word	0x20000008
 8000844:	200000d8 	.word	0x200000d8
 8000848:	200000d4 	.word	0x200000d4
 800084c:	200000d5 	.word	0x200000d5
 8000850:	200000d2 	.word	0x200000d2
 8000854:	2000000f 	.word	0x2000000f

08000858 <Set_Observer_Div>:

void Set_Observer_Div(uint8_t div){
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	if(div < 1) Div = 1;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <Set_Observer_Div+0x18>
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <Set_Observer_Div+0x28>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
	else Div = div;
}
 800086e:	e002      	b.n	8000876 <Set_Observer_Div+0x1e>
	else Div = div;
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <Set_Observer_Div+0x28>)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	7013      	strb	r3, [r2, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	2000000e 	.word	0x2000000e

08000884 <Six_Step_Block>:
		HALL_time_cnt = 1;
		HALL_Angle = 300;	// UWAZAC Z GOWNO PRZESUNIECIAMI
	}
}

void Six_Step_Block(uint16_t PWM_Value){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	// Do nothing if pwm is ste to 0
	if(PWM_Value == 0){
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10c      	bne.n	80008ae <Six_Step_Block+0x2a>
		SetFloating_A();
 8000894:	f000 f9a6 	bl	8000be4 <SetFloating_A>
		SetFloating_B();
 8000898:	f000 f9b8 	bl	8000c0c <SetFloating_B>
		SetFloating_C();
 800089c:	f000 f9ca 	bl	8000c34 <SetFloating_C>
		Step_Num = 0;
 80008a0:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <Six_Step_Block+0x11c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		Old_Step = 0;
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <Six_Step_Block+0x120>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		return;
 80008ac:	e074      	b.n	8000998 <Six_Step_Block+0x114>
	}
	Step_Num = (Angle/60)+1;
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <Six_Step_Block+0x124>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	4a3e      	ldr	r2, [pc, #248]	; (80009ac <Six_Step_Block+0x128>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	095b      	lsrs	r3, r3, #5
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <Six_Step_Block+0x11c>)
 80008c4:	701a      	strb	r2, [r3, #0]
	if(Step_Num != Old_Step){
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <Six_Step_Block+0x11c>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <Six_Step_Block+0x120>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d062      	beq.n	8000998 <Six_Step_Block+0x114>
		if(Step_Num == 1){
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <Six_Step_Block+0x11c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10b      	bne.n	80008f2 <Six_Step_Block+0x6e>
			SetPulse_CH(PWM_Value);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f96b 	bl	8000bb8 <SetPulse_CH>
			SetZero_B();
 80008e2:	f000 f919 	bl	8000b18 <SetZero_B>
			SetFloating_A();
 80008e6:	f000 f97d 	bl	8000be4 <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f000 fa7a 	bl	8000de4 <ADC_Change_Order>
 80008f0:	e04e      	b.n	8000990 <Six_Step_Block+0x10c>
		}else if(Step_Num == 2){
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <Six_Step_Block+0x11c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d10b      	bne.n	8000912 <Six_Step_Block+0x8e>
			SetPulse_CH(PWM_Value);
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f95b 	bl	8000bb8 <SetPulse_CH>
			SetFloating_B();
 8000902:	f000 f983 	bl	8000c0c <SetFloating_B>
			SetZero_A();
 8000906:	f000 f8f5 	bl	8000af4 <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_B);
 800090a:	2003      	movs	r0, #3
 800090c:	f000 fa6a 	bl	8000de4 <ADC_Change_Order>
 8000910:	e03e      	b.n	8000990 <Six_Step_Block+0x10c>
		}else if(Step_Num == 3){
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <Six_Step_Block+0x11c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d10b      	bne.n	8000932 <Six_Step_Block+0xae>
			SetFloating_C();
 800091a:	f000 f98b 	bl	8000c34 <SetFloating_C>
			SetPulse_BH(PWM_Value);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f933 	bl	8000b8c <SetPulse_BH>
			SetZero_A();
 8000926:	f000 f8e5 	bl	8000af4 <SetZero_A>
			ADC_Change_Order(ADC_CHANNEL_C);
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fa5a 	bl	8000de4 <ADC_Change_Order>
 8000930:	e02e      	b.n	8000990 <Six_Step_Block+0x10c>
		}else if(Step_Num == 4){
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <Six_Step_Block+0x11c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d10b      	bne.n	8000952 <Six_Step_Block+0xce>
			SetZero_C();
 800093a:	f000 f8ff 	bl	8000b3c <SetZero_C>
			SetPulse_BH(PWM_Value);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f923 	bl	8000b8c <SetPulse_BH>
			SetFloating_A();
 8000946:	f000 f94d 	bl	8000be4 <SetFloating_A>
			ADC_Change_Order(ADC_CHANNEL_A);
 800094a:	2004      	movs	r0, #4
 800094c:	f000 fa4a 	bl	8000de4 <ADC_Change_Order>
 8000950:	e01e      	b.n	8000990 <Six_Step_Block+0x10c>
		}else if(Step_Num == 5){
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <Six_Step_Block+0x11c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b05      	cmp	r3, #5
 8000958:	d10b      	bne.n	8000972 <Six_Step_Block+0xee>
			SetZero_C();
 800095a:	f000 f8ef 	bl	8000b3c <SetZero_C>
			SetFloating_B();
 800095e:	f000 f955 	bl	8000c0c <SetFloating_B>
			SetPulse_AH(PWM_Value);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8fb 	bl	8000b60 <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_B);
 800096a:	2003      	movs	r0, #3
 800096c:	f000 fa3a 	bl	8000de4 <ADC_Change_Order>
 8000970:	e00e      	b.n	8000990 <Six_Step_Block+0x10c>
		}else if(Step_Num == 6){
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <Six_Step_Block+0x11c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b06      	cmp	r3, #6
 8000978:	d10a      	bne.n	8000990 <Six_Step_Block+0x10c>
			SetFloating_C();
 800097a:	f000 f95b 	bl	8000c34 <SetFloating_C>
			SetZero_B();
 800097e:	f000 f8cb 	bl	8000b18 <SetZero_B>
			SetPulse_AH(PWM_Value);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f8eb 	bl	8000b60 <SetPulse_AH>
			ADC_Change_Order(ADC_CHANNEL_C);
 800098a:	2002      	movs	r0, #2
 800098c:	f000 fa2a 	bl	8000de4 <ADC_Change_Order>
		}
		Old_Step = Step_Num;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <Six_Step_Block+0x11c>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <Six_Step_Block+0x120>)
 8000996:	701a      	strb	r2, [r3, #0]
	}
}
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000d0 	.word	0x200000d0
 80009a4:	200000d1 	.word	0x200000d1
 80009a8:	200000da 	.word	0x200000da
 80009ac:	88888889 	.word	0x88888889

080009b0 <Set_PWM>:
		}
		Old_Step = Step_Num;
	}
}

void Set_PWM(uint16_t value){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	PWM_Value = value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <Set_PWM+0x1c>)
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	8013      	strh	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200000d8 	.word	0x200000d8

080009d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	BEMF_Observer_Block();
 80009d8:	f7ff fd9c 	bl	8000514 <BEMF_Observer_Block>
	//HALL_Observer_Block();
	// Collect data
	uint8_t div = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
			//TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(htim1);
			//TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(htim2);
			tim_num++;
		}
	}
	IsNewVal = 1;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_ADC_ConvCpltCallback+0x34>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
	cnt ++;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_ADC_ConvCpltCallback+0x38>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_ADC_ConvCpltCallback+0x38>)
 80009ee:	6013      	str	r3, [r2, #0]
	ADC_Ticks ++;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_ADC_ConvCpltCallback+0x3c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <HAL_ADC_ConvCpltCallback+0x3c>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000c2 	.word	0x200000c2
 8000a08:	200000c4 	.word	0x200000c4
 8000a0c:	200000cc 	.word	0x200000cc

08000a10 <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <Control_Init+0xc8>)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 8000a24:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <Control_Init+0xcc>)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000a2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <Control_Init+0xd0>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 8000a30:	4a2c      	ldr	r2, [pc, #176]	; (8000ae4 <Control_Init+0xd4>)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 8000a36:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <Control_Init+0xd8>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <Control_Init+0xdc>)
 8000a42:	f002 fc02 	bl	800324a <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <Control_Init+0xd4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f9ba 	bl	8003dc4 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <Control_Init+0xcc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 fa56 	bl	8003f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2); 	// LOW POLARITY
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <Control_Init+0xcc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2104      	movs	r1, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fa50 	bl	8003f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <Control_Init+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fa4a 	bl	8003f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);	// LOW POLARITY
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <Control_Init+0xd0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fa44 	bl	8003f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <Control_Init+0xc8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2104      	movs	r1, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fa3e 	bl	8003f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  	// LOW POLARITY
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <Control_Init+0xc8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fa38 	bl	8003f08 <HAL_TIM_PWM_Start>

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <Control_Init+0xc8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fa32 	bl	8003f08 <HAL_TIM_PWM_Start>
	//htim2->Instance->CNT = 0;
	//htim3->Instance->CNT = 0;


	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 2);
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <Control_Init+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4911      	ldr	r1, [pc, #68]	; (8000af0 <Control_Init+0xe0>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fb4f 	bl	8002150 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <Control_Init+0xc8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fac7 	bl	800404c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <Control_Init+0xc8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f001 fa45 	bl	8001f58 <HAL_Delay>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000a0 	.word	0x200000a0
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	200000a8 	.word	0x200000a8
 8000ae4:	200000ac 	.word	0x200000ac
 8000ae8:	200000b0 	.word	0x200000b0
 8000aec:	40011400 	.word	0x40011400
 8000af0:	200000b4 	.word	0x200000b4

08000af4 <SetZero_A>:

void SetZero_A(){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SetZero_A+0x20>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, 0);
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SetZero_A+0x20>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200000a4 	.word	0x200000a4

08000b18 <SetZero_B>:

void SetZero_B(){
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SetZero_B+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, 0);
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SetZero_B+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200000a8 	.word	0x200000a8

08000b3c <SetZero_C>:

void SetZero_C(){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SetZero_C+0x20>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, 0);
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SetZero_C+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	200000a0 	.word	0x200000a0

08000b60 <SetPulse_AH>:
///////////////////
void SetPulse_AH(uint16_t value){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <SetPulse_AH+0x28>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, value);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SetPulse_AH+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	88fa      	ldrh	r2, [r7, #6]
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200000a4 	.word	0x200000a4

08000b8c <SetPulse_BH>:

void SetPulse_BH(uint16_t value){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <SetPulse_BH+0x28>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	88fa      	ldrh	r2, [r7, #6]
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, value);
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SetPulse_BH+0x28>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	88fa      	ldrh	r2, [r7, #6]
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	200000a8 	.word	0x200000a8

08000bb8 <SetPulse_CH>:

void SetPulse_CH(uint16_t value){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <SetPulse_CH+0x28>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, value);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SetPulse_CH+0x28>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	88fa      	ldrh	r2, [r7, #6]
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	200000a0 	.word	0x200000a0

08000be4 <SetFloating_A>:
///////////////////
void SetFloating_A(){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <SetFloating_A+0x24>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_2, PWM_COUNTER);
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SetFloating_A+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f240 227f 	movw	r2, #639	; 0x27f
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200000a4 	.word	0x200000a4

08000c0c <SetFloating_B>:

void SetFloating_B(){
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <SetFloating_B+0x24>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, PWM_COUNTER);
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SetFloating_B+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f240 227f 	movw	r2, #639	; 0x27f
 8000c24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200000a8 	.word	0x200000a8

08000c34 <SetFloating_C>:

void SetFloating_C(){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <SetFloating_C+0x24>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, PWM_COUNTER);
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SetFloating_C+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f240 227f 	movw	r2, #639	; 0x27f
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200000a0 	.word	0x200000a0

08000c5c <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff78 	bl	8000b60 <SetPulse_AH>
	SetZero_B();
 8000c70:	f7ff ff52 	bl	8000b18 <SetZero_B>
	SetFloating_C();
 8000c74:	f7ff ffde 	bl	8000c34 <SetFloating_C>
	Delay_Tick(Speed);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f90d 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_AH(Value);
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff6d 	bl	8000b60 <SetPulse_AH>
	SetFloating_B();
 8000c86:	f7ff ffc1 	bl	8000c0c <SetFloating_B>
	SetZero_C();
 8000c8a:	f7ff ff57 	bl	8000b3c <SetZero_C>
	Delay_Tick(Speed);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f902 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_A();
 8000c94:	f7ff ffa6 	bl	8000be4 <SetFloating_A>
	SetPulse_BH(Value);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff76 	bl	8000b8c <SetPulse_BH>
	SetZero_C();
 8000ca0:	f7ff ff4c 	bl	8000b3c <SetZero_C>
	Delay_Tick(Speed);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f8f7 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_A();
 8000caa:	f7ff ff23 	bl	8000af4 <SetZero_A>
	SetPulse_BH(Value);
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff6b 	bl	8000b8c <SetPulse_BH>
	SetFloating_C();
 8000cb6:	f7ff ffbd 	bl	8000c34 <SetFloating_C>
	Delay_Tick(Speed);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f8ec 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_A();
 8000cc0:	f7ff ff18 	bl	8000af4 <SetZero_A>
	SetFloating_B();
 8000cc4:	f7ff ffa2 	bl	8000c0c <SetFloating_B>
	SetPulse_CH(Value);
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff74 	bl	8000bb8 <SetPulse_CH>
	Delay_Tick(Speed);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f8e1 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_A();
 8000cd6:	f7ff ff85 	bl	8000be4 <SetFloating_A>
	SetZero_B();
 8000cda:	f7ff ff1d 	bl	8000b18 <SetZero_B>
	SetPulse_CH(Value);
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff69 	bl	8000bb8 <SetPulse_CH>
	Delay_Tick(Speed);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f8d6 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SixStep_rev>:

void SixStep_rev(uint32_t Speed, uint16_t Value){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_CH(Value);
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff58 	bl	8000bb8 <SetPulse_CH>
	SetZero_B();
 8000d08:	f7ff ff06 	bl	8000b18 <SetZero_B>
	SetFloating_A();
 8000d0c:	f7ff ff6a 	bl	8000be4 <SetFloating_A>
	Delay_Tick(Speed);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f8c1 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_CH(Value);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff4d 	bl	8000bb8 <SetPulse_CH>
	SetFloating_B();
 8000d1e:	f7ff ff75 	bl	8000c0c <SetFloating_B>
	SetZero_A();
 8000d22:	f7ff fee7 	bl	8000af4 <SetZero_A>
	Delay_Tick(Speed);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f8b6 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_C();
 8000d2c:	f7ff ff82 	bl	8000c34 <SetFloating_C>
	SetPulse_BH(Value);
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff2a 	bl	8000b8c <SetPulse_BH>
	SetZero_A();
 8000d38:	f7ff fedc 	bl	8000af4 <SetZero_A>
	Delay_Tick(Speed);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f8ab 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_C();
 8000d42:	f7ff fefb 	bl	8000b3c <SetZero_C>
	SetPulse_BH(Value);
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff1f 	bl	8000b8c <SetPulse_BH>
	SetFloating_A();
 8000d4e:	f7ff ff49 	bl	8000be4 <SetFloating_A>
	Delay_Tick(Speed);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f8a0 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_C();
 8000d58:	f7ff fef0 	bl	8000b3c <SetZero_C>
	SetFloating_B();
 8000d5c:	f7ff ff56 	bl	8000c0c <SetFloating_B>
	SetPulse_AH(Value);
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fefc 	bl	8000b60 <SetPulse_AH>
	Delay_Tick(Speed);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f895 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_C();
 8000d6e:	f7ff ff61 	bl	8000c34 <SetFloating_C>
	SetZero_B();
 8000d72:	f7ff fed1 	bl	8000b18 <SetZero_B>
	SetPulse_AH(Value);
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fef1 	bl	8000b60 <SetPulse_AH>
	Delay_Tick(Speed);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f88a 	bl	8000e98 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Hall_Change_Active>:
	ADC_Ticks = 0;
	while (ADC_Ticks <= ticks){}
}


void Hall_Change_Active(uint32_t pin){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if (pin == ADC_CHANNEL_A){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d107      	bne.n	8000daa <Hall_Change_Active+0x1e>
		Hall_GPIO_Port = HALL_A_GPIO_Port;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <Hall_Change_Active+0x4c>)
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <Hall_Change_Active+0x50>)
 8000d9e:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_A_Pin;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <Hall_Change_Active+0x54>)
 8000da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da6:	801a      	strh	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
	}else{
		Hall_GPIO_Port = HALL_C_GPIO_Port;
		Hall_GPIO_Pin = HALL_C_Pin;
	}
}
 8000da8:	e011      	b.n	8000dce <Hall_Change_Active+0x42>
	}else if (pin == ADC_CHANNEL_B){
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d107      	bne.n	8000dc0 <Hall_Change_Active+0x34>
		Hall_GPIO_Port = HALL_B_GPIO_Port;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <Hall_Change_Active+0x4c>)
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <Hall_Change_Active+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_B_Pin;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <Hall_Change_Active+0x54>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	801a      	strh	r2, [r3, #0]
}
 8000dbe:	e006      	b.n	8000dce <Hall_Change_Active+0x42>
		Hall_GPIO_Port = HALL_C_GPIO_Port;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <Hall_Change_Active+0x4c>)
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <Hall_Change_Active+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
		Hall_GPIO_Pin = HALL_C_Pin;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <Hall_Change_Active+0x54>)
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	801a      	strh	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	20000008 	.word	0x20000008

08000de4 <ADC_Change_Order>:

void ADC_Change_Order(uint32_t channel){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
	// Stop timer what triggers ADC conversions
	HAL_TIM_PWM_Stop_IT(htim1, TIM_CHANNEL_3);
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <ADC_Change_Order+0xa0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fa0c 	bl	800421c <HAL_TIM_PWM_Stop_IT>
	// Stop ADC DMA
	HAL_ADC_Stop_DMA(hadc1);
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <ADC_Change_Order+0xa4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fa7f 	bl	800230c <HAL_ADC_Stop_DMA>
	// Change order of conversions
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
	sConfig.Channel = channel;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

	if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)  Error_Handler();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <ADC_Change_Order+0xa4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 facf 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <ADC_Change_Order+0x50>
 8000e30:	f000 fcae 	bl	8001790 <Error_Handler>
	// Start ADC DMA
	HAL_ADC_Start_DMA(hadc1, ADC_data, 2);
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <ADC_Change_Order+0xa4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <ADC_Change_Order+0xa8>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f987 	bl	8002150 <HAL_ADC_Start_DMA>
	// Start timer what triggers ADC conversions
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <ADC_Change_Order+0xa0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2108      	movs	r1, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 f8ff 	bl	800404c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 1);
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <ADC_Change_Order+0xa0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c
	// Timers synchonisation
	htim1->Instance->CNT = 0;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <ADC_Change_Order+0xa0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <ADC_Change_Order+0xac>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <ADC_Change_Order+0xb0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
	Hall_Change_Active(channel);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff88 	bl	8000d8c <Hall_Change_Active>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	200000b0 	.word	0x200000b0
 8000e8c:	200000b4 	.word	0x200000b4
 8000e90:	200000a4 	.word	0x200000a4
 8000e94:	200000a8 	.word	0x200000a8

08000e98 <Delay_Tick>:

	BeforeCross_Ticks = WaitOneStep(BeforeCross_Ticks, div);
	return BeforeCross_Ticks;
}

void Delay_Tick(uint32_t val){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <Delay_Tick+0x6c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
	if (val > MAX_TICKS) val = MAX_TICKS;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000eb0:	d315      	bcc.n	8000ede <Delay_Tick+0x46>
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Delay_Tick+0x70>)
 8000eb4:	607b      	str	r3, [r7, #4]
	while(val > 0x00007fff){
 8000eb6:	e012      	b.n	8000ede <Delay_Tick+0x46>
		val -= 0x00007fff;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000ebe:	3b7f      	subs	r3, #127	; 0x7f
 8000ec0:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(htim4) < 0x7fff);
 8000ec2:	bf00      	nop
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <Delay_Tick+0x6c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d9f7      	bls.n	8000ec4 <Delay_Tick+0x2c>
		__HAL_TIM_SET_COUNTER(htim4,0);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <Delay_Tick+0x6c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ee4:	d2e8      	bcs.n	8000eb8 <Delay_Tick+0x20>
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
 8000ee6:	bf00      	nop
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <Delay_Tick+0x6c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8f8      	bhi.n	8000ee8 <Delay_Tick+0x50>
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000ac 	.word	0x200000ac
 8000f08:	000fffff 	.word	0x000fffff

08000f0c <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	uint8_t test = __HAL_TIM_GET_COUNTER(htim1);
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_TIM_TriggerCallback+0x44>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	73fb      	strb	r3, [r7, #15]
	if(htim->Instance == TIM1){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_TriggerCallback+0x48>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d10d      	bne.n	8000f44 <HAL_TIM_TriggerCallback+0x38>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d109      	bne.n	8000f44 <HAL_TIM_TriggerCallback+0x38>
			test = __HAL_TIM_GET_COUNTER(htim1);
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_TriggerCallback+0x44>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	73fb      	strb	r3, [r7, #15]
			test = __HAL_TIM_GET_COUNTER(htim1);
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_TIM_TriggerCallback+0x44>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000a0 	.word	0x200000a0
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b093      	sub	sp, #76	; 0x4c
 8000f5c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 ff99 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f845 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 fb89 	bl	800167c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6a:	f000 fb59 	bl	8001620 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f6e:	f000 f897 	bl	80010a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f72:	f000 f8e3 	bl	800113c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f76:	f000 f919 	bl	80011ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f7a:	f000 fa55 	bl	8001428 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f7e:	f000 f9d1 	bl	8001324 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f82:	f000 fb23 	bl	80015cc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f86:	f000 fad3 	bl	8001530 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

	DRV_Init(hspi1);
 8000f8a:	4c11      	ldr	r4, [pc, #68]	; (8000fd0 <main+0x78>)
 8000f8c:	4668      	mov	r0, sp
 8000f8e:	f104 0310 	add.w	r3, r4, #16
 8000f92:	2248      	movs	r2, #72	; 0x48
 8000f94:	4619      	mov	r1, r3
 8000f96:	f004 fe23 	bl	8005be0 <memcpy>
 8000f9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f9e:	f7ff f8d5 	bl	800014c <DRV_Init>
	//DRV_Write(SHUNT_AMPLIFIER_CONTROL,
	//		(GAIN_CS1 & 0xffff) +
	//		(GAIN_CS2 & 0xffff) +
	//		(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <main+0x7c>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <main+0x80>)
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <main+0x84>)
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <main+0x88>)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <main+0x8c>)
 8000fae:	f7ff fd2f 	bl	8000a10 <Control_Init>
	Application_Init(&huart1);
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <main+0x90>)
 8000fb4:	f7ff f932 	bl	800021c <Application_Init>

	HAL_Delay(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 ffcd 	bl	8001f58 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <main+0x94>)
 8000fc4:	f002 f941 	bl	800324a <HAL_GPIO_WritePin>
while (1){
	Application_Update();
 8000fc8:	f7ff fa6c 	bl	80004a4 <Application_Update>
 8000fcc:	e7fc      	b.n	8000fc8 <main+0x70>
 8000fce:	bf00      	nop
 8000fd0:	200012f4 	.word	0x200012f4
 8000fd4:	200011b0 	.word	0x200011b0
 8000fd8:	200010dc 	.word	0x200010dc
 8000fdc:	20001124 	.word	0x20001124
 8000fe0:	2000134c 	.word	0x2000134c
 8000fe4:	200012ac 	.word	0x200012ac
 8000fe8:	20001224 	.word	0x20001224
 8000fec:	40011400 	.word	0x40011400

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffa:	2228      	movs	r2, #40	; 0x28
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fdfc 	bl	8005bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001030:	2300      	movs	r3, #0
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001034:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001038:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f002 f91c 	bl	800327c <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800104a:	f000 fba1 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2102      	movs	r1, #2
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fb86 	bl	800377c <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001076:	f000 fb8b 	bl	8001790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107a:	2302      	movs	r3, #2
 800107c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800107e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001082:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fd12 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001092:	f000 fb7d 	bl	8001790 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_ADC1_Init+0x94>)
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <MX_ADC1_Init+0x98>)
 80010b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_ADC1_Init+0x94>)
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_ADC1_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_ADC1_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_ADC1_Init+0x94>)
 80010cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_ADC1_Init+0x94>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_ADC1_Init+0x94>)
 80010da:	2202      	movs	r2, #2
 80010dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	4815      	ldr	r0, [pc, #84]	; (8001134 <MX_ADC1_Init+0x94>)
 80010e0:	f000 ff5e 	bl	8001fa0 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010ea:	f000 fb51 	bl	8001790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_ADC1_Init+0x94>)
 8001100:	f001 f962 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 fb41 	bl	8001790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110e:	2301      	movs	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001112:	2302      	movs	r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_ADC1_Init+0x94>)
 800111c:	f001 f954 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001126:	f000 fb33 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200011b0 	.word	0x200011b0
 8001138:	40012400 	.word	0x40012400

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <MX_SPI1_Init+0x6c>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_SPI1_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_SPI1_Init+0x68>)
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001172:	2220      	movs	r2, #32
 8001174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_SPI1_Init+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_SPI1_Init+0x68>)
 800118a:	220a      	movs	r2, #10
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001190:	f002 fd44 	bl	8003c1c <HAL_SPI_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800119a:	f000 faf9 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200012f4 	.word	0x200012f4
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b096      	sub	sp, #88	; 0x58
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2220      	movs	r2, #32
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fd09 	bl	8005bfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ea:	4b4c      	ldr	r3, [pc, #304]	; (800131c <MX_TIM1_Init+0x170>)
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <MX_TIM1_Init+0x174>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 80011f0:	4b4a      	ldr	r3, [pc, #296]	; (800131c <MX_TIM1_Init+0x170>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <MX_TIM1_Init+0x170>)
 80011f8:	2220      	movs	r2, #32
 80011fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <MX_TIM1_Init+0x170>)
 80011fe:	f240 227f 	movw	r2, #639	; 0x27f
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <MX_TIM1_Init+0x170>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120a:	4b44      	ldr	r3, [pc, #272]	; (800131c <MX_TIM1_Init+0x170>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b42      	ldr	r3, [pc, #264]	; (800131c <MX_TIM1_Init+0x170>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001216:	4841      	ldr	r0, [pc, #260]	; (800131c <MX_TIM1_Init+0x170>)
 8001218:	f002 fd84 	bl	8003d24 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001222:	f000 fab5 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001230:	4619      	mov	r1, r3
 8001232:	483a      	ldr	r0, [pc, #232]	; (800131c <MX_TIM1_Init+0x170>)
 8001234:	f003 fa62 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123e:	f000 faa7 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001242:	4836      	ldr	r0, [pc, #216]	; (800131c <MX_TIM1_Init+0x170>)
 8001244:	f002 fe08 	bl	8003e58 <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124e:	f000 fa9f 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800125e:	4619      	mov	r1, r3
 8001260:	482e      	ldr	r0, [pc, #184]	; (800131c <MX_TIM1_Init+0x170>)
 8001262:	f003 fdd7 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800126c:	f000 fa90 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001270:	2360      	movs	r3, #96	; 0x60
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001278:	2302      	movs	r3, #2
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <MX_TIM1_Init+0x170>)
 8001296:	f003 f973 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012a0:	f000 fa76 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	2204      	movs	r2, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	481a      	ldr	r0, [pc, #104]	; (800131c <MX_TIM1_Init+0x170>)
 80012b2:	f003 f965 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012bc:	f000 fa68 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2208      	movs	r2, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_TIM1_Init+0x170>)
 80012ce:	f003 f957 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80012d8:	f000 fa5a 	bl	8001790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM1_Init+0x170>)
 8001300:	f003 fde6 	bl	8004ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800130a:	f000 fa41 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM1_Init+0x170>)
 8001310:	f000 fba0 	bl	8001a54 <HAL_TIM_MspPostInit>

}
 8001314:	bf00      	nop
 8001316:	3758      	adds	r7, #88	; 0x58
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200012ac 	.word	0x200012ac
 8001320:	40012c00 	.word	0x40012c00

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <MX_TIM2_Init+0x100>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_TIM2_Init+0x100>)
 800135e:	2201      	movs	r2, #1
 8001360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <MX_TIM2_Init+0x100>)
 8001364:	2220      	movs	r2, #32
 8001366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MX_TIM2_Init+0x100>)
 800136a:	f240 227f 	movw	r2, #639	; 0x27f
 800136e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <MX_TIM2_Init+0x100>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_TIM2_Init+0x100>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137c:	4829      	ldr	r0, [pc, #164]	; (8001424 <MX_TIM2_Init+0x100>)
 800137e:	f002 fcd1 	bl	8003d24 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001388:	f000 fa02 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4619      	mov	r1, r3
 8001398:	4822      	ldr	r0, [pc, #136]	; (8001424 <MX_TIM2_Init+0x100>)
 800139a:	f003 f9af 	bl	80046fc <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013a4:	f000 f9f4 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <MX_TIM2_Init+0x100>)
 80013aa:	f002 fd55 	bl	8003e58 <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013b4:	f000 f9ec 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4619      	mov	r1, r3
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <MX_TIM2_Init+0x100>)
 80013c8:	f003 fd24 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013d2:	f000 f9dd 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM2_Init+0x100>)
 80013ee:	f003 f8c7 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013f8:	f000 f9ca 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013fc:	2302      	movs	r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <MX_TIM2_Init+0x100>)
 8001408:	f003 f8ba 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001412:	f000 f9bd 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_TIM2_Init+0x100>)
 8001418:	f000 fb1c 	bl	8001a54 <HAL_TIM_MspPostInit>

}
 800141c:	bf00      	nop
 800141e:	3738      	adds	r7, #56	; 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000134c 	.word	0x2000134c

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_TIM3_Init+0x100>)
 800145a:	4a34      	ldr	r2, [pc, #208]	; (800152c <MX_TIM3_Init+0x104>)
 800145c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 800145e:	4b32      	ldr	r3, [pc, #200]	; (8001528 <MX_TIM3_Init+0x100>)
 8001460:	2201      	movs	r2, #1
 8001462:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_TIM3_Init+0x100>)
 8001466:	2220      	movs	r2, #32
 8001468:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <MX_TIM3_Init+0x100>)
 800146c:	f240 227f 	movw	r2, #639	; 0x27f
 8001470:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_TIM3_Init+0x100>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM3_Init+0x100>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800147e:	482a      	ldr	r0, [pc, #168]	; (8001528 <MX_TIM3_Init+0x100>)
 8001480:	f002 fc50 	bl	8003d24 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800148a:	f000 f981 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM3_Init+0x100>)
 800149c:	f003 f92e 	bl	80046fc <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014a6:	f000 f973 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014aa:	481f      	ldr	r0, [pc, #124]	; (8001528 <MX_TIM3_Init+0x100>)
 80014ac:	f002 fcd4 	bl	8003e58 <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014b6:	f000 f96b 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <MX_TIM3_Init+0x100>)
 80014ca:	f003 fca3 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014d4:	f000 f95c 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_TIM3_Init+0x100>)
 80014f0:	f003 f846 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014fa:	f000 f949 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014fe:	2302      	movs	r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM3_Init+0x100>)
 800150a:	f003 f839 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001514:	f000 f93c 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM3_Init+0x100>)
 800151a:	f000 fa9b 	bl	8001a54 <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20001124 	.word	0x20001124
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_TIM4_Init+0x94>)
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <MX_TIM4_Init+0x98>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_TIM4_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_TIM4_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_TIM4_Init+0x94>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_TIM4_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_TIM4_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_TIM4_Init+0x94>)
 8001574:	f002 fbd6 	bl	8003d24 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f907 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	4619      	mov	r1, r3
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <MX_TIM4_Init+0x94>)
 8001590:	f003 f8b4 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800159a:	f000 f8f9 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_TIM4_Init+0x94>)
 80015ac:	f003 fc32 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015b6:	f000 f8eb 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200010dc 	.word	0x200010dc
 80015c8:	40000800 	.word	0x40000800

080015cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART1_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 8001604:	f003 fcc7 	bl	8004f96 <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f000 f8bf 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20001224 	.word	0x20001224
 800161c:	40013800 	.word	0x40013800

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_DMA_Init+0x58>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <MX_DMA_Init+0x58>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_DMA_Init+0x58>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	200b      	movs	r0, #11
 8001644:	f001 f991 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001648:	200b      	movs	r0, #11
 800164a:	f001 f9aa 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	200e      	movs	r0, #14
 8001654:	f001 f989 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001658:	200e      	movs	r0, #14
 800165a:	f001 f9a2 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	200f      	movs	r0, #15
 8001664:	f001 f981 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001668:	200f      	movs	r0, #15
 800166a:	f001 f99a 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001690:	4b3a      	ldr	r3, [pc, #232]	; (800177c <MX_GPIO_Init+0x100>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a39      	ldr	r2, [pc, #228]	; (800177c <MX_GPIO_Init+0x100>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <MX_GPIO_Init+0x100>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <MX_GPIO_Init+0x100>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a33      	ldr	r2, [pc, #204]	; (800177c <MX_GPIO_Init+0x100>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <MX_GPIO_Init+0x100>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <MX_GPIO_Init+0x100>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a2d      	ldr	r2, [pc, #180]	; (800177c <MX_GPIO_Init+0x100>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <MX_GPIO_Init+0x100>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	4828      	ldr	r0, [pc, #160]	; (8001780 <MX_GPIO_Init+0x104>)
 80016de:	f001 fdb4 	bl	800324a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4827      	ldr	r0, [pc, #156]	; (8001784 <MX_GPIO_Init+0x108>)
 80016e8:	f001 fdaf 	bl	800324a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <MX_GPIO_Init+0x104>)
 8001704:	f001 fc06 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001708:	2302      	movs	r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <MX_GPIO_Init+0x104>)
 800171c:	f001 fbfa 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001720:	2304      	movs	r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	4813      	ldr	r0, [pc, #76]	; (8001784 <MX_GPIO_Init+0x108>)
 8001738:	f001 fbec 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_B_Pin HALL_A_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_B_Pin|HALL_A_Pin|HALL_C_Pin;
 800173c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_GPIO_Init+0x10c>)
 8001752:	f001 fbdf 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <MX_GPIO_Init+0x110>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <MX_GPIO_Init+0x110>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	6053      	str	r3, [r2, #4]

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40011400 	.word	0x40011400
 8001784:	40010c00 	.word	0x40010c00
 8001788:	40010800 	.word	0x40010800
 800178c:	40010000 	.word	0x40010000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_ADC_MspInit+0xe8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d15f      	bne.n	80018e0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_ADC_MspInit+0xec>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_ADC_MspInit+0xec>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_ADC_MspInit+0xec>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_ADC_MspInit+0xec>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <HAL_ADC_MspInit+0xec>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_ADC_MspInit+0xec>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_ADC_MspInit+0xec>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_ADC_MspInit+0xec>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_ADC_MspInit+0xec>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8001868:	231f      	movs	r3, #31
 800186a:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186c:	2303      	movs	r3, #3
 800186e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4619      	mov	r1, r3
 8001876:	481e      	ldr	r0, [pc, #120]	; (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001878:	f001 fb4c 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 800187c:	2303      	movs	r3, #3
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001880:	2303      	movs	r3, #3
 8001882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4619      	mov	r1, r3
 800188a:	481a      	ldr	r0, [pc, #104]	; (80018f4 <HAL_ADC_MspInit+0xf4>)
 800188c:	f001 fb42 	bl	8002f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_ADC_MspInit+0xfc>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018ba:	2220      	movs	r2, #32
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018c6:	f001 f887 	bl	80029d8 <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80018d0:	f7ff ff5e 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40012400 	.word	0x40012400
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	20001268 	.word	0x20001268
 80018fc:	40020008 	.word	0x40020008

08001900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_SPI_MspInit+0x88>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d12f      	bne.n	8001980 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_SPI_MspInit+0x8c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_SPI_MspInit+0x8c>)
 8001926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_SPI_MspInit+0x8c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_SPI_MspInit+0x8c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a13      	ldr	r2, [pc, #76]	; (800198c <HAL_SPI_MspInit+0x8c>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_SPI_MspInit+0x8c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 8001950:	23a0      	movs	r3, #160	; 0xa0
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_SPI_MspInit+0x90>)
 8001964:	f001 fad6 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001968:	2340      	movs	r3, #64	; 0x40
 800196a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_SPI_MspInit+0x90>)
 800197c:	f001 faca 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40013000 	.word	0x40013000
 800198c:	40021000 	.word	0x40021000
 8001990:	40010800 	.word	0x40010800

08001994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_TIM_Base_MspInit+0xb0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d114      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2019      	movs	r0, #25
 80019c4:	f000 ffd1 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019c8:	2019      	movs	r0, #25
 80019ca:	f000 ffea 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ce:	e034      	b.n	8001a3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d10c      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
}
 80019f2:	e022      	b.n	8001a3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_TIM_Base_MspInit+0xb8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10c      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	e010      	b.n	8001a3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <HAL_TIM_Base_MspInit+0xbc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10b      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_TIM_Base_MspInit+0xb4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_TIM_MspPostInit+0x14c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d119      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CL_Pin|PWM_CH_Pin;
 8001a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2302      	movs	r3, #2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4841      	ldr	r0, [pc, #260]	; (8001ba8 <HAL_TIM_MspPostInit+0x154>)
 8001aa2:	f001 fa37 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aa6:	e077      	b.n	8001b98 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d143      	bne.n	8001b3a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a35      	ldr	r2, [pc, #212]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 8001ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4619      	mov	r1, r3
 8001af6:	482c      	ldr	r0, [pc, #176]	; (8001ba8 <HAL_TIM_MspPostInit+0x154>)
 8001af8:	f001 fa0c 	bl	8002f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AL_Pin;
 8001afc:	2308      	movs	r3, #8
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2302      	movs	r3, #2
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AL_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0318 	add.w	r3, r7, #24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4827      	ldr	r0, [pc, #156]	; (8001bac <HAL_TIM_MspPostInit+0x158>)
 8001b10:	f001 fa00 	bl	8002f14 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_TIM_MspPostInit+0x15c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_TIM_MspPostInit+0x15c>)
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	6053      	str	r3, [r2, #4]
}
 8001b38:	e02e      	b.n	8001b98 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_TIM_MspPostInit+0x160>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d129      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_TIM_MspPostInit+0x150>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_Pin|PWM_BL_Pin;
 8001b5c:	2330      	movs	r3, #48	; 0x30
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2302      	movs	r3, #2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <HAL_TIM_MspPostInit+0x158>)
 8001b70:	f001 f9d0 	bl	8002f14 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_TIM_MspPostInit+0x15c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_TIM_MspPostInit+0x15c>)
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	6053      	str	r3, [r2, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	; 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_UART_MspInit+0x150>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f040 8092 	bne.w	8001cfe <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6193      	str	r3, [r2, #24]
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	483c      	ldr	r0, [pc, #240]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001c1e:	f001 f979 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4836      	ldr	r0, [pc, #216]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001c36:	f001 f96d 	bl	8002f14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_UART_MspInit+0x15c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_UART_MspInit+0x15c>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_UART_MspInit+0x164>)
 8001c5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c86:	4824      	ldr	r0, [pc, #144]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c88:	f000 fea6 	bl	80029d8 <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001c92:	f7ff fd7d 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_UART_MspInit+0x16c>)
 8001ca6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001caa:	2210      	movs	r2, #16
 8001cac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cd2:	4813      	ldr	r0, [pc, #76]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cd4:	f000 fe80 	bl	80029d8 <HAL_DMA_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001cde:	f7ff fd57 	bl	8001790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2025      	movs	r0, #37	; 0x25
 8001cf4:	f000 fe39 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf8:	2025      	movs	r0, #37	; 0x25
 8001cfa:	f000 fe52 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40010000 	.word	0x40010000
 8001d18:	200011e0 	.word	0x200011e0
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	2000116c 	.word	0x2000116c
 8001d24:	40020044 	.word	0x40020044

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <MemManage_Handler+0x4>

08001d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <BusFault_Handler+0x4>

08001d46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <UsageFault_Handler+0x4>

08001d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f8d4 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA1_Channel1_IRQHandler+0x10>)
 8001d82:	f000 ff93 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001268 	.word	0x20001268

08001d90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Channel4_IRQHandler+0x10>)
 8001d96:	f000 ff89 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000116c 	.word	0x2000116c

08001da4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel5_IRQHandler+0x10>)
 8001daa:	f000 ff7f 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200011e0 	.word	0x200011e0

08001db8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM1_UP_IRQHandler+0x10>)
 8001dbe:	f002 fad7 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200012ac 	.word	0x200012ac

08001dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USART1_IRQHandler+0x10>)
 8001dd2:	f003 f9c9 	bl	8005168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20001224 	.word	0x20001224

08001de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <SystemInit+0x5c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <SystemInit+0x5c>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <SystemInit+0x5c>)
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4911      	ldr	r1, [pc, #68]	; (8001e3c <SystemInit+0x5c>)
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <SystemInit+0x60>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <SystemInit+0x5c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <SystemInit+0x5c>)
 8001e02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <SystemInit+0x5c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SystemInit+0x5c>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <SystemInit+0x5c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <SystemInit+0x5c>)
 8001e1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SystemInit+0x5c>)
 8001e26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SystemInit+0x64>)
 8001e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e32:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	f8ff0000 	.word	0xf8ff0000
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e4a:	e003      	b.n	8001e54 <LoopCopyDataInit>

08001e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e52:	3104      	adds	r1, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e5c:	d3f6      	bcc.n	8001e4c <CopyDataInit>
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e60:	e002      	b.n	8001e68 <LoopFillZerobss>

08001e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e64:	f842 3b04 	str.w	r3, [r2], #4

08001e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e6c:	d3f9      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e6e:	f7ff ffb7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f003 fe91 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e76:	f7ff f86f 	bl	8000f58 <main>
  bx lr
 8001e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8001e7c:	08005c54 	.word	0x08005c54
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e84:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8001e88:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8001e8c:	20001398 	.word	0x20001398

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_Init+0x28>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_Init+0x28>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 fd55 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f808 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fc74 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x54>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x58>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fd6d 	bl	80029be <HAL_SYSTICK_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00e      	b.n	8001f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d80a      	bhi.n	8001f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 fd35 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_InitTick+0x5c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000010 	.word	0x20000010
 8001f18:	20000018 	.word	0x20000018
 8001f1c:	20000014 	.word	0x20000014

08001f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x1c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_IncTick+0x20>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_IncTick+0x20>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000018 	.word	0x20000018
 8001f40:	20001394 	.word	0x20001394

08001f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_GetTick+0x10>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20001394 	.word	0x20001394

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffe0 	bl	8001f44 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000018 	.word	0x20000018

08001fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0be      	b.n	8002140 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc0e 	bl	8001800 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fb41 	bl	800266c <ADC_ConversionStop_Disable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8099 	bne.w	800212e <HAL_ADC_Init+0x18e>
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8095 	bne.w	800212e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200c:	f023 0302 	bic.w	r3, r3, #2
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002020:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7b1b      	ldrb	r3, [r3, #12]
 8002026:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002028:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4313      	orrs	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002038:	d003      	beq.n	8002042 <HAL_ADC_Init+0xa2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_ADC_Init+0xa8>
 8002042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002046:	e000      	b.n	800204a <HAL_ADC_Init+0xaa>
 8002048:	2300      	movs	r3, #0
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7d1b      	ldrb	r3, [r3, #20]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d119      	bne.n	800208c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7b1b      	ldrb	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	3b01      	subs	r3, #1
 8002066:	035a      	lsls	r2, r3, #13
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e00b      	b.n	800208c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	430a      	orrs	r2, r1
 800209e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_ADC_Init+0x1a8>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020bc:	d003      	beq.n	80020c6 <HAL_ADC_Init+0x126>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d104      	bne.n	80020d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	051b      	lsls	r3, r3, #20
 80020ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_ADC_Init+0x1ac>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10b      	bne.n	800210c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800210a:	e018      	b.n	800213e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f023 0312 	bic.w	r3, r3, #18
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800212c:	e007      	b.n	800213e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800213e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	ffe1f7fd 	.word	0xffe1f7fd
 800214c:	ff1f0efe 	.word	0xff1f0efe

08002150 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a64      	ldr	r2, [pc, #400]	; (80022f8 <HAL_ADC_Start_DMA+0x1a8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_ADC_Start_DMA+0x24>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a63      	ldr	r2, [pc, #396]	; (80022fc <HAL_ADC_Start_DMA+0x1ac>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start_DMA+0x32>
 8002174:	4b60      	ldr	r3, [pc, #384]	; (80022f8 <HAL_ADC_Start_DMA+0x1a8>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 80b3 	bne.w	80022e8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_Start_DMA+0x40>
 800218c:	2302      	movs	r3, #2
 800218e:	e0ae      	b.n	80022ee <HAL_ADC_Start_DMA+0x19e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fa0d 	bl	80025b8 <ADC_Enable>
 800219e:	4603      	mov	r3, r0
 80021a0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 809a 	bne.w	80022de <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_ADC_Start_DMA+0x1ac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_Start_DMA+0x84>
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_ADC_Start_DMA+0x1a8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d026      	beq.n	800223c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021fe:	e01d      	b.n	800223c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a39      	ldr	r2, [pc, #228]	; (80022f8 <HAL_ADC_Start_DMA+0x1a8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_ADC_Start_DMA+0xd0>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a38      	ldr	r2, [pc, #224]	; (80022fc <HAL_ADC_Start_DMA+0x1ac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d10d      	bne.n	800223c <HAL_ADC_Start_DMA+0xec>
 8002220:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_ADC_Start_DMA+0x1a8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002234:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	f023 0206 	bic.w	r2, r3, #6
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
 8002254:	e002      	b.n	800225c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a25      	ldr	r2, [pc, #148]	; (8002300 <HAL_ADC_Start_DMA+0x1b0>)
 800226a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <HAL_ADC_Start_DMA+0x1b4>)
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_ADC_Start_DMA+0x1b8>)
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0202 	mvn.w	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a18      	ldr	r0, [r3, #32]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	334c      	adds	r3, #76	; 0x4c
 80022a0:	4619      	mov	r1, r3
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f000 fbf1 	bl	8002a8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022b8:	d108      	bne.n	80022cc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022c8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022ca:	e00f      	b.n	80022ec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022da:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022dc:	e006      	b.n	80022ec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80022e6:	e001      	b.n	80022ec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40012400 	.word	0x40012400
 80022fc:	40012800 	.word	0x40012800
 8002300:	080026ef 	.word	0x080026ef
 8002304:	0800276b 	.word	0x0800276b
 8002308:	08002787 	.word	0x08002787

0800230c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Stop_DMA+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e039      	b.n	800239a <HAL_ADC_Stop_DMA+0x8e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f99c 	bl	800266c <ADC_ConversionStop_Disable>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d128      	bne.n	8002390 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002356:	2b02      	cmp	r3, #2
 8002358:	d11a      	bne.n	8002390 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fbf3 	bl	8002b4a <HAL_DMA_Abort>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
 8002382:	e005      	b.n	8002390 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x20>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0dc      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x1da>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d81c      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b05      	subs	r3, #5
 800240a:	221f      	movs	r2, #31
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b05      	subs	r3, #5
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	e03c      	b.n	80024ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d81c      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	; 0x23
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b23      	subs	r3, #35	; 0x23
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
 8002472:	e01b      	b.n	80024ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b41      	subs	r3, #65	; 0x41
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b41      	subs	r3, #65	; 0x41
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d91c      	bls.n	80024ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	3b1e      	subs	r3, #30
 80024c6:	2207      	movs	r2, #7
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4019      	ands	r1, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6898      	ldr	r0, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	3b1e      	subs	r3, #30
 80024e0:	fa00 f203 	lsl.w	r2, r0, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	e019      	b.n	8002522 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	2207      	movs	r2, #7
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6898      	ldr	r0, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b10      	cmp	r3, #16
 8002528:	d003      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800252e:	2b11      	cmp	r3, #17
 8002530:	d132      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d125      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d126      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002558:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d11a      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9a      	lsrs	r2, r3, #18
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_ConfigChannel+0x1b2>
 8002586:	e007      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012400 	.word	0x40012400
 80025b0:	20000010 	.word	0x20000010
 80025b4:	431bde83 	.word	0x431bde83

080025b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d040      	beq.n	8002658 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <ADC_Enable+0xac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <ADC_Enable+0xb0>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f4:	e002      	b.n	80025fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002602:	f7ff fc9f 	bl	8001f44 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002608:	e01f      	b.n	800264a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260a:	f7ff fc9b 	bl	8001f44 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d918      	bls.n	800264a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d011      	beq.n	800264a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e007      	b.n	800265a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d1d8      	bne.n	800260a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000010 	.word	0x20000010
 8002668:	431bde83 	.word	0x431bde83

0800266c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12e      	bne.n	80026e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002696:	f7ff fc55 	bl	8001f44 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800269c:	e01b      	b.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269e:	f7ff fc51 	bl	8001f44 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d914      	bls.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10d      	bne.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e007      	b.n	80026e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d0dc      	beq.n	800269e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002704:	2b00      	cmp	r3, #0
 8002706:	d127      	bne.n	8002758 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800271e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002722:	d115      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7fe f93d 	bl	80009d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002756:	e004      	b.n	8002762 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe12 	bl	80023a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe01 	bl	80023b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <__NVIC_EnableIRQ+0x34>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff90 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff2d 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff42 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff90 	bl	80028ac <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5f 	bl	8002858 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff35 	bl	8002820 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e043      	b.n	8002a76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_DMA_Init+0xa8>)
 80029f6:	4413      	add	r3, r2
 80029f8:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_DMA_Init+0xac>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_DMA_Init+0xb0>)
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	bffdfff8 	.word	0xbffdfff8
 8002a84:	cccccccd 	.word	0xcccccccd
 8002a88:	40020000 	.word	0x40020000

08002a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x20>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e04a      	b.n	8002b42 <HAL_DMA_Start_IT+0xb6>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d13a      	bne.n	8002b34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f9e8 	bl	8002eb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 020e 	orr.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e00f      	b.n	8002b22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0204 	bic.w	r2, r2, #4
 8002b10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 020a 	orr.w	r2, r2, #10
 8002b20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e005      	b.n	8002b40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2204      	movs	r2, #4
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e020      	b.n	8002bb4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 020e 	bic.w	r2, r2, #14
 8002b80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d005      	beq.n	8002be2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e051      	b.n	8002c86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 020e 	bic.w	r2, r2, #14
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_Abort_IT+0xd0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d029      	beq.n	8002c60 <HAL_DMA_Abort_IT+0xa0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a20      	ldr	r2, [pc, #128]	; (8002c94 <HAL_DMA_Abort_IT+0xd4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d022      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x9c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_DMA_Abort_IT+0xd8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d01a      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x96>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_DMA_Abort_IT+0xdc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d012      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x90>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_DMA_Abort_IT+0xe0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00a      	beq.n	8002c4a <HAL_DMA_Abort_IT+0x8a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_DMA_Abort_IT+0xe4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d102      	bne.n	8002c44 <HAL_DMA_Abort_IT+0x84>
 8002c3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c42:	e00e      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c48:	e00b      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c4e:	e008      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	e005      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c5a:	e002      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	e000      	b.n	8002c62 <HAL_DMA_Abort_IT+0xa2>
 8002c60:	2301      	movs	r3, #1
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_DMA_Abort_IT+0xe8>)
 8002c64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
    } 
  }
  return status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40020008 	.word	0x40020008
 8002c94:	4002001c 	.word	0x4002001c
 8002c98:	40020030 	.word	0x40020030
 8002c9c:	40020044 	.word	0x40020044
 8002ca0:	40020058 	.word	0x40020058
 8002ca4:	4002006c 	.word	0x4002006c
 8002ca8:	40020000 	.word	0x40020000

08002cac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2204      	movs	r2, #4
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d04f      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc8>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0204 	bic.w	r2, r2, #4
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_DMA_IRQHandler+0x1f0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d029      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xaa>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a63      	ldr	r2, [pc, #396]	; (8002ea4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xa4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a62      	ldr	r2, [pc, #392]	; (8002ea8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d012      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x9e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a60      	ldr	r2, [pc, #384]	; (8002eac <HAL_DMA_IRQHandler+0x200>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00a      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x98>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5f      	ldr	r2, [pc, #380]	; (8002eb0 <HAL_DMA_IRQHandler+0x204>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d102      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x92>
 8002d38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d3c:	e00e      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d42:	e00b      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d48:	e008      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4e:	e005      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d54:	e002      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	e000      	b.n	8002d5c <HAL_DMA_IRQHandler+0xb0>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <HAL_DMA_IRQHandler+0x208>)
 8002d5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8094 	beq.w	8002e92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d72:	e08e      	b.n	8002e92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2202      	movs	r2, #2
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d056      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x186>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d051      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020a 	bic.w	r2, r2, #10
 8002daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <HAL_DMA_IRQHandler+0x1f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d029      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x166>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a37      	ldr	r2, [pc, #220]	; (8002ea0 <HAL_DMA_IRQHandler+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x162>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_DMA_IRQHandler+0x1f8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01a      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x15c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a34      	ldr	r2, [pc, #208]	; (8002ea8 <HAL_DMA_IRQHandler+0x1fc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d012      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x156>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_DMA_IRQHandler+0x200>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00a      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x150>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a31      	ldr	r2, [pc, #196]	; (8002eb0 <HAL_DMA_IRQHandler+0x204>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_DMA_IRQHandler+0x14a>
 8002df0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df4:	e00e      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dfa:	e00b      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e00:	e008      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e06:	e005      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	e002      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_IRQHandler+0x168>
 8002e12:	2302      	movs	r3, #2
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_DMA_IRQHandler+0x208>)
 8002e16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d034      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e30:	e02f      	b.n	8002e92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2208      	movs	r2, #8
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x1e8>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d023      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 020e 	bic.w	r2, r2, #14
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
    }
  }
  return;
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
}
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40020008 	.word	0x40020008
 8002ea0:	4002001c 	.word	0x4002001c
 8002ea4:	40020030 	.word	0x40020030
 8002ea8:	40020044 	.word	0x40020044
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	4002006c 	.word	0x4002006c
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d108      	bne.n	8002ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ef6:	e007      	b.n	8002f08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b08b      	sub	sp, #44	; 0x2c
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f26:	e169      	b.n	80031fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f28:	2201      	movs	r2, #1
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 8158 	bne.w	80031f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a9a      	ldr	r2, [pc, #616]	; (80031b4 <HAL_GPIO_Init+0x2a0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d05e      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f50:	4a98      	ldr	r2, [pc, #608]	; (80031b4 <HAL_GPIO_Init+0x2a0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d875      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f56:	4a98      	ldr	r2, [pc, #608]	; (80031b8 <HAL_GPIO_Init+0x2a4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d058      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f5c:	4a96      	ldr	r2, [pc, #600]	; (80031b8 <HAL_GPIO_Init+0x2a4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d86f      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f62:	4a96      	ldr	r2, [pc, #600]	; (80031bc <HAL_GPIO_Init+0x2a8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d052      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f68:	4a94      	ldr	r2, [pc, #592]	; (80031bc <HAL_GPIO_Init+0x2a8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d869      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f6e:	4a94      	ldr	r2, [pc, #592]	; (80031c0 <HAL_GPIO_Init+0x2ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d04c      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f74:	4a92      	ldr	r2, [pc, #584]	; (80031c0 <HAL_GPIO_Init+0x2ac>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d863      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f7a:	4a92      	ldr	r2, [pc, #584]	; (80031c4 <HAL_GPIO_Init+0x2b0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d046      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f80:	4a90      	ldr	r2, [pc, #576]	; (80031c4 <HAL_GPIO_Init+0x2b0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d85d      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f86:	2b12      	cmp	r3, #18
 8002f88:	d82a      	bhi.n	8002fe0 <HAL_GPIO_Init+0xcc>
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d859      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <HAL_GPIO_Init+0x80>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	0800300f 	.word	0x0800300f
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	08002ffb 	.word	0x08002ffb
 8002fa0:	0800303d 	.word	0x0800303d
 8002fa4:	08003043 	.word	0x08003043
 8002fa8:	08003043 	.word	0x08003043
 8002fac:	08003043 	.word	0x08003043
 8002fb0:	08003043 	.word	0x08003043
 8002fb4:	08003043 	.word	0x08003043
 8002fb8:	08003043 	.word	0x08003043
 8002fbc:	08003043 	.word	0x08003043
 8002fc0:	08003043 	.word	0x08003043
 8002fc4:	08003043 	.word	0x08003043
 8002fc8:	08003043 	.word	0x08003043
 8002fcc:	08003043 	.word	0x08003043
 8002fd0:	08003043 	.word	0x08003043
 8002fd4:	08003043 	.word	0x08003043
 8002fd8:	08002ff1 	.word	0x08002ff1
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	4a79      	ldr	r2, [pc, #484]	; (80031c8 <HAL_GPIO_Init+0x2b4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fe6:	e02c      	b.n	8003042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	623b      	str	r3, [r7, #32]
          break;
 8002fee:	e029      	b.n	8003044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	623b      	str	r3, [r7, #32]
          break;
 8002ff8:	e024      	b.n	8003044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	3308      	adds	r3, #8
 8003000:	623b      	str	r3, [r7, #32]
          break;
 8003002:	e01f      	b.n	8003044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	330c      	adds	r3, #12
 800300a:	623b      	str	r3, [r7, #32]
          break;
 800300c:	e01a      	b.n	8003044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003016:	2304      	movs	r3, #4
 8003018:	623b      	str	r3, [r7, #32]
          break;
 800301a:	e013      	b.n	8003044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003024:	2308      	movs	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	611a      	str	r2, [r3, #16]
          break;
 800302e:	e009      	b.n	8003044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003030:	2308      	movs	r3, #8
 8003032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	615a      	str	r2, [r3, #20]
          break;
 800303a:	e003      	b.n	8003044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
          break;
 8003040:	e000      	b.n	8003044 <HAL_GPIO_Init+0x130>
          break;
 8003042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d801      	bhi.n	800304e <HAL_GPIO_Init+0x13a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	e001      	b.n	8003052 <HAL_GPIO_Init+0x13e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d802      	bhi.n	8003060 <HAL_GPIO_Init+0x14c>
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	e002      	b.n	8003066 <HAL_GPIO_Init+0x152>
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	3b08      	subs	r3, #8
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	210f      	movs	r1, #15
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	6a39      	ldr	r1, [r7, #32]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	431a      	orrs	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80b1 	beq.w	80031f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003094:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2bc>)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3302      	adds	r3, #2
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_GPIO_Init+0x2c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_GPIO_Init+0x1ec>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_GPIO_Init+0x2c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00d      	beq.n	80030fc <HAL_GPIO_Init+0x1e8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_GPIO_Init+0x2c8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <HAL_GPIO_Init+0x1e4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <HAL_GPIO_Init+0x2cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_GPIO_Init+0x1e0>
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030f4:	2304      	movs	r3, #4
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 8003100:	2300      	movs	r3, #0
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003112:	492f      	ldr	r1, [pc, #188]	; (80031d0 <HAL_GPIO_Init+0x2bc>)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	492c      	ldr	r1, [pc, #176]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	4928      	ldr	r1, [pc, #160]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	491e      	ldr	r1, [pc, #120]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800316c:	4013      	ands	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	4918      	ldr	r1, [pc, #96]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	43db      	mvns	r3, r3
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003194:	4013      	ands	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d021      	beq.n	80031e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
 80031b0:	e021      	b.n	80031f6 <HAL_GPIO_Init+0x2e2>
 80031b2:	bf00      	nop
 80031b4:	10320000 	.word	0x10320000
 80031b8:	10310000 	.word	0x10310000
 80031bc:	10220000 	.word	0x10220000
 80031c0:	10210000 	.word	0x10210000
 80031c4:	10120000 	.word	0x10120000
 80031c8:	10110000 	.word	0x10110000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010800 	.word	0x40010800
 80031d8:	40010c00 	.word	0x40010c00
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	4909      	ldr	r1, [pc, #36]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3301      	adds	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	f47f ae8e 	bne.w	8002f28 <HAL_GPIO_Init+0x14>
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	372c      	adds	r7, #44	; 0x2c
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e001      	b.n	800323e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	807b      	strh	r3, [r7, #2]
 8003256:	4613      	mov	r3, r2
 8003258:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800325a:	787b      	ldrb	r3, [r7, #1]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003266:	e003      	b.n	8003270 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	611a      	str	r2, [r3, #16]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e26c      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d112      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
 80032b4:	4b8c      	ldr	r3, [pc, #560]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x12c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e246      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x76>
 80032e4:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7f      	ldr	r2, [pc, #508]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x98>
 80032fa:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a77      	ldr	r2, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xbc>
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003338:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fdf4 	bl	8001f44 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fdf0 	bl	8001f44 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1fa      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fde0 	bl	8001f44 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe fddc 	bl	8001f44 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1e6      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x10c>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
 80033ce:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1ba      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4939      	ldr	r1, [pc, #228]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <HAL_RCC_OscConfig+0x270>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fd95 	bl	8001f44 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe fd91 	bl	8001f44 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e19b      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4927      	ldr	r1, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_RCC_OscConfig+0x270>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fd74 	bl	8001f44 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fe fd70 	bl	8001f44 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e17a      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03a      	beq.n	8003500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <HAL_RCC_OscConfig+0x274>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe fd54 	bl	8001f44 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fd50 	bl	8001f44 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e15a      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034be:	2001      	movs	r0, #1
 80034c0:	f000 fad8 	bl	8003a74 <RCC_Delay>
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe fd3a 	bl	8001f44 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe fd36 	bl	8001f44 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e140      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	42420000 	.word	0x42420000
 80034f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b9e      	ldr	r3, [pc, #632]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e9      	bne.n	80034d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b97      	ldr	r3, [pc, #604]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b94      	ldr	r3, [pc, #592]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a93      	ldr	r2, [pc, #588]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b8e      	ldr	r3, [pc, #568]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a8a      	ldr	r2, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe fcf7 	bl	8001f44 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe fcf3 	bl	8001f44 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0fd      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_OscConfig+0x4f8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x312>
 8003580:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x334>
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a72      	ldr	r2, [pc, #456]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x356>
 80035b8:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a69      	ldr	r2, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fca7 	bl	8001f44 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fca3 	bl	8001f44 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0ab      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x37e>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe fc91 	bl	8001f44 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe fc8d 	bl	8001f44 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e095      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8081 	beq.w	8003766 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d061      	beq.n	8003734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d146      	bne.n	8003706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe fc61 	bl	8001f44 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe fc5d 	bl	8001f44 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e067      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	492d      	ldr	r1, [pc, #180]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a19      	ldr	r1, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	430b      	orrs	r3, r1
 80036d2:	4927      	ldr	r1, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fc31 	bl	8001f44 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe fc2d 	bl	8001f44 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e037      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46a>
 8003704:	e02f      	b.n	8003766 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_RCC_OscConfig+0x4fc>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fc1a 	bl	8001f44 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fc16 	bl	8001f44 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e020      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x498>
 8003732:	e018      	b.n	8003766 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e013      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	42420060 	.word	0x42420060

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d0      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4965      	ldr	r1, [pc, #404]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d040      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e073      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06b      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4936      	ldr	r1, [pc, #216]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe fb6a 	bl	8001f44 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fb66 	bl	8001f44 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e053      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d210      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 0207 	bic.w	r2, r3, #7
 80038b2:	4922      	ldr	r1, [pc, #136]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1cc>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fac8 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000
 8003940:	40021000 	.word	0x40021000
 8003944:	08005c34 	.word	0x08005c34
 8003948:	20000010 	.word	0x20000010
 800394c:	20000014 	.word	0x20000014

08003950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	b490      	push	{r4, r7}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003958:	1d3c      	adds	r4, r7, #4
 800395a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800395c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003960:	f240 2301 	movw	r3, #513	; 0x201
 8003964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 800398a:	2b08      	cmp	r3, #8
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x46>
 800398e:	e02d      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003992:	623b      	str	r3, [r7, #32]
      break;
 8003994:	e02d      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039a2:	4413      	add	r3, r2
 80039a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0c5b      	lsrs	r3, r3, #17
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c2:	4413      	add	r3, r2
 80039c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ce:	fb02 f203 	mul.w	r2, r2, r3
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e004      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	623b      	str	r3, [r7, #32]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ee:	623b      	str	r3, [r7, #32]
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	6a3b      	ldr	r3, [r7, #32]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc90      	pop	{r4, r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	08005c24 	.word	0x08005c24
 8003a04:	40021000 	.word	0x40021000
 8003a08:	007a1200 	.word	0x007a1200
 8003a0c:	003d0900 	.word	0x003d0900

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000010 	.word	0x20000010

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff2 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08005c44 	.word	0x08005c44

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffde 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08005c44 	.word	0x08005c44

08003a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <RCC_Delay+0x34>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <RCC_Delay+0x38>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0a5b      	lsrs	r3, r3, #9
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a90:	bf00      	nop
  }
  while (Delay --);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f9      	bne.n	8003a90 <RCC_Delay+0x1c>
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000010 	.word	0x20000010
 8003aac:	10624dd3 	.word	0x10624dd3

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d07d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4b4f      	ldr	r3, [pc, #316]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a4b      	ldr	r2, [pc, #300]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b49      	ldr	r3, [pc, #292]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d118      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a42      	ldr	r2, [pc, #264]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b10:	f7fe fa18 	bl	8001f44 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe fa14 	bl	8001f44 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e06d      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d027      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b54:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f9e3 	bl	8001f44 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe f9df 	bl	8001f44 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e036      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4917      	ldr	r1, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	490b      	ldr	r1, [pc, #44]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4904      	ldr	r1, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
 8003c18:	42420440 	.word	0x42420440

08003c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e076      	b.n	8003d1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d009      	beq.n	8003c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	e005      	b.n	8003c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fe46 	bl	8001900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	ea42 0103 	orr.w	r1, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	0c1a      	lsrs	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f002 0204 	and.w	r2, r2, #4
 8003cfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fe22 	bl	8001994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fdb2 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e032      	b.n	8003e42 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_TIM_Base_Start+0x88>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_TIM_Base_Start+0x8c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start+0x48>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_TIM_Base_Start+0x90>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d010      	beq.n	8003e40 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e007      	b.n	8003e40 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800

08003e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e041      	b.n	8003eee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f839 	bl	8003ef6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fd18 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x24>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e022      	b.n	8003f72 <HAL_TIM_PWM_Start+0x6a>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d109      	bne.n	8003f46 <HAL_TIM_PWM_Start+0x3e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	bf14      	ite	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	2300      	moveq	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	e015      	b.n	8003f72 <HAL_TIM_PWM_Start+0x6a>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d109      	bne.n	8003f60 <HAL_TIM_PWM_Start+0x58>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e008      	b.n	8003f72 <HAL_TIM_PWM_Start+0x6a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e05e      	b.n	8004038 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x82>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xaa>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x92>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xaa>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xa2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 ff06 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_TIM_PWM_Start+0x138>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d107      	bne.n	8003fda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_TIM_PWM_Start+0x138>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIM_PWM_Start+0xfa>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d009      	beq.n	8004002 <HAL_TIM_PWM_Start+0xfa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_TIM_PWM_Start+0x13c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIM_PWM_Start+0xfa>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a12      	ldr	r2, [pc, #72]	; (8004048 <HAL_TIM_PWM_Start+0x140>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d010      	beq.n	8004036 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	e007      	b.n	8004036 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800

0800404c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start_IT+0x24>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e022      	b.n	80040b6 <HAL_TIM_PWM_Start_IT+0x6a>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d109      	bne.n	800408a <HAL_TIM_PWM_Start_IT+0x3e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e015      	b.n	80040b6 <HAL_TIM_PWM_Start_IT+0x6a>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_PWM_Start_IT+0x58>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_PWM_Start_IT+0x6a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0a4      	b.n	8004208 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start_IT+0x82>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start_IT+0x92>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start_IT+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_PWM_Start_IT+0xaa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d841      	bhi.n	8004180 <HAL_TIM_PWM_Start_IT+0x134>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_TIM_PWM_Start_IT+0xb8>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004139 	.word	0x08004139
 8004108:	08004181 	.word	0x08004181
 800410c:	08004181 	.word	0x08004181
 8004110:	08004181 	.word	0x08004181
 8004114:	0800414b 	.word	0x0800414b
 8004118:	08004181 	.word	0x08004181
 800411c:	08004181 	.word	0x08004181
 8004120:	08004181 	.word	0x08004181
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004181 	.word	0x08004181
 800412c:	08004181 	.word	0x08004181
 8004130:	08004181 	.word	0x08004181
 8004134:	0800416f 	.word	0x0800416f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0202 	orr.w	r2, r2, #2
 8004146:	60da      	str	r2, [r3, #12]
      break;
 8004148:	e01b      	b.n	8004182 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0204 	orr.w	r2, r2, #4
 8004158:	60da      	str	r2, [r3, #12]
      break;
 800415a:	e012      	b.n	8004182 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0208 	orr.w	r2, r2, #8
 800416a:	60da      	str	r2, [r3, #12]
      break;
 800416c:	e009      	b.n	8004182 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0210 	orr.w	r2, r2, #16
 800417c:	60da      	str	r2, [r3, #12]
      break;
 800417e:	e000      	b.n	8004182 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004180:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fe1e 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d107      	bne.n	80041aa <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIM_PWM_Start_IT+0x186>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d009      	beq.n	80041d2 <HAL_TIM_PWM_Start_IT+0x186>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIM_PWM_Start_IT+0x186>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d010      	beq.n	8004206 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f4:	e007      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800

0800421c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d841      	bhi.n	80042b0 <HAL_TIM_PWM_Stop_IT+0x94>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_TIM_PWM_Stop_IT+0x18>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004269 	.word	0x08004269
 8004238:	080042b1 	.word	0x080042b1
 800423c:	080042b1 	.word	0x080042b1
 8004240:	080042b1 	.word	0x080042b1
 8004244:	0800427b 	.word	0x0800427b
 8004248:	080042b1 	.word	0x080042b1
 800424c:	080042b1 	.word	0x080042b1
 8004250:	080042b1 	.word	0x080042b1
 8004254:	0800428d 	.word	0x0800428d
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042b1 	.word	0x080042b1
 8004260:	080042b1 	.word	0x080042b1
 8004264:	0800429f 	.word	0x0800429f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0202 	bic.w	r2, r2, #2
 8004276:	60da      	str	r2, [r3, #12]
      break;
 8004278:	e01b      	b.n	80042b2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0204 	bic.w	r2, r2, #4
 8004288:	60da      	str	r2, [r3, #12]
      break;
 800428a:	e012      	b.n	80042b2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0208 	bic.w	r2, r2, #8
 800429a:	60da      	str	r2, [r3, #12]
      break;
 800429c:	e009      	b.n	80042b2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0210 	bic.w	r2, r2, #16
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e000      	b.n	80042b2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80042b0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fd86 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_TIM_PWM_Stop_IT+0x150>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d117      	bne.n	80042fa <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_TIM_PWM_Stop_IT+0xde>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	f240 4344 	movw	r3, #1092	; 0x444
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_PWM_Stop_IT+0xde>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	f241 1311 	movw	r3, #4369	; 0x1111
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_TIM_PWM_Stop_IT+0x10e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	f240 4344 	movw	r3, #1092	; 0x444
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_TIM_PWM_Stop_IT+0x10e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Stop_IT+0x11e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	e013      	b.n	8004362 <HAL_TIM_PWM_Stop_IT+0x146>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d104      	bne.n	800434a <HAL_TIM_PWM_Stop_IT+0x12e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	e00b      	b.n	8004362 <HAL_TIM_PWM_Stop_IT+0x146>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Stop_IT+0x13e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004358:	e003      	b.n	8004362 <HAL_TIM_PWM_Stop_IT+0x146>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40012c00 	.word	0x40012c00

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa78 	bl	80048a8 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa6b 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa7a 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa4e 	bl	80048a8 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa41 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa50 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa24 	bl	80048a8 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa17 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa26 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9fa 	bl	80048a8 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9ed 	bl	8004896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f9fc 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9c8 	bl	8004884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fd32 	bl	8004f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fce0 	bl	8000f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fcfd 	bl	8004f72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ac      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	f200 809f 	bhi.w	80046e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	080046e9 	.word	0x080046e9
 80045b8:	080046e9 	.word	0x080046e9
 80045bc:	080046e9 	.word	0x080046e9
 80045c0:	08004625 	.word	0x08004625
 80045c4:	080046e9 	.word	0x080046e9
 80045c8:	080046e9 	.word	0x080046e9
 80045cc:	080046e9 	.word	0x080046e9
 80045d0:	08004667 	.word	0x08004667
 80045d4:	080046e9 	.word	0x080046e9
 80045d8:	080046e9 	.word	0x080046e9
 80045dc:	080046e9 	.word	0x080046e9
 80045e0:	080046a7 	.word	0x080046a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f9d0 	bl	8004990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0208 	orr.w	r2, r2, #8
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0204 	bic.w	r2, r2, #4
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
      break;
 8004622:	e062      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa16 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
      break;
 8004664:	e041      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa5f 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0204 	bic.w	r2, r2, #4
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	61da      	str	r2, [r3, #28]
      break;
 80046a4:	e021      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 faa9 	bl	8004c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	61da      	str	r2, [r3, #28]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b3      	b.n	800487c <HAL_TIM_ConfigClockSource+0x180>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd0>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8085 	beq.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa2>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x116>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x136>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 faee 	bl	8004d8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04e      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fad7 	bl	8004d8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fa4e 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 faa5 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004810:	e02b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fa6c 	bl	8004cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa95 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004830:	e01b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fa2e 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa85 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004850:	e00b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fa7c 	bl	8004d5a <TIM_ITRx_SetConfig>
        break;
 8004862:	e002      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a29      	ldr	r2, [pc, #164]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a26      	ldr	r2, [pc, #152]	; (8004988 <TIM_Base_SetConfig+0xbc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a25      	ldr	r2, [pc, #148]	; (800498c <TIM_Base_SetConfig+0xc0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <TIM_Base_SetConfig+0xbc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <TIM_Base_SetConfig+0xc0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	615a      	str	r2, [r3, #20]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800

08004990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0302 	bic.w	r3, r3, #2
 80049d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <TIM_OC1_SetConfig+0xc8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <TIM_OC1_SetConfig+0xc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0210 	bic.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <TIM_OC2_SetConfig+0xd0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10d      	bne.n	8004ad8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <TIM_OC2_SetConfig+0xd0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d113      	bne.n	8004b08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00

08004c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <TIM_OC4_SetConfig+0x98>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	40012c00 	.word	0x40012c00

08004ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f023 0210 	bic.w	r2, r3, #16
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	031b      	lsls	r3, r3, #12
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f043 0307 	orr.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	609a      	str	r2, [r3, #8]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e046      	b.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d009      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800

08004ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e03d      	b.n	8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e03f      	b.n	8005028 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fc fdfb 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2224      	movs	r2, #36	; 0x24
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fd4e 	bl	8005a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800500e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b20      	cmp	r3, #32
 8005048:	d153      	bne.n	80050f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_Transmit_DMA+0x26>
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e04c      	b.n	80050f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_UART_Transmit_DMA+0x38>
 8005064:	2302      	movs	r3, #2
 8005066:	e045      	b.n	80050f4 <HAL_UART_Transmit_DMA+0xc4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_UART_Transmit_DMA+0xcc>)
 8005096:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <HAL_UART_Transmit_DMA+0xd0>)
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <HAL_UART_Transmit_DMA+0xd4>)
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	2200      	movs	r2, #0
 80050ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	461a      	mov	r2, r3
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	f7fd fce0 	bl	8002a8c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e000      	b.n	80050f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
  }
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800551b 	.word	0x0800551b
 8005100:	0800556d 	.word	0x0800556d
 8005104:	08005655 	.word	0x08005655

08005108 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b20      	cmp	r3, #32
 8005120:	d11d      	bne.n	800515e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Receive_DMA+0x26>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e016      	b.n	8005160 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_UART_Receive_DMA+0x38>
 800513c:	2302      	movs	r3, #2
 800513e:	e00f      	b.n	8005160 <HAL_UART_Receive_DMA+0x58>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	461a      	mov	r2, r3
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fac7 	bl	80056e8 <UART_Start_Receive_DMA>
 800515a:	4603      	mov	r3, r0
 800515c:	e000      	b.n	8005160 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800515e:	2302      	movs	r3, #2
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005188:	2300      	movs	r3, #0
 800518a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_UART_IRQHandler+0x52>
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fbb8 	bl	8005928 <UART_Receive_IT>
      return;
 80051b8:	e17b      	b.n	80054b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80b1 	beq.w	8005324 <HAL_UART_IRQHandler+0x1bc>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_UART_IRQHandler+0x70>
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80a6 	beq.w	8005324 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_UART_IRQHandler+0x90>
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_UART_IRQHandler+0xb0>
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f043 0202 	orr.w	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_UART_IRQHandler+0xd0>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f043 0204 	orr.w	r2, r3, #4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <HAL_UART_IRQHandler+0xfa>
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d104      	bne.n	8005256 <HAL_UART_IRQHandler+0xee>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0208 	orr.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 811e 	beq.w	80054a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_UART_IRQHandler+0x11e>
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb51 	bl	8005928 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <HAL_UART_IRQHandler+0x146>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d031      	beq.n	8005312 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa93 	bl	80057da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d023      	beq.n	800530a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	4a76      	ldr	r2, [pc, #472]	; (80054b8 <HAL_UART_IRQHandler+0x350>)
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd fc6a 	bl	8002bc0 <HAL_DMA_Abort_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e00e      	b.n	8005320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8f5 	bl	80054f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	e00a      	b.n	8005320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8f1 	bl	80054f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	e006      	b.n	8005320 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8ed 	bl	80054f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800531e:	e0c3      	b.n	80054a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005320:	bf00      	nop
    return;
 8005322:	e0c1      	b.n	80054a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	f040 80a1 	bne.w	8005470 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 809b 	beq.w	8005470 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8095 	beq.w	8005470 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04e      	beq.n	8005408 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005374:	8a3b      	ldrh	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8098 	beq.w	80054ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005380:	8a3a      	ldrh	r2, [r7, #16]
 8005382:	429a      	cmp	r2, r3
 8005384:	f080 8092 	bcs.w	80054ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8a3a      	ldrh	r2, [r7, #16]
 800538c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b20      	cmp	r3, #32
 8005396:	d02b      	beq.n	80053f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0210 	bic.w	r2, r2, #16
 80053e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd fbad 	bl	8002b4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f87f 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005406:	e051      	b.n	80054ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d047      	beq.n	80054b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005420:	8a7b      	ldrh	r3, [r7, #18]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d044      	beq.n	80054b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005434:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0210 	bic.w	r2, r2, #16
 8005462:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005464:	8a7b      	ldrh	r3, [r7, #18]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f84b 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800546e:	e01f      	b.n	80054b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_UART_IRQHandler+0x324>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f9e8 	bl	800585a <UART_Transmit_IT>
    return;
 800548a:	e012      	b.n	80054b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_UART_IRQHandler+0x34a>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa29 	bl	80058f8 <UART_EndTransmit_IT>
    return;
 80054a6:	e004      	b.n	80054b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80054b0:	bf00      	nop
  }
}
 80054b2:	3728      	adds	r7, #40	; 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08005833 	.word	0x08005833

080054bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d113      	bne.n	800555e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800555a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800555c:	e002      	b.n	8005564 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ffac 	bl	80054bc <HAL_UART_TxCpltCallback>
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff ffa7 	bl	80054ce <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d12a      	bne.n	80055fa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d107      	bne.n	80055fa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0210 	bic.w	r2, r2, #16
 80055f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d106      	bne.n	8005610 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005606:	4619      	mov	r1, r3
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff ff7b 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800560e:	e002      	b.n	8005616 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7fa fdbd 	bl	8000190 <HAL_UART_RxCpltCallback>
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b01      	cmp	r3, #1
 8005632:	d108      	bne.n	8005646 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff60 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005644:	e002      	b.n	800564c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff4a 	bl	80054e0 <HAL_UART_RxHalfCpltCallback>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b21      	cmp	r3, #33	; 0x21
 8005686:	d108      	bne.n	800569a <UART_DMAError+0x46>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2200      	movs	r2, #0
 8005692:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005694:	68b8      	ldr	r0, [r7, #8]
 8005696:	f000 f88b 	bl	80057b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b22      	cmp	r3, #34	; 0x22
 80056ba:	d108      	bne.n	80056ce <UART_DMAError+0x7a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2200      	movs	r2, #0
 80056c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056c8:	68b8      	ldr	r0, [r7, #8]
 80056ca:	f000 f886 	bl	80057da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0210 	orr.w	r2, r3, #16
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f7ff ff09 	bl	80054f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2222      	movs	r2, #34	; 0x22
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <UART_Start_Receive_DMA+0xbc>)
 8005716:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <UART_Start_Receive_DMA+0xc0>)
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	4a21      	ldr	r2, [pc, #132]	; (80057ac <UART_Start_Receive_DMA+0xc4>)
 8005726:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005730:	f107 0308 	add.w	r3, r7, #8
 8005734:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	f7fd f9a0 	bl	8002a8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005778:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005798:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08005589 	.word	0x08005589
 80057a8:	0800561f 	.word	0x0800561f
 80057ac:	08005655 	.word	0x08005655

080057b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	2b01      	cmp	r3, #1
 8005808:	d107      	bne.n	800581a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0210 	bic.w	r2, r2, #16
 8005818:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff fe50 	bl	80054f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b21      	cmp	r3, #33	; 0x21
 800586c:	d13e      	bne.n	80058ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d114      	bne.n	80058a2 <UART_Transmit_IT+0x48>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]
 80058a0:	e008      	b.n	80058b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6211      	str	r1, [r2, #32]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fdcf 	bl	80054bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b22      	cmp	r3, #34	; 0x22
 800593a:	f040 8099 	bne.w	8005a70 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	d117      	bne.n	8005978 <UART_Receive_IT+0x50>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d113      	bne.n	8005978 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005966:	b29a      	uxth	r2, r3
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
 8005976:	e026      	b.n	80059c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d007      	beq.n	800599c <UART_Receive_IT+0x74>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <UART_Receive_IT+0x82>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e008      	b.n	80059bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4619      	mov	r1, r3
 80059d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d148      	bne.n	8005a6c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0220 	bic.w	r2, r2, #32
 80059e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d123      	bne.n	8005a62 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0210 	bic.w	r2, r2, #16
 8005a2e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d10a      	bne.n	8005a54 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff fd52 	bl	8005504 <HAL_UARTEx_RxEventCallback>
 8005a60:	e002      	b.n	8005a68 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fa fb94 	bl	8000190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e002      	b.n	8005a72 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ab6:	f023 030c 	bic.w	r3, r3, #12
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <UART_SetConfig+0x114>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fd ffb2 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	e002      	b.n	8005af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fd ff9a 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8005af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <UART_SetConfig+0x118>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	0119      	lsls	r1, r3, #4
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009a      	lsls	r2, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <UART_SetConfig+0x118>)
 8005b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2064      	movs	r0, #100	; 0x64
 8005b32:	fb00 f303 	mul.w	r3, r0, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	3332      	adds	r3, #50	; 0x32
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <UART_SetConfig+0x118>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b48:	4419      	add	r1, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <UART_SetConfig+0x118>)
 8005b62:	fba3 0302 	umull	r0, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2064      	movs	r0, #100	; 0x64
 8005b6a:	fb00 f303 	mul.w	r3, r0, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a07      	ldr	r2, [pc, #28]	; (8005b94 <UART_SetConfig+0x118>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	440a      	add	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40013800 	.word	0x40013800
 8005b94:	51eb851f 	.word	0x51eb851f

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	4d0c      	ldr	r5, [pc, #48]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9e:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	f000 f830 	bl	8005c0c <_init>
 8005bac:	2600      	movs	r6, #0
 8005bae:	4d0a      	ldr	r5, [pc, #40]	; (8005bd8 <__libc_init_array+0x40>)
 8005bb0:	4c0a      	ldr	r4, [pc, #40]	; (8005bdc <__libc_init_array+0x44>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08005c4c 	.word	0x08005c4c
 8005bd4:	08005c4c 	.word	0x08005c4c
 8005bd8:	08005c4c 	.word	0x08005c4c
 8005bdc:	08005c50 	.word	0x08005c50

08005be0 <memcpy>:
 8005be0:	440a      	add	r2, r1
 8005be2:	4291      	cmp	r1, r2
 8005be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be8:	d100      	bne.n	8005bec <memcpy+0xc>
 8005bea:	4770      	bx	lr
 8005bec:	b510      	push	{r4, lr}
 8005bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf8:	d1f9      	bne.n	8005bee <memcpy+0xe>
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <memset>:
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4402      	add	r2, r0
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d100      	bne.n	8005c06 <memset+0xa>
 8005c04:	4770      	bx	lr
 8005c06:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0a:	e7f9      	b.n	8005c00 <memset+0x4>

08005c0c <_init>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr

08005c18 <_fini>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr
