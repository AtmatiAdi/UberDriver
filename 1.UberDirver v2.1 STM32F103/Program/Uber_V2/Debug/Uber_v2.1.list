
Uber_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080062cc  080062cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062cc  080062cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000010  080062e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080062e4  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ac  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cc  00000000  00000000  000304e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00032bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00033c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018760  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115d7  00000000  00000000  0004d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd20  00000000  00000000  0005e907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  000ec67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800628c 	.word	0x0800628c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800628c 	.word	0x0800628c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__aeabi_f2uiz>:
 8000980:	0042      	lsls	r2, r0, #1
 8000982:	d20e      	bcs.n	80009a2 <__aeabi_f2uiz+0x22>
 8000984:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000988:	d30b      	bcc.n	80009a2 <__aeabi_f2uiz+0x22>
 800098a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800098e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000992:	d409      	bmi.n	80009a8 <__aeabi_f2uiz+0x28>
 8000994:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099c:	fa23 f002 	lsr.w	r0, r3, r2
 80009a0:	4770      	bx	lr
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	4770      	bx	lr
 80009a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009ac:	d101      	bne.n	80009b2 <__aeabi_f2uiz+0x32>
 80009ae:	0242      	lsls	r2, r0, #9
 80009b0:	d102      	bne.n	80009b8 <__aeabi_f2uiz+0x38>
 80009b2:	f04f 30ff 	mov.w	r0, #4294967295
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 80009c0:	b084      	sub	sp, #16
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	f107 0c08 	add.w	ip, r7, #8
 80009ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <DRV_Init+0x3c>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2258      	movs	r2, #88	; 0x58
 80009d8:	4619      	mov	r1, r3
 80009da:	f005 fc41 	bl	8006260 <memcpy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80009de:	2201      	movs	r2, #1
 80009e0:	2104      	movs	r1, #4
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <DRV_Init+0x40>)
 80009e4:	f003 f802 	bl	80039ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 fee9 	bl	80027c0 <HAL_Delay>
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009f6:	b004      	add	sp, #16
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <HAL_UART_RxCpltCallback>:
uint8_t Break = 0;
uint8_t IsRunning = 0;
uint8_t IsBreaking = 0;
uint16_t ticks = MIN_TICKS;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *_huart){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4816      	ldr	r0, [pc, #88]	; (8000a6c <HAL_UART_RxCpltCallback+0x68>)
 8000a12:	f003 f803 	bl	8003a1c <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(huart, rx_buffer, 2);		// Chcemy obierac dalej
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_RxCpltCallback+0x6c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <HAL_UART_RxCpltCallback+0x70>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 feb2 	bl	8005788 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(huart, ToSend, 1);			// Odsylamy warrtosc obrotow
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_UART_RxCpltCallback+0x6c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4913      	ldr	r1, [pc, #76]	; (8000a78 <HAL_UART_RxCpltCallback+0x74>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fe3f 	bl	80056b0 <HAL_UART_Transmit_DMA>
	ToSend[0] = 0;										// resetujemy zmienna obrotow
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_RxCpltCallback+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
	Function = rx_buffer[0];
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_RxCpltCallback+0x70>)
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_UART_RxCpltCallback+0x78>)
 8000a3e:	701a      	strb	r2, [r3, #0]
	Power = rx_buffer[1];
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_UART_RxCpltCallback+0x70>)
 8000a42:	785a      	ldrb	r2, [r3, #1]
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_UART_RxCpltCallback+0x7c>)
 8000a46:	701a      	strb	r2, [r3, #0]
	if ((Function == 0) || Power == 0){		// Zatrzymanie awaryjne
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_UART_RxCpltCallback+0x78>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_UART_RxCpltCallback+0x54>
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_UART_RxCpltCallback+0x7c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d105      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0x60>
		SetFloating_A();
 8000a58:	f000 fa2e 	bl	8000eb8 <SetFloating_A>
		SetFloating_B();
 8000a5c:	f000 fa3e 	bl	8000edc <SetFloating_B>
		SetFloating_C();
 8000a60:	f000 fa4e 	bl	8000f00 <SetFloating_C>
	}
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	20000084 	.word	0x20000084
 8000a74:	20000088 	.word	0x20000088
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	2000008d 	.word	0x2000008d
 8000a80:	2000008e 	.word	0x2000008e

08000a84 <Application_Init>:

void Application_Init(UART_HandleTypeDef *_huart){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	//memcpy(&huart, &_huart, sizeof(_huart)); // This shit does not work
	huart = _huart;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <Application_Init+0x24>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, rx_buffer, 2);
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <Application_Init+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2202      	movs	r2, #2
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <Application_Init+0x28>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fe74 	bl	8005788 <HAL_UART_Receive_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	20000088 	.word	0x20000088

08000ab0 <NormalControl>:
	SetFloating_B();
	SetFloating_C();
	IsRunning = 0;
}

void NormalControl(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
	if(Power == 0){								// wartosc = 0, stop
 8000ab6:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <NormalControl+0x1d0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d111      	bne.n	8000ae2 <NormalControl+0x32>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4870      	ldr	r0, [pc, #448]	; (8000c84 <NormalControl+0x1d4>)
 8000ac4:	f002 ff92 	bl	80039ec <HAL_GPIO_WritePin>
		SetFloating_A();
 8000ac8:	f000 f9f6 	bl	8000eb8 <SetFloating_A>
		SetFloating_B();
 8000acc:	f000 fa06 	bl	8000edc <SetFloating_B>
		SetFloating_C();
 8000ad0:	f000 fa16 	bl	8000f00 <SetFloating_C>
		IsRunning = 0;
 8000ad4:	4b6c      	ldr	r3, [pc, #432]	; (8000c88 <NormalControl+0x1d8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000ada:	4b6c      	ldr	r3, [pc, #432]	; (8000c8c <NormalControl+0x1dc>)
 8000adc:	220f      	movs	r2, #15
 8000ade:	801a      	strh	r2, [r3, #0]
		SetFloating_B();
		SetFloating_C();
		IsRunning = 0;
		ticks = MIN_TICKS;
	}
}
 8000ae0:	e0ca      	b.n	8000c78 <NormalControl+0x1c8>
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <NormalControl+0x1e0>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae8:	f240 80b5 	bls.w	8000c56 <NormalControl+0x1a6>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4864      	ldr	r0, [pc, #400]	; (8000c84 <NormalControl+0x1d4>)
 8000af2:	f002 ff7b 	bl	80039ec <HAL_GPIO_WritePin>
		uint8_t pwm = Power / 2;
 8000af6:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <NormalControl+0x1d0>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
		if (pwm < 28) pwm = 28;				// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2b1b      	cmp	r3, #27
 8000b02:	d802      	bhi.n	8000b0a <NormalControl+0x5a>
 8000b04:	231c      	movs	r3, #28
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e004      	b.n	8000b14 <NormalControl+0x64>
		else if (pwm > 128-28) pwm = 128;	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b64      	cmp	r3, #100	; 0x64
 8000b0e:	d901      	bls.n	8000b14 <NormalControl+0x64>
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	73fb      	strb	r3, [r7, #15]
		if (IsRunning == 0){					// Startujemy
 8000b14:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <NormalControl+0x1d8>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d177      	bne.n	8000c0c <NormalControl+0x15c>
			int cnt = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
			int val = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	603b      	str	r3, [r7, #0]
			switch (Function){
 8000b24:	4b5a      	ldr	r3, [pc, #360]	; (8000c90 <NormalControl+0x1e0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3b42      	subs	r3, #66	; 0x42
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d86f      	bhi.n	8000c0e <NormalControl+0x15e>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <NormalControl+0x84>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b4d 	.word	0x08000b4d
 8000b38:	08000bad 	.word	0x08000bad
 8000b3c:	08000c0f 	.word	0x08000c0f
 8000b40:	08000c0f 	.word	0x08000c0f
 8000b44:	08000c0f 	.word	0x08000c0f
 8000b48:	08000c0f 	.word	0x08000c0f
				Speed = 0x00070000;
 8000b4c:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000b50:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000b52:	e016      	b.n	8000b82 <NormalControl+0xd2>
					SixStep(Speed, val);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f9e3 	bl	8000f28 <SixStep>
					++cnt;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d104      	bne.n	8000b78 <NormalControl+0xc8>
						++val;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000b7e:	3b1f      	subs	r3, #31
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000b88:	dce4      	bgt.n	8000b54 <NormalControl+0xa4>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000b8a:	e00a      	b.n	8000ba2 <NormalControl+0xf2>
					SixStep(Speed, val);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	b292      	uxth	r2, r2
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f9c7 	bl	8000f28 <SixStep>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000ba8:	dcf0      	bgt.n	8000b8c <NormalControl+0xdc>
				break;
 8000baa:	e030      	b.n	8000c0e <NormalControl+0x15e>
				Speed = 0x00070000;
 8000bac:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8000bb0:	60bb      	str	r3, [r7, #8]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000bb2:	e016      	b.n	8000be2 <NormalControl+0x132>
					SixStep_rev(Speed, val);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	b292      	uxth	r2, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fa05 	bl	8000fcc <SixStep_rev>
					++cnt;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
					if (cnt == 4){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d104      	bne.n	8000bd8 <NormalControl+0x128>
						++val;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
						cnt = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000bde:	3b1f      	subs	r3, #31
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000be8:	dce4      	bgt.n	8000bb4 <NormalControl+0x104>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000bea:	e00a      	b.n	8000c02 <NormalControl+0x152>
					SixStep_rev(Speed, val);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f9e9 	bl	8000fcc <SixStep_rev>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8000c08:	dcf0      	bgt.n	8000bec <NormalControl+0x13c>
				break;
 8000c0a:	e000      	b.n	8000c0e <NormalControl+0x15e>
			default: {
 8000c0c:	bf00      	nop
		if(Function % 2 == 1){					// Kręcimy do tylu
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <NormalControl+0x1e0>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <NormalControl+0x186>
			ticks = BEMF_SixStep_TEST_rev(pwm, ticks);
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <NormalControl+0x1dc>)
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fc16 	bl	8001458 <BEMF_SixStep_TEST_rev>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <NormalControl+0x1dc>)
 8000c32:	801a      	strh	r2, [r3, #0]
 8000c34:	e00b      	b.n	8000c4e <NormalControl+0x19e>
			ticks = BEMF_SixStep_TEST(pwm, ticks);
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <NormalControl+0x1dc>)
 8000c3c:	8812      	ldrh	r2, [r2, #0]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 faad 	bl	80011a0 <BEMF_SixStep_TEST>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <NormalControl+0x1dc>)
 8000c4c:	801a      	strh	r2, [r3, #0]
		IsRunning = 1;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <NormalControl+0x1d8>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	e010      	b.n	8000c78 <NormalControl+0x1c8>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2101      	movs	r1, #1
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <NormalControl+0x1d4>)
 8000c5c:	f002 fec6 	bl	80039ec <HAL_GPIO_WritePin>
		SetFloating_A();
 8000c60:	f000 f92a 	bl	8000eb8 <SetFloating_A>
		SetFloating_B();
 8000c64:	f000 f93a 	bl	8000edc <SetFloating_B>
		SetFloating_C();
 8000c68:	f000 f94a 	bl	8000f00 <SetFloating_C>
		IsRunning = 0;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <NormalControl+0x1d8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <NormalControl+0x1dc>)
 8000c74:	220f      	movs	r2, #15
 8000c76:	801a      	strh	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000008e 	.word	0x2000008e
 8000c84:	40011400 	.word	0x40011400
 8000c88:	2000008f 	.word	0x2000008f
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	2000008d 	.word	0x2000008d

08000c94 <Application_Update>:

void Application_Update(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	}
	else if(SCOTTER_PROGRAM){
		ScotterProgram();
	}
	else if(NORMAL_CONTROL){
		NormalControl();
 8000c98:	f7ff ff0a 	bl	8000ab0 <NormalControl>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
		SetZero_A();
		SetZero_B();
		SetZero_C();
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_ADC_ConvCpltCallback>:

uint16_t Value = 8;



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	// Collect data
	uint8_t div = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
			//TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(htim1);
			//TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(htim2);
			tim_num++;
		}
	}
	IsNewVal = 1;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
	cnt ++;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000b2 	.word	0x200000b2
 8000ccc:	200000b4 	.word	0x200000b4

08000cd0 <Control_Init>:
void Control_Init(
		TIM_HandleTypeDef *_htim1,
		TIM_HandleTypeDef *_htim2,
		TIM_HandleTypeDef *_htim3,
		TIM_HandleTypeDef *_htim4,
		ADC_HandleTypeDef *_hadc1){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
	htim1 = _htim1;
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <Control_Init+0xc0>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6013      	str	r3, [r2, #0]
	htim2 = _htim2;
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <Control_Init+0xc4>)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	6013      	str	r3, [r2, #0]
	htim3 = _htim3;
 8000cea:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <Control_Init+0xc8>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
	htim4 = _htim4;
 8000cf0:	4a2a      	ldr	r2, [pc, #168]	; (8000d9c <Control_Init+0xcc>)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	6013      	str	r3, [r2, #0]
	hadc1 = _hadc1;
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <Control_Init+0xd0>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	6013      	str	r3, [r2, #0]

	// Disable gate driver output
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4828      	ldr	r0, [pc, #160]	; (8000da4 <Control_Init+0xd4>)
 8000d02:	f002 fe73 	bl	80039ec <HAL_GPIO_WritePin>

	// Timer for precise time counting
	HAL_TIM_Base_Start(htim4);
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <Control_Init+0xcc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 fc44 	bl	8004598 <HAL_TIM_Base_Start>

	// Timers for mosfet control
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <Control_Init+0xc4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fce0 	bl	80046dc <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <Control_Init+0xc8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fcda 	bl	80046dc <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <Control_Init+0xc0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fcd4 	bl	80046dc <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);

	// Timer for ADC releasing
	HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_3);
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <Control_Init+0xc0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2108      	movs	r1, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fcce 	bl	80046dc <HAL_TIM_PWM_Start>

	// Control timers basic synchronisation
	htim1->Instance->CNT = 0;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <Control_Init+0xc0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
	htim2->Instance->CNT = 0;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <Control_Init+0xc4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
	htim3->Instance->CNT = 0;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <Control_Init+0xc8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24


	// ADC and Timer Configuration
	HAL_ADC_Start_DMA(hadc1, ADC_data, 4);
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <Control_Init+0xd0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2204      	movs	r2, #4
 8000d64:	4910      	ldr	r1, [pc, #64]	; (8000da8 <Control_Init+0xd8>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fe26 	bl	80029b8 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start_IT(htim1, TIM_CHANNEL_3);
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <Control_Init+0xc0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2108      	movs	r1, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fd54 	bl	8004820 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_3, 3);
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <Control_Init+0xc0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c


	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 fd1c 	bl	80027c0 <HAL_Delay>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000090 	.word	0x20000090
 8000d94:	20000094 	.word	0x20000094
 8000d98:	20000098 	.word	0x20000098
 8000d9c:	2000009c 	.word	0x2000009c
 8000da0:	200000a0 	.word	0x200000a0
 8000da4:	40011400 	.word	0x40011400
 8000da8:	200000a4 	.word	0x200000a4

08000dac <StartPWM>:

void StartPWM(){
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0



}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <SetZero_A>:

void SetZero_A(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SetZero_A+0x1c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <SetZero_A+0x20>)
 8000dcc:	f002 fe0e 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <SetZero_B>:

void SetZero_B(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SetZero_B+0x1c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2120      	movs	r1, #32
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SetZero_B+0x20>)
 8000df0:	f002 fdfc 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000098 	.word	0x20000098
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <SetZero_C>:

void SetZero_C(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SetZero_C+0x20>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <SetZero_C+0x24>)
 8000e16:	f002 fde9 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000090 	.word	0x20000090
 8000e24:	40010800 	.word	0x40010800

08000e28 <SetPulse_AH>:

void SetPulse_AH(uint8_t value){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, value);
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <SetPulse_AH+0x28>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <SetPulse_AH+0x2c>)
 8000e42:	f002 fdd3 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000094 	.word	0x20000094
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <SetPulse_BH>:

void SetPulse_BH(uint8_t value){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, value);
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SetPulse_BH+0x28>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <SetPulse_BH+0x2c>)
 8000e72:	f002 fdbb 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000098 	.word	0x20000098
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <SetPulse_CH>:

void SetPulse_CH(uint8_t value){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, value);
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <SetPulse_CH+0x28>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <SetPulse_CH+0x2c>)
 8000ea4:	f002 fda2 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000090 	.word	0x20000090
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <SetFloating_A>:

void SetFloating_A(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, 0);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SetFloating_A+0x1c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <SetFloating_A+0x20>)
 8000ecc:	f002 fd8e 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000094 	.word	0x20000094
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <SetFloating_B>:

void SetFloating_B(){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 0);
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SetFloating_B+0x1c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <SetFloating_B+0x20>)
 8000ef0:	f002 fd7c 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <SetFloating_C>:

void SetFloating_C(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_2, 0);
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SetFloating_C+0x20>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <SetFloating_C+0x24>)
 8000f16:	f002 fd69 	bl	80039ec <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000090 	.word	0x20000090
 8000f24:	40010800 	.word	0x40010800

08000f28 <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff75 	bl	8000e28 <SetPulse_AH>
	SetZero_B();
 8000f3e:	f7ff ff4d 	bl	8000ddc <SetZero_B>
	SetFloating_C();
 8000f42:	f7ff ffdd 	bl	8000f00 <SetFloating_C>
	Delay_Tick(Speed);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fbe2 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_AH(Value);
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff69 	bl	8000e28 <SetPulse_AH>
	SetFloating_B();
 8000f56:	f7ff ffc1 	bl	8000edc <SetFloating_B>
	SetZero_C();
 8000f5a:	f7ff ff51 	bl	8000e00 <SetZero_C>
	Delay_Tick(Speed);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fbd6 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_A();
 8000f64:	f7ff ffa8 	bl	8000eb8 <SetFloating_A>
	SetPulse_BH(Value);
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff73 	bl	8000e58 <SetPulse_BH>
	SetZero_C();
 8000f72:	f7ff ff45 	bl	8000e00 <SetZero_C>
	Delay_Tick(Speed);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fbca 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_A();
 8000f7c:	f7ff ff1c 	bl	8000db8 <SetZero_A>
	SetPulse_BH(Value);
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff67 	bl	8000e58 <SetPulse_BH>
	SetFloating_C();
 8000f8a:	f7ff ffb9 	bl	8000f00 <SetFloating_C>
	Delay_Tick(Speed);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fbbe 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_A();
 8000f94:	f7ff ff10 	bl	8000db8 <SetZero_A>
	SetFloating_B();
 8000f98:	f7ff ffa0 	bl	8000edc <SetFloating_B>
	SetPulse_CH(Value);
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff71 	bl	8000e88 <SetPulse_CH>
	Delay_Tick(Speed);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fbb2 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_A();
 8000fac:	f7ff ff84 	bl	8000eb8 <SetFloating_A>
	SetZero_B();
 8000fb0:	f7ff ff14 	bl	8000ddc <SetZero_B>
	SetPulse_CH(Value);
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff65 	bl	8000e88 <SetPulse_CH>
	Delay_Tick(Speed);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fba6 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SixStep_rev>:

void SixStep_rev(uint32_t Speed, uint16_t Value){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_CH(Value);
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff53 	bl	8000e88 <SetPulse_CH>
	SetZero_B();
 8000fe2:	f7ff fefb 	bl	8000ddc <SetZero_B>
	SetFloating_A();
 8000fe6:	f7ff ff67 	bl	8000eb8 <SetFloating_A>
	Delay_Tick(Speed);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fb90 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//2
	SetPulse_CH(Value);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff47 	bl	8000e88 <SetPulse_CH>
	SetFloating_B();
 8000ffa:	f7ff ff6f 	bl	8000edc <SetFloating_B>
	SetZero_A();
 8000ffe:	f7ff fedb 	bl	8000db8 <SetZero_A>
	Delay_Tick(Speed);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fb84 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//3
	SetFloating_C();
 8001008:	f7ff ff7a 	bl	8000f00 <SetFloating_C>
	SetPulse_BH(Value);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff21 	bl	8000e58 <SetPulse_BH>
	SetZero_A();
 8001016:	f7ff fecf 	bl	8000db8 <SetZero_A>
	Delay_Tick(Speed);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fb78 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//4
	SetZero_C();
 8001020:	f7ff feee 	bl	8000e00 <SetZero_C>
	SetPulse_BH(Value);
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff15 	bl	8000e58 <SetPulse_BH>
	SetFloating_A();
 800102e:	f7ff ff43 	bl	8000eb8 <SetFloating_A>
	Delay_Tick(Speed);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fb6c 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//5
	SetZero_C();
 8001038:	f7ff fee2 	bl	8000e00 <SetZero_C>
	SetFloating_B();
 800103c:	f7ff ff4e 	bl	8000edc <SetFloating_B>
	SetPulse_AH(Value);
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff feef 	bl	8000e28 <SetPulse_AH>
	Delay_Tick(Speed);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fb60 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
	//6
	SetFloating_C();
 8001050:	f7ff ff56 	bl	8000f00 <SetFloating_C>
	SetZero_B();
 8001054:	f7ff fec2 	bl	8000ddc <SetZero_B>
	SetPulse_AH(Value);
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fee3 	bl	8000e28 <SetPulse_AH>
	Delay_Tick(Speed);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fb54 	bl	8001710 <Delay_Tick>
	//data[ data_num-1] = 0;
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <WaitForCross>:

uint32_t WaitForCross(uint8_t num, uint8_t val){
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <WaitForCross+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] > val+ADC_data[3]/2){
 800108e:	e01b      	b.n	80010c8 <WaitForCross+0x58>
		if (__HAL_TIM_GET_COUNTER(htim4) > 0x7fff){
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <WaitForCross+0x90>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800109c:	d30b      	bcc.n	80010b6 <WaitForCross+0x46>
			ret_val += __HAL_TIM_GET_COUNTER(htim4);
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <WaitForCross+0x90>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(htim4,0);
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <WaitForCross+0x90>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(htim4) ) > MAX_TICKS){
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <WaitForCross+0x90>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010c6:	d20d      	bcs.n	80010e4 <WaitForCross+0x74>
	while(ADC_data[num] > val+ADC_data[3]/2){
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <WaitForCross+0x94>)
 80010cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d0:	4619      	mov	r1, r3
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <WaitForCross+0x94>)
 80010d6:	88d2      	ldrh	r2, [r2, #6]
 80010d8:	0852      	lsrs	r2, r2, #1
 80010da:	b292      	uxth	r2, r2
 80010dc:	4413      	add	r3, r2
 80010de:	4299      	cmp	r1, r3
 80010e0:	dcd6      	bgt.n	8001090 <WaitForCross+0x20>
 80010e2:	e000      	b.n	80010e6 <WaitForCross+0x76>
			break;
 80010e4:	bf00      	nop
			}
			IsNewVal = 0;
		}
	}*/

	ret_val += __HAL_TIM_GET_COUNTER(htim4);
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <WaitForCross+0x90>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
	return ret_val;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	2000009c 	.word	0x2000009c
 8001104:	200000a4 	.word	0x200000a4

08001108 <WaitForCross2>:

uint32_t WaitForCross2(uint8_t num, uint8_t val){
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <WaitForCross2+0x90>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] < val+ADC_data[3]/2){
 8001126:	e01b      	b.n	8001160 <WaitForCross2+0x58>
		if (__HAL_TIM_GET_COUNTER(htim4) > 0x7fff){
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <WaitForCross2+0x90>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001134:	d30b      	bcc.n	800114e <WaitForCross2+0x46>
			ret_val += __HAL_TIM_GET_COUNTER(htim4);
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <WaitForCross2+0x90>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(htim4,0);
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <WaitForCross2+0x90>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(htim4) ) > MAX_TICKS){
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <WaitForCross2+0x90>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800115e:	d20d      	bcs.n	800117c <WaitForCross2+0x74>
	while(ADC_data[num] < val+ADC_data[3]/2){
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <WaitForCross2+0x94>)
 8001164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001168:	4619      	mov	r1, r3
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <WaitForCross2+0x94>)
 800116e:	88d2      	ldrh	r2, [r2, #6]
 8001170:	0852      	lsrs	r2, r2, #1
 8001172:	b292      	uxth	r2, r2
 8001174:	4413      	add	r3, r2
 8001176:	4299      	cmp	r1, r3
 8001178:	dbd6      	blt.n	8001128 <WaitForCross2+0x20>
 800117a:	e000      	b.n	800117e <WaitForCross2+0x76>
			break;
 800117c:	bf00      	nop
		}
	}

	ret_val += __HAL_TIM_GET_COUNTER(htim4);
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <WaitForCross2+0x90>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
	return ret_val;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	2000009c 	.word	0x2000009c
 800119c:	200000a4 	.word	0x200000a4

080011a0 <BEMF_SixStep_TEST>:
	}
	//data[ data_num-1] = 0;
	return ticks;
}

uint32_t BEMF_SixStep_TEST(uint16_t Value, uint16_t LastTicks){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80bb      	strh	r3, [r7, #4]
	float ticks = 0;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
	float div = 6;//1.5;
 80011b6:	4ba7      	ldr	r3, [pc, #668]	; (8001454 <BEMF_SixStep_TEST+0x2b4>)
 80011b8:	60bb      	str	r3, [r7, #8]
	////////////////////////////////////////////////////////// 1
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_AH(Value);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe32 	bl	8000e28 <SetPulse_AH>
	SetZero_B();
 80011c4:	f7ff fe0a 	bl	8000ddc <SetZero_B>
	SetFloating_C();
 80011c8:	f7ff fe9a 	bl	8000f00 <SetFloating_C>
	ticks = LastTicks/2;	// 1/4
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa30 	bl	8000638 <__aeabi_i2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff f919 	bl	8000414 <__aeabi_f2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f000 fa91 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(2,0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff ff3d 	bl	8001070 <WaitForCross>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa19 	bl	8000630 <__aeabi_ui2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff f964 	bl	80004d0 <__addsf3>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff fb1a 	bl	8000848 <__aeabi_fdiv>
 8001214:	4603      	mov	r3, r0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8fc 	bl	8000414 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f000 fa74 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 2
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_AH(Value);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fdfb 	bl	8000e28 <SetPulse_AH>
	SetFloating_B();
 8001232:	f7ff fe53 	bl	8000edc <SetFloating_B>
	SetZero_C();
 8001236:	f7ff fde3 	bl	8000e00 <SetZero_C>
	ticks = ticks/2;	// 1/4
 800123a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fb02 	bl	8000848 <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff f8e3 	bl	8000414 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f000 fa5b 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(1,0);	// 1/2
 800125a:	2100      	movs	r1, #0
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ff53 	bl	8001108 <WaitForCross2>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f9e3 	bl	8000630 <__aeabi_ui2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff f92e 	bl	80004d0 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fae4 	bl	8000848 <__aeabi_fdiv>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8c6 	bl	8000414 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f000 fa3e 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 3
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_A();
 8001294:	f7ff fe10 	bl	8000eb8 <SetFloating_A>
	SetPulse_BH(Value);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fddb 	bl	8000e58 <SetPulse_BH>
	SetZero_C();
 80012a2:	f7ff fdad 	bl	8000e00 <SetZero_C>
	ticks = ticks/2;	// 1/4
 80012a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff facc 	bl	8000848 <__aeabi_fdiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff f8ad 	bl	8000414 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f000 fa25 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(0,0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fed1 	bl	8001070 <WaitForCross>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f9ad 	bl	8000630 <__aeabi_ui2f>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4619      	mov	r1, r3
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff f8f8 	bl	80004d0 <__addsf3>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff faae 	bl	8000848 <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f890 	bl	8000414 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f000 fa08 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 4
	//if(rx_buffer[0] == 0) return 0;
	SetZero_A();
 8001300:	f7ff fd5a 	bl	8000db8 <SetZero_A>
	SetPulse_BH(Value);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fda5 	bl	8000e58 <SetPulse_BH>
	SetFloating_C();
 800130e:	f7ff fdf7 	bl	8000f00 <SetFloating_C>
	ticks = ticks/2;	// 1/4
 8001312:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fa96 	bl	8000848 <__aeabi_fdiv>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff f877 	bl	8000414 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f000 f9ef 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(2,0);
 8001332:	2100      	movs	r1, #0
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fee7 	bl	8001108 <WaitForCross2>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f977 	bl	8000630 <__aeabi_ui2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff f8c2 	bl	80004d0 <__addsf3>
 800134c:	4603      	mov	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fa78 	bl	8000848 <__aeabi_fdiv>
 8001358:	4603      	mov	r3, r0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f85a 	bl	8000414 <__aeabi_f2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f000 f9d2 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 5
	//if(rx_buffer[0] == 0) return 0;
	SetZero_A();
 800136c:	f7ff fd24 	bl	8000db8 <SetZero_A>
	SetFloating_B();
 8001370:	f7ff fdb4 	bl	8000edc <SetFloating_B>
	SetPulse_CH(Value);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fd85 	bl	8000e88 <SetPulse_CH>
	ticks = ticks/2;	// 1/4
 800137e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff fa60 	bl	8000848 <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff f841 	bl	8000414 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f000 f9b9 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(1,0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe65 	bl	8001070 <WaitForCross>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f941 	bl	8000630 <__aeabi_ui2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff f88c 	bl	80004d0 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff fa42 	bl	8000848 <__aeabi_fdiv>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f824 	bl	8000414 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f99c 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 6
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_A();
 80013d8:	f7ff fd6e 	bl	8000eb8 <SetFloating_A>
	SetZero_B();
 80013dc:	f7ff fcfe 	bl	8000ddc <SetZero_B>
	SetPulse_CH(Value);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd4f 	bl	8000e88 <SetPulse_CH>
	ticks = ticks/2;	// 1/4
 80013ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fa2a 	bl	8000848 <__aeabi_fdiv>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff f80b 	bl	8000414 <__aeabi_f2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f000 f983 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(0,0);
 800140a:	2100      	movs	r1, #0
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fe7b 	bl	8001108 <WaitForCross2>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f90b 	bl	8000630 <__aeabi_ui2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff f856 	bl	80004d0 <__addsf3>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff fa0c 	bl	8000848 <__aeabi_fdiv>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe ffee 	bl	8000414 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f000 f966 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	return ticks;
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff fa9b 	bl	8000980 <__aeabi_f2uiz>
 800144a:	4603      	mov	r3, r0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40c00000 	.word	0x40c00000

08001458 <BEMF_SixStep_TEST_rev>:

uint32_t BEMF_SixStep_TEST_rev(uint16_t Value, uint16_t LastTicks){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	460a      	mov	r2, r1
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	4613      	mov	r3, r2
 8001466:	80bb      	strh	r3, [r7, #4]
	float ticks = 0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
	float div = 6;//1.5;
 800146e:	4ba7      	ldr	r3, [pc, #668]	; (800170c <BEMF_SixStep_TEST_rev+0x2b4>)
 8001470:	60bb      	str	r3, [r7, #8]
	////////////////////////////////////////////////////////// 1
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_CH(Value);
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fd06 	bl	8000e88 <SetPulse_CH>
	SetZero_B();
 800147c:	f7ff fcae 	bl	8000ddc <SetZero_B>
	SetFloating_A();
 8001480:	f7ff fd1a 	bl	8000eb8 <SetFloating_A>
	ticks = LastTicks/2;	// 1/4
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_i2f>
 8001490:	4603      	mov	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7fe ffbd 	bl	8000414 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f000 f935 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(0,0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fde1 	bl	8001070 <WaitForCross>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f8bd 	bl	8000630 <__aeabi_ui2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff f808 	bl	80004d0 <__addsf3>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff f9be 	bl	8000848 <__aeabi_fdiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ffa0 	bl	8000414 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f000 f918 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 2
	//if(rx_buffer[0] == 0) return 0;
	SetPulse_CH(Value);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fccf 	bl	8000e88 <SetPulse_CH>
	SetFloating_B();
 80014ea:	f7ff fcf7 	bl	8000edc <SetFloating_B>
	SetZero_A();
 80014ee:	f7ff fc63 	bl	8000db8 <SetZero_A>
	ticks = ticks/2;	// 1/4
 80014f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff f9a6 	bl	8000848 <__aeabi_fdiv>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7fe ff87 	bl	8000414 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f000 f8ff 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(1,0);	// 1/2
 8001512:	2100      	movs	r1, #0
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fdf7 	bl	8001108 <WaitForCross2>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f887 	bl	8000630 <__aeabi_ui2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4619      	mov	r1, r3
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7fe ffd2 	bl	80004d0 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff f988 	bl	8000848 <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff6a 	bl	8000414 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f000 f8e2 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 3
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_C();
 800154c:	f7ff fcd8 	bl	8000f00 <SetFloating_C>
	SetPulse_BH(Value);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc7f 	bl	8000e58 <SetPulse_BH>
	SetZero_A();
 800155a:	f7ff fc2d 	bl	8000db8 <SetZero_A>
	ticks = ticks/2;	// 1/4
 800155e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff f970 	bl	8000848 <__aeabi_fdiv>
 8001568:	4603      	mov	r3, r0
 800156a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7fe ff51 	bl	8000414 <__aeabi_f2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f000 f8c9 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(2,0);
 800157e:	2100      	movs	r1, #0
 8001580:	2002      	movs	r0, #2
 8001582:	f7ff fd75 	bl	8001070 <WaitForCross>
 8001586:	4603      	mov	r3, r0
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f851 	bl	8000630 <__aeabi_ui2f>
 800158e:	4603      	mov	r3, r0
 8001590:	4619      	mov	r1, r3
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7fe ff9c 	bl	80004d0 <__addsf3>
 8001598:	4603      	mov	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7ff f952 	bl	8000848 <__aeabi_fdiv>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff34 	bl	8000414 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f000 f8ac 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 4
	//if(rx_buffer[0] == 0) return 0;
	SetZero_C();
 80015b8:	f7ff fc22 	bl	8000e00 <SetZero_C>
	SetPulse_BH(Value);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc49 	bl	8000e58 <SetPulse_BH>
	SetFloating_A();
 80015c6:	f7ff fc77 	bl	8000eb8 <SetFloating_A>
	ticks = ticks/2;	// 1/4
 80015ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff f93a 	bl	8000848 <__aeabi_fdiv>
 80015d4:	4603      	mov	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7fe ff1b 	bl	8000414 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 f893 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(0,0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fd8b 	bl	8001108 <WaitForCross2>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f81b 	bl	8000630 <__aeabi_ui2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7fe ff66 	bl	80004d0 <__addsf3>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff f91c 	bl	8000848 <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fefe 	bl	8000414 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f000 f876 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 5
	//if(rx_buffer[0] == 0) return 0;
	SetZero_C();
 8001624:	f7ff fbec 	bl	8000e00 <SetZero_C>
	SetFloating_B();
 8001628:	f7ff fc58 	bl	8000edc <SetFloating_B>
	SetPulse_AH(Value);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbf9 	bl	8000e28 <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 8001636:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff f904 	bl	8000848 <__aeabi_fdiv>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7fe fee5 	bl	8000414 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f000 f85d 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross(1,0);
 8001656:	2100      	movs	r1, #0
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fd09 	bl	8001070 <WaitForCross>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ffe5 	bl	8000630 <__aeabi_ui2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4619      	mov	r1, r3
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7fe ff30 	bl	80004d0 <__addsf3>
 8001670:	4603      	mov	r3, r0
 8001672:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff f8e6 	bl	8000848 <__aeabi_fdiv>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fec8 	bl	8000414 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f000 f840 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	////////////////////////////////////////////////////////// 6
	//if(rx_buffer[0] == 0) return 0;
	SetFloating_C();
 8001690:	f7ff fc36 	bl	8000f00 <SetFloating_C>
	SetZero_B();
 8001694:	f7ff fba2 	bl	8000ddc <SetZero_B>
	SetPulse_AH(Value);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fbc3 	bl	8000e28 <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 80016a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff f8ce 	bl	8000848 <__aeabi_fdiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7fe feaf 	bl	8000414 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f000 f827 	bl	8001710 <Delay_Tick>
	ticks += WaitForCross2(2,0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fd1f 	bl	8001108 <WaitForCross2>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ffaf 	bl	8000630 <__aeabi_ui2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7fe fefa 	bl	80004d0 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff f8b0 	bl	8000848 <__aeabi_fdiv>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe92 	bl	8000414 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f000 f80a 	bl	8001710 <Delay_Tick>

	//data[ data_num-1] = 0;
	return ticks;
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff f93f 	bl	8000980 <__aeabi_f2uiz>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40c00000 	.word	0x40c00000

08001710 <Delay_Tick>:
		SixStep(Speed, Value);
	}
}


void Delay_Tick(uint32_t val){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim4,0);
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <Delay_Tick+0x6c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
	if (val > MAX_TICKS) val = MAX_TICKS;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001728:	d315      	bcc.n	8001756 <Delay_Tick+0x46>
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <Delay_Tick+0x70>)
 800172c:	607b      	str	r3, [r7, #4]
	while(val > 0x00007fff){
 800172e:	e012      	b.n	8001756 <Delay_Tick+0x46>
		val -= 0x00007fff;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001736:	3b7f      	subs	r3, #127	; 0x7f
 8001738:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(htim4) < 0x7fff);
 800173a:	bf00      	nop
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <Delay_Tick+0x6c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001748:	4293      	cmp	r3, r2
 800174a:	d9f7      	bls.n	800173c <Delay_Tick+0x2c>
		__HAL_TIM_SET_COUNTER(htim4,0);
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <Delay_Tick+0x6c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175c:	d2e8      	bcs.n	8001730 <Delay_Tick+0x20>
	}
	while(__HAL_TIM_GET_COUNTER(htim4) < val);
 800175e:	bf00      	nop
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <Delay_Tick+0x6c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f8      	bhi.n	8001760 <Delay_Tick+0x50>
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000009c 	.word	0x2000009c
 8001780:	000fffff 	.word	0x000fffff

08001784 <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	uint8_t test = __HAL_TIM_GET_COUNTER(htim1);
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_TriggerCallback+0x44>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	73fb      	strb	r3, [r7, #15]
	if(htim->Instance == TIM1){
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_TIM_TriggerCallback+0x48>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d10d      	bne.n	80017bc <HAL_TIM_TriggerCallback+0x38>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d109      	bne.n	80017bc <HAL_TIM_TriggerCallback+0x38>
			test = __HAL_TIM_GET_COUNTER(htim1);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_TIM_TriggerCallback+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	73fb      	strb	r3, [r7, #15]
			test = __HAL_TIM_GET_COUNTER(htim1);
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_TIM_TriggerCallback+0x44>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000090 	.word	0x20000090
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b093      	sub	sp, #76	; 0x4c
 80017d4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f000 ff91 	bl	80026fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f84f 	bl	800187c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f000 fb85 	bl	8001eec <MX_GPIO_Init>
  MX_DMA_Init();
 80017e2:	f000 fb55 	bl	8001e90 <MX_DMA_Init>
  MX_ADC1_Init();
 80017e6:	f000 f8a1 	bl	800192c <MX_ADC1_Init>
  MX_SPI1_Init();
 80017ea:	f000 f909 	bl	8001a00 <MX_SPI1_Init>
  MX_TIM1_Init();
 80017ee:	f000 f93f 	bl	8001a70 <MX_TIM1_Init>
  MX_TIM3_Init();
 80017f2:	f000 fa5f 	bl	8001cb4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80017f6:	f000 f9e9 	bl	8001bcc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017fa:	f000 fb1f 	bl	8001e3c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80017fe:	f000 facf 	bl	8001da0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001808:	4813      	ldr	r0, [pc, #76]	; (8001858 <main+0x88>)
 800180a:	f002 f8ef 	bl	80039ec <HAL_GPIO_WritePin>

	DRV_Init(hspi1);
 800180e:	4c13      	ldr	r4, [pc, #76]	; (800185c <main+0x8c>)
 8001810:	4668      	mov	r0, sp
 8001812:	f104 0310 	add.w	r3, r4, #16
 8001816:	2248      	movs	r2, #72	; 0x48
 8001818:	4619      	mov	r1, r3
 800181a:	f004 fd21 	bl	8006260 <memcpy>
 800181e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001822:	f7ff f8cd 	bl	80009c0 <DRV_Init>
	//DRV_Write(SHUNT_AMPLIFIER_CONTROL,
	//		(GAIN_CS1 & 0xffff) +
	//		(GAIN_CS2 & 0xffff) +
	//		(GAIN_CS3 & 0xffff));

	Control_Init(&htim1, &htim2, &htim3, &htim4, &hadc1);
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <main+0x90>)
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <main+0x94>)
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <main+0x98>)
 800182e:	490f      	ldr	r1, [pc, #60]	; (800186c <main+0x9c>)
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <main+0xa0>)
 8001832:	f7ff fa4d 	bl	8000cd0 <Control_Init>
	Application_Init(&huart1);
 8001836:	480f      	ldr	r0, [pc, #60]	; (8001874 <main+0xa4>)
 8001838:	f7ff f924 	bl	8000a84 <Application_Init>

	StartPWM();
 800183c:	f7ff fab6 	bl	8000dac <StartPWM>

	HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 ffbd 	bl	80027c0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <main+0xa8>)
 800184c:	f002 f8ce 	bl	80039ec <HAL_GPIO_WritePin>
while (1){
	Application_Update();
 8001850:	f7ff fa20 	bl	8000c94 <Application_Update>
 8001854:	e7fc      	b.n	8001850 <main+0x80>
 8001856:	bf00      	nop
 8001858:	40010800 	.word	0x40010800
 800185c:	200002d0 	.word	0x200002d0
 8001860:	2000018c 	.word	0x2000018c
 8001864:	200000b8 	.word	0x200000b8
 8001868:	20000100 	.word	0x20000100
 800186c:	20000328 	.word	0x20000328
 8001870:	20000288 	.word	0x20000288
 8001874:	20000200 	.word	0x20000200
 8001878:	40011400 	.word	0x40011400

0800187c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fcf6 	bl	800627c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	2302      	movs	r3, #2
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b4:	2310      	movs	r3, #16
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018bc:	2300      	movs	r3, #0
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 80018c0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80018c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 f8c0 	bl	8003a50 <HAL_RCC_OscConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018d6:	f000 fba7 	bl	8002028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	230f      	movs	r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fb2a 	bl	8003f50 <HAL_RCC_ClockConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001902:	f000 fb91 	bl	8002028 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001906:	2302      	movs	r3, #2
 8001908:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800190a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fcb6 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800191e:	f000 fb83 	bl	8002028 <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	; 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <MX_ADC1_Init+0xcc>)
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <MX_ADC1_Init+0xd0>)
 8001940:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_ADC1_Init+0xcc>)
 8001944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <MX_ADC1_Init+0xcc>)
 800194c:	2200      	movs	r2, #0
 800194e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <MX_ADC1_Init+0xcc>)
 8001952:	2200      	movs	r2, #0
 8001954:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <MX_ADC1_Init+0xcc>)
 8001958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800195c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <MX_ADC1_Init+0xcc>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MX_ADC1_Init+0xcc>)
 8001966:	2204      	movs	r2, #4
 8001968:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800196a:	4823      	ldr	r0, [pc, #140]	; (80019f8 <MX_ADC1_Init+0xcc>)
 800196c:	f000 ff4c 	bl	8002808 <HAL_ADC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001976:	f000 fb57 	bl	8002028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800197a:	2304      	movs	r3, #4
 800197c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197e:	2301      	movs	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	481b      	ldr	r0, [pc, #108]	; (80019f8 <MX_ADC1_Init+0xcc>)
 800198c:	f001 f904 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001996:	f000 fb47 	bl	8002028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199a:	2303      	movs	r3, #3
 800199c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800199e:	2302      	movs	r3, #2
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MX_ADC1_Init+0xcc>)
 80019a8:	f001 f8f6 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80019b2:	f000 fb39 	bl	8002028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_ADC1_Init+0xcc>)
 80019c4:	f001 f8e8 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80019ce:	f000 fb2b 	bl	8002028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019d6:	2304      	movs	r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_ADC1_Init+0xcc>)
 80019e0:	f001 f8da 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80019ea:	f000 fb1d 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000018c 	.word	0x2000018c
 80019fc:	40012400 	.word	0x40012400

08001a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <MX_SPI1_Init+0x6c>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a36:	2220      	movs	r2, #32
 8001a38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a4e:	220a      	movs	r2, #10
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a54:	f002 fccc 	bl	80043f0 <HAL_SPI_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001a5e:	f000 fae3 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002d0 	.word	0x200002d0
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b096      	sub	sp, #88	; 0x58
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fbe7 	bl	800627c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <MX_TIM1_Init+0x158>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001abc:	2220      	movs	r2, #32
 8001abe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8001ac0:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad8:	483a      	ldr	r0, [pc, #232]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ada:	f002 fd0d 	bl	80044f8 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ae4:	f000 faa0 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af2:	4619      	mov	r1, r3
 8001af4:	4833      	ldr	r0, [pc, #204]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001af6:	f003 f941 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b00:	f000 fa92 	bl	8002028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b04:	482f      	ldr	r0, [pc, #188]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001b06:	f002 fd91 	bl	800462c <HAL_TIM_PWM_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b10:	f000 fa8a 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8001b14:	2360      	movs	r3, #96	; 0x60
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b20:	4619      	mov	r1, r3
 8001b22:	4828      	ldr	r0, [pc, #160]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001b24:	f003 fcb6 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b2e:	f000 fa7b 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	2360      	movs	r3, #96	; 0x60
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001b58:	f003 f852 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001b62:	f000 fa61 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001b74:	f003 f844 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001b7e:	f000 fa53 	bl	8002028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001ba6:	f003 fcd3 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001bb0:	f000 fa3a 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM1_Init+0x154>)
 8001bb6:	f000 fb99 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001bba:	bf00      	nop
 8001bbc:	3758      	adds	r7, #88	; 0x58
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000288 	.word	0x20000288
 8001bc8:	40012c00 	.word	0x40012c00

08001bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c22:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c24:	f002 fc68 	bl	80044f8 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c2e:	f000 f9fb 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481c      	ldr	r0, [pc, #112]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c40:	f003 f89c 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001c4a:	f000 f9ed 	bl	8002028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c50:	f002 fcec 	bl	800462c <HAL_TIM_PWM_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c5a:	f000 f9e5 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c6e:	f003 fc11 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c78:	f000 f9d6 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7c:	2360      	movs	r3, #96	; 0x60
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001c94:	f002 ffb4 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001c9e:	f000 f9c3 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM2_Init+0xe4>)
 8001ca4:	f000 fb22 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001ca8:	bf00      	nop
 8001caa:	3738      	adds	r7, #56	; 0x38
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000328 	.word	0x20000328

08001cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001ce6:	4a2d      	ldr	r2, [pc, #180]	; (8001d9c <MX_TIM3_Init+0xe8>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d08:	4823      	ldr	r0, [pc, #140]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d0a:	f002 fbf5 	bl	80044f8 <HAL_TIM_Base_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001d14:	f000 f988 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	4619      	mov	r1, r3
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d26:	f003 f829 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001d30:	f000 f97a 	bl	8002028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d34:	4818      	ldr	r0, [pc, #96]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d36:	f002 fc79 	bl	800462c <HAL_TIM_PWM_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001d40:	f000 f972 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	4619      	mov	r1, r3
 8001d52:	4811      	ldr	r0, [pc, #68]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d54:	f003 fb9e 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001d5e:	f000 f963 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d62:	2360      	movs	r3, #96	; 0x60
 8001d64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d7a:	f002 ff41 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001d84:	f000 f950 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <MX_TIM3_Init+0xe4>)
 8001d8a:	f000 faaf 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001d8e:	bf00      	nop
 8001d90:	3738      	adds	r7, #56	; 0x38
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000100 	.word	0x20000100
 8001d9c:	40000400 	.word	0x40000400

08001da0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	463b      	mov	r3, r7
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <MX_TIM4_Init+0x98>)
 8001dc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001de2:	4814      	ldr	r0, [pc, #80]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001de4:	f002 fb88 	bl	80044f8 <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001dee:	f000 f91b 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480d      	ldr	r0, [pc, #52]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001e00:	f002 ffbc 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e0a:	f000 f90d 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <MX_TIM4_Init+0x94>)
 8001e1c:	f003 fb3a 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e26:	f000 f8ff 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200000b8 	.word	0x200000b8
 8001e38:	40000800 	.word	0x40000800

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART1_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e74:	f003 fbcf 	bl	8005616 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 f8d3 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000200 	.word	0x20000200
 8001e8c:	40013800 	.word	0x40013800

08001e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_DMA_Init+0x58>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <MX_DMA_Init+0x58>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_DMA_Init+0x58>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	200b      	movs	r0, #11
 8001eb4:	f001 f941 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001eb8:	200b      	movs	r0, #11
 8001eba:	f001 f95a 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	200e      	movs	r0, #14
 8001ec4:	f001 f939 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ec8:	200e      	movs	r0, #14
 8001eca:	f001 f952 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f001 f931 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f001 f94a 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a43      	ldr	r2, [pc, #268]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a3d      	ldr	r2, [pc, #244]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a37      	ldr	r2, [pc, #220]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f36:	f043 0308 	orr.w	r3, r3, #8
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <MX_GPIO_Init+0x128>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4832      	ldr	r0, [pc, #200]	; (8002018 <MX_GPIO_Init+0x12c>)
 8001f4e:	f001 fd4d 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	4831      	ldr	r0, [pc, #196]	; (800201c <MX_GPIO_Init+0x130>)
 8001f58:	f001 fd48 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_CL_Pin|LED_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001f62:	482f      	ldr	r0, [pc, #188]	; (8002020 <MX_GPIO_Init+0x134>)
 8001f64:	f001 fd42 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4826      	ldr	r0, [pc, #152]	; (8002018 <MX_GPIO_Init+0x12c>)
 8001f80:	f001 fbb0 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4820      	ldr	r0, [pc, #128]	; (8002018 <MX_GPIO_Init+0x12c>)
 8001f98:	f001 fba4 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PWM_AL_Pin PWM_BL_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin;
 8001f9c:	232c      	movs	r3, #44	; 0x2c
 8001f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481a      	ldr	r0, [pc, #104]	; (800201c <MX_GPIO_Init+0x130>)
 8001fb4:	f001 fb96 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_CL_Pin LED_Pin */
  GPIO_InitStruct.Pin = PWM_CL_Pin|LED_Pin;
 8001fb8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4813      	ldr	r0, [pc, #76]	; (8002020 <MX_GPIO_Init+0x134>)
 8001fd2:	f001 fb87 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_INPUT_Pin D1_INPUT_Pin */
  GPIO_InitStruct.Pin = D2_INPUT_Pin|D1_INPUT_Pin;
 8001fd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_GPIO_Init+0x134>)
 8001fec:	f001 fb7a 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_GPIO_Init+0x138>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <MX_GPIO_Init+0x138>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	6053      	str	r3, [r2, #4]

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40011400 	.word	0x40011400
 800201c:	40010c00 	.word	0x40010c00
 8002020:	40010800 	.word	0x40010800
 8002024:	40010000 	.word	0x40010000

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_MspInit+0x5c>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_MspInit+0x5c>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_MspInit+0x5c>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_MspInit+0x5c>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_MspInit+0x5c>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_MspInit+0x5c>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_MspInit+0x60>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_MspInit+0x60>)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000

08002098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_ADC_MspInit+0xe8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d15f      	bne.n	8002178 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_ADC_MspInit+0xec>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IC_Pin|ADC_UMOT_Pin|ADC_UC_Pin|ADC_UB_Pin
 8002100:	231f      	movs	r3, #31
 8002102:	61bb      	str	r3, [r7, #24]
                          |ADC_UA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002104:	2303      	movs	r3, #3
 8002106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4619      	mov	r1, r3
 800210e:	481e      	ldr	r0, [pc, #120]	; (8002188 <HAL_ADC_MspInit+0xf0>)
 8002110:	f001 fae8 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IB_Pin|ADC_IA_Pin;
 8002114:	2303      	movs	r3, #3
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002118:	2303      	movs	r3, #3
 800211a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4619      	mov	r1, r3
 8002122:	481a      	ldr	r0, [pc, #104]	; (800218c <HAL_ADC_MspInit+0xf4>)
 8002124:	f001 fade 	bl	80036e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_ADC_MspInit+0xfc>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002146:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 800214a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002152:	2220      	movs	r2, #32
 8002154:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002158:	2200      	movs	r2, #0
 800215a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 800215e:	f001 f823 	bl	80031a8 <HAL_DMA_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002168:	f7ff ff5e 	bl	8002028 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002170:	621a      	str	r2, [r3, #32]
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_ADC_MspInit+0xf8>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40012400 	.word	0x40012400
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800
 800218c:	40010c00 	.word	0x40010c00
 8002190:	20000244 	.word	0x20000244
 8002194:	40020008 	.word	0x40020008

08002198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_SPI_MspInit+0x88>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d12f      	bne.n	8002218 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_SPI_MspInit+0x8c>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 80021e8:	23a0      	movs	r3, #160	; 0xa0
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <HAL_SPI_MspInit+0x90>)
 80021fc:	f001 fa72 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4619      	mov	r1, r3
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_SPI_MspInit+0x90>)
 8002214:	f001 fa66 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013000 	.word	0x40013000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800

0800222c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_TIM_Base_MspInit+0xb0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d114      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2019      	movs	r0, #25
 800225c:	f000 ff6d 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002260:	2019      	movs	r0, #25
 8002262:	f000 ff86 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002266:	e034      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d10c      	bne.n	800228c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
}
 800228a:	e022      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	e010      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_TIM_Base_MspInit+0xbc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10b      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800

080022ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_TIM_MspPostInit+0x11c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d119      	bne.n	8002340 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a3e      	ldr	r2, [pc, #248]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH_Pin;
 8002324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2302      	movs	r3, #2
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	4619      	mov	r1, r3
 8002338:	4835      	ldr	r0, [pc, #212]	; (8002410 <HAL_TIM_MspPostInit+0x124>)
 800233a:	f001 f9d3 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800233e:	e05f      	b.n	8002400 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d12b      	bne.n	80023a2 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6193      	str	r3, [r2, #24]
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 8002362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2302      	movs	r3, #2
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	4619      	mov	r1, r3
 8002376:	4826      	ldr	r0, [pc, #152]	; (8002410 <HAL_TIM_MspPostInit+0x124>)
 8002378:	f001 f9b4 	bl	80036e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_TIM_MspPostInit+0x128>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
 800239a:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_TIM_MspPostInit+0x128>)
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	6053      	str	r3, [r2, #4]
}
 80023a0:	e02e      	b.n	8002400 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_TIM_MspPostInit+0x12c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d129      	bne.n	8002400 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_TIM_MspPostInit+0x120>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BH_Pin;
 80023c4:	2310      	movs	r3, #16
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2302      	movs	r3, #2
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BH_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4811      	ldr	r0, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x130>)
 80023d8:	f001 f984 	bl	80036e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_TIM_MspPostInit+0x128>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_TIM_MspPostInit+0x128>)
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	6053      	str	r3, [r2, #4]
}
 8002400:	bf00      	nop
 8002402:	3730      	adds	r7, #48	; 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40010800 	.word	0x40010800
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40010c00 	.word	0x40010c00

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a4d      	ldr	r2, [pc, #308]	; (8002570 <HAL_UART_MspInit+0x150>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 8092 	bne.w	8002566 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_UART_MspInit+0x154>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_UART_MspInit+0x154>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_UART_MspInit+0x154>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_UART_MspInit+0x154>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_UART_MspInit+0x154>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_UART_MspInit+0x154>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002472:	2340      	movs	r3, #64	; 0x40
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	483c      	ldr	r0, [pc, #240]	; (8002578 <HAL_UART_MspInit+0x158>)
 8002486:	f001 f92d 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4836      	ldr	r0, [pc, #216]	; (8002578 <HAL_UART_MspInit+0x158>)
 800249e:	f001 f921 	bl	80036e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_UART_MspInit+0x15c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_UART_MspInit+0x15c>)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024c0:	4a30      	ldr	r2, [pc, #192]	; (8002584 <HAL_UART_MspInit+0x164>)
 80024c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024e2:	4b27      	ldr	r3, [pc, #156]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ee:	4824      	ldr	r0, [pc, #144]	; (8002580 <HAL_UART_MspInit+0x160>)
 80024f0:	f000 fe5a 	bl	80031a8 <HAL_DMA_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80024fa:	f7ff fd95 	bl	8002028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_UART_MspInit+0x160>)
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <HAL_UART_MspInit+0x160>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_UART_MspInit+0x168>)
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_UART_MspInit+0x16c>)
 800250e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002512:	2210      	movs	r2, #16
 8002514:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_UART_MspInit+0x168>)
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_UART_MspInit+0x168>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800253a:	4813      	ldr	r0, [pc, #76]	; (8002588 <HAL_UART_MspInit+0x168>)
 800253c:	f000 fe34 	bl	80031a8 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002546:	f7ff fd6f 	bl	8002028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_UART_MspInit+0x168>)
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_UART_MspInit+0x168>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2025      	movs	r0, #37	; 0x25
 800255c:	f000 fded 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002560:	2025      	movs	r0, #37	; 0x25
 8002562:	f000 fe06 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40013800 	.word	0x40013800
 8002574:	40021000 	.word	0x40021000
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40010000 	.word	0x40010000
 8002580:	200001bc 	.word	0x200001bc
 8002584:	40020058 	.word	0x40020058
 8002588:	20000148 	.word	0x20000148
 800258c:	40020044 	.word	0x40020044

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <HardFault_Handler+0x4>

080025a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <MemManage_Handler+0x4>

080025a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <BusFault_Handler+0x4>

080025ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <UsageFault_Handler+0x4>

080025b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025dc:	f000 f8d4 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ea:	f000 ff47 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000244 	.word	0x20000244

080025f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <DMA1_Channel4_IRQHandler+0x10>)
 80025fe:	f000 ff3d 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000148 	.word	0x20000148

0800260c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <DMA1_Channel5_IRQHandler+0x10>)
 8002612:	f000 ff33 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200001bc 	.word	0x200001bc

08002620 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <TIM1_UP_IRQHandler+0x10>)
 8002626:	f002 f9e3 	bl	80049f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000288 	.word	0x20000288

08002634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <USART1_IRQHandler+0x10>)
 800263a:	f003 f8d5 	bl	80057e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000200 	.word	0x20000200

08002648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <SystemInit+0x5c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <SystemInit+0x5c>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <SystemInit+0x5c>)
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4911      	ldr	r1, [pc, #68]	; (80026a4 <SystemInit+0x5c>)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <SystemInit+0x60>)
 8002660:	4013      	ands	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <SystemInit+0x5c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <SystemInit+0x5c>)
 800266a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <SystemInit+0x5c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SystemInit+0x5c>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <SystemInit+0x5c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <SystemInit+0x5c>)
 8002686:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800268a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SystemInit+0x5c>)
 800268e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002692:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SystemInit+0x64>)
 8002696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800269a:	609a      	str	r2, [r3, #8]
#endif 
 }
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40021000 	.word	0x40021000
 80026a8:	f8ff0000 	.word	0xf8ff0000
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026b2:	e003      	b.n	80026bc <LoopCopyDataInit>

080026b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026ba:	3104      	adds	r1, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026c4:	d3f6      	bcc.n	80026b4 <CopyDataInit>
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026c8:	e002      	b.n	80026d0 <LoopFillZerobss>

080026ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026cc:	f842 3b04 	str.w	r3, [r2], #4

080026d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026d4:	d3f9      	bcc.n	80026ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026d6:	f7ff ffb7 	bl	8002648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f003 fd9d 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026de:	f7ff f877 	bl	80017d0 <main>
  bx lr
 80026e2:	4770      	bx	lr
  ldr r3, =_sidata
 80026e4:	080062d4 	.word	0x080062d4
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026ec:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80026f0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80026f4:	20000374 	.word	0x20000374

080026f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC1_2_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_Init+0x28>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_Init+0x28>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f000 fd09 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002712:	2000      	movs	r0, #0
 8002714:	f000 f808 	bl	8002728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002718:	f7ff fc8c 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x54>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x58>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fd21 	bl	800318e <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00e      	b.n	8002774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d80a      	bhi.n	8002772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f000 fce9 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_InitTick+0x5c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000004 	.word	0x20000004
 8002780:	2000000c 	.word	0x2000000c
 8002784:	20000008 	.word	0x20000008

08002788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x1c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_IncTick+0x20>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_IncTick+0x20>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	20000370 	.word	0x20000370

080027ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <HAL_GetTick+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000370 	.word	0x20000370

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff fff0 	bl	80027ac <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffe0 	bl	80027ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c

08002808 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0be      	b.n	80029a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fc26 	bl	8002098 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 faf5 	bl	8002e3c <ADC_ConversionStop_Disable>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 8099 	bne.w	8002996 <HAL_ADC_Init+0x18e>
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8095 	bne.w	8002996 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	f043 0202 	orr.w	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002888:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7b1b      	ldrb	r3, [r3, #12]
 800288e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002890:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4313      	orrs	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d003      	beq.n	80028aa <HAL_ADC_Init+0xa2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_ADC_Init+0xa8>
 80028aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_Init+0xaa>
 80028b0:	2300      	movs	r3, #0
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7d1b      	ldrb	r3, [r3, #20]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d119      	bne.n	80028f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7b1b      	ldrb	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	035a      	lsls	r2, r3, #13
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	e00b      	b.n	80028f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_ADC_Init+0x1a8>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002924:	d003      	beq.n	800292e <HAL_ADC_Init+0x126>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d104      	bne.n	8002938 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	3b01      	subs	r3, #1
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	430a      	orrs	r2, r1
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_ADC_Init+0x1ac>)
 8002954:	4013      	ands	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d10b      	bne.n	8002974 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002972:	e018      	b.n	80029a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f023 0312 	bic.w	r3, r3, #18
 800297c:	f043 0210 	orr.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002994:	e007      	b.n	80029a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	ffe1f7fd 	.word	0xffe1f7fd
 80029b4:	ff1f0efe 	.word	0xff1f0efe

080029b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a64      	ldr	r2, [pc, #400]	; (8002b60 <HAL_ADC_Start_DMA+0x1a8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_Start_DMA+0x24>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_ADC_Start_DMA+0x1ac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d106      	bne.n	80029ea <HAL_ADC_Start_DMA+0x32>
 80029dc:	4b60      	ldr	r3, [pc, #384]	; (8002b60 <HAL_ADC_Start_DMA+0x1a8>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 80b3 	bne.w	8002b50 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_Start_DMA+0x40>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0ae      	b.n	8002b56 <HAL_ADC_Start_DMA+0x19e>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f9c1 	bl	8002d88 <ADC_Enable>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 809a 	bne.w	8002b46 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4e      	ldr	r2, [pc, #312]	; (8002b64 <HAL_ADC_Start_DMA+0x1ac>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_Start_DMA+0x84>
 8002a30:	4b4b      	ldr	r3, [pc, #300]	; (8002b60 <HAL_ADC_Start_DMA+0x1a8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d115      	bne.n	8002a68 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d026      	beq.n	8002aa4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a66:	e01d      	b.n	8002aa4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a39      	ldr	r2, [pc, #228]	; (8002b60 <HAL_ADC_Start_DMA+0x1a8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_ADC_Start_DMA+0xd0>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a38      	ldr	r2, [pc, #224]	; (8002b64 <HAL_ADC_Start_DMA+0x1ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10d      	bne.n	8002aa4 <HAL_ADC_Start_DMA+0xec>
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_ADC_Start_DMA+0x1a8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f023 0206 	bic.w	r2, r3, #6
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <HAL_ADC_Start_DMA+0x1b0>)
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <HAL_ADC_Start_DMA+0x1b4>)
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_ADC_Start_DMA+0x1b8>)
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0202 	mvn.w	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a18      	ldr	r0, [r3, #32]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	334c      	adds	r3, #76	; 0x4c
 8002b08:	4619      	mov	r1, r3
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f000 fba5 	bl	800325c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b20:	d108      	bne.n	8002b34 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b30:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b32:	e00f      	b.n	8002b54 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b42:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b44:	e006      	b.n	8002b54 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002b4e:	e001      	b.n	8002b54 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40012400 	.word	0x40012400
 8002b64:	40012800 	.word	0x40012800
 8002b68:	08002ebf 	.word	0x08002ebf
 8002b6c:	08002f3b 	.word	0x08002f3b
 8002b70:	08002f57 	.word	0x08002f57

08002b74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x20>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0dc      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x1da>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d81c      	bhi.n	8002c02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b05      	subs	r3, #5
 8002bda:	221f      	movs	r2, #31
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4019      	ands	r1, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b05      	subs	r3, #5
 8002bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8002c00:	e03c      	b.n	8002c7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d81c      	bhi.n	8002c44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b23      	subs	r3, #35	; 0x23
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4019      	ands	r1, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b23      	subs	r3, #35	; 0x23
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
 8002c42:	e01b      	b.n	8002c7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	3b41      	subs	r3, #65	; 0x41
 8002c56:	221f      	movs	r2, #31
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4019      	ands	r1, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b41      	subs	r3, #65	; 0x41
 8002c70:	fa00 f203 	lsl.w	r2, r0, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d91c      	bls.n	8002cbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	2207      	movs	r2, #7
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4019      	ands	r1, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6898      	ldr	r0, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	3b1e      	subs	r3, #30
 8002cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	e019      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6919      	ldr	r1, [r3, #16]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	2207      	movs	r2, #7
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4019      	ands	r1, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6898      	ldr	r0, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d003      	beq.n	8002d02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cfe:	2b11      	cmp	r3, #17
 8002d00:	d132      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_ADC_ConfigChannel+0x1e4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d125      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d126      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d11a      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	0c9a      	lsrs	r2, r3, #18
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d48:	e002      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1b2>
 8002d56:	e007      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012400 	.word	0x40012400
 8002d80:	20000004 	.word	0x20000004
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d040      	beq.n	8002e28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <ADC_Enable+0xac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <ADC_Enable+0xb0>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dc4:	e002      	b.n	8002dcc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dd2:	f7ff fceb 	bl	80027ac <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dd8:	e01f      	b.n	8002e1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dda:	f7ff fce7 	bl	80027ac <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d918      	bls.n	8002e1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d011      	beq.n	8002e1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f043 0210 	orr.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d1d8      	bne.n	8002dda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000004 	.word	0x20000004
 8002e38:	431bde83 	.word	0x431bde83

08002e3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d12e      	bne.n	8002eb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e66:	f7ff fca1 	bl	80027ac <HAL_GetTick>
 8002e6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e6c:	e01b      	b.n	8002ea6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e6e:	f7ff fc9d 	bl	80027ac <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d914      	bls.n	8002ea6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d0dc      	beq.n	8002e6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d127      	bne.n	8002f28 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ef2:	d115      	bne.n	8002f20 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7fd febd 	bl	8000ca0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f26:	e004      	b.n	8002f32 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fe13 	bl	8002b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fe02 	bl	8002b86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4906      	ldr	r1, [pc, #24]	; (8003024 <__NVIC_EnableIRQ+0x34>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	; (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff90 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff2d 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff42 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff90 	bl	800307c <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5f 	bl	8003028 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff35 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e043      	b.n	8003246 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_DMA_Init+0xa8>)
 80031c6:	4413      	add	r3, r2
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_DMA_Init+0xac>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_DMA_Init+0xb0>)
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	bffdfff8 	.word	0xbffdfff8
 8003254:	cccccccd 	.word	0xcccccccd
 8003258:	40020000 	.word	0x40020000

0800325c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_DMA_Start_IT+0x20>
 8003278:	2302      	movs	r3, #2
 800327a:	e04a      	b.n	8003312 <HAL_DMA_Start_IT+0xb6>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800328a:	2b01      	cmp	r3, #1
 800328c:	d13a      	bne.n	8003304 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f9e8 	bl	8003688 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 020e 	orr.w	r2, r2, #14
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 020a 	orr.w	r2, r2, #10
 80032f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e005      	b.n	8003310 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2204      	movs	r2, #4
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e020      	b.n	8003384 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020e 	bic.w	r2, r2, #14
 8003350:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
	...

08003390 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d005      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e051      	b.n	8003456 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 020e 	bic.w	r2, r2, #14
 80033c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_DMA_Abort_IT+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d029      	beq.n	8003430 <HAL_DMA_Abort_IT+0xa0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_DMA_Abort_IT+0xd4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d022      	beq.n	800342c <HAL_DMA_Abort_IT+0x9c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_DMA_Abort_IT+0xd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01a      	beq.n	8003426 <HAL_DMA_Abort_IT+0x96>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_DMA_Abort_IT+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d012      	beq.n	8003420 <HAL_DMA_Abort_IT+0x90>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_DMA_Abort_IT+0xe0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00a      	beq.n	800341a <HAL_DMA_Abort_IT+0x8a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_DMA_Abort_IT+0xe4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d102      	bne.n	8003414 <HAL_DMA_Abort_IT+0x84>
 800340e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003412:	e00e      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	e00b      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 800341a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341e:	e008      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 8003420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003424:	e005      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 8003426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342a:	e002      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 800342c:	2310      	movs	r3, #16
 800342e:	e000      	b.n	8003432 <HAL_DMA_Abort_IT+0xa2>
 8003430:	2301      	movs	r3, #1
 8003432:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_DMA_Abort_IT+0xe8>)
 8003434:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
    } 
  }
  return status;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020008 	.word	0x40020008
 8003464:	4002001c 	.word	0x4002001c
 8003468:	40020030 	.word	0x40020030
 800346c:	40020044 	.word	0x40020044
 8003470:	40020058 	.word	0x40020058
 8003474:	4002006c 	.word	0x4002006c
 8003478:	40020000 	.word	0x40020000

0800347c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d04f      	beq.n	8003544 <HAL_DMA_IRQHandler+0xc8>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04a      	beq.n	8003544 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d029      	beq.n	800352a <HAL_DMA_IRQHandler+0xae>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a65      	ldr	r2, [pc, #404]	; (8003670 <HAL_DMA_IRQHandler+0x1f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_DMA_IRQHandler+0xaa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_DMA_IRQHandler+0x1f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01a      	beq.n	8003520 <HAL_DMA_IRQHandler+0xa4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a62      	ldr	r2, [pc, #392]	; (8003678 <HAL_DMA_IRQHandler+0x1fc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d012      	beq.n	800351a <HAL_DMA_IRQHandler+0x9e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_DMA_IRQHandler+0x200>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x98>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5f      	ldr	r2, [pc, #380]	; (8003680 <HAL_DMA_IRQHandler+0x204>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d102      	bne.n	800350e <HAL_DMA_IRQHandler+0x92>
 8003508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800350c:	e00e      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800350e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003512:	e00b      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003518:	e008      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800351a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351e:	e005      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003524:	e002      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 8003526:	2340      	movs	r3, #64	; 0x40
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0xb0>
 800352a:	2304      	movs	r3, #4
 800352c:	4a55      	ldr	r2, [pc, #340]	; (8003684 <HAL_DMA_IRQHandler+0x208>)
 800352e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8094 	beq.w	8003662 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003542:	e08e      	b.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2202      	movs	r2, #2
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d056      	beq.n	8003602 <HAL_DMA_IRQHandler+0x186>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d051      	beq.n	8003602 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020a 	bic.w	r2, r2, #10
 800357a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d029      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x166>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_DMA_IRQHandler+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0x162>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_DMA_IRQHandler+0x1f8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x15c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_DMA_IRQHandler+0x1fc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d012      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x156>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <HAL_DMA_IRQHandler+0x200>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x150>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_DMA_IRQHandler+0x204>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <HAL_DMA_IRQHandler+0x14a>
 80035c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035c4:	e00e      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ca:	e00b      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d0:	e008      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035d6:	e005      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035dc:	e002      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035de:	2320      	movs	r3, #32
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_IRQHandler+0x168>
 80035e2:	2302      	movs	r3, #2
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_DMA_IRQHandler+0x208>)
 80035e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d034      	beq.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003600:	e02f      	b.n	8003662 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 020e 	bic.w	r2, r2, #14
 800362a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
    }
  }
  return;
 8003662:	bf00      	nop
 8003664:	bf00      	nop
}
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40020008 	.word	0x40020008
 8003670:	4002001c 	.word	0x4002001c
 8003674:	40020030 	.word	0x40020030
 8003678:	40020044 	.word	0x40020044
 800367c:	40020058 	.word	0x40020058
 8003680:	4002006c 	.word	0x4002006c
 8003684:	40020000 	.word	0x40020000

08003688 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d108      	bne.n	80036c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c6:	e007      	b.n	80036d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b08b      	sub	sp, #44	; 0x2c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e169      	b.n	80039cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036f8:	2201      	movs	r2, #1
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8158 	bne.w	80039c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a9a      	ldr	r2, [pc, #616]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d05e      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003720:	4a98      	ldr	r2, [pc, #608]	; (8003984 <HAL_GPIO_Init+0x2a0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d875      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003726:	4a98      	ldr	r2, [pc, #608]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d058      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 800372c:	4a96      	ldr	r2, [pc, #600]	; (8003988 <HAL_GPIO_Init+0x2a4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d86f      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003732:	4a96      	ldr	r2, [pc, #600]	; (800398c <HAL_GPIO_Init+0x2a8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d052      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003738:	4a94      	ldr	r2, [pc, #592]	; (800398c <HAL_GPIO_Init+0x2a8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d869      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800373e:	4a94      	ldr	r2, [pc, #592]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04c      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003744:	4a92      	ldr	r2, [pc, #584]	; (8003990 <HAL_GPIO_Init+0x2ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d863      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800374a:	4a92      	ldr	r2, [pc, #584]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d046      	beq.n	80037de <HAL_GPIO_Init+0xfa>
 8003750:	4a90      	ldr	r2, [pc, #576]	; (8003994 <HAL_GPIO_Init+0x2b0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d85d      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 8003756:	2b12      	cmp	r3, #18
 8003758:	d82a      	bhi.n	80037b0 <HAL_GPIO_Init+0xcc>
 800375a:	2b12      	cmp	r3, #18
 800375c:	d859      	bhi.n	8003812 <HAL_GPIO_Init+0x12e>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_GPIO_Init+0x80>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037df 	.word	0x080037df
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037cb 	.word	0x080037cb
 8003770:	0800380d 	.word	0x0800380d
 8003774:	08003813 	.word	0x08003813
 8003778:	08003813 	.word	0x08003813
 800377c:	08003813 	.word	0x08003813
 8003780:	08003813 	.word	0x08003813
 8003784:	08003813 	.word	0x08003813
 8003788:	08003813 	.word	0x08003813
 800378c:	08003813 	.word	0x08003813
 8003790:	08003813 	.word	0x08003813
 8003794:	08003813 	.word	0x08003813
 8003798:	08003813 	.word	0x08003813
 800379c:	08003813 	.word	0x08003813
 80037a0:	08003813 	.word	0x08003813
 80037a4:	08003813 	.word	0x08003813
 80037a8:	080037c1 	.word	0x080037c1
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	4a79      	ldr	r2, [pc, #484]	; (8003998 <HAL_GPIO_Init+0x2b4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037b6:	e02c      	b.n	8003812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	623b      	str	r3, [r7, #32]
          break;
 80037be:	e029      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	623b      	str	r3, [r7, #32]
          break;
 80037c8:	e024      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	3308      	adds	r3, #8
 80037d0:	623b      	str	r3, [r7, #32]
          break;
 80037d2:	e01f      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	330c      	adds	r3, #12
 80037da:	623b      	str	r3, [r7, #32]
          break;
 80037dc:	e01a      	b.n	8003814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037e6:	2304      	movs	r3, #4
 80037e8:	623b      	str	r3, [r7, #32]
          break;
 80037ea:	e013      	b.n	8003814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f4:	2308      	movs	r3, #8
 80037f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	611a      	str	r2, [r3, #16]
          break;
 80037fe:	e009      	b.n	8003814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003800:	2308      	movs	r3, #8
 8003802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	615a      	str	r2, [r3, #20]
          break;
 800380a:	e003      	b.n	8003814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
          break;
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x130>
          break;
 8003812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d801      	bhi.n	800381e <HAL_GPIO_Init+0x13a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_Init+0x13e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d802      	bhi.n	8003830 <HAL_GPIO_Init+0x14c>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x152>
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	3b08      	subs	r3, #8
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	210f      	movs	r1, #15
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80b1 	beq.w	80039c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4a4c      	ldr	r2, [pc, #304]	; (800399c <HAL_GPIO_Init+0x2b8>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_GPIO_Init+0x2b8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800387c:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_GPIO_Init+0x2c0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_Init+0x1ec>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_GPIO_Init+0x2c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_Init+0x1e8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_GPIO_Init+0x2c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1e4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_GPIO_Init+0x2cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_Init+0x1e0>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e004      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e002      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_GPIO_Init+0x1ee>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	f002 0203 	and.w	r2, r2, #3
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	4093      	lsls	r3, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038e2:	492f      	ldr	r1, [pc, #188]	; (80039a0 <HAL_GPIO_Init+0x2bc>)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	492c      	ldr	r1, [pc, #176]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	4928      	ldr	r1, [pc, #160]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4922      	ldr	r1, [pc, #136]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	43db      	mvns	r3, r3
 800393a:	491e      	ldr	r1, [pc, #120]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800393c:	4013      	ands	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4918      	ldr	r1, [pc, #96]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	43db      	mvns	r3, r3
 8003962:	4914      	ldr	r1, [pc, #80]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003964:	4013      	ands	r3, r2
 8003966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d021      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_GPIO_Init+0x2d0>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
 8003980:	e021      	b.n	80039c6 <HAL_GPIO_Init+0x2e2>
 8003982:	bf00      	nop
 8003984:	10320000 	.word	0x10320000
 8003988:	10310000 	.word	0x10310000
 800398c:	10220000 	.word	0x10220000
 8003990:	10210000 	.word	0x10210000
 8003994:	10120000 	.word	0x10120000
 8003998:	10110000 	.word	0x10110000
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010800 	.word	0x40010800
 80039a8:	40010c00 	.word	0x40010c00
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40011400 	.word	0x40011400
 80039b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	43db      	mvns	r3, r3
 80039c0:	4909      	ldr	r1, [pc, #36]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3301      	adds	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f47f ae8e 	bne.w	80036f8 <HAL_GPIO_Init+0x14>
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	372c      	adds	r7, #44	; 0x2c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4013      	ands	r3, r2
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	43d9      	mvns	r1, r3
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	611a      	str	r2, [r3, #16]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e26c      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a7c:	4b8f      	ldr	r3, [pc, #572]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
 8003a88:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b89      	ldr	r3, [pc, #548]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x12c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e246      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x76>
 8003ab8:	4b80      	ldr	r3, [pc, #512]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7f      	ldr	r2, [pc, #508]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x98>
 8003ace:	4b7b      	ldr	r3, [pc, #492]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7a      	ldr	r2, [pc, #488]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b78      	ldr	r3, [pc, #480]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a77      	ldr	r2, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xbc>
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a71      	ldr	r2, [pc, #452]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fe3e 	bl	80027ac <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fe3a 	bl	80027ac <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1fa      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe4>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fe2a 	bl	80027ac <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fe26 	bl	80027ac <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1e6      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x10c>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b96:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
 8003ba2:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1ba      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4939      	ldr	r1, [pc, #228]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fe fddf 	bl	80027ac <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fddb 	bl	80027ac <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e19b      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4927      	ldr	r1, [pc, #156]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fdbe 	bl	80027ac <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fdba 	bl	80027ac <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e17a      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03a      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fd9e 	bl	80027ac <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fe fd9a 	bl	80027ac <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e15a      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f000 fad8 	bl	8004248 <RCC_Delay>
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fd84 	bl	80027ac <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca6:	e00f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fe fd80 	bl	80027ac <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d908      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e140      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	42420000 	.word	0x42420000
 8003cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e9      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a6 	beq.w	8003e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b97      	ldr	r3, [pc, #604]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b94      	ldr	r3, [pc, #592]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a93      	ldr	r2, [pc, #588]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b8e      	ldr	r3, [pc, #568]	; (8003f48 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4b8b      	ldr	r3, [pc, #556]	; (8003f48 <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a8a      	ldr	r2, [pc, #552]	; (8003f48 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fe fd41 	bl	80027ac <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fe fd3d 	bl	80027ac <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	; 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0fd      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x312>
 8003d54:	4b7b      	ldr	r3, [pc, #492]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e02d      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x334>
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a75      	ldr	r2, [pc, #468]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	6213      	str	r3, [r2, #32]
 8003d76:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4a72      	ldr	r2, [pc, #456]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6213      	str	r3, [r2, #32]
 8003d82:	e01c      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_OscConfig+0x356>
 8003d8c:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a6c      	ldr	r2, [pc, #432]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6213      	str	r3, [r2, #32]
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a66      	ldr	r2, [pc, #408]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a63      	ldr	r2, [pc, #396]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fcf1 	bl	80027ac <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe fced 	bl	80027ac <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0ab      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCC_OscConfig+0x37e>
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fcdb 	bl	80027ac <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe fcd7 	bl	80027ac <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e095      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a47      	ldr	r2, [pc, #284]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8081 	beq.w	8003f3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d061      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d146      	bne.n	8003eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCC_OscConfig+0x4fc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fe fcab 	bl	80027ac <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fe fca7 	bl	80027ac <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e067      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e82:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	492d      	ldr	r1, [pc, #180]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a19      	ldr	r1, [r3, #32]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	4927      	ldr	r1, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_RCC_OscConfig+0x4fc>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fc7b 	bl	80027ac <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fc77 	bl	80027ac <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e037      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x46a>
 8003ed8:	e02f      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_RCC_OscConfig+0x4fc>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fc64 	bl	80027ac <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe fc60 	bl	80027ac <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e020      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x498>
 8003f06:	e018      	b.n	8003f3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e013      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_OscConfig+0x4f4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	42420060 	.word	0x42420060

08003f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0d0      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b6a      	ldr	r3, [pc, #424]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d910      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b67      	ldr	r3, [pc, #412]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4965      	ldr	r1, [pc, #404]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d040      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d115      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e073      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06b      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4936      	ldr	r1, [pc, #216]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe fbb4 	bl	80027ac <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe fbb0 	bl	80027ac <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e053      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d210      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4922      	ldr	r1, [pc, #136]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1cc>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1d0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fb12 	bl	8002728 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40022000 	.word	0x40022000
 8004114:	40021000 	.word	0x40021000
 8004118:	080062b4 	.word	0x080062b4
 800411c:	20000004 	.word	0x20000004
 8004120:	20000008 	.word	0x20000008

08004124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	b490      	push	{r4, r7}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800412a:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800412c:	1d3c      	adds	r4, r7, #4
 800412e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004134:	f240 2301 	movw	r3, #513	; 0x201
 8004138:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d002      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 800415e:	2b08      	cmp	r3, #8
 8004160:	d003      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x46>
 8004162:	e02d      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004166:	623b      	str	r3, [r7, #32]
      break;
 8004168:	e02d      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	0c9b      	lsrs	r3, r3, #18
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004176:	4413      	add	r3, r2
 8004178:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800417c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c5b      	lsrs	r3, r3, #17
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004196:	4413      	add	r3, r2
 8004198:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800419c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a2:	fb02 f203 	mul.w	r2, r2, r3
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	e004      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	623b      	str	r3, [r7, #32]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c2:	623b      	str	r3, [r7, #32]
      break;
 80041c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c6:	6a3b      	ldr	r3, [r7, #32]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3728      	adds	r7, #40	; 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc90      	pop	{r4, r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	080062a4 	.word	0x080062a4
 80041d8:	40021000 	.word	0x40021000
 80041dc:	007a1200 	.word	0x007a1200
 80041e0:	003d0900 	.word	0x003d0900

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041fc:	f7ff fff2 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4903      	ldr	r1, [pc, #12]	; (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	080062c4 	.word	0x080062c4

08004220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004224:	f7ff ffde 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0adb      	lsrs	r3, r3, #11
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	080062c4 	.word	0x080062c4

08004248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <RCC_Delay+0x34>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <RCC_Delay+0x38>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0a5b      	lsrs	r3, r3, #9
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004264:	bf00      	nop
  }
  while (Delay --);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f9      	bne.n	8004264 <RCC_Delay+0x1c>
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000004 	.word	0x20000004
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d07d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a4:	4b4f      	ldr	r3, [pc, #316]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	61d3      	str	r3, [r2, #28]
 80042bc:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d118      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a42      	ldr	r2, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e4:	f7fe fa62 	bl	80027ac <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	e008      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fe fa5e 	bl	80027ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e06d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b3a      	ldr	r3, [pc, #232]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d02e      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d027      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004332:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe fa2d 	bl	80027ac <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe fa29 	bl	80027ac <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e036      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4917      	ldr	r1, [pc, #92]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	4313      	orrs	r3, r2
 8004388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	490b      	ldr	r1, [pc, #44]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4904      	ldr	r1, [pc, #16]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42420440 	.word	0x42420440

080043f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e076      	b.n	80044f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004412:	d009      	beq.n	8004428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	61da      	str	r2, [r3, #28]
 800441a:	e005      	b.n	8004428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fea8 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	ea42 0103 	orr.w	r1, r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	0c1a      	lsrs	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f002 0204 	and.w	r2, r2, #4
 80044ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e041      	b.n	800458e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fe84 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 fd08 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e032      	b.n	8004616 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_TIM_Base_Start+0x88>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d009      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_TIM_Base_Start+0x8c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <HAL_TIM_Base_Start+0x90>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d111      	bne.n	8004604 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d010      	beq.n	8004614 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004602:	e007      	b.n	8004614 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e041      	b.n	80046c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f839 	bl	80046ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fc6e 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start+0x24>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e022      	b.n	8004746 <HAL_TIM_PWM_Start+0x6a>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d109      	bne.n	800471a <HAL_TIM_PWM_Start+0x3e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e015      	b.n	8004746 <HAL_TIM_PWM_Start+0x6a>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b08      	cmp	r3, #8
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x58>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_TIM_PWM_Start+0x6a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e05e      	b.n	800480c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x82>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475c:	e013      	b.n	8004786 <HAL_TIM_PWM_Start+0xaa>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0x92>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476c:	e00b      	b.n	8004786 <HAL_TIM_PWM_Start+0xaa>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	e003      	b.n	8004786 <HAL_TIM_PWM_Start+0xaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fe5c 	bl	800544c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_TIM_PWM_Start+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d107      	bne.n	80047ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_TIM_PWM_Start+0x138>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xfa>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xfa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_TIM_PWM_Start+0x13c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xfa>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_TIM_PWM_Start+0x140>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d111      	bne.n	80047fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d010      	beq.n	800480a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	e007      	b.n	800480a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800

08004820 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_TIM_PWM_Start_IT+0x24>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e022      	b.n	800488a <HAL_TIM_PWM_Start_IT+0x6a>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b04      	cmp	r3, #4
 8004848:	d109      	bne.n	800485e <HAL_TIM_PWM_Start_IT+0x3e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	e015      	b.n	800488a <HAL_TIM_PWM_Start_IT+0x6a>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d109      	bne.n	8004878 <HAL_TIM_PWM_Start_IT+0x58>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e008      	b.n	800488a <HAL_TIM_PWM_Start_IT+0x6a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0a4      	b.n	80049dc <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Start_IT+0x82>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a0:	e013      	b.n	80048ca <HAL_TIM_PWM_Start_IT+0xaa>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start_IT+0x92>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b0:	e00b      	b.n	80048ca <HAL_TIM_PWM_Start_IT+0xaa>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start_IT+0xa2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c0:	e003      	b.n	80048ca <HAL_TIM_PWM_Start_IT+0xaa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d841      	bhi.n	8004954 <HAL_TIM_PWM_Start_IT+0x134>
 80048d0:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <HAL_TIM_PWM_Start_IT+0xb8>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	0800490d 	.word	0x0800490d
 80048dc:	08004955 	.word	0x08004955
 80048e0:	08004955 	.word	0x08004955
 80048e4:	08004955 	.word	0x08004955
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	08004955 	.word	0x08004955
 80048f0:	08004955 	.word	0x08004955
 80048f4:	08004955 	.word	0x08004955
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004955 	.word	0x08004955
 8004904:	08004955 	.word	0x08004955
 8004908:	08004943 	.word	0x08004943
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0202 	orr.w	r2, r2, #2
 800491a:	60da      	str	r2, [r3, #12]
      break;
 800491c:	e01b      	b.n	8004956 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0204 	orr.w	r2, r2, #4
 800492c:	60da      	str	r2, [r3, #12]
      break;
 800492e:	e012      	b.n	8004956 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	60da      	str	r2, [r3, #12]
      break;
 8004940:	e009      	b.n	8004956 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0210 	orr.w	r2, r2, #16
 8004950:	60da      	str	r2, [r3, #12]
      break;
 8004952:	e000      	b.n	8004956 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004954:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fd74 	bl	800544c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d107      	bne.n	800497e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIM_PWM_Start_IT+0x186>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d009      	beq.n	80049a6 <HAL_TIM_PWM_Start_IT+0x186>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIM_PWM_Start_IT+0x186>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <HAL_TIM_PWM_Start_IT+0x1cc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d111      	bne.n	80049ca <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d010      	beq.n	80049da <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	e007      	b.n	80049da <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800

080049f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d122      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0202 	mvn.w	r2, #2
 8004a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa78 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa6b 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fa7a 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0204 	mvn.w	r2, #4
 8004a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2202      	movs	r2, #2
 8004a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa4e 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa41 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa50 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa24 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa17 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa26 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9fa 	bl	8004f28 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9ed 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f9fc 	bl	8004f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10e      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0201 	mvn.w	r2, #1
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9c8 	bl	8004f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fd32 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fddc 	bl	8001784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fcfd 	bl	80055f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ac      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9d0 	bl	8005010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e062      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa16 	bl	80050dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa5f 	bl	80051b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 faa9 	bl	8005284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0b3      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x180>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d03e      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xd0>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8087 	bhi.w	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	f000 8085 	beq.w	8004ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d87f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d01a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xa2>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d87b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d050      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x116>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d877      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d03c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xf6>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d873      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d058      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x136>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d86f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x156>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d86b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d060      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x156>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d867      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x156>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d05a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e1c:	e062      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f000 faee 	bl	800540e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e04e      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f000 fad7 	bl	800540e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	609a      	str	r2, [r3, #8]
      break;
 8004e70:	e03b      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fa4e 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2150      	movs	r1, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 faa5 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004e90:	e02b      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fa6c 	bl	800537c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2160      	movs	r1, #96	; 0x60
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa95 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e01b      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa2e 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa85 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e00b      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 fa7c 	bl	80053da <TIM_ITRx_SetConfig>
        break;
 8004ee2:	e002      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ee4:	bf00      	nop
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a26      	ldr	r2, [pc, #152]	; (8005008 <TIM_Base_SetConfig+0xbc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a25      	ldr	r2, [pc, #148]	; (800500c <TIM_Base_SetConfig+0xc0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	; (8005008 <TIM_Base_SetConfig+0xbc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <TIM_Base_SetConfig+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <TIM_Base_SetConfig+0xb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800

08005010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <TIM_OC1_SetConfig+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d111      	bne.n	80050b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00

080050dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0210 	bic.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <TIM_OC2_SetConfig+0xd0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10d      	bne.n	8005158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <TIM_OC2_SetConfig+0xd0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00

080051b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <TIM_OC3_SetConfig+0xd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10d      	bne.n	800522a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <TIM_OC3_SetConfig+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d113      	bne.n	800525a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00

08005284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a0f      	ldr	r2, [pc, #60]	; (800531c <TIM_OC4_SetConfig+0x98>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d109      	bne.n	80052f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00

08005320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f023 0210 	bic.w	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	031b      	lsls	r3, r3, #12
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f043 0307 	orr.w	r3, r3, #7
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	431a      	orrs	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	609a      	str	r2, [r3, #8]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2201      	movs	r2, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	43db      	mvns	r3, r3
 800546e:	401a      	ands	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e046      	b.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a16      	ldr	r2, [pc, #88]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d009      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a12      	ldr	r2, [pc, #72]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a10      	ldr	r2, [pc, #64]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d10c      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4313      	orrs	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800

08005550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005568:	2302      	movs	r3, #2
 800556a:	e03d      	b.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e03f      	b.n	80056a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fc feef 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2224      	movs	r2, #36	; 0x24
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005658:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fd4e 	bl	80060fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800568e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d153      	bne.n	8005772 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_UART_Transmit_DMA+0x26>
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e04c      	b.n	8005774 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit_DMA+0x38>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e045      	b.n	8005774 <HAL_UART_Transmit_DMA+0xc4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2221      	movs	r2, #33	; 0x21
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_UART_Transmit_DMA+0xcc>)
 8005716:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_UART_Transmit_DMA+0xd0>)
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	4a17      	ldr	r2, [pc, #92]	; (8005784 <HAL_UART_Transmit_DMA+0xd4>)
 8005726:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005730:	f107 0308 	add.w	r3, r7, #8
 8005734:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3304      	adds	r3, #4
 8005744:	461a      	mov	r2, r3
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	f7fd fd88 	bl	800325c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005754:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800576c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	08005b9b 	.word	0x08005b9b
 8005780:	08005bed 	.word	0x08005bed
 8005784:	08005cd5 	.word	0x08005cd5

08005788 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d11d      	bne.n	80057de <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Receive_DMA+0x26>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e016      	b.n	80057e0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Receive_DMA+0x38>
 80057bc:	2302      	movs	r3, #2
 80057be:	e00f      	b.n	80057e0 <HAL_UART_Receive_DMA+0x58>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fac7 	bl	8005d68 <UART_Start_Receive_DMA>
 80057da:	4603      	mov	r3, r0
 80057dc:	e000      	b.n	80057e0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_UART_IRQHandler+0x52>
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fbb8 	bl	8005fa8 <UART_Receive_IT>
      return;
 8005838:	e17b      	b.n	8005b32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80b1 	beq.w	80059a4 <HAL_UART_IRQHandler+0x1bc>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_UART_IRQHandler+0x70>
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80a6 	beq.w	80059a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_UART_IRQHandler+0x90>
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f043 0201 	orr.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_UART_IRQHandler+0xb0>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	f043 0202 	orr.w	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_UART_IRQHandler+0xd0>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f043 0204 	orr.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <HAL_UART_IRQHandler+0xfa>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_UART_IRQHandler+0xee>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f043 0208 	orr.w	r2, r3, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 811e 	beq.w	8005b28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_UART_IRQHandler+0x11e>
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb51 	bl	8005fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_UART_IRQHandler+0x146>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d031      	beq.n	8005992 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa93 	bl	8005e5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d023      	beq.n	800598a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	4a76      	ldr	r2, [pc, #472]	; (8005b38 <HAL_UART_IRQHandler+0x350>)
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd fd12 	bl	8003390 <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00e      	b.n	80059a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8f5 	bl	8005b72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00a      	b.n	80059a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8f1 	bl	8005b72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e006      	b.n	80059a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8ed 	bl	8005b72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800599e:	e0c3      	b.n	8005b28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	bf00      	nop
    return;
 80059a2:	e0c1      	b.n	8005b28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	f040 80a1 	bne.w	8005af0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 809b 	beq.w	8005af0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8095 	beq.w	8005af0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d04e      	beq.n	8005a88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80059f4:	8a3b      	ldrh	r3, [r7, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8098 	beq.w	8005b2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a00:	8a3a      	ldrh	r2, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f080 8092 	bcs.w	8005b2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8a3a      	ldrh	r2, [r7, #16]
 8005a0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d02b      	beq.n	8005a70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0210 	bic.w	r2, r2, #16
 8005a64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fc55 	bl	800331a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f87f 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a86:	e051      	b.n	8005b2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d047      	beq.n	8005b30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005aa0:	8a7b      	ldrh	r3, [r7, #18]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d044      	beq.n	8005b30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ab4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0210 	bic.w	r2, r2, #16
 8005ae2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae4:	8a7b      	ldrh	r3, [r7, #18]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f84b 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005aee:	e01f      	b.n	8005b30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_UART_IRQHandler+0x324>
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f9e8 	bl	8005eda <UART_Transmit_IT>
    return;
 8005b0a:	e012      	b.n	8005b32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_UART_IRQHandler+0x34a>
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa29 	bl	8005f78 <UART_EndTransmit_IT>
    return;
 8005b26:	e004      	b.n	8005b32 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b28:	bf00      	nop
 8005b2a:	e002      	b.n	8005b32 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b30:	bf00      	nop
  }
}
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08005eb3 	.word	0x08005eb3

08005b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr

08005b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bda:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bdc:	e002      	b.n	8005be4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff ffac 	bl	8005b3c <HAL_UART_TxCpltCallback>
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff ffa7 	bl	8005b4e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d12a      	bne.n	8005c7a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c38:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695a      	ldr	r2, [r3, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c58:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d107      	bne.n	8005c7a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0210 	bic.w	r2, r2, #16
 8005c78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d106      	bne.n	8005c90 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ff7b 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c8e:	e002      	b.n	8005c96 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7fa feb7 	bl	8000a04 <HAL_UART_RxCpltCallback>
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d108      	bne.n	8005cc6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff60 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cc4:	e002      	b.n	8005ccc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff ff4a 	bl	8005b60 <HAL_UART_RxHalfCpltCallback>
}
 8005ccc:	bf00      	nop
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b21      	cmp	r3, #33	; 0x21
 8005d06:	d108      	bne.n	8005d1a <UART_DMAError+0x46>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d14:	68b8      	ldr	r0, [r7, #8]
 8005d16:	f000 f88b 	bl	8005e30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b22      	cmp	r3, #34	; 0x22
 8005d3a:	d108      	bne.n	8005d4e <UART_DMAError+0x7a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f000 f886 	bl	8005e5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0210 	orr.w	r2, r3, #16
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d5a:	68b8      	ldr	r0, [r7, #8]
 8005d5c:	f7ff ff09 	bl	8005b72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2222      	movs	r2, #34	; 0x22
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	4a23      	ldr	r2, [pc, #140]	; (8005e24 <UART_Start_Receive_DMA+0xbc>)
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <UART_Start_Receive_DMA+0xc0>)
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <UART_Start_Receive_DMA+0xc4>)
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	2200      	movs	r2, #0
 8005dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	f7fd fa48 	bl	800325c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	08005c09 	.word	0x08005c09
 8005e28:	08005c9f 	.word	0x08005c9f
 8005e2c:	08005cd5 	.word	0x08005cd5

08005e30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005e46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0210 	bic.w	r2, r2, #16
 8005e98:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fe50 	bl	8005b72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b21      	cmp	r3, #33	; 0x21
 8005eec:	d13e      	bne.n	8005f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	d114      	bne.n	8005f22 <UART_Transmit_IT+0x48>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d110      	bne.n	8005f22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]
 8005f20:	e008      	b.n	8005f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6211      	str	r1, [r2, #32]
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fdcf 	bl	8005b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	f040 8099 	bne.w	80060f0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc6:	d117      	bne.n	8005ff8 <UART_Receive_IT+0x50>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d113      	bne.n	8005ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff6:	e026      	b.n	8006046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600a:	d007      	beq.n	800601c <UART_Receive_IT+0x74>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <UART_Receive_IT+0x82>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e008      	b.n	800603c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006036:	b2da      	uxtb	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29b      	uxth	r3, r3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4619      	mov	r1, r3
 8006054:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006056:	2b00      	cmp	r3, #0
 8006058:	d148      	bne.n	80060ec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0220 	bic.w	r2, r2, #32
 8006068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	2b01      	cmp	r3, #1
 8006098:	d123      	bne.n	80060e2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0210 	bic.w	r2, r2, #16
 80060ae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d10a      	bne.n	80060d4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fd52 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
 80060e0:	e002      	b.n	80060e8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fa fc8e 	bl	8000a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e002      	b.n	80060f2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006136:	f023 030c 	bic.w	r3, r3, #12
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	430b      	orrs	r3, r1
 8006142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2c      	ldr	r2, [pc, #176]	; (8006210 <UART_SetConfig+0x114>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d103      	bne.n	800616c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fe f85c 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	e002      	b.n	8006172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800616c:	f7fe f844 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8006170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009a      	lsls	r2, r3, #2
 800617c:	441a      	add	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	4a22      	ldr	r2, [pc, #136]	; (8006214 <UART_SetConfig+0x118>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	0119      	lsls	r1, r3, #4
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009a      	lsls	r2, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061a8:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <UART_SetConfig+0x118>)
 80061aa:	fba3 0302 	umull	r0, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2064      	movs	r0, #100	; 0x64
 80061b2:	fb00 f303 	mul.w	r3, r0, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	3332      	adds	r3, #50	; 0x32
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <UART_SetConfig+0x118>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c8:	4419      	add	r1, r3
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009a      	lsls	r2, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80061e0:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <UART_SetConfig+0x118>)
 80061e2:	fba3 0302 	umull	r0, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2064      	movs	r0, #100	; 0x64
 80061ea:	fb00 f303 	mul.w	r3, r0, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	; 0x32
 80061f4:	4a07      	ldr	r2, [pc, #28]	; (8006214 <UART_SetConfig+0x118>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	440a      	add	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40013800 	.word	0x40013800
 8006214:	51eb851f 	.word	0x51eb851f

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	2600      	movs	r6, #0
 800621c:	4d0c      	ldr	r5, [pc, #48]	; (8006250 <__libc_init_array+0x38>)
 800621e:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	f000 f830 	bl	800628c <_init>
 800622c:	2600      	movs	r6, #0
 800622e:	4d0a      	ldr	r5, [pc, #40]	; (8006258 <__libc_init_array+0x40>)
 8006230:	4c0a      	ldr	r4, [pc, #40]	; (800625c <__libc_init_array+0x44>)
 8006232:	1b64      	subs	r4, r4, r5
 8006234:	10a4      	asrs	r4, r4, #2
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	080062cc 	.word	0x080062cc
 8006254:	080062cc 	.word	0x080062cc
 8006258:	080062cc 	.word	0x080062cc
 800625c:	080062d0 	.word	0x080062d0

08006260 <memcpy>:
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	f100 33ff 	add.w	r3, r0, #4294967295
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	4770      	bx	lr
 800626c:	b510      	push	{r4, lr}
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	4291      	cmp	r1, r2
 8006274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006278:	d1f9      	bne.n	800626e <memcpy+0xe>
 800627a:	bd10      	pop	{r4, pc}

0800627c <memset>:
 800627c:	4603      	mov	r3, r0
 800627e:	4402      	add	r2, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	d100      	bne.n	8006286 <memset+0xa>
 8006284:	4770      	bx	lr
 8006286:	f803 1b01 	strb.w	r1, [r3], #1
 800628a:	e7f9      	b.n	8006280 <memset+0x4>

0800628c <_init>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr

08006298 <_fini>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr
