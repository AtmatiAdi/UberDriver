
Uber_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fe0  08005fe0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002658  20000010  08005ff8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002668  08005ff8  00022668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da97  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002009  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00030a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c1d  00000000  00000000  00031948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adce  00000000  00000000  00046565  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074fbc  00000000  00000000  00051333  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c62ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ac  00000000  00000000  000c636c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f74 	.word	0x08005f74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005f74 	.word	0x08005f74

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 8000648:	b084      	sub	sp, #16
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
 800064e:	f107 0c08 	add.w	ip, r7, #8
 8000652:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <DRV_Init+0x2c>)
 8000658:	4618      	mov	r0, r3
 800065a:	f107 0108 	add.w	r1, r7, #8
 800065e:	2358      	movs	r3, #88	; 0x58
 8000660:	461a      	mov	r2, r3
 8000662:	f005 fc73 	bl	8005f4c <memcpy>
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066e:	b004      	add	sp, #16
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c

08000678 <StartPWM>:
uint8_t IsBreaking = 0;
uint8_t Power = 0;
uint8_t Break = 0;
uint8_t Function = 0;

void StartPWM(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800067c:	2100      	movs	r1, #0
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <StartPWM+0x40>)
 8000680:	f004 f876 	bl	8004770 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <StartPWM+0x44>)
 8000688:	f004 f872 	bl	8004770 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800068c:	2104      	movs	r1, #4
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <StartPWM+0x48>)
 8000690:	f004 f86e 	bl	8004770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000694:	2108      	movs	r1, #8
 8000696:	480a      	ldr	r0, [pc, #40]	; (80006c0 <StartPWM+0x48>)
 8000698:	f004 f86a 	bl	8004770 <HAL_TIM_PWM_Start>

	htim1.Instance->CNT = 0;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <StartPWM+0x48>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
	htim2.Instance->CNT = 0;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <StartPWM+0x40>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <StartPWM+0x44>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20002524 	.word	0x20002524
 80006bc:	20000210 	.word	0x20000210
 80006c0:	2000238c 	.word	0x2000238c

080006c4 <SetZero_A>:

void SetZero_A(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SetZero_A+0x1c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2108      	movs	r1, #8
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <SetZero_A+0x20>)
 80006d6:	f003 fa65 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20002524 	.word	0x20002524
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <SetZero_B>:

void SetZero_B(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SetZero_B+0x1c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2120      	movs	r1, #32
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <SetZero_B+0x20>)
 80006fa:	f003 fa53 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000210 	.word	0x20000210
 8000708:	40010c00 	.word	0x40010c00

0800070c <SetZero_C>:

void SetZero_C(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SetZero_C+0x1c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <SetZero_C+0x20>)
 8000720:	f003 fa40 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000238c 	.word	0x2000238c
 800072c:	40010800 	.word	0x40010800

08000730 <SetPulse_AH>:

void SetPulse_AH(uint8_t value){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SetPulse_AH+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <SetPulse_AH+0x28>)
 8000748:	f003 fa2c 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20002524 	.word	0x20002524
 8000758:	40010c00 	.word	0x40010c00

0800075c <SetPulse_BH>:

void SetPulse_BH(uint8_t value){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <SetPulse_BH+0x24>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <SetPulse_BH+0x28>)
 8000774:	f003 fa16 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000210 	.word	0x20000210
 8000784:	40010c00 	.word	0x40010c00

08000788 <SetPulse_CH>:

void SetPulse_CH(uint8_t value){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <SetPulse_CH+0x28>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <SetPulse_CH+0x2c>)
 80007a2:	f003 f9ff 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000238c 	.word	0x2000238c
 80007b4:	40010800 	.word	0x40010800

080007b8 <SetFloating_A>:

void SetFloating_A(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SetFloating_A+0x1c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <SetFloating_A+0x20>)
 80007ca:	f003 f9eb 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20002524 	.word	0x20002524
 80007d8:	40010c00 	.word	0x40010c00

080007dc <SetFloating_B>:

void SetFloating_B(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SetFloating_B+0x1c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2120      	movs	r1, #32
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <SetFloating_B+0x20>)
 80007ee:	f003 f9d9 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000210 	.word	0x20000210
 80007fc:	40010c00 	.word	0x40010c00

08000800 <SetFloating_C>:

void SetFloating_C(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <SetFloating_C+0x1c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <SetFloating_C+0x20>)
 8000814:	f003 f9c6 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000238c 	.word	0x2000238c
 8000820:	40010800 	.word	0x40010800

08000824 <Delay_Tick>:

void Delay_Tick(uint32_t val){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <Delay_Tick+0x54>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8000834:	e010      	b.n	8000858 <Delay_Tick+0x34>
		val -= 0x00007fff;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800083c:	3b7f      	subs	r3, #127	; 0x7f
 800083e:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(&htim4) < 0x7fff);
 8000840:	bf00      	nop
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <Delay_Tick+0x54>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000848:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800084c:	4293      	cmp	r3, r2
 800084e:	d9f8      	bls.n	8000842 <Delay_Tick+0x1e>
		__HAL_TIM_SET_COUNTER(&htim4,0);
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <Delay_Tick+0x54>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800085e:	d2ea      	bcs.n	8000836 <Delay_Tick+0x12>
	}
	while(__HAL_TIM_GET_COUNTER(&htim4) < val);
 8000860:	bf00      	nop
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <Delay_Tick+0x54>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	d8f9      	bhi.n	8000862 <Delay_Tick+0x3e>
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	200000a0 	.word	0x200000a0

0800087c <SixStep>:

void SixStep(uint32_t Speed, uint16_t Value){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_AH(Value);
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff4f 	bl	8000730 <SetPulse_AH>
	SetZero_B();
 8000892:	f7ff ff29 	bl	80006e8 <SetZero_B>
	SetFloating_C();
 8000896:	f7ff ffb3 	bl	8000800 <SetFloating_C>
	Delay_Tick(Speed);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffc2 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80008a0:	4b37      	ldr	r3, [pc, #220]	; (8000980 <SixStep+0x104>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a37      	ldr	r2, [pc, #220]	; (8000984 <SixStep+0x108>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//2
	SetPulse_AH(Value);
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff3c 	bl	8000730 <SetPulse_AH>
	SetFloating_B();
 80008b8:	f7ff ff90 	bl	80007dc <SetFloating_B>
	SetZero_C();
 80008bc:	f7ff ff26 	bl	800070c <SetZero_C>
	Delay_Tick(Speed);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ffaf 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <SixStep+0x104>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <SixStep+0x108>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//3
	SetFloating_A();
 80008d4:	f7ff ff70 	bl	80007b8 <SetFloating_A>
	SetPulse_BH(Value);
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff3d 	bl	800075c <SetPulse_BH>
	SetZero_C();
 80008e2:	f7ff ff13 	bl	800070c <SetZero_C>
	Delay_Tick(Speed);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff9c 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <SixStep+0x104>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a24      	ldr	r2, [pc, #144]	; (8000984 <SixStep+0x108>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//4
	SetZero_A();
 80008fa:	f7ff fee3 	bl	80006c4 <SetZero_A>
	SetPulse_BH(Value);
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff2a 	bl	800075c <SetPulse_BH>
	SetFloating_C();
 8000908:	f7ff ff7a 	bl	8000800 <SetFloating_C>
	Delay_Tick(Speed);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff89 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <SixStep+0x104>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <SixStep+0x108>)
 800091a:	2100      	movs	r1, #0
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//5
	SetZero_A();
 8000920:	f7ff fed0 	bl	80006c4 <SetZero_A>
	SetFloating_B();
 8000924:	f7ff ff5a 	bl	80007dc <SetFloating_B>
	SetPulse_CH(Value);
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff2b 	bl	8000788 <SetPulse_CH>
	Delay_Tick(Speed);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ff76 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <SixStep+0x104>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <SixStep+0x108>)
 8000940:	2100      	movs	r1, #0
 8000942:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//6
	SetFloating_A();
 8000946:	f7ff ff37 	bl	80007b8 <SetFloating_A>
	SetZero_B();
 800094a:	f7ff fecd 	bl	80006e8 <SetZero_B>
	SetPulse_CH(Value);
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff18 	bl	8000788 <SetPulse_CH>
	Delay_Tick(Speed);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff63 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SixStep+0x104>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	3b01      	subs	r3, #1
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <SixStep+0x108>)
 8000966:	2100      	movs	r1, #0
 8000968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ToSend[0]++;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SixStep+0x10c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SixStep+0x10c>)
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000090 	.word	0x20000090
 8000984:	2000038c 	.word	0x2000038c
 8000988:	20000094 	.word	0x20000094

0800098c <SixStep_rev>:

void SixStep_rev(uint32_t Speed, uint16_t Value){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
	// 1
	SetPulse_CH(Value);
 8000998:	887b      	ldrh	r3, [r7, #2]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fef3 	bl	8000788 <SetPulse_CH>
	SetZero_B();
 80009a2:	f7ff fea1 	bl	80006e8 <SetZero_B>
	SetFloating_A();
 80009a6:	f7ff ff07 	bl	80007b8 <SetFloating_A>
	Delay_Tick(Speed);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff3a 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80009b0:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <SixStep_rev+0x104>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4a37      	ldr	r2, [pc, #220]	; (8000a94 <SixStep_rev+0x108>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//2
	SetPulse_CH(Value);
 80009be:	887b      	ldrh	r3, [r7, #2]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fee0 	bl	8000788 <SetPulse_CH>
	SetFloating_B();
 80009c8:	f7ff ff08 	bl	80007dc <SetFloating_B>
	SetZero_A();
 80009cc:	f7ff fe7a 	bl	80006c4 <SetZero_A>
	Delay_Tick(Speed);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff27 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <SixStep_rev+0x104>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <SixStep_rev+0x108>)
 80009de:	2100      	movs	r1, #0
 80009e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//3
	SetFloating_C();
 80009e4:	f7ff ff0c 	bl	8000800 <SetFloating_C>
	SetPulse_BH(Value);
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff feb5 	bl	800075c <SetPulse_BH>
	SetZero_A();
 80009f2:	f7ff fe67 	bl	80006c4 <SetZero_A>
	Delay_Tick(Speed);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff14 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <SixStep_rev+0x104>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <SixStep_rev+0x108>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//4
	SetZero_C();
 8000a0a:	f7ff fe7f 	bl	800070c <SetZero_C>
	SetPulse_BH(Value);
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fea2 	bl	800075c <SetPulse_BH>
	SetFloating_A();
 8000a18:	f7ff fece 	bl	80007b8 <SetFloating_A>
	Delay_Tick(Speed);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff01 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <SixStep_rev+0x104>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <SixStep_rev+0x108>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//5
	SetZero_C();
 8000a30:	f7ff fe6c 	bl	800070c <SetZero_C>
	SetFloating_B();
 8000a34:	f7ff fed2 	bl	80007dc <SetFloating_B>
	SetPulse_AH(Value);
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe77 	bl	8000730 <SetPulse_AH>
	Delay_Tick(Speed);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff feee 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <SixStep_rev+0x104>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <SixStep_rev+0x108>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//6
	SetFloating_C();
 8000a56:	f7ff fed3 	bl	8000800 <SetFloating_C>
	SetZero_B();
 8000a5a:	f7ff fe45 	bl	80006e8 <SetZero_B>
	SetPulse_AH(Value);
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe64 	bl	8000730 <SetPulse_AH>
	Delay_Tick(Speed);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fedb 	bl	8000824 <Delay_Tick>
	data[ data_num-1] = 0;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SixStep_rev+0x104>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SixStep_rev+0x108>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ToSend[0]++;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SixStep_rev+0x10c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SixStep_rev+0x10c>)
 8000a86:	701a      	strb	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000090 	.word	0x20000090
 8000a94:	2000038c 	.word	0x2000038c
 8000a98:	20000094 	.word	0x20000094

08000a9c <WaitForCross>:

uint32_t WaitForCross(uint8_t num, uint8_t val){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <WaitForCross+0x84>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] > val+ADC_data[3]/2){
 8000ab8:	e017      	b.n	8000aea <WaitForCross+0x4e>
		if (__HAL_TIM_GET_COUNTER(&htim4) > 0x7fff){
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <WaitForCross+0x84>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ac4:	d309      	bcc.n	8000ada <WaitForCross+0x3e>
			ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <WaitForCross+0x84>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <WaitForCross+0x84>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(&htim4) ) > MAX_TICKS){
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <WaitForCross+0x84>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d20d      	bcs.n	8000b06 <WaitForCross+0x6a>
	while(ADC_data[num] > val+ADC_data[3]/2){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <WaitForCross+0x88>)
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af2:	4619      	mov	r1, r3
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <WaitForCross+0x88>)
 8000af8:	88d2      	ldrh	r2, [r2, #6]
 8000afa:	0852      	lsrs	r2, r2, #1
 8000afc:	b292      	uxth	r2, r2
 8000afe:	4413      	add	r3, r2
 8000b00:	4299      	cmp	r1, r3
 8000b02:	dcda      	bgt.n	8000aba <WaitForCross+0x1e>
 8000b04:	e000      	b.n	8000b08 <WaitForCross+0x6c>
			break;
 8000b06:	bf00      	nop
			}
			IsNewVal = 0;
		}
	}*/

	ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <WaitForCross+0x84>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
	return ret_val;
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200000a0 	.word	0x200000a0
 8000b24:	20000084 	.word	0x20000084

08000b28 <WaitForCross2>:

uint32_t WaitForCross2(uint8_t num, uint8_t val){
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <WaitForCross2+0x84>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] < val+ADC_data[3]/2){
 8000b44:	e017      	b.n	8000b76 <WaitForCross2+0x4e>
		if (__HAL_TIM_GET_COUNTER(&htim4) > 0x7fff){
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <WaitForCross2+0x84>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b50:	d309      	bcc.n	8000b66 <WaitForCross2+0x3e>
			ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <WaitForCross2+0x84>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <WaitForCross2+0x84>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if((ret_val + __HAL_TIM_GET_COUNTER(&htim4) ) > MAX_TICKS){
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <WaitForCross2+0x84>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d20d      	bcs.n	8000b92 <WaitForCross2+0x6a>
	while(ADC_data[num] < val+ADC_data[3]/2){
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <WaitForCross2+0x88>)
 8000b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <WaitForCross2+0x88>)
 8000b84:	88d2      	ldrh	r2, [r2, #6]
 8000b86:	0852      	lsrs	r2, r2, #1
 8000b88:	b292      	uxth	r2, r2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	dbda      	blt.n	8000b46 <WaitForCross2+0x1e>
 8000b90:	e000      	b.n	8000b94 <WaitForCross2+0x6c>
			break;
 8000b92:	bf00      	nop
		}
	}

	ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <WaitForCross2+0x84>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
	return ret_val;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <BEMF_SixStep_TEST>:
	data[ data_num-1] = 0;
	ToSend[0]++;
	return ticks;
}

uint32_t BEMF_SixStep_TEST(uint16_t Value, uint16_t LastTicks){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
	float ticks = 0;
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
	float div = 6;//1.5;
 8000bca:	4bbd      	ldr	r3, [pc, #756]	; (8000ec0 <BEMF_SixStep_TEST+0x30c>)
 8000bcc:	60bb      	str	r3, [r7, #8]
	////////////////////////////////////////////////////////// 1
	if(rx_buffer[0] == 0) return;
 8000bce:	4bbd      	ldr	r3, [pc, #756]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8185 	beq.w	8000ee2 <BEMF_SixStep_TEST+0x32e>
	SetPulse_AH(Value);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fda7 	bl	8000730 <SetPulse_AH>
	SetZero_B();
 8000be2:	f7ff fd81 	bl	80006e8 <SetZero_B>
	SetFloating_C();
 8000be6:	f7ff fe0b 	bl	8000800 <SetFloating_C>
	ticks = LastTicks/2;	// 1/4
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	085b      	lsrs	r3, r3, #1
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fb65 	bl	80002c0 <__aeabi_i2f>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f7ff fd04 	bl	8000608 <__aeabi_f2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fe0e 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(2,0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff ff46 	bl	8000a9c <WaitForCross>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fb50 	bl	80002b8 <__aeabi_ui2f>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fa9b 	bl	8000158 <__addsf3>
 8000c22:	4603      	mov	r3, r0
 8000c24:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fc51 	bl	80004d0 <__aeabi_fdiv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fce9 	bl	8000608 <__aeabi_f2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fdf3 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000c3e:	4ba2      	ldr	r3, [pc, #648]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4aa1      	ldr	r2, [pc, #644]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 2
	if(rx_buffer[0] == 0) return;
 8000c4c:	4b9d      	ldr	r3, [pc, #628]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8148 	beq.w	8000ee6 <BEMF_SixStep_TEST+0x332>
	SetPulse_AH(Value);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd68 	bl	8000730 <SetPulse_AH>
	SetFloating_B();
 8000c60:	f7ff fdbc 	bl	80007dc <SetFloating_B>
	SetZero_C();
 8000c64:	f7ff fd52 	bl	800070c <SetZero_C>
	ticks = ticks/2;	// 1/4
 8000c68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff fc2f 	bl	80004d0 <__aeabi_fdiv>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fcc6 	bl	8000608 <__aeabi_f2uiz>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fdd0 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(1,0);	// 1/2
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff4e 	bl	8000b28 <WaitForCross2>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fb12 	bl	80002b8 <__aeabi_ui2f>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4619      	mov	r1, r3
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff fa5d 	bl	8000158 <__addsf3>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff fc13 	bl	80004d0 <__aeabi_fdiv>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fcab 	bl	8000608 <__aeabi_f2uiz>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fdb5 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000cba:	4b83      	ldr	r3, [pc, #524]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a82      	ldr	r2, [pc, #520]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 3
	if(rx_buffer[0] == 0) return;
 8000cc8:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 810c 	beq.w	8000eea <BEMF_SixStep_TEST+0x336>
	SetFloating_A();
 8000cd2:	f7ff fd71 	bl	80007b8 <SetFloating_A>
	SetPulse_BH(Value);
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd3e 	bl	800075c <SetPulse_BH>
	SetZero_C();
 8000ce0:	f7ff fd14 	bl	800070c <SetZero_C>
	ticks = ticks/2;	// 1/4
 8000ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fbf1 	bl	80004d0 <__aeabi_fdiv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fc88 	bl	8000608 <__aeabi_f2uiz>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fd92 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(0,0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff feca 	bl	8000a9c <WaitForCross>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fad4 	bl	80002b8 <__aeabi_ui2f>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4619      	mov	r1, r3
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f7ff fa1f 	bl	8000158 <__addsf3>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f7ff fbd5 	bl	80004d0 <__aeabi_fdiv>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fc6d 	bl	8000608 <__aeabi_f2uiz>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fd77 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000d36:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 4
	if(rx_buffer[0] == 0) return;
 8000d44:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80d0 	beq.w	8000eee <BEMF_SixStep_TEST+0x33a>
	SetZero_A();
 8000d4e:	f7ff fcb9 	bl	80006c4 <SetZero_A>
	SetPulse_BH(Value);
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd00 	bl	800075c <SetPulse_BH>
	SetFloating_C();
 8000d5c:	f7ff fd50 	bl	8000800 <SetFloating_C>
	ticks = ticks/2;	// 1/4
 8000d60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff fbb3 	bl	80004d0 <__aeabi_fdiv>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fc4a 	bl	8000608 <__aeabi_f2uiz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd54 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(2,0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fed2 	bl	8000b28 <WaitForCross2>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa96 	bl	80002b8 <__aeabi_ui2f>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff f9e1 	bl	8000158 <__addsf3>
 8000d96:	4603      	mov	r3, r0
 8000d98:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fb97 	bl	80004d0 <__aeabi_fdiv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc2f 	bl	8000608 <__aeabi_f2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fd39 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a44      	ldr	r2, [pc, #272]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 5
	if(rx_buffer[0] == 0) return;
 8000dc0:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8094 	beq.w	8000ef2 <BEMF_SixStep_TEST+0x33e>
	SetZero_A();
 8000dca:	f7ff fc7b 	bl	80006c4 <SetZero_A>
	SetFloating_B();
 8000dce:	f7ff fd05 	bl	80007dc <SetFloating_B>
	SetPulse_CH(Value);
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fcd6 	bl	8000788 <SetPulse_CH>
	ticks = ticks/2;	// 1/4
 8000ddc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fb75 	bl	80004d0 <__aeabi_fdiv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff fc0c 	bl	8000608 <__aeabi_f2uiz>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fd16 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(1,0);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff fe4e 	bl	8000a9c <WaitForCross>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fa58 	bl	80002b8 <__aeabi_ui2f>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff f9a3 	bl	8000158 <__addsf3>
 8000e12:	4603      	mov	r3, r0
 8000e14:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff fb59 	bl	80004d0 <__aeabi_fdiv>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fbf1 	bl	8000608 <__aeabi_f2uiz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fcfb 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 6
	if(rx_buffer[0] == 0) return;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <BEMF_SixStep_TEST+0x310>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d058      	beq.n	8000ef6 <BEMF_SixStep_TEST+0x342>
	SetFloating_A();
 8000e44:	f7ff fcb8 	bl	80007b8 <SetFloating_A>
	SetZero_B();
 8000e48:	f7ff fc4e 	bl	80006e8 <SetZero_B>
	SetPulse_CH(Value);
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fc99 	bl	8000788 <SetPulse_CH>
	ticks = ticks/2;	// 1/4
 8000e56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fb38 	bl	80004d0 <__aeabi_fdiv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fbcf 	bl	8000608 <__aeabi_f2uiz>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcd9 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(0,0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fe57 	bl	8000b28 <WaitForCross2>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fa1b 	bl	80002b8 <__aeabi_ui2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4619      	mov	r1, r3
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff f966 	bl	8000158 <__addsf3>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f7ff fb1c 	bl	80004d0 <__aeabi_fdiv>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fbb4 	bl	8000608 <__aeabi_f2uiz>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fcbe 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <BEMF_SixStep_TEST+0x314>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <BEMF_SixStep_TEST+0x318>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ToSend[0]++;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <BEMF_SixStep_TEST+0x31c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	e009      	b.n	8000ed4 <BEMF_SixStep_TEST+0x320>
 8000ec0:	40c00000 	.word	0x40c00000
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	20000090 	.word	0x20000090
 8000ecc:	2000038c 	.word	0x2000038c
 8000ed0:	20000094 	.word	0x20000094
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <BEMF_SixStep_TEST+0x34c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	return ticks;
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff fb95 	bl	8000608 <__aeabi_f2uiz>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	e00a      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000ee2:	bf00      	nop
 8000ee4:	e008      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000ee6:	bf00      	nop
 8000ee8:	e006      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000eea:	bf00      	nop
 8000eec:	e004      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000eee:	bf00      	nop
 8000ef0:	e002      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000ef2:	bf00      	nop
 8000ef4:	e000      	b.n	8000ef8 <BEMF_SixStep_TEST+0x344>
	if(rx_buffer[0] == 0) return;
 8000ef6:	bf00      	nop
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000094 	.word	0x20000094

08000f04 <BEMF_SixStep_TEST_rev>:

uint32_t BEMF_SixStep_TEST_rev(uint16_t Value, uint16_t LastTicks){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	80fb      	strh	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	80bb      	strh	r3, [r7, #4]
	float ticks = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
	float div = 6;//1.5;
 8000f1a:	4bbd      	ldr	r3, [pc, #756]	; (8001210 <BEMF_SixStep_TEST_rev+0x30c>)
 8000f1c:	60bb      	str	r3, [r7, #8]
	////////////////////////////////////////////////////////// 1
	if(rx_buffer[0] == 0) return;
 8000f1e:	4bbd      	ldr	r3, [pc, #756]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8185 	beq.w	8001232 <BEMF_SixStep_TEST_rev+0x32e>
	SetPulse_CH(Value);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fc2b 	bl	8000788 <SetPulse_CH>
	SetZero_B();
 8000f32:	f7ff fbd9 	bl	80006e8 <SetZero_B>
	SetFloating_A();
 8000f36:	f7ff fc3f 	bl	80007b8 <SetFloating_A>
	ticks = LastTicks/2;	// 1/4
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	085b      	lsrs	r3, r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f9bd 	bl	80002c0 <__aeabi_i2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fb5c 	bl	8000608 <__aeabi_f2uiz>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc66 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(0,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fd9e 	bl	8000a9c <WaitForCross>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f9a8 	bl	80002b8 <__aeabi_ui2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff f8f3 	bl	8000158 <__addsf3>
 8000f72:	4603      	mov	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff faa9 	bl	80004d0 <__aeabi_fdiv>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fb41 	bl	8000608 <__aeabi_f2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fc4b 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8000f8e:	4ba2      	ldr	r3, [pc, #648]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	4aa1      	ldr	r2, [pc, #644]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 8000f96:	2100      	movs	r1, #0
 8000f98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 2
	if(rx_buffer[0] == 0) return;
 8000f9c:	4b9d      	ldr	r3, [pc, #628]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 8148 	beq.w	8001236 <BEMF_SixStep_TEST_rev+0x332>
	SetPulse_CH(Value);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fbec 	bl	8000788 <SetPulse_CH>
	SetFloating_B();
 8000fb0:	f7ff fc14 	bl	80007dc <SetFloating_B>
	SetZero_A();
 8000fb4:	f7ff fb86 	bl	80006c4 <SetZero_A>
	ticks = ticks/2;	// 1/4
 8000fb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fa87 	bl	80004d0 <__aeabi_fdiv>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fb1e 	bl	8000608 <__aeabi_f2uiz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fc28 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(1,0);	// 1/2
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff fda6 	bl	8000b28 <WaitForCross2>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f96a 	bl	80002b8 <__aeabi_ui2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff f8b5 	bl	8000158 <__addsf3>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fa6b 	bl	80004d0 <__aeabi_fdiv>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fb03 	bl	8000608 <__aeabi_f2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fc0d 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	3b01      	subs	r3, #1
 8001010:	4a82      	ldr	r2, [pc, #520]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 8001012:	2100      	movs	r1, #0
 8001014:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 3
	if(rx_buffer[0] == 0) return;
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 810c 	beq.w	800123a <BEMF_SixStep_TEST_rev+0x336>
	SetFloating_C();
 8001022:	f7ff fbed 	bl	8000800 <SetFloating_C>
	SetPulse_BH(Value);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fb96 	bl	800075c <SetPulse_BH>
	SetZero_A();
 8001030:	f7ff fb48 	bl	80006c4 <SetZero_A>
	ticks = ticks/2;	// 1/4
 8001034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f7ff fa49 	bl	80004d0 <__aeabi_fdiv>
 800103e:	4603      	mov	r3, r0
 8001040:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff fae0 	bl	8000608 <__aeabi_f2uiz>
 8001048:	4603      	mov	r3, r0
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fbea 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(2,0);
 8001050:	2100      	movs	r1, #0
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff fd22 	bl	8000a9c <WaitForCross>
 8001058:	4603      	mov	r3, r0
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f92c 	bl	80002b8 <__aeabi_ui2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4619      	mov	r1, r3
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff f877 	bl	8000158 <__addsf3>
 800106a:	4603      	mov	r3, r0
 800106c:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fa2d 	bl	80004d0 <__aeabi_fdiv>
 8001076:	4603      	mov	r3, r0
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fac5 	bl	8000608 <__aeabi_f2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fbcf 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8001086:	4b64      	ldr	r3, [pc, #400]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	4a63      	ldr	r2, [pc, #396]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 800108e:	2100      	movs	r1, #0
 8001090:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 4
	if(rx_buffer[0] == 0) return;
 8001094:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80d0 	beq.w	800123e <BEMF_SixStep_TEST_rev+0x33a>
	SetZero_C();
 800109e:	f7ff fb35 	bl	800070c <SetZero_C>
	SetPulse_BH(Value);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb58 	bl	800075c <SetPulse_BH>
	SetFloating_A();
 80010ac:	f7ff fb84 	bl	80007b8 <SetFloating_A>
	ticks = ticks/2;	// 1/4
 80010b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff fa0b 	bl	80004d0 <__aeabi_fdiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff faa2 	bl	8000608 <__aeabi_f2uiz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fbac 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(0,0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fd2a 	bl	8000b28 <WaitForCross2>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f8ee 	bl	80002b8 <__aeabi_ui2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff f839 	bl	8000158 <__addsf3>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff f9ef 	bl	80004d0 <__aeabi_fdiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_f2uiz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb91 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	3b01      	subs	r3, #1
 8001108:	4a44      	ldr	r2, [pc, #272]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 800110a:	2100      	movs	r1, #0
 800110c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 5
	if(rx_buffer[0] == 0) return;
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 8094 	beq.w	8001242 <BEMF_SixStep_TEST_rev+0x33e>
	SetZero_C();
 800111a:	f7ff faf7 	bl	800070c <SetZero_C>
	SetFloating_B();
 800111e:	f7ff fb5d 	bl	80007dc <SetFloating_B>
	SetPulse_AH(Value);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fb02 	bl	8000730 <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 800112c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff f9cd 	bl	80004d0 <__aeabi_fdiv>
 8001136:	4603      	mov	r3, r0
 8001138:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_f2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fb6e 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross(1,0);
 8001148:	2100      	movs	r1, #0
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fca6 	bl	8000a9c <WaitForCross>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f8b0 	bl	80002b8 <__aeabi_ui2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4619      	mov	r1, r3
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7fe fffb 	bl	8000158 <__addsf3>
 8001162:	4603      	mov	r3, r0
 8001164:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f7ff f9b1 	bl	80004d0 <__aeabi_fdiv>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa49 	bl	8000608 <__aeabi_f2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fb53 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 8001186:	2100      	movs	r1, #0
 8001188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	////////////////////////////////////////////////////////// 6
	if(rx_buffer[0] == 0) return;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <BEMF_SixStep_TEST_rev+0x310>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d058      	beq.n	8001246 <BEMF_SixStep_TEST_rev+0x342>
	SetFloating_C();
 8001194:	f7ff fb34 	bl	8000800 <SetFloating_C>
	SetZero_B();
 8001198:	f7ff faa6 	bl	80006e8 <SetZero_B>
	SetPulse_AH(Value);
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fac5 	bl	8000730 <SetPulse_AH>
	ticks = ticks/2;	// 1/4
 80011a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f7ff f990 	bl	80004d0 <__aeabi_fdiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks);
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff fa27 	bl	8000608 <__aeabi_f2uiz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fb31 	bl	8000824 <Delay_Tick>
	ticks += WaitForCross2(2,0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2002      	movs	r0, #2
 80011c6:	f7ff fcaf 	bl	8000b28 <WaitForCross2>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f873 	bl	80002b8 <__aeabi_ui2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7fe ffbe 	bl	8000158 <__addsf3>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
	Delay_Tick(ticks/div);
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff f974 	bl	80004d0 <__aeabi_fdiv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_f2uiz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb16 	bl	8000824 <Delay_Tick>

	data[ data_num-1] = 0;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <BEMF_SixStep_TEST_rev+0x314>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <BEMF_SixStep_TEST_rev+0x318>)
 8001200:	2100      	movs	r1, #0
 8001202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ToSend[0]++;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <BEMF_SixStep_TEST_rev+0x31c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	e009      	b.n	8001224 <BEMF_SixStep_TEST_rev+0x320>
 8001210:	40c00000 	.word	0x40c00000
 8001214:	2000008c 	.word	0x2000008c
 8001218:	20000090 	.word	0x20000090
 800121c:	2000038c 	.word	0x2000038c
 8001220:	20000094 	.word	0x20000094
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <BEMF_SixStep_TEST_rev+0x34c>)
 8001226:	701a      	strb	r2, [r3, #0]
	return ticks;
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff f9ed 	bl	8000608 <__aeabi_f2uiz>
 800122e:	4603      	mov	r3, r0
 8001230:	e00a      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 8001232:	bf00      	nop
 8001234:	e008      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 8001236:	bf00      	nop
 8001238:	e006      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 800123a:	bf00      	nop
 800123c:	e004      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 800123e:	bf00      	nop
 8001240:	e002      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <BEMF_SixStep_TEST_rev+0x344>
	if(rx_buffer[0] == 0) return;
 8001246:	bf00      	nop
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000094 	.word	0x20000094

08001254 <HAL_TIM_TriggerCallback>:

uint8_t test = 0;
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	test = __HAL_TIM_GET_COUNTER(&htim1);
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_TIM_TriggerCallback+0x48>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_TIM_TriggerCallback+0x4c>)
 8001266:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM1){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_TIM_TriggerCallback+0x50>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10f      	bne.n	8001292 <HAL_TIM_TriggerCallback+0x3e>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7f1b      	ldrb	r3, [r3, #28]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d10b      	bne.n	8001292 <HAL_TIM_TriggerCallback+0x3e>
			test = __HAL_TIM_GET_COUNTER(&htim1);
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_TIM_TriggerCallback+0x48>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_TIM_TriggerCallback+0x4c>)
 8001284:	701a      	strb	r2, [r3, #0]
			test = __HAL_TIM_GET_COUNTER(&htim1);
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_TIM_TriggerCallback+0x48>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_TIM_TriggerCallback+0x4c>)
 8001290:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	2000238c 	.word	0x2000238c
 80012a0:	20000098 	.word	0x20000098
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <HAL_ADC_ConvCpltCallback>:
			if(ADC_data[Phase] < ADC_data[3]/2) return;
		}
	}
}
int cnt = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	// Collect data
	uint8_t div = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
	if(COLLECT_DATA == 1){
		if((data_num < (4096-4)) && cnt >= div){
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	f640 72fb 	movw	r2, #4091	; 0xffb
 80012bc:	4293      	cmp	r3, r2
 80012be:	d83f      	bhi.n	8001340 <HAL_ADC_ConvCpltCallback+0x98>
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dc3a      	bgt.n	8001340 <HAL_ADC_ConvCpltCallback+0x98>

			data[data_num] = ADC_data[0];
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_ADC_ConvCpltCallback+0x104>)
 80012d2:	8819      	ldrh	r1, [r3, #0]
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <HAL_ADC_ConvCpltCallback+0x108>)
 80012d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			data_num++;
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012e4:	801a      	strh	r2, [r3, #0]
			data[data_num] = ADC_data[1];
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_ADC_ConvCpltCallback+0x104>)
 80012ee:	8859      	ldrh	r1, [r3, #2]
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_ADC_ConvCpltCallback+0x108>)
 80012f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			data_num++;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001300:	801a      	strh	r2, [r3, #0]
			data[data_num] = ADC_data[2];
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_ADC_ConvCpltCallback+0x104>)
 800130a:	8899      	ldrh	r1, [r3, #4]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_ADC_ConvCpltCallback+0x108>)
 800130e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			data_num++;
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 800131c:	801a      	strh	r2, [r3, #0]
			data[data_num] = ADC_data[3];
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_ADC_ConvCpltCallback+0x104>)
 8001326:	88d9      	ldrh	r1, [r3, #6]
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_ADC_ConvCpltCallback+0x108>)
 800132a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			data_num++;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001338:	801a      	strh	r2, [r3, #0]
			cnt = 0;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x100>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
		}
		if((tim_num < (64-4))){
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b3b      	cmp	r3, #59	; 0x3b
 8001346:	d820      	bhi.n	800138a <HAL_ADC_ConvCpltCallback+0xe2>
			TIM_B[tim_num] = __HAL_TIM_GET_COUNTER(&htim3);
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_ADC_ConvCpltCallback+0x110>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	4611      	mov	r1, r2
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_ADC_ConvCpltCallback+0x114>)
 8001356:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(&htim1);
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_ConvCpltCallback+0x118>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4611      	mov	r1, r2
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001368:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(&htim2);
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x120>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	4611      	mov	r1, r2
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_ADC_ConvCpltCallback+0x124>)
 800137a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			tim_num++;
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001388:	701a      	strb	r2, [r3, #0]
		}
	}
	IsNewVal = 1;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x128>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
	cnt ++;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x100>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x100>)
 8001398:	6013      	str	r3, [r2, #0]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000090 	.word	0x20000090
 80013a8:	2000009c 	.word	0x2000009c
 80013ac:	20000084 	.word	0x20000084
 80013b0:	2000038c 	.word	0x2000038c
 80013b4:	2000008f 	.word	0x2000008f
 80013b8:	20000210 	.word	0x20000210
 80013bc:	200023cc 	.word	0x200023cc
 80013c0:	2000238c 	.word	0x2000238c
 80013c4:	20000110 	.word	0x20000110
 80013c8:	20002524 	.word	0x20002524
 80013cc:	20002564 	.word	0x20002564
 80013d0:	20000099 	.word	0x20000099

080013d4 <HAL_UART_RxCpltCallback>:

// Po odebraniu danych z UART + DMA wyowulje sie przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_UART_RxCpltCallback+0x50>)
 80013e2:	f002 fbf7 	bl	8003bd4 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 2);		// Chcemy obierac dalej
 80013e6:	2202      	movs	r2, #2
 80013e8:	490f      	ldr	r1, [pc, #60]	; (8001428 <HAL_UART_RxCpltCallback+0x54>)
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <HAL_UART_RxCpltCallback+0x58>)
 80013ec:	f004 f918 	bl	8005620 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart1, ToSend, 1);			// Odsylamy warrtosc obrotow
 80013f0:	2201      	movs	r2, #1
 80013f2:	490f      	ldr	r1, [pc, #60]	; (8001430 <HAL_UART_RxCpltCallback+0x5c>)
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <HAL_UART_RxCpltCallback+0x58>)
 80013f6:	f004 f8a7 	bl	8005548 <HAL_UART_Transmit_DMA>
	ToSend[0] = 0;										// resetujemy zmienna obrotow
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_UART_RxCpltCallback+0x5c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	if ((rx_buffer[0] == 0) || rx_buffer[1] ==0){		// Zatrzymanie awaryjne
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_UART_RxCpltCallback+0x54>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_UART_RxCpltCallback+0x3c>
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x54>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_UART_RxCpltCallback+0x48>
		SetFloating_A();
 8001410:	f7ff f9d2 	bl	80007b8 <SetFloating_A>
		SetFloating_B();
 8001414:	f7ff f9e2 	bl	80007dc <SetFloating_B>
		SetFloating_C();
 8001418:	f7ff f9f2 	bl	8000800 <SetFloating_C>
	}
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010800 	.word	0x40010800
 8001428:	2000008c 	.word	0x2000008c
 800142c:	20000308 	.word	0x20000308
 8001430:	20000094 	.word	0x20000094

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800143a:	b086      	sub	sp, #24
 800143c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f001 faaf 	bl	80029a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 fb1d 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f000 fe91 	bl	800216c <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f000 fe61 	bl	8002110 <MX_DMA_Init>
  MX_ADC1_Init();
 800144e:	f000 fb6f 	bl	8001b30 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001452:	f000 fc15 	bl	8001c80 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001456:	f000 fc4b 	bl	8001cf0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800145a:	f000 fd6b 	bl	8001f34 <MX_TIM3_Init>
  MX_TIM2_Init();
 800145e:	f000 fcf5 	bl	8001e4c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001462:	f000 fe2b 	bl	80020bc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001466:	f000 fddb 	bl	8002020 <MX_TIM4_Init>
  MX_ADC2_Init();
 800146a:	f000 fbcb 	bl	8001c04 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2101      	movs	r1, #1
 8001472:	48bc      	ldr	r0, [pc, #752]	; (8001764 <main+0x330>)
 8001474:	f002 fb96 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	2104      	movs	r1, #4
 800147c:	48ba      	ldr	r0, [pc, #744]	; (8001768 <main+0x334>)
 800147e:	f002 fb91 	bl	8003ba4 <HAL_GPIO_WritePin>

  DRV_Init(hspi1);
 8001482:	4cba      	ldr	r4, [pc, #744]	; (800176c <main+0x338>)
 8001484:	4668      	mov	r0, sp
 8001486:	f104 0310 	add.w	r3, r4, #16
 800148a:	2248      	movs	r2, #72	; 0x48
 800148c:	4619      	mov	r1, r3
 800148e:	f004 fd5d 	bl	8005f4c <memcpy>
 8001492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001496:	f7ff f8d7 	bl	8000648 <DRV_Init>

  HAL_TIM_Base_Start(&htim4);
 800149a:	48b5      	ldr	r0, [pc, #724]	; (8001770 <main+0x33c>)
 800149c:	f003 f910 	bl	80046c0 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);		// LED
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a6:	48b3      	ldr	r0, [pc, #716]	; (8001774 <main+0x340>)
 80014a8:	f002 fb7c 	bl	8003ba4 <HAL_GPIO_WritePin>

  StartPWM();
 80014ac:	f7ff f8e4 	bl	8000678 <StartPWM>

  HAL_UART_Receive_DMA(&huart1, rx_buffer, 2);
 80014b0:	2202      	movs	r2, #2
 80014b2:	49b1      	ldr	r1, [pc, #708]	; (8001778 <main+0x344>)
 80014b4:	48b1      	ldr	r0, [pc, #708]	; (800177c <main+0x348>)
 80014b6:	f004 f8b3 	bl	8005620 <HAL_UART_Receive_DMA>

  //HAL_UART_Transmit_DMA(&huart1, tx_buffer, 3);
  HAL_Delay(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f001 fad2 	bl	8002a64 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  uint16_t ValueArray[10] = {0x0002,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003};
 80014c0:	4baf      	ldr	r3, [pc, #700]	; (8001780 <main+0x34c>)
 80014c2:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 80014c6:	f104 0418 	add.w	r4, r4, #24
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	6023      	str	r3, [r4, #0]
  uint16_t SpeedArray[10] = {0xff00,0xf800,0xf000,0x8000,0x0fff,0x0ff0,0x0f00,0x0800,0x00ff,0x00f0};
 80014d4:	4bab      	ldr	r3, [pc, #684]	; (8001784 <main+0x350>)
 80014d6:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 80014da:	f104 0404 	add.w	r4, r4, #4
 80014de:	461d      	mov	r5, r3
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	6023      	str	r3, [r4, #0]
  uint8_t Presc = 8;
 80014e8:	2308      	movs	r3, #8
 80014ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014ee:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80014f2:	7013      	strb	r3, [r2, #0]
  uint16_t Value = Presc;
 80014f4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014f8:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001502:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001506:	8013      	strh	r3, [r2, #0]
  uint32_t Speed = 0x0007ffff;
 8001508:	4b9f      	ldr	r3, [pc, #636]	; (8001788 <main+0x354>)
 800150a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800150e:	f102 020c 	add.w	r2, r2, #12
 8001512:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151a:	4896      	ldr	r0, [pc, #600]	; (8001774 <main+0x340>)
 800151c:	f002 fb42 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001524:	f001 fa9e 	bl	8002a64 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4891      	ldr	r0, [pc, #580]	; (8001774 <main+0x340>)
 8001530:	f002 fb38 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 8001534:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001538:	f001 fa94 	bl	8002a64 <HAL_Delay>

  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	4888      	ldr	r0, [pc, #544]	; (8001764 <main+0x330>)
 8001542:	f002 fb2f 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, ADC_data, 4);		// Po konwersji ADC, DMA zapisuje odczyty
 8001546:	2204      	movs	r2, #4
 8001548:	4990      	ldr	r1, [pc, #576]	; (800178c <main+0x358>)
 800154a:	4891      	ldr	r0, [pc, #580]	; (8001790 <main+0x35c>)
 800154c:	f001 fb84 	bl	8002c58 <HAL_ADC_Start_DMA>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 8);
 8001550:	4b90      	ldr	r3, [pc, #576]	; (8001794 <main+0x360>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2208      	movs	r2, #8
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);	// Pulse wyzwala ADC
 8001558:	2108      	movs	r1, #8
 800155a:	488e      	ldr	r0, [pc, #568]	; (8001794 <main+0x360>)
 800155c:	f003 f93a 	bl	80047d4 <HAL_TIM_PWM_Start_IT>
*/
	//Speed = Speed - 0x0ff;
		  //Speed = SpeedArray[a];
		  //Value = ValueArray[a];
  //}
  IsDMA = 1;
 8001560:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <main+0x364>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 3);
 8001566:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <main+0x360>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2203      	movs	r2, #3
 800156c:	63da      	str	r2, [r3, #60]	; 0x3c
uint16_t ticks = MIN_TICKS;
 800156e:	230f      	movs	r3, #15
 8001570:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001574:	f102 020a 	add.w	r2, r2, #10
 8001578:	8013      	strh	r3, [r2, #0]

///////////////////////
if(COLLECT_DATA == 1){
	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	2101      	movs	r1, #1
 800157e:	4879      	ldr	r0, [pc, #484]	; (8001764 <main+0x330>)
 8001580:	f002 fb10 	bl	8003ba4 <HAL_GPIO_WritePin>
	int c = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800158a:	f102 0204 	add.w	r2, r2, #4
 800158e:	6013      	str	r3, [r2, #0]
	int val = 8;
 8001590:	2308      	movs	r3, #8
 8001592:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001596:	6013      	str	r3, [r2, #0]
	Speed = 0x00070000;
 8001598:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800159c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015a0:	f102 020c 	add.w	r2, r2, #12
 80015a4:	6013      	str	r3, [r2, #0]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 80015a6:	e037      	b.n	8001618 <main+0x1e4>
		SixStep(Speed, val);
 80015a8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015b6:	f103 030c 	add.w	r3, r3, #12
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f7ff f95e 	bl	800087c <SixStep>
		++c;
 80015c0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015c4:	f103 0304 	add.w	r3, r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015d0:	f102 0204 	add.w	r2, r2, #4
 80015d4:	6013      	str	r3, [r2, #0]
		if (c == 4){
 80015d6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015da:	f103 0304 	add.w	r3, r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d10c      	bne.n	80015fe <main+0x1ca>
			++val;
 80015e4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015f0:	6013      	str	r3, [r2, #0]
			c = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80015f8:	f102 0204 	add.w	r2, r2, #4
 80015fc:	6013      	str	r3, [r2, #0]
	for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 80015fe:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001602:	f103 030c 	add.w	r3, r3, #12
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 800160c:	3b1f      	subs	r3, #31
 800160e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001612:	f102 020c 	add.w	r2, r2, #12
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800161c:	f103 030c 	add.w	r3, r3, #12
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001626:	d8bf      	bhi.n	80015a8 <main+0x174>
		}
	}
	// Reset Stored Values
	data_num = 0;
 8001628:	4b5c      	ldr	r3, [pc, #368]	; (800179c <main+0x368>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
	cnt = 0;
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <main+0x36c>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	tim_num = 0;
 8001634:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <main+0x370>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800163a:	e017      	b.n	800166c <main+0x238>
		SixStep(Speed, val);
 800163c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800164a:	f103 030c 	add.w	r3, r3, #12
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f7ff f914 	bl	800087c <SixStep>
	for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 8001654:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001658:	f103 030c 	add.w	r3, r3, #12
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8001662:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001666:	f102 020c 	add.w	r2, r2, #12
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001670:	f103 030c 	add.w	r3, r3, #12
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800167a:	d8df      	bhi.n	800163c <main+0x208>
	}


	uint16_t New_data[4096];
	for (int a = 0; a < 4096; a ++){
 800167c:	2300      	movs	r3, #0
 800167e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001682:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e01c      	b.n	80016c4 <main+0x290>
		New_data[a] = data[a];
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <main+0x374>)
 800168c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001690:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	3b0c      	subs	r3, #12
 80016a0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016a4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int a = 0; a < 4096; a ++){
 80016ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016b2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80016be:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016c8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d2:	dbda      	blt.n	800168a <main+0x256>
	}

	HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	4822      	ldr	r0, [pc, #136]	; (8001764 <main+0x330>)
 80016da:	f002 fa63 	bl	8003ba4 <HAL_GPIO_WritePin>
	SetFloating_A();
 80016de:	f7ff f86b 	bl	80007b8 <SetFloating_A>
	SetFloating_B();
 80016e2:	f7ff f87b 	bl	80007dc <SetFloating_B>
	SetFloating_C();
 80016e6:	f7ff f88b 	bl	8000800 <SetFloating_C>
	IsRunning = 0;
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <main+0x378>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
}

///////////////////////
ticks = MIN_TICKS;
 80016f0:	230f      	movs	r3, #15
 80016f2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80016f6:	f102 020a 	add.w	r2, r2, #10
 80016fa:	8013      	strh	r3, [r2, #0]
			IsRunning = 0;
			ticks = MIN_TICKS;
		}
		continue;
	}
	Power = rx_buffer[1];
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <main+0x344>)
 80016fe:	785a      	ldrb	r2, [r3, #1]
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <main+0x37c>)
 8001702:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(1);
	if(Power == 0){								// wartosc = 0, stop
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <main+0x37c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d118      	bne.n	800173e <main+0x30a>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2101      	movs	r1, #1
 8001710:	4814      	ldr	r0, [pc, #80]	; (8001764 <main+0x330>)
 8001712:	f002 fa47 	bl	8003ba4 <HAL_GPIO_WritePin>
		SetFloating_A();
 8001716:	f7ff f84f 	bl	80007b8 <SetFloating_A>
		SetFloating_B();
 800171a:	f7ff f85f 	bl	80007dc <SetFloating_B>
		SetFloating_C();
 800171e:	f7ff f86f 	bl	8000800 <SetFloating_C>
		IsRunning = 0;
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <main+0x378>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8001728:	230f      	movs	r3, #15
 800172a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800172e:	f102 020a 	add.w	r2, r2, #10
 8001732:	8013      	strh	r3, [r2, #0]
		Function = rx_buffer[0];				// Zmiana funkcji jest mzliwa jedynie gdy silnik stoi
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <main+0x344>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <main+0x380>)
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e7de      	b.n	80016fc <main+0x2c8>
		if (SCOTTER_PROGRAM) HAL_Delay(10);		// Synchronizujący delay
	}else if(Function >= 64){					// Jezeli to funkcja z jakas wartoscia
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <main+0x380>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b3f      	cmp	r3, #63	; 0x3f
 8001744:	f240 817f 	bls.w	8001a46 <main+0x612>
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	2101      	movs	r1, #1
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <main+0x330>)
 800174e:	f002 fa29 	bl	8003ba4 <HAL_GPIO_WritePin>
		if (Power < 28) Power = 28;				// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <main+0x37c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b1b      	cmp	r3, #27
 8001758:	d82e      	bhi.n	80017b8 <main+0x384>
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <main+0x37c>)
 800175c:	221c      	movs	r2, #28
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e031      	b.n	80017c6 <main+0x392>
 8001762:	bf00      	nop
 8001764:	40011400 	.word	0x40011400
 8001768:	40010c00 	.word	0x40010c00
 800176c:	200024cc 	.word	0x200024cc
 8001770:	200000a0 	.word	0x200000a0
 8001774:	40010800 	.word	0x40010800
 8001778:	2000008c 	.word	0x2000008c
 800177c:	20000308 	.word	0x20000308
 8001780:	08005f8c 	.word	0x08005f8c
 8001784:	08005fa0 	.word	0x08005fa0
 8001788:	0007ffff 	.word	0x0007ffff
 800178c:	20000084 	.word	0x20000084
 8001790:	20000294 	.word	0x20000294
 8001794:	2000238c 	.word	0x2000238c
 8001798:	20000000 	.word	0x20000000
 800179c:	20000090 	.word	0x20000090
 80017a0:	2000009c 	.word	0x2000009c
 80017a4:	2000008f 	.word	0x2000008f
 80017a8:	2000038c 	.word	0x2000038c
 80017ac:	20000095 	.word	0x20000095
 80017b0:	20000096 	.word	0x20000096
 80017b4:	20000097 	.word	0x20000097
		else if (Power > 128-28) Power = 128;	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 80017b8:	4bad      	ldr	r3, [pc, #692]	; (8001a70 <main+0x63c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d902      	bls.n	80017c6 <main+0x392>
 80017c0:	4bab      	ldr	r3, [pc, #684]	; (8001a70 <main+0x63c>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	701a      	strb	r2, [r3, #0]

		if (IsRunning == 0){					// Startujemy
 80017c6:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <main+0x640>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 810a 	bne.w	80019e4 <main+0x5b0>
			int Speed;
			int cnt = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80017d6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80017da:	6013      	str	r3, [r2, #0]
			int val = 8;
 80017dc:	2308      	movs	r3, #8
 80017de:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80017e2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80017e6:	6013      	str	r3, [r2, #0]
			switch (Function){
 80017e8:	4ba3      	ldr	r3, [pc, #652]	; (8001a78 <main+0x644>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	3b42      	subs	r3, #66	; 0x42
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	f200 80f9 	bhi.w	80019e6 <main+0x5b2>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <main+0x3c8>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001815 	.word	0x08001815
 8001800:	080018fd 	.word	0x080018fd
 8001804:	080019e7 	.word	0x080019e7
 8001808:	080019e7 	.word	0x080019e7
 800180c:	080019e7 	.word	0x080019e7
 8001810:	080019e7 	.word	0x080019e7
			case SET_MOTOR_1_SPEED_FORWAD_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 8001814:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001818:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800181c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001820:	6013      	str	r3, [r2, #0]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8001822:	e03e      	b.n	80018a2 <main+0x46e>
					SixStep(Speed, val);
 8001824:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001828:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001832:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	b292      	uxth	r2, r2
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f81d 	bl	800087c <SixStep>
					++cnt;
 8001842:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001846:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001852:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001856:	6013      	str	r3, [r2, #0]
					if (cnt == 4){
 8001858:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800185c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d110      	bne.n	8001888 <main+0x454>
						++val;
 8001866:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800186a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001876:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800187a:	6013      	str	r3, [r2, #0]
						cnt = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001882:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001886:	6013      	str	r3, [r2, #0]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8001888:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800188c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8001896:	3b1f      	subs	r3, #31
 8001898:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800189c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018a6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018b0:	dcb8      	bgt.n	8001824 <main+0x3f0>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 80018b2:	e01a      	b.n	80018ea <main+0x4b6>
					SixStep(Speed, val);
 80018b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018b8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018c2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	b292      	uxth	r2, r2
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe ffd5 	bl	800087c <SixStep>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 80018d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 80018e0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018e4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80018f8:	dcdc      	bgt.n	80018b4 <main+0x480>
				}
				break;
 80018fa:	e074      	b.n	80019e6 <main+0x5b2>
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_1: {
				// Sekwencja rozruchowa dla silnika: TAROT_SZYBKI
				Speed = 0x00070000;
 80018fc:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001900:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001904:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001908:	6013      	str	r3, [r2, #0]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 800190a:	e03e      	b.n	800198a <main+0x556>
					SixStep_rev(Speed, val);
 800190c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001910:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800191a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	b292      	uxth	r2, r2
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f831 	bl	800098c <SixStep_rev>
					++cnt;
 800192a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800192e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800193a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800193e:	6013      	str	r3, [r2, #0]
					if (cnt == 4){
 8001940:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001944:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d110      	bne.n	8001970 <main+0x53c>
						++val;
 800194e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001952:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800195e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001962:	6013      	str	r3, [r2, #0]
						cnt = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800196a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800196e:	6013      	str	r3, [r2, #0]
				for (; Speed > 0x00030000; Speed -= 0x00001fff){		// 1
 8001970:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001974:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 800197e:	3b1f      	subs	r3, #31
 8001980:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001984:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800198e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001998:	dcb8      	bgt.n	800190c <main+0x4d8>
					}
				}

				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 800199a:	e01a      	b.n	80019d2 <main+0x59e>
					SixStep_rev(Speed, val);
 800199c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80019a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80019aa:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	b292      	uxth	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe ffe9 	bl	800098c <SixStep_rev>
				for (; Speed > 0x00006000; Speed = Speed - 0x00000fff){		// 1
 80019ba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80019be:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 80019c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80019cc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80019d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80019e0:	dcdc      	bgt.n	800199c <main+0x568>
				}
				break;
 80019e2:	e000      	b.n	80019e6 <main+0x5b2>
				break;
			}
			case SET_MOTOR_1_SPEED_BACK_SEQ_3: {
				break;
			}
			default: {
 80019e4:	bf00      	nop
				// Błąd
			}
			}
		}
		// Kręcimy normalnie
		if(Function % 2 == 1){					// Kręcimy do tylu
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <main+0x644>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <main+0x5e6>
			ticks = BEMF_SixStep_TEST_rev(Power, ticks);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <main+0x63c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80019fe:	f102 020a 	add.w	r2, r2, #10
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fa7c 	bl	8000f04 <BEMF_SixStep_TEST_rev>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001a12:	f102 020a 	add.w	r2, r2, #10
 8001a16:	8013      	strh	r3, [r2, #0]
 8001a18:	e011      	b.n	8001a3e <main+0x60a>

		}else{									// Kręcimy do przodu
			ticks = BEMF_SixStep_TEST(Power, ticks);
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <main+0x63c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001a24:	f102 020a 	add.w	r2, r2, #10
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f8c1 	bl	8000bb4 <BEMF_SixStep_TEST>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001a38:	f102 020a 	add.w	r2, r2, #10
 8001a3c:	8013      	strh	r3, [r2, #0]
		}

		IsRunning = 1;
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <main+0x640>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e65a      	b.n	80016fc <main+0x2c8>
	} else {								// Nie funkcja z wartoscia -> Bład
		HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2101      	movs	r1, #1
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <main+0x648>)
 8001a4c:	f002 f8aa 	bl	8003ba4 <HAL_GPIO_WritePin>
		SetFloating_A();
 8001a50:	f7fe feb2 	bl	80007b8 <SetFloating_A>
		SetFloating_B();
 8001a54:	f7fe fec2 	bl	80007dc <SetFloating_B>
		SetFloating_C();
 8001a58:	f7fe fed2 	bl	8000800 <SetFloating_C>
		IsRunning = 0;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <main+0x640>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		ticks = MIN_TICKS;
 8001a62:	230f      	movs	r3, #15
 8001a64:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001a68:	f102 020a 	add.w	r2, r2, #10
 8001a6c:	8013      	strh	r3, [r2, #0]
	if(SCOTTER_PROGRAM){
 8001a6e:	e645      	b.n	80016fc <main+0x2c8>
 8001a70:	20000096 	.word	0x20000096
 8001a74:	20000095 	.word	0x20000095
 8001a78:	20000097 	.word	0x20000097
 8001a7c:	40011400 	.word	0x40011400

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	; 0x50
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8a:	2228      	movs	r2, #40	; 0x28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fa67 	bl	8005f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8001ac4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 f898 	bl	8003c04 <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001ada:	f000 fbe5 	bl	80022a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fb02 	bl	8004104 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b06:	f000 fbcf 	bl	80022a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fc90 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b22:	f000 fbc1 	bl	80022a8 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3750      	adds	r7, #80	; 0x50
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b42:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <MX_ADC1_Init+0xd0>)
 8001b44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b70:	f000 ff9a 	bl	8002aa8 <HAL_ADC_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b7a:	f000 fb95 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481b      	ldr	r0, [pc, #108]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001b90:	f001 f952 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f000 fb85 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001bac:	f001 f944 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001bb6:	f000 fb77 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001bc8:	f001 f936 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001bd2:	f000 fb69 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_ADC1_Init+0xcc>)
 8001be4:	f001 f928 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001bee:	f000 fb5b 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000294 	.word	0x20000294
 8001c00:	40012400 	.word	0x40012400

08001c04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <MX_ADC2_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c42:	f000 ff31 	bl	8002aa8 <HAL_ADC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 fb2c 	bl	80022a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_ADC2_Init+0x74>)
 8001c62:	f001 f8e9 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001c6c:	f000 fb1c 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200000e0 	.word	0x200000e0
 8001c7c:	40012800 	.word	0x40012800

08001c80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <MX_SPI1_Init+0x6c>)
 8001c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cb6:	2218      	movs	r2, #24
 8001cb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cce:	220a      	movs	r2, #10
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_SPI1_Init+0x68>)
 8001cd4:	f002 fc68 	bl	80045a8 <HAL_SPI_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001cde:	f000 fae3 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200024cc 	.word	0x200024cc
 8001cec:	40013000 	.word	0x40013000

08001cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b096      	sub	sp, #88	; 0x58
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2220      	movs	r2, #32
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 f91a 	bl	8005f62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d30:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <MX_TIM1_Init+0x158>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d36:	2204      	movs	r2, #4
 8001d38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d58:	483a      	ldr	r0, [pc, #232]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d5a:	f002 fc86 	bl	800466a <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d64:	f000 faa0 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d72:	4619      	mov	r1, r3
 8001d74:	4833      	ldr	r0, [pc, #204]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d76:	f002 ff73 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d80:	f000 fa92 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d84:	482f      	ldr	r0, [pc, #188]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d86:	f002 fcbe 	bl	8004706 <HAL_TIM_PWM_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d90:	f000 fa8a 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da0:	4619      	mov	r1, r3
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001da4:	f003 fadc 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001dae:	f000 fa7b 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db2:	2360      	movs	r3, #96	; 0x60
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481b      	ldr	r0, [pc, #108]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001dd8:	f002 fe7c 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001de2:	f000 fa61 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	2208      	movs	r2, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001df4:	f002 fe6e 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001dfe:	f000 fa53 	bl	80022a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001e26:	f003 fadf 	bl	80053e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001e30:	f000 fa3a 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001e36:	f000 fbab 	bl	8002590 <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3758      	adds	r7, #88	; 0x58
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000238c 	.word	0x2000238c
 8001e48:	40012c00 	.word	0x40012c00

08001e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e86:	2204      	movs	r2, #4
 8001e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea2:	4823      	ldr	r0, [pc, #140]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001ea4:	f002 fbe1 	bl	800466a <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001eae:	f000 f9fb 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481c      	ldr	r0, [pc, #112]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001ec0:	f002 fece 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001eca:	f000 f9ed 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ece:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001ed0:	f002 fc19 	bl	8004706 <HAL_TIM_PWM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001eda:	f000 f9e5 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	4619      	mov	r1, r3
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001eee:	f003 fa37 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001ef8:	f000 f9d6 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001f14:	f002 fdde 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001f1e:	f000 f9c3 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM2_Init+0xe4>)
 8001f24:	f000 fb34 	bl	8002590 <HAL_TIM_MspPostInit>

}
 8001f28:	bf00      	nop
 8001f2a:	3738      	adds	r7, #56	; 0x38
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20002524 	.word	0x20002524

08001f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08e      	sub	sp, #56	; 0x38
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <MX_TIM3_Init+0xe8>)
 8001f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f72:	2220      	movs	r2, #32
 8001f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8001f76:	4b28      	ldr	r3, [pc, #160]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f88:	4823      	ldr	r0, [pc, #140]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001f8a:	f002 fb6e 	bl	800466a <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f94:	f000 f988 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481c      	ldr	r0, [pc, #112]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fa6:	f002 fe5b 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001fb0:	f000 f97a 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fb6:	f002 fba6 	bl	8004706 <HAL_TIM_PWM_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001fc0:	f000 f972 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4811      	ldr	r0, [pc, #68]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001fd4:	f003 f9c4 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001fde:	f000 f963 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	2360      	movs	r3, #96	; 0x60
 8001fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM3_Init+0xe4>)
 8001ffa:	f002 fd6b 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002004:	f000 f950 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM3_Init+0xe4>)
 800200a:	f000 fac1 	bl	8002590 <HAL_TIM_MspPostInit>

}
 800200e:	bf00      	nop
 8002010:	3738      	adds	r7, #56	; 0x38
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000210 	.word	0x20000210
 800201c:	40000400 	.word	0x40000400

08002020 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM4_Init+0x94>)
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <MX_TIM4_Init+0x98>)
 8002040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_TIM4_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002054:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_TIM4_Init+0x94>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002064:	f002 fb01 	bl	800466a <HAL_TIM_Base_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f91b 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002080:	f002 fdee 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800208a:	f000 f90d 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002096:	463b      	mov	r3, r7
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <MX_TIM4_Init+0x94>)
 800209c:	f003 f960 	bl	8005360 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020a6:	f000 f8ff 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200000a0 	.word	0x200000a0
 80020b8:	40000800 	.word	0x40000800

080020bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_USART1_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020f4:	f003 f9db 	bl	80054ae <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f000 f8d3 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000308 	.word	0x20000308
 800210c:	40013800 	.word	0x40013800

08002110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_DMA_Init+0x58>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <MX_DMA_Init+0x58>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6153      	str	r3, [r2, #20]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_DMA_Init+0x58>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	200b      	movs	r0, #11
 8002134:	f001 f941 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002138:	200b      	movs	r0, #11
 800213a:	f001 f95a 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	200e      	movs	r0, #14
 8002144:	f001 f939 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002148:	200e      	movs	r0, #14
 800214a:	f001 f952 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	200f      	movs	r0, #15
 8002154:	f001 f931 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002158:	200f      	movs	r0, #15
 800215a:	f001 f94a 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002180:	4b44      	ldr	r3, [pc, #272]	; (8002294 <MX_GPIO_Init+0x128>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a43      	ldr	r2, [pc, #268]	; (8002294 <MX_GPIO_Init+0x128>)
 8002186:	f043 0320 	orr.w	r3, r3, #32
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <MX_GPIO_Init+0x128>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <MX_GPIO_Init+0x128>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a3d      	ldr	r2, [pc, #244]	; (8002294 <MX_GPIO_Init+0x128>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <MX_GPIO_Init+0x128>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <MX_GPIO_Init+0x128>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a37      	ldr	r2, [pc, #220]	; (8002294 <MX_GPIO_Init+0x128>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b35      	ldr	r3, [pc, #212]	; (8002294 <MX_GPIO_Init+0x128>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2101      	movs	r1, #1
 80021cc:	4832      	ldr	r0, [pc, #200]	; (8002298 <MX_GPIO_Init+0x12c>)
 80021ce:	f001 fce9 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	4831      	ldr	r0, [pc, #196]	; (800229c <MX_GPIO_Init+0x130>)
 80021d8:	f001 fce4 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_CL_Pin|LED_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80021e2:	482f      	ldr	r0, [pc, #188]	; (80022a0 <MX_GPIO_Init+0x134>)
 80021e4:	f001 fcde 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 80021e8:	2301      	movs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4619      	mov	r1, r3
 80021fe:	4826      	ldr	r0, [pc, #152]	; (8002298 <MX_GPIO_Init+0x12c>)
 8002200:	f001 fb76 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8002204:	2302      	movs	r3, #2
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	4820      	ldr	r0, [pc, #128]	; (8002298 <MX_GPIO_Init+0x12c>)
 8002218:	f001 fb6a 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PWM_AL_Pin PWM_BL_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin;
 800221c:	232c      	movs	r3, #44	; 0x2c
 800221e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	481a      	ldr	r0, [pc, #104]	; (800229c <MX_GPIO_Init+0x130>)
 8002234:	f001 fb5c 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_CL_Pin LED_Pin */
  GPIO_InitStruct.Pin = PWM_CL_Pin|LED_Pin;
 8002238:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800223c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2302      	movs	r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	4813      	ldr	r0, [pc, #76]	; (80022a0 <MX_GPIO_Init+0x134>)
 8002252:	f001 fb4d 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_INPUT_Pin D1_INPUT_Pin */
  GPIO_InitStruct.Pin = D2_INPUT_Pin|D1_INPUT_Pin;
 8002256:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800225a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_GPIO_Init+0x134>)
 800226c:	f001 fb40 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_GPIO_Init+0x138>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <MX_GPIO_Init+0x138>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	6053      	str	r3, [r2, #4]

}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40011400 	.word	0x40011400
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	40010800 	.word	0x40010800
 80022a4:	40010000 	.word	0x40010000

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_MspInit+0x5c>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_MspInit+0x5c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_MspInit+0x5c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x5c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_MspInit+0x5c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_MspInit+0x5c>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_MspInit+0x60>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_MspInit+0x60>)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000

08002318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0318 	add.w	r3, r7, #24
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <HAL_ADC_MspInit+0x10c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d14a      	bne.n	80023ce <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_ADC_MspInit+0x110>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <HAL_ADC_MspInit+0x110>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_ADC_MspInit+0x110>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_ADC_MspInit+0x110>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_ADC_MspInit+0x110>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_ADC_MspInit+0x110>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002368:	231f      	movs	r3, #31
 800236a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236c:	2303      	movs	r3, #3
 800236e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	4619      	mov	r1, r3
 8002376:	482d      	ldr	r0, [pc, #180]	; (800242c <HAL_ADC_MspInit+0x114>)
 8002378:	f001 faba 	bl	80038f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <HAL_ADC_MspInit+0x118>)
 800237e:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <HAL_ADC_MspInit+0x11c>)
 8002380:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_ADC_MspInit+0x118>)
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_ADC_MspInit+0x118>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_ADC_MspInit+0x118>)
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_ADC_MspInit+0x118>)
 8002396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_ADC_MspInit+0x118>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_ADC_MspInit+0x118>)
 80023a6:	2220      	movs	r2, #32
 80023a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_ADC_MspInit+0x118>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023b0:	481f      	ldr	r0, [pc, #124]	; (8002430 <HAL_ADC_MspInit+0x118>)
 80023b2:	f001 f839 	bl	8003428 <HAL_DMA_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80023bc:	f7ff ff74 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_ADC_MspInit+0x118>)
 80023c4:	621a      	str	r2, [r3, #32]
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_ADC_MspInit+0x118>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023cc:	e026      	b.n	800241c <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_ADC_MspInit+0x120>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d121      	bne.n	800241c <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_ADC_MspInit+0x110>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002408:	2304      	movs	r3, #4
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240c:	2303      	movs	r3, #3
 800240e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0318 	add.w	r3, r7, #24
 8002414:	4619      	mov	r1, r3
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_ADC_MspInit+0x114>)
 8002418:	f001 fa6a 	bl	80038f0 <HAL_GPIO_Init>
}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40012400 	.word	0x40012400
 8002428:	40021000 	.word	0x40021000
 800242c:	40010800 	.word	0x40010800
 8002430:	20000348 	.word	0x20000348
 8002434:	40020008 	.word	0x40020008
 8002438:	40012800 	.word	0x40012800

0800243c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <HAL_SPI_MspInit+0x88>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d12f      	bne.n	80024bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 8002462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_SPI_MspInit+0x8c>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 800248c:	23a0      	movs	r3, #160	; 0xa0
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	480b      	ldr	r0, [pc, #44]	; (80024cc <HAL_SPI_MspInit+0x90>)
 80024a0:	f001 fa26 	bl	80038f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_SPI_MspInit+0x90>)
 80024b8:	f001 fa1a 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40013000 	.word	0x40013000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010800 	.word	0x40010800

080024d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_TIM_Base_MspInit+0xb0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d114      	bne.n	800250c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 80024e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ec:	6193      	str	r3, [r2, #24]
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2019      	movs	r0, #25
 8002500:	f000 ff5b 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002504:	2019      	movs	r0, #25
 8002506:	f000 ff74 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800250a:	e034      	b.n	8002576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d10c      	bne.n	8002530 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
}
 800252e:	e022      	b.n	8002576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <HAL_TIM_Base_MspInit+0xb8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10c      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	61d3      	str	r3, [r2, #28]
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
}
 8002552:	e010      	b.n	8002576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <HAL_TIM_Base_MspInit+0xbc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10b      	bne.n	8002576 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_TIM_Base_MspInit+0xb4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800

08002590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0318 	add.w	r3, r7, #24
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a40      	ldr	r2, [pc, #256]	; (80026ac <HAL_TIM_MspPostInit+0x11c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d119      	bne.n	80025e4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a3e      	ldr	r2, [pc, #248]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH_Pin;
 80025c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2302      	movs	r3, #2
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 0318 	add.w	r3, r7, #24
 80025da:	4619      	mov	r1, r3
 80025dc:	4835      	ldr	r0, [pc, #212]	; (80026b4 <HAL_TIM_MspPostInit+0x124>)
 80025de:	f001 f987 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025e2:	e05f      	b.n	80026a4 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d12b      	bne.n	8002646 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 8002606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2302      	movs	r3, #2
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4619      	mov	r1, r3
 800261a:	4826      	ldr	r0, [pc, #152]	; (80026b4 <HAL_TIM_MspPostInit+0x124>)
 800261c:	f001 f968 	bl	80038f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_TIM_MspPostInit+0x128>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_TIM_MspPostInit+0x128>)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6053      	str	r3, [r2, #4]
}
 8002644:	e02e      	b.n	80026a4 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_TIM_MspPostInit+0x12c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d129      	bne.n	80026a4 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_TIM_MspPostInit+0x120>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BH_Pin;
 8002668:	2310      	movs	r3, #16
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2302      	movs	r3, #2
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BH_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	4619      	mov	r1, r3
 800267a:	4811      	ldr	r0, [pc, #68]	; (80026c0 <HAL_TIM_MspPostInit+0x130>)
 800267c:	f001 f938 	bl	80038f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_TIM_MspPostInit+0x128>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269e:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_TIM_MspPostInit+0x128>)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	6053      	str	r3, [r2, #4]
}
 80026a4:	bf00      	nop
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40010c00 	.word	0x40010c00

080026c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_UART_MspInit+0x150>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f040 8092 	bne.w	800280a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e6:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_UART_MspInit+0x154>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <HAL_UART_MspInit+0x154>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6193      	str	r3, [r2, #24]
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_UART_MspInit+0x154>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_UART_MspInit+0x154>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	4a45      	ldr	r2, [pc, #276]	; (8002818 <HAL_UART_MspInit+0x154>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6193      	str	r3, [r2, #24]
 800270a:	4b43      	ldr	r3, [pc, #268]	; (8002818 <HAL_UART_MspInit+0x154>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	483c      	ldr	r0, [pc, #240]	; (800281c <HAL_UART_MspInit+0x158>)
 800272a:	f001 f8e1 	bl	80038f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4836      	ldr	r0, [pc, #216]	; (800281c <HAL_UART_MspInit+0x158>)
 8002742:	f001 f8d5 	bl	80038f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_UART_MspInit+0x15c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	4a30      	ldr	r2, [pc, #192]	; (8002820 <HAL_UART_MspInit+0x15c>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002764:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_UART_MspInit+0x164>)
 8002766:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_UART_MspInit+0x160>)
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_UART_MspInit+0x160>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_UART_MspInit+0x160>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002792:	4824      	ldr	r0, [pc, #144]	; (8002824 <HAL_UART_MspInit+0x160>)
 8002794:	f000 fe48 	bl	8003428 <HAL_DMA_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800279e:	f7ff fd83 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_UART_MspInit+0x160>)
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_UART_MspInit+0x160>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_UART_MspInit+0x168>)
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_UART_MspInit+0x16c>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_UART_MspInit+0x168>)
 80027b6:	2210      	movs	r2, #16
 80027b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_UART_MspInit+0x168>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_UART_MspInit+0x168>)
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_UART_MspInit+0x168>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_UART_MspInit+0x168>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_UART_MspInit+0x168>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_UART_MspInit+0x168>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027de:	4813      	ldr	r0, [pc, #76]	; (800282c <HAL_UART_MspInit+0x168>)
 80027e0:	f000 fe22 	bl	8003428 <HAL_DMA_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80027ea:	f7ff fd5d 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_UART_MspInit+0x168>)
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_UART_MspInit+0x168>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2025      	movs	r0, #37	; 0x25
 8002800:	f000 fddb 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002804:	2025      	movs	r0, #37	; 0x25
 8002806:	f000 fdf4 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40013800 	.word	0x40013800
 8002818:	40021000 	.word	0x40021000
 800281c:	40010c00 	.word	0x40010c00
 8002820:	40010000 	.word	0x40010000
 8002824:	200002c4 	.word	0x200002c4
 8002828:	40020058 	.word	0x40020058
 800282c:	20000250 	.word	0x20000250
 8002830:	40020044 	.word	0x40020044

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <HardFault_Handler+0x4>

08002846 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <MemManage_Handler+0x4>

0800284c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <BusFault_Handler+0x4>

08002852 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <UsageFault_Handler+0x4>

08002858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002880:	f000 f8d4 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}

08002888 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DMA1_Channel1_IRQHandler+0x10>)
 800288e:	f000 fefb 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000348 	.word	0x20000348

0800289c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <DMA1_Channel4_IRQHandler+0x10>)
 80028a2:	f000 fef1 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000250 	.word	0x20000250

080028b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA1_Channel5_IRQHandler+0x10>)
 80028b6:	f000 fee7 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200002c4 	.word	0x200002c4

080028c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <TIM1_UP_IRQHandler+0x10>)
 80028ca:	f001 fffb 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000238c 	.word	0x2000238c

080028d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <USART1_IRQHandler+0x10>)
 80028de:	f002 ff1f 	bl	8005720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000308 	.word	0x20000308

080028ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <SystemInit+0x5c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <SystemInit+0x5c>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <SystemInit+0x5c>)
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4911      	ldr	r1, [pc, #68]	; (8002948 <SystemInit+0x5c>)
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <SystemInit+0x60>)
 8002904:	4013      	ands	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <SystemInit+0x5c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <SystemInit+0x5c>)
 800290e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <SystemInit+0x5c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <SystemInit+0x5c>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <SystemInit+0x5c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <SystemInit+0x5c>)
 800292a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800292e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SystemInit+0x5c>)
 8002932:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002936:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SystemInit+0x64>)
 800293a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800293e:	609a      	str	r2, [r3, #8]
#endif 
 }
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000
 800294c:	f8ff0000 	.word	0xf8ff0000
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002954:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002956:	e003      	b.n	8002960 <LoopCopyDataInit>

08002958 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800295a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800295c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800295e:	3104      	adds	r1, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002960:	480a      	ldr	r0, [pc, #40]	; (800298c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002964:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002966:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002968:	d3f6      	bcc.n	8002958 <CopyDataInit>
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800296c:	e002      	b.n	8002974 <LoopFillZerobss>

0800296e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002970:	f842 3b04 	str.w	r3, [r2], #4

08002974 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002976:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002978:	d3f9      	bcc.n	800296e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800297a:	f7ff ffb7 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297e:	f003 fac1 	bl	8005f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002982:	f7fe fd57 	bl	8001434 <main>
  bx lr
 8002986:	4770      	bx	lr
  ldr r3, =_sidata
 8002988:	08005fe8 	.word	0x08005fe8
  ldr r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002990:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002994:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002998:	20002668 	.word	0x20002668

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_Init+0x28>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_Init+0x28>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 fcf7 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f000 f808 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029bc:	f7ff fc7a 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_InitTick+0x54>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_InitTick+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fd0f 	bl	800340e <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 fcd7 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_InitTick+0x5c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000004 	.word	0x20000004
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_IncTick+0x1c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_IncTick+0x20>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_IncTick+0x20>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	20002664 	.word	0x20002664

08002a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_GetTick+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20002664 	.word	0x20002664

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_Delay+0x40>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffe0 	bl	8002a50 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000000c 	.word	0x2000000c

08002aa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0be      	b.n	8002c48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fc16 	bl	8002318 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 faed 	bl	80030cc <ADC_ConversionStop_Disable>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 8099 	bne.w	8002c36 <HAL_ADC_Init+0x18e>
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8095 	bne.w	8002c36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b14:	f023 0302 	bic.w	r3, r3, #2
 8002b18:	f043 0202 	orr.w	r2, r3, #2
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7b1b      	ldrb	r3, [r3, #12]
 8002b2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b40:	d003      	beq.n	8002b4a <HAL_ADC_Init+0xa2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_Init+0xa8>
 8002b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_Init+0xaa>
 8002b50:	2300      	movs	r3, #0
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7d1b      	ldrb	r3, [r3, #20]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7b1b      	ldrb	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	035a      	lsls	r2, r3, #13
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	e00b      	b.n	8002b94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_ADC_Init+0x1a8>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc4:	d003      	beq.n	8002bce <HAL_ADC_Init+0x126>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d104      	bne.n	8002bd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	051b      	lsls	r3, r3, #20
 8002bd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_ADC_Init+0x1ac>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d10b      	bne.n	8002c14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c12:	e018      	b.n	8002c46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	f023 0312 	bic.w	r3, r3, #18
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c34:	e007      	b.n	8002c46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	ffe1f7fd 	.word	0xffe1f7fd
 8002c54:	ff1f0efe 	.word	0xff1f0efe

08002c58 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a64      	ldr	r2, [pc, #400]	; (8002e00 <HAL_ADC_Start_DMA+0x1a8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_Start_DMA+0x24>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a63      	ldr	r2, [pc, #396]	; (8002e04 <HAL_ADC_Start_DMA+0x1ac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_Start_DMA+0x32>
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <HAL_ADC_Start_DMA+0x1a8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 80b3 	bne.w	8002df0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_Start_DMA+0x40>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0ae      	b.n	8002df6 <HAL_ADC_Start_DMA+0x19e>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f9c1 	bl	8003028 <ADC_Enable>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f040 809a 	bne.w	8002de6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a4e      	ldr	r2, [pc, #312]	; (8002e04 <HAL_ADC_Start_DMA+0x1ac>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_Start_DMA+0x84>
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_ADC_Start_DMA+0x1a8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d115      	bne.n	8002d08 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d026      	beq.n	8002d44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d06:	e01d      	b.n	8002d44 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <HAL_ADC_Start_DMA+0x1a8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_ADC_Start_DMA+0xd0>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a38      	ldr	r2, [pc, #224]	; (8002e04 <HAL_ADC_Start_DMA+0x1ac>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10d      	bne.n	8002d44 <HAL_ADC_Start_DMA+0xec>
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <HAL_ADC_Start_DMA+0x1a8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f023 0206 	bic.w	r2, r3, #6
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_ADC_Start_DMA+0x1b0>)
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <HAL_ADC_Start_DMA+0x1b4>)
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_ADC_Start_DMA+0x1b8>)
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0202 	mvn.w	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a18      	ldr	r0, [r3, #32]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	334c      	adds	r3, #76	; 0x4c
 8002da8:	4619      	mov	r1, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f000 fb95 	bl	80034dc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002dbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002dd0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002dd2:	e00f      	b.n	8002df4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002de2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002de4:	e006      	b.n	8002df4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002dee:	e001      	b.n	8002df4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40012400 	.word	0x40012400
 8002e04:	40012800 	.word	0x40012800
 8002e08:	08003141 	.word	0x08003141
 8002e0c:	080031bd 	.word	0x080031bd
 8002e10:	080031d9 	.word	0x080031d9

08002e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x20>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0dc      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1da>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d81c      	bhi.n	8002ea2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b05      	subs	r3, #5
 8002e7a:	221f      	movs	r2, #31
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b05      	subs	r3, #5
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea0:	e03c      	b.n	8002f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d81c      	bhi.n	8002ee4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b23      	subs	r3, #35	; 0x23
 8002ebc:	221f      	movs	r2, #31
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4019      	ands	r1, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b23      	subs	r3, #35	; 0x23
 8002ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee2:	e01b      	b.n	8002f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b41      	subs	r3, #65	; 0x41
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	4019      	ands	r1, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3b41      	subs	r3, #65	; 0x41
 8002f10:	fa00 f203 	lsl.w	r2, r0, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	d91c      	bls.n	8002f5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	3b1e      	subs	r3, #30
 8002f36:	2207      	movs	r2, #7
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	4019      	ands	r1, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6898      	ldr	r0, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b1e      	subs	r3, #30
 8002f50:	fa00 f203 	lsl.w	r2, r0, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	e019      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	2207      	movs	r2, #7
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6898      	ldr	r0, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d003      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d132      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1d      	ldr	r2, [pc, #116]	; (800301c <HAL_ADC_ConfigChannel+0x1e4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d125      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d126      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fc8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d11a      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_ADC_ConfigChannel+0x1ec>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9a      	lsrs	r2, r3, #18
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f9      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x1b2>
 8002ff6:	e007      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40012400 	.word	0x40012400
 8003020:	20000004 	.word	0x20000004
 8003024:	431bde83 	.word	0x431bde83

08003028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d039      	beq.n	80030ba <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <ADC_Enable+0x9c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <ADC_Enable+0xa0>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9b      	lsrs	r3, r3, #18
 8003062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003064:	e002      	b.n	800306c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3b01      	subs	r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003072:	f7ff fced 	bl	8002a50 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003078:	e018      	b.n	80030ac <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800307a:	f7ff fce9 	bl	8002a50 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d911      	bls.n	80030ac <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e007      	b.n	80030bc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d1df      	bne.n	800307a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000004 	.word	0x20000004
 80030c8:	431bde83 	.word	0x431bde83

080030cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d127      	bne.n	8003136 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030f6:	f7ff fcab 	bl	8002a50 <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030fc:	e014      	b.n	8003128 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030fe:	f7ff fca7 	bl	8002a50 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d90d      	bls.n	8003128 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d0e3      	beq.n	80030fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d127      	bne.n	80031aa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003170:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003174:	d115      	bne.n	80031a2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800317a:	2b00      	cmp	r3, #0
 800317c:	d111      	bne.n	80031a2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7fe f880 	bl	80012a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031a8:	e004      	b.n	80031b4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fe22 	bl	8002e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fe11 	bl	8002e26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4906      	ldr	r1, [pc, #24]	; (80032a4 <__NVIC_EnableIRQ+0x34>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100

080032a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	; (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	; (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	bf28      	it	cs
 800331a:	2304      	movcs	r3, #4
 800331c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3304      	adds	r3, #4
 8003322:	2b06      	cmp	r3, #6
 8003324:	d902      	bls.n	800332c <NVIC_EncodePriority+0x30>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3b03      	subs	r3, #3
 800332a:	e000      	b.n	800332e <NVIC_EncodePriority+0x32>
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43d9      	mvns	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	4313      	orrs	r3, r2
         );
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	; 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff90 	bl	80032a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff2d 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff42 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff90 	bl	80032fc <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5f 	bl	80032a8 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff35 	bl	8003270 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e043      	b.n	80034c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_DMA_Init+0xa8>)
 8003446:	4413      	add	r3, r2
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <HAL_DMA_Init+0xac>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_DMA_Init+0xb0>)
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003472:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	bffdfff8 	.word	0xbffdfff8
 80034d4:	cccccccd 	.word	0xcccccccd
 80034d8:	40020000 	.word	0x40020000

080034dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Start_IT+0x20>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e04a      	b.n	8003592 <HAL_DMA_Start_IT+0xb6>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800350a:	2b01      	cmp	r3, #1
 800350c:	d13a      	bne.n	8003584 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f9ae 	bl	8003894 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 020e 	orr.w	r2, r2, #14
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e00f      	b.n	8003572 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0204 	bic.w	r2, r2, #4
 8003560:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 020a 	orr.w	r2, r2, #10
 8003570:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e005      	b.n	8003590 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d005      	beq.n	80035be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e051      	b.n	8003662 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 020e 	bic.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a22      	ldr	r2, [pc, #136]	; (800366c <HAL_DMA_Abort_IT+0xd0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d029      	beq.n	800363c <HAL_DMA_Abort_IT+0xa0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_DMA_Abort_IT+0xd4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d022      	beq.n	8003638 <HAL_DMA_Abort_IT+0x9c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_DMA_Abort_IT+0xd8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d01a      	beq.n	8003632 <HAL_DMA_Abort_IT+0x96>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_DMA_Abort_IT+0xdc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d012      	beq.n	800362c <HAL_DMA_Abort_IT+0x90>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_DMA_Abort_IT+0xe0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00a      	beq.n	8003626 <HAL_DMA_Abort_IT+0x8a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_DMA_Abort_IT+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d102      	bne.n	8003620 <HAL_DMA_Abort_IT+0x84>
 800361a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800361e:	e00e      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 8003620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003624:	e00b      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 8003626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362a:	e008      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	e005      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 8003632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003636:	e002      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 8003638:	2310      	movs	r3, #16
 800363a:	e000      	b.n	800363e <HAL_DMA_Abort_IT+0xa2>
 800363c:	2301      	movs	r3, #1
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_DMA_Abort_IT+0xe8>)
 8003640:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
    } 
  }
  return status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40020008 	.word	0x40020008
 8003670:	4002001c 	.word	0x4002001c
 8003674:	40020030 	.word	0x40020030
 8003678:	40020044 	.word	0x40020044
 800367c:	40020058 	.word	0x40020058
 8003680:	4002006c 	.word	0x4002006c
 8003684:	40020000 	.word	0x40020000

08003688 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d04f      	beq.n	8003750 <HAL_DMA_IRQHandler+0xc8>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04a      	beq.n	8003750 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a66      	ldr	r2, [pc, #408]	; (8003878 <HAL_DMA_IRQHandler+0x1f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d029      	beq.n	8003736 <HAL_DMA_IRQHandler+0xae>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a65      	ldr	r2, [pc, #404]	; (800387c <HAL_DMA_IRQHandler+0x1f4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_IRQHandler+0xaa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a63      	ldr	r2, [pc, #396]	; (8003880 <HAL_DMA_IRQHandler+0x1f8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01a      	beq.n	800372c <HAL_DMA_IRQHandler+0xa4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a62      	ldr	r2, [pc, #392]	; (8003884 <HAL_DMA_IRQHandler+0x1fc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d012      	beq.n	8003726 <HAL_DMA_IRQHandler+0x9e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_DMA_IRQHandler+0x200>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00a      	beq.n	8003720 <HAL_DMA_IRQHandler+0x98>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5f      	ldr	r2, [pc, #380]	; (800388c <HAL_DMA_IRQHandler+0x204>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d102      	bne.n	800371a <HAL_DMA_IRQHandler+0x92>
 8003714:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003718:	e00e      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 800371a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800371e:	e00b      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 8003720:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003724:	e008      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 8003726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800372a:	e005      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 800372c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003730:	e002      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	e000      	b.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 8003736:	2304      	movs	r3, #4
 8003738:	4a55      	ldr	r2, [pc, #340]	; (8003890 <HAL_DMA_IRQHandler+0x208>)
 800373a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8094 	beq.w	800386e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800374e:	e08e      	b.n	800386e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2202      	movs	r2, #2
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d056      	beq.n	800380e <HAL_DMA_IRQHandler+0x186>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d051      	beq.n	800380e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020a 	bic.w	r2, r2, #10
 8003786:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_DMA_IRQHandler+0x1f0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d029      	beq.n	80037ee <HAL_DMA_IRQHandler+0x166>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a37      	ldr	r2, [pc, #220]	; (800387c <HAL_DMA_IRQHandler+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0x162>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a35      	ldr	r2, [pc, #212]	; (8003880 <HAL_DMA_IRQHandler+0x1f8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01a      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x15c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_DMA_IRQHandler+0x1fc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d012      	beq.n	80037de <HAL_DMA_IRQHandler+0x156>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a32      	ldr	r2, [pc, #200]	; (8003888 <HAL_DMA_IRQHandler+0x200>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00a      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x150>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_DMA_IRQHandler+0x204>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d102      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x14a>
 80037cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037d0:	e00e      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d6:	e00b      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037dc:	e008      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037e2:	e005      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e8:	e002      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037ea:	2320      	movs	r3, #32
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_IRQHandler+0x168>
 80037ee:	2302      	movs	r3, #2
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <HAL_DMA_IRQHandler+0x208>)
 80037f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d034      	beq.n	800386e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800380c:	e02f      	b.n	800386e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2208      	movs	r2, #8
 8003814:	409a      	lsls	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d028      	beq.n	8003870 <HAL_DMA_IRQHandler+0x1e8>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d023      	beq.n	8003870 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020e 	bic.w	r2, r2, #14
 8003836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	2101      	movs	r1, #1
 8003842:	fa01 f202 	lsl.w	r2, r1, r2
 8003846:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
    }
  }
  return;
 800386e:	bf00      	nop
 8003870:	bf00      	nop
}
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40020008 	.word	0x40020008
 800387c:	4002001c 	.word	0x4002001c
 8003880:	40020030 	.word	0x40020030
 8003884:	40020044 	.word	0x40020044
 8003888:	40020058 	.word	0x40020058
 800388c:	4002006c 	.word	0x4002006c
 8003890:	40020000 	.word	0x40020000

08003894 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d108      	bne.n	80038d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038d2:	e007      	b.n	80038e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b08b      	sub	sp, #44	; 0x2c
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003902:	e127      	b.n	8003b54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003904:	2201      	movs	r2, #1
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	429a      	cmp	r2, r3
 800391e:	f040 8116 	bne.w	8003b4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b12      	cmp	r3, #18
 8003928:	d034      	beq.n	8003994 <HAL_GPIO_Init+0xa4>
 800392a:	2b12      	cmp	r3, #18
 800392c:	d80d      	bhi.n	800394a <HAL_GPIO_Init+0x5a>
 800392e:	2b02      	cmp	r3, #2
 8003930:	d02b      	beq.n	800398a <HAL_GPIO_Init+0x9a>
 8003932:	2b02      	cmp	r3, #2
 8003934:	d804      	bhi.n	8003940 <HAL_GPIO_Init+0x50>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d031      	beq.n	800399e <HAL_GPIO_Init+0xae>
 800393a:	2b01      	cmp	r3, #1
 800393c:	d01c      	beq.n	8003978 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800393e:	e048      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003940:	2b03      	cmp	r3, #3
 8003942:	d043      	beq.n	80039cc <HAL_GPIO_Init+0xdc>
 8003944:	2b11      	cmp	r3, #17
 8003946:	d01b      	beq.n	8003980 <HAL_GPIO_Init+0x90>
          break;
 8003948:	e043      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800394a:	4a89      	ldr	r2, [pc, #548]	; (8003b70 <HAL_GPIO_Init+0x280>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d026      	beq.n	800399e <HAL_GPIO_Init+0xae>
 8003950:	4a87      	ldr	r2, [pc, #540]	; (8003b70 <HAL_GPIO_Init+0x280>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d806      	bhi.n	8003964 <HAL_GPIO_Init+0x74>
 8003956:	4a87      	ldr	r2, [pc, #540]	; (8003b74 <HAL_GPIO_Init+0x284>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d020      	beq.n	800399e <HAL_GPIO_Init+0xae>
 800395c:	4a86      	ldr	r2, [pc, #536]	; (8003b78 <HAL_GPIO_Init+0x288>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01d      	beq.n	800399e <HAL_GPIO_Init+0xae>
          break;
 8003962:	e036      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003964:	4a85      	ldr	r2, [pc, #532]	; (8003b7c <HAL_GPIO_Init+0x28c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d019      	beq.n	800399e <HAL_GPIO_Init+0xae>
 800396a:	4a85      	ldr	r2, [pc, #532]	; (8003b80 <HAL_GPIO_Init+0x290>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d016      	beq.n	800399e <HAL_GPIO_Init+0xae>
 8003970:	4a84      	ldr	r2, [pc, #528]	; (8003b84 <HAL_GPIO_Init+0x294>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0xae>
          break;
 8003976:	e02c      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	623b      	str	r3, [r7, #32]
          break;
 800397e:	e028      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	3304      	adds	r3, #4
 8003986:	623b      	str	r3, [r7, #32]
          break;
 8003988:	e023      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	3308      	adds	r3, #8
 8003990:	623b      	str	r3, [r7, #32]
          break;
 8003992:	e01e      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	330c      	adds	r3, #12
 800399a:	623b      	str	r3, [r7, #32]
          break;
 800399c:	e019      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039a6:	2304      	movs	r3, #4
 80039a8:	623b      	str	r3, [r7, #32]
          break;
 80039aa:	e012      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039b4:	2308      	movs	r3, #8
 80039b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	611a      	str	r2, [r3, #16]
          break;
 80039be:	e008      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039c0:	2308      	movs	r3, #8
 80039c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	615a      	str	r2, [r3, #20]
          break;
 80039ca:	e002      	b.n	80039d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
          break;
 80039d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2bff      	cmp	r3, #255	; 0xff
 80039d6:	d801      	bhi.n	80039dc <HAL_GPIO_Init+0xec>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	e001      	b.n	80039e0 <HAL_GPIO_Init+0xf0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2bff      	cmp	r3, #255	; 0xff
 80039e6:	d802      	bhi.n	80039ee <HAL_GPIO_Init+0xfe>
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x104>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	3b08      	subs	r3, #8
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	210f      	movs	r1, #15
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	401a      	ands	r2, r3
 8003a06:	6a39      	ldr	r1, [r7, #32]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8096 	beq.w	8003b4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a22:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_GPIO_Init+0x298>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_GPIO_Init+0x298>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6193      	str	r3, [r2, #24]
 8003a2e:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <HAL_GPIO_Init+0x298>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a3a:	4a54      	ldr	r2, [pc, #336]	; (8003b8c <HAL_GPIO_Init+0x29c>)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4b      	ldr	r2, [pc, #300]	; (8003b90 <HAL_GPIO_Init+0x2a0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x19e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <HAL_GPIO_Init+0x2a4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x19a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a49      	ldr	r2, [pc, #292]	; (8003b98 <HAL_GPIO_Init+0x2a8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x196>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <HAL_GPIO_Init+0x2ac>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x192>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x1a0>
 8003a82:	2304      	movs	r3, #4
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x1a0>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x1a0>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x1a0>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aa0:	493a      	ldr	r1, [pc, #232]	; (8003b8c <HAL_GPIO_Init+0x29c>)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4938      	ldr	r1, [pc, #224]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
 8003ac6:	e006      	b.n	8003ad6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ac8:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4933      	ldr	r1, [pc, #204]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	492e      	ldr	r1, [pc, #184]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e006      	b.n	8003afe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	4929      	ldr	r1, [pc, #164]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b0a:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	4924      	ldr	r1, [pc, #144]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
 8003b16:	e006      	b.n	8003b26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60cb      	str	r3, [r1, #12]
 8003b3e:	e006      	b.n	8003b4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f47f aed0 	bne.w	8003904 <HAL_GPIO_Init+0x14>
  }
}
 8003b64:	bf00      	nop
 8003b66:	372c      	adds	r7, #44	; 0x2c
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	10210000 	.word	0x10210000
 8003b74:	10110000 	.word	0x10110000
 8003b78:	10120000 	.word	0x10120000
 8003b7c:	10310000 	.word	0x10310000
 8003b80:	10320000 	.word	0x10320000
 8003b84:	10220000 	.word	0x10220000
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40010800 	.word	0x40010800
 8003b94:	40010c00 	.word	0x40010c00
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb4:	787b      	ldrb	r3, [r7, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bc0:	e003      	b.n	8003bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	041a      	lsls	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bec:	887a      	ldrh	r2, [r7, #2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e26c      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8087 	beq.w	8003d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c24:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d00c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c30:	4b8f      	ldr	r3, [pc, #572]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d112      	bne.n	8003c62 <HAL_RCC_OscConfig+0x5e>
 8003c3c:	4b8c      	ldr	r3, [pc, #560]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d10b      	bne.n	8003c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4a:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d06c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x12c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d168      	bne.n	8003d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e246      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x76>
 8003c6c:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7f      	ldr	r2, [pc, #508]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e02e      	b.n	8003cd8 <HAL_RCC_OscConfig+0xd4>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x98>
 8003c82:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7a      	ldr	r2, [pc, #488]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b78      	ldr	r3, [pc, #480]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a77      	ldr	r2, [pc, #476]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0xd4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xbc>
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a71      	ldr	r2, [pc, #452]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xd4>
 8003cc0:	4b6b      	ldr	r3, [pc, #428]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe feb6 	bl	8002a50 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fe feb2 	bl	8002a50 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1fa      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xe4>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fea2 	bl	8002a50 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe fe9e 	bl	8002a50 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1e6      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x10c>
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3e:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d4a:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x18c>
 8003d56:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x176>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1ba      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4939      	ldr	r1, [pc, #228]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e03a      	b.n	8003e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fe57 	bl	8002a50 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fe fe53 	bl	8002a50 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e19b      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4927      	ldr	r1, [pc, #156]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe fe36 	bl	8002a50 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fe fe32 	bl	8002a50 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e17a      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d03a      	beq.n	8003e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d019      	beq.n	8003e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fe fe16 	bl	8002a50 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe fe12 	bl	8002a50 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e15a      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f000 fada 	bl	8004400 <RCC_Delay>
 8003e4c:	e01c      	b.n	8003e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_RCC_OscConfig+0x274>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e54:	f7fe fdfc 	bl	8002a50 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5a:	e00f      	b.n	8003e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fdf8 	bl	8002a50 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d908      	bls.n	8003e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e140      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	42420000 	.word	0x42420000
 8003e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b9e      	ldr	r3, [pc, #632]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e9      	bne.n	8003e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a6 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b97      	ldr	r3, [pc, #604]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	4b94      	ldr	r3, [pc, #592]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4a93      	ldr	r2, [pc, #588]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	61d3      	str	r3, [r2, #28]
 8003eb2:	4b91      	ldr	r3, [pc, #580]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b8e      	ldr	r3, [pc, #568]	; (80040fc <HAL_RCC_OscConfig+0x4f8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b8b      	ldr	r3, [pc, #556]	; (80040fc <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a8a      	ldr	r2, [pc, #552]	; (80040fc <HAL_RCC_OscConfig+0x4f8>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fe fdb9 	bl	8002a50 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe fdb5 	bl	8002a50 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b64      	cmp	r3, #100	; 0x64
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0fd      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b81      	ldr	r3, [pc, #516]	; (80040fc <HAL_RCC_OscConfig+0x4f8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x312>
 8003f08:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6213      	str	r3, [r2, #32]
 8003f14:	e02d      	b.n	8003f72 <HAL_RCC_OscConfig+0x36e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x334>
 8003f1e:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4a75      	ldr	r2, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6213      	str	r3, [r2, #32]
 8003f2a:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4a72      	ldr	r2, [pc, #456]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	6213      	str	r3, [r2, #32]
 8003f36:	e01c      	b.n	8003f72 <HAL_RCC_OscConfig+0x36e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x356>
 8003f40:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6213      	str	r3, [r2, #32]
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6213      	str	r3, [r2, #32]
 8003f58:	e00b      	b.n	8003f72 <HAL_RCC_OscConfig+0x36e>
 8003f5a:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	4b64      	ldr	r3, [pc, #400]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4a63      	ldr	r2, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fe fd69 	bl	8002a50 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fe fd65 	bl	8002a50 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0ab      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4b57      	ldr	r3, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RCC_OscConfig+0x37e>
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fd53 	bl	8002a50 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe fd4f 	bl	8002a50 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e095      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8081 	beq.w	80040ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d061      	beq.n	80040bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d146      	bne.n	800408e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_RCC_OscConfig+0x4fc>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fe fd23 	bl	8002a50 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7fe fd1f 	bl	8002a50 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e067      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d108      	bne.n	8004048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a19      	ldr	r1, [r3, #32]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	430b      	orrs	r3, r1
 800405a:	4927      	ldr	r1, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_OscConfig+0x4fc>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fe fcf3 	bl	8002a50 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fe fcef 	bl	8002a50 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e037      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x46a>
 800408c:	e02f      	b.n	80040ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_OscConfig+0x4fc>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fcdc 	bl	8002a50 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe fcd8 	bl	8002a50 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e020      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x498>
 80040ba:	e018      	b.n	80040ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e013      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	42420060 	.word	0x42420060

08004104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d0      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d910      	bls.n	8004148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 0207 	bic.w	r2, r3, #7
 800412e:	4965      	ldr	r1, [pc, #404]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800416a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d040      	beq.n	8004224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e073      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4936      	ldr	r1, [pc, #216]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f4:	f7fe fc2c 	bl	8002a50 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fe fc28 	bl	8002a50 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e053      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d210      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4922      	ldr	r1, [pc, #136]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4601      	mov	r1, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	5cd3      	ldrb	r3, [r2, r3]
 80042a6:	fa21 f303 	lsr.w	r3, r1, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1cc>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1d0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fb8a 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08005fc8 	.word	0x08005fc8
 80042d0:	20000004 	.word	0x20000004
 80042d4:	20000008 	.word	0x20000008

080042d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	b490      	push	{r4, r7}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042de:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042e0:	1d3c      	adds	r4, r7, #4
 80042e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004302:	4b23      	ldr	r3, [pc, #140]	; (8004390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 8004312:	2b08      	cmp	r3, #8
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x46>
 8004316:	e02d      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <HAL_RCC_GetSysClockFreq+0xbc>)
 800431a:	623b      	str	r3, [r7, #32]
      break;
 800431c:	e02d      	b.n	800437a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	0c9b      	lsrs	r3, r3, #18
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800432a:	4413      	add	r3, r2
 800432c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004330:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <HAL_RCC_GetSysClockFreq+0xb8>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	0c5b      	lsrs	r3, r3, #17
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800434a:	4413      	add	r3, r2
 800434c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004350:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004356:	fb02 f203 	mul.w	r2, r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e004      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	623b      	str	r3, [r7, #32]
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004376:	623b      	str	r3, [r7, #32]
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	6a3b      	ldr	r3, [r7, #32]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bc90      	pop	{r4, r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	08005fb4 	.word	0x08005fb4
 800438c:	08005fc4 	.word	0x08005fc4
 8004390:	40021000 	.word	0x40021000
 8004394:	007a1200 	.word	0x007a1200
 8004398:	003d0900 	.word	0x003d0900

0800439c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <HAL_RCC_GetHCLKFreq+0x10>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b4:	f7ff fff2 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043b8:	4601      	mov	r1, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08005fd8 	.word	0x08005fd8

080043d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043dc:	f7ff ffde 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e0:	4601      	mov	r1, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0adb      	lsrs	r3, r3, #11
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08005fd8 	.word	0x08005fd8

08004400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <RCC_Delay+0x34>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <RCC_Delay+0x38>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0a5b      	lsrs	r3, r3, #9
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800441c:	bf00      	nop
  }
  while (Delay --);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e5a      	subs	r2, r3, #1
 8004422:	60fa      	str	r2, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f9      	bne.n	800441c <RCC_Delay+0x1c>
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000004 	.word	0x20000004
 8004438:	10624dd3 	.word	0x10624dd3

0800443c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d07d      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445c:	4b4f      	ldr	r3, [pc, #316]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	61d3      	str	r3, [r2, #28]
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d118      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449c:	f7fe fad8 	bl	8002a50 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fe fad4 	bl	8002a50 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06d      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c2:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02e      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d027      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e0:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f0:	4b2c      	ldr	r3, [pc, #176]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d014      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe faa3 	bl	8002a50 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fa9f 	bl	8002a50 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e036      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4917      	ldr	r1, [pc, #92]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	4313      	orrs	r3, r2
 8004540:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4a13      	ldr	r2, [pc, #76]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	490b      	ldr	r1, [pc, #44]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4904      	ldr	r1, [pc, #16]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	40007000 	.word	0x40007000
 80045a4:	42420440 	.word	0x42420440

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e053      	b.n	8004662 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fd ff31 	bl	800243c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	ea42 0103 	orr.w	r1, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0c1a      	lsrs	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f002 0204 	and.w	r2, r2, #4
 8004640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e01d      	b.n	80046b8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fd ff1d 	bl	80024d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 fbb5 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e01d      	b.n	8004754 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f815 	bl	800475c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fb67 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
	...

08004770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fdc8 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_TIM_PWM_Start+0x60>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d107      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00

080047d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d841      	bhi.n	8004868 <HAL_TIM_PWM_Start_IT+0x94>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_PWM_Start_IT+0x18>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004869 	.word	0x08004869
 80047f4:	08004869 	.word	0x08004869
 80047f8:	08004869 	.word	0x08004869
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004869 	.word	0x08004869
 8004804:	08004869 	.word	0x08004869
 8004808:	08004869 	.word	0x08004869
 800480c:	08004845 	.word	0x08004845
 8004810:	08004869 	.word	0x08004869
 8004814:	08004869 	.word	0x08004869
 8004818:	08004869 	.word	0x08004869
 800481c:	08004857 	.word	0x08004857
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0202 	orr.w	r2, r2, #2
 800482e:	60da      	str	r2, [r3, #12]
      break;
 8004830:	e01b      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0204 	orr.w	r2, r2, #4
 8004840:	60da      	str	r2, [r3, #12]
      break;
 8004842:	e012      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0208 	orr.w	r2, r2, #8
 8004852:	60da      	str	r2, [r3, #12]
      break;
 8004854:	e009      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0210 	orr.w	r2, r2, #16
 8004864:	60da      	str	r2, [r3, #12]
      break;
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004868:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd50 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_TIM_PWM_Start_IT+0xec>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d107      	bne.n	8004892 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d007      	beq.n	80048b4 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00

080048c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0202 	mvn.w	r2, #2
 80048f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa73 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa66 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa75 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0204 	mvn.w	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa49 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa3c 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa4b 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b08      	cmp	r3, #8
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b08      	cmp	r3, #8
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0208 	mvn.w	r2, #8
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa1f 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa12 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa21 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0210 	mvn.w	r2, #16
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2208      	movs	r2, #8
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9f5 	bl	8004df2 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9e8 	bl	8004de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f9f7 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0201 	mvn.w	r2, #1
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9c3 	bl	8004dce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fd14 	bl	800549c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fbda 	bl	8001254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0220 	mvn.w	r2, #32
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fcdf 	bl	800548a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0b4      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	f200 809f 	bhi.w	8004c44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004c45 	.word	0x08004c45
 8004b14:	08004c45 	.word	0x08004c45
 8004b18:	08004c45 	.word	0x08004c45
 8004b1c:	08004b81 	.word	0x08004b81
 8004b20:	08004c45 	.word	0x08004c45
 8004b24:	08004c45 	.word	0x08004c45
 8004b28:	08004c45 	.word	0x08004c45
 8004b2c:	08004bc3 	.word	0x08004bc3
 8004b30:	08004c45 	.word	0x08004c45
 8004b34:	08004c45 	.word	0x08004c45
 8004b38:	08004c45 	.word	0x08004c45
 8004b3c:	08004c03 	.word	0x08004c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f9c8 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0208 	orr.w	r2, r2, #8
 8004b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0204 	bic.w	r2, r2, #4
 8004b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6999      	ldr	r1, [r3, #24]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	619a      	str	r2, [r3, #24]
      break;
 8004b7e:	e062      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fa0e 	bl	8004fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6999      	ldr	r1, [r3, #24]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	619a      	str	r2, [r3, #24]
      break;
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fa57 	bl	800507c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0208 	orr.w	r2, r2, #8
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0204 	bic.w	r2, r2, #4
 8004bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69d9      	ldr	r1, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	61da      	str	r2, [r3, #28]
      break;
 8004c00:	e021      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 faa1 	bl	8005150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69d9      	ldr	r1, [r3, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	021a      	lsls	r2, r3, #8
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	61da      	str	r2, [r3, #28]
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0a6      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x166>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d067      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x120>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d80b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x6c>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d073      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d802      	bhi.n	8004cc2 <HAL_TIM_ConfigClockSource+0x62>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06f      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004cc0:	e078      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d06c      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d06a      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004cca:	e073      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ccc:	2b70      	cmp	r3, #112	; 0x70
 8004cce:	d00d      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x8c>
 8004cd0:	2b70      	cmp	r3, #112	; 0x70
 8004cd2:	d804      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x7e>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d033      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xe0>
 8004cd8:	2b60      	cmp	r3, #96	; 0x60
 8004cda:	d041      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004cdc:	e06a      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d066      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x152>
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce8:	d017      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004cea:	e063      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f000 faed 	bl	80052da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e04c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6899      	ldr	r1, [r3, #8]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f000 fad6 	bl	80052da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e039      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f000 fa4d 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2150      	movs	r1, #80	; 0x50
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 faa4 	bl	80052a6 <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e029      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f000 fa6b 	bl	8005248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2160      	movs	r1, #96	; 0x60
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa94 	bl	80052a6 <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e019      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 fa2d 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fa84 	bl	80052a6 <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e009      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fa7b 	bl	80052a6 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
	...

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a26      	ldr	r2, [pc, #152]	; (8004ed4 <TIM_Base_SetConfig+0xbc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x30>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <TIM_Base_SetConfig+0xc0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d108      	bne.n	8004e5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <TIM_Base_SetConfig+0xbc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0x62>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <TIM_Base_SetConfig+0xc0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <TIM_Base_SetConfig+0xb8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d103      	bne.n	8004ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	615a      	str	r2, [r3, #20]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0302 	bic.w	r3, r3, #2
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <TIM_OC1_SetConfig+0xc8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10c      	bne.n	8004f52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0308 	bic.w	r3, r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <TIM_OC1_SetConfig+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00

08004fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0320 	bic.w	r3, r3, #32
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC2_SetConfig+0xd0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10d      	bne.n	8005024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005022:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a14      	ldr	r2, [pc, #80]	; (8005078 <TIM_OC2_SetConfig+0xd0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d113      	bne.n	8005054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	40012c00 	.word	0x40012c00

0800507c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <TIM_OC3_SetConfig+0xd0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <TIM_OC3_SetConfig+0xd0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00

08005150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <TIM_OC4_SetConfig+0x98>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	40012c00 	.word	0x40012c00

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	031b      	lsls	r3, r3, #12
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005284:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f043 0307 	orr.w	r3, r3, #7
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	021a      	lsls	r2, r3, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005374:	2302      	movs	r3, #2
 8005376:	e032      	b.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e03d      	b.n	8005480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e03f      	b.n	8005540 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fd f8f5 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2224      	movs	r2, #36	; 0x24
 80054de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc2c 	bl	8005d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005516:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005526:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b20      	cmp	r3, #32
 8005560:	d153      	bne.n	800560a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_Transmit_DMA+0x26>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e04c      	b.n	800560c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_UART_Transmit_DMA+0x38>
 800557c:	2302      	movs	r3, #2
 800557e:	e045      	b.n	800560c <HAL_UART_Transmit_DMA+0xc4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	88fa      	ldrh	r2, [r7, #6]
 8005598:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2221      	movs	r2, #33	; 0x21
 80055a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_UART_Transmit_DMA+0xcc>)
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_UART_Transmit_DMA+0xd0>)
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_UART_Transmit_DMA+0xd4>)
 80055be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	6819      	ldr	r1, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3304      	adds	r3, #4
 80055dc:	461a      	mov	r2, r3
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f7fd ff7c 	bl	80034dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005604:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800560a:	2302      	movs	r3, #2
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	08005961 	.word	0x08005961
 8005618:	080059b3 	.word	0x080059b3
 800561c:	08005a53 	.word	0x08005a53

08005620 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	d166      	bne.n	8005708 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_Receive_DMA+0x26>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e05f      	b.n	800570a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Receive_DMA+0x38>
 8005654:	2302      	movs	r3, #2
 8005656:	e058      	b.n	800570a <HAL_UART_Receive_DMA+0xea>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2222      	movs	r2, #34	; 0x22
 8005676:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_UART_Receive_DMA+0xf4>)
 8005680:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_UART_Receive_DMA+0xf8>)
 8005688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	4a23      	ldr	r2, [pc, #140]	; (800571c <HAL_UART_Receive_DMA+0xfc>)
 8005690:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	2200      	movs	r2, #0
 8005698:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	f7fd ff13 	bl	80034dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005702:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	080059cf 	.word	0x080059cf
 8005718:	08005a37 	.word	0x08005a37
 800571c:	08005a53 	.word	0x08005a53

08005720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_UART_IRQHandler+0x52>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa6e 	bl	8005c4c <UART_Receive_IT>
      return;
 8005770:	e0cc      	b.n	800590c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80ab 	beq.w	80058d0 <HAL_UART_IRQHandler+0x1b0>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <HAL_UART_IRQHandler+0x70>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a0 	beq.w	80058d0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_UART_IRQHandler+0x90>
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_UART_IRQHandler+0xb0>
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	f043 0202 	orr.w	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_UART_IRQHandler+0xd0>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_UART_IRQHandler+0xf0>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	f043 0208 	orr.w	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d078      	beq.n	800590a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_UART_IRQHandler+0x112>
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa0d 	bl	8005c4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <HAL_UART_IRQHandler+0x13a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d031      	beq.n	80058be <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f958 	bl	8005b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d023      	beq.n	80058b6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	2b00      	cmp	r3, #0
 8005884:	d013      	beq.n	80058ae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	4a22      	ldr	r2, [pc, #136]	; (8005914 <HAL_UART_IRQHandler+0x1f4>)
 800588c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fe82 	bl	800359c <HAL_DMA_Abort_IT>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d016      	beq.n	80058cc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a8:	4610      	mov	r0, r2
 80058aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e00e      	b.n	80058cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f84d 	bl	800594e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	e00a      	b.n	80058cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f849 	bl	800594e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	e006      	b.n	80058cc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f845 	bl	800594e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80058ca:	e01e      	b.n	800590a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	bf00      	nop
    return;
 80058ce:	e01c      	b.n	800590a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_UART_IRQHandler+0x1cc>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f944 	bl	8005b72 <UART_Transmit_IT>
    return;
 80058ea:	e00f      	b.n	800590c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_UART_IRQHandler+0x1ec>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f98b 	bl	8005c1c <UART_EndTransmit_IT>
    return;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <HAL_UART_IRQHandler+0x1ec>
    return;
 800590a:	bf00      	nop
  }
}
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	08005b4b 	.word	0x08005b4b

08005918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr

0800592a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d113      	bne.n	80059a4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005990:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059a2:	e002      	b.n	80059aa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff ffb7 	bl	8005918 <HAL_UART_TxCpltCallback>
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ffb2 	bl	800592a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d11e      	bne.n	8005a28 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7fb fcd3 	bl	80013d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff ff79 	bl	800593c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b21      	cmp	r3, #33	; 0x21
 8005a84:	d108      	bne.n	8005a98 <UART_DMAError+0x46>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	f000 f827 	bl	8005ae6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b22      	cmp	r3, #34	; 0x22
 8005ab8:	d108      	bne.n	8005acc <UART_DMAError+0x7a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f000 f822 	bl	8005b10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	f043 0210 	orr.w	r2, r3, #16
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad8:	68b8      	ldr	r0, [r7, #8]
 8005ada:	f7ff ff38 	bl	800594e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005afc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fef2 	bl	800594e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b21      	cmp	r3, #33	; 0x21
 8005b84:	d144      	bne.n	8005c10 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d11a      	bne.n	8005bc6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]
 8005bb8:	e00e      	b.n	8005bd8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	621a      	str	r2, [r3, #32]
 8005bc4:	e008      	b.n	8005bd8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	1c59      	adds	r1, r3, #1
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6211      	str	r1, [r2, #32]
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4619      	mov	r1, r3
 8005be6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10f      	bne.n	8005c0c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fe6b 	bl	8005918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b22      	cmp	r3, #34	; 0x22
 8005c5e:	d171      	bne.n	8005d44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c68:	d123      	bne.n	8005cb2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28
 8005c94:	e029      	b.n	8005cea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb0:	e01b      	b.n	8005cea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6858      	ldr	r0, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6291      	str	r1, [r2, #40]	; 0x28
 8005cca:	b2c2      	uxtb	r2, r0
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e00c      	b.n	8005cea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	1c58      	adds	r0, r3, #1
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	6288      	str	r0, [r1, #40]	; 0x28
 8005ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d120      	bne.n	8005d40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0220 	bic.w	r2, r2, #32
 8005d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fb fb4c 	bl	80013d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e002      	b.n	8005d46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d8a:	f023 030c 	bic.w	r3, r3, #12
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a52      	ldr	r2, [pc, #328]	; (8005efc <UART_SetConfig+0x1ac>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d14e      	bne.n	8005e56 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe fb0e 	bl	80043d8 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009a      	lsls	r2, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	0119      	lsls	r1, r3, #4
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009a      	lsls	r2, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df4:	4b42      	ldr	r3, [pc, #264]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005df6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2064      	movs	r0, #100	; 0x64
 8005dfe:	fb00 f303 	mul.w	r3, r0, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	3332      	adds	r3, #50	; 0x32
 8005e08:	4a3d      	ldr	r2, [pc, #244]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e14:	4419      	add	r1, r3
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009a      	lsls	r2, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e2c:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2064      	movs	r0, #100	; 0x64
 8005e36:	fb00 f303 	mul.w	r3, r0, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	440a      	add	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005e54:	e04d      	b.n	8005ef2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e56:	f7fe faab 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8005e5a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009a      	lsls	r2, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	0119      	lsls	r1, r3, #4
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009a      	lsls	r2, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005e94:	fba3 0302 	umull	r0, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2064      	movs	r0, #100	; 0x64
 8005e9c:	fb00 f303 	mul.w	r3, r0, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb2:	4419      	add	r1, r3
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009a      	lsls	r2, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	2064      	movs	r0, #100	; 0x64
 8005ed4:	fb00 f303 	mul.w	r3, r0, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	3332      	adds	r3, #50	; 0x32
 8005ede:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <UART_SetConfig+0x1b0>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	440a      	add	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40013800 	.word	0x40013800
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <__libc_init_array>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	2500      	movs	r5, #0
 8005f08:	4e0c      	ldr	r6, [pc, #48]	; (8005f3c <__libc_init_array+0x38>)
 8005f0a:	4c0d      	ldr	r4, [pc, #52]	; (8005f40 <__libc_init_array+0x3c>)
 8005f0c:	1ba4      	subs	r4, r4, r6
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d109      	bne.n	8005f28 <__libc_init_array+0x24>
 8005f14:	f000 f82e 	bl	8005f74 <_init>
 8005f18:	2500      	movs	r5, #0
 8005f1a:	4e0a      	ldr	r6, [pc, #40]	; (8005f44 <__libc_init_array+0x40>)
 8005f1c:	4c0a      	ldr	r4, [pc, #40]	; (8005f48 <__libc_init_array+0x44>)
 8005f1e:	1ba4      	subs	r4, r4, r6
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	d105      	bne.n	8005f32 <__libc_init_array+0x2e>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f2c:	4798      	blx	r3
 8005f2e:	3501      	adds	r5, #1
 8005f30:	e7ee      	b.n	8005f10 <__libc_init_array+0xc>
 8005f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f36:	4798      	blx	r3
 8005f38:	3501      	adds	r5, #1
 8005f3a:	e7f2      	b.n	8005f22 <__libc_init_array+0x1e>
 8005f3c:	08005fe0 	.word	0x08005fe0
 8005f40:	08005fe0 	.word	0x08005fe0
 8005f44:	08005fe0 	.word	0x08005fe0
 8005f48:	08005fe4 	.word	0x08005fe4

08005f4c <memcpy>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	1e43      	subs	r3, r0, #1
 8005f50:	440a      	add	r2, r1
 8005f52:	4291      	cmp	r1, r2
 8005f54:	d100      	bne.n	8005f58 <memcpy+0xc>
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f60:	e7f7      	b.n	8005f52 <memcpy+0x6>

08005f62 <memset>:
 8005f62:	4603      	mov	r3, r0
 8005f64:	4402      	add	r2, r0
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d100      	bne.n	8005f6c <memset+0xa>
 8005f6a:	4770      	bx	lr
 8005f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f70:	e7f9      	b.n	8005f66 <memset+0x4>
	...

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
