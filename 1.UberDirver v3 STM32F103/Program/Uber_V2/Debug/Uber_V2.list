
Uber_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004908  08004908  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004908  08004908  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002650  20000014  08004924  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  08004924  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5cd  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ffe  00000000  00000000  0002d60a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  0002f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bc9  00000000  00000000  00031410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab39  00000000  00000000  00045fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074daf  00000000  00000000  00050b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c58c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004124  00000000  00000000  000c593c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800489c 	.word	0x0800489c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800489c 	.word	0x0800489c

0800014c <DRV_Init>:
 *  Created on: Sep 3, 2020
 *      Author: atmat
 */
static SPI_HandleTypeDef DRV_spi;

void DRV_Init(SPI_HandleTypeDef hspi){
 800014c:	b084      	sub	sp, #16
 800014e:	b580      	push	{r7, lr}
 8000150:	af00      	add	r7, sp, #0
 8000152:	f107 0c08 	add.w	ip, r7, #8
 8000156:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	memcpy(&DRV_spi, &hspi, sizeof(hspi));
 800015a:	4b07      	ldr	r3, [pc, #28]	; (8000178 <DRV_Init+0x2c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f107 0108 	add.w	r1, r7, #8
 8000162:	2358      	movs	r3, #88	; 0x58
 8000164:	461a      	mov	r2, r3
 8000166:	f004 fb85 	bl	8004874 <memcpy>
}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000172:	b004      	add	sp, #16
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000030 	.word	0x20000030

0800017c <StartPWM>:
uint32_t TIM_B[64];
uint32_t TIM_C[64];
uint16_t data_num = 0;
TIM_OC_InitTypeDef TIM_LED = {0}, TIM_ADC = {0};

void StartPWM(){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000180:	2100      	movs	r1, #0
 8000182:	480e      	ldr	r0, [pc, #56]	; (80001bc <StartPWM+0x40>)
 8000184:	f003 f986 	bl	8003494 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000188:	2100      	movs	r1, #0
 800018a:	480d      	ldr	r0, [pc, #52]	; (80001c0 <StartPWM+0x44>)
 800018c:	f003 f982 	bl	8003494 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000190:	2104      	movs	r1, #4
 8000192:	480c      	ldr	r0, [pc, #48]	; (80001c4 <StartPWM+0x48>)
 8000194:	f003 f97e 	bl	8003494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000198:	2108      	movs	r1, #8
 800019a:	480a      	ldr	r0, [pc, #40]	; (80001c4 <StartPWM+0x48>)
 800019c:	f003 f97a 	bl	8003494 <HAL_TIM_PWM_Start>

	htim1.Instance->CNT = 0;
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <StartPWM+0x48>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2200      	movs	r2, #0
 80001a6:	625a      	str	r2, [r3, #36]	; 0x24
	htim2.Instance->CNT = 0;
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <StartPWM+0x40>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <StartPWM+0x44>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	20002520 	.word	0x20002520
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	20002388 	.word	0x20002388

080001c8 <SetZero_A>:

void SetZero_A(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <SetZero_A+0x1c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2200      	movs	r2, #0
 80001d2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2108      	movs	r1, #8
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SetZero_A+0x20>)
 80001da:	f002 fb75 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20002520 	.word	0x20002520
 80001e8:	40010c00 	.word	0x40010c00

080001ec <SetZero_B>:

void SetZero_B(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <SetZero_B+0x1c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2200      	movs	r2, #0
 80001f6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2120      	movs	r1, #32
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <SetZero_B+0x20>)
 80001fe:	f002 fb63 	bl	80028c8 <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000020c 	.word	0x2000020c
 800020c:	40010c00 	.word	0x40010c00

08000210 <SetZero_C>:

void SetZero_C(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <SetZero_C+0x1c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2200      	movs	r2, #0
 800021a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000222:	4803      	ldr	r0, [pc, #12]	; (8000230 <SetZero_C+0x20>)
 8000224:	f002 fb50 	bl	80028c8 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20002388 	.word	0x20002388
 8000230:	40010800 	.word	0x40010800

08000234 <SetPulse_AH>:

void SetPulse_AH(uint8_t value){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <SetPulse_AH+0x24>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2108      	movs	r1, #8
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <SetPulse_AH+0x28>)
 800024c:	f002 fb3c 	bl	80028c8 <HAL_GPIO_WritePin>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20002520 	.word	0x20002520
 800025c:	40010c00 	.word	0x40010c00

08000260 <SetPulse_BH>:

void SetPulse_BH(uint8_t value){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <SetPulse_BH+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2120      	movs	r1, #32
 8000276:	4804      	ldr	r0, [pc, #16]	; (8000288 <SetPulse_BH+0x28>)
 8000278:	f002 fb26 	bl	80028c8 <HAL_GPIO_WritePin>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	2000020c 	.word	0x2000020c
 8000288:	40010c00 	.word	0x40010c00

0800028c <SetPulse_CH>:

void SetPulse_CH(uint8_t value){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value);
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <SetPulse_CH+0x28>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <SetPulse_CH+0x2c>)
 80002a6:	f002 fb0f 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20002388 	.word	0x20002388
 80002b8:	40010800 	.word	0x40010800

080002bc <SetFloating_A>:

void SetFloating_A(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <SetFloating_A+0x1c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2200      	movs	r2, #0
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_AL_GPIO_Port, PWM_AL_Pin, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2108      	movs	r1, #8
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <SetFloating_A+0x20>)
 80002ce:	f002 fafb 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20002520 	.word	0x20002520
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <SetFloating_B>:

void SetFloating_B(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <SetFloating_B+0x1c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2200      	movs	r2, #0
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_BL_GPIO_Port, PWM_BL_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2120      	movs	r1, #32
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <SetFloating_B+0x20>)
 80002f2:	f002 fae9 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000020c 	.word	0x2000020c
 8000300:	40010c00 	.word	0x40010c00

08000304 <SetFloating_C>:

void SetFloating_C(){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <SetFloating_C+0x1c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2200      	movs	r2, #0
 800030e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_CL_GPIO_Port, PWM_CL_Pin, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <SetFloating_C+0x20>)
 8000318:	f002 fad6 	bl	80028c8 <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20002388 	.word	0x20002388
 8000324:	40010800 	.word	0x40010800

08000328 <Delay_Tick>:

void Delay_Tick(uint32_t val){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <Delay_Tick+0x54>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 8000338:	e010      	b.n	800035c <Delay_Tick+0x34>
		val -= 0x00007fff;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000340:	3b7f      	subs	r3, #127	; 0x7f
 8000342:	607b      	str	r3, [r7, #4]
		while(__HAL_TIM_GET_COUNTER(&htim4) < 0x7fff);
 8000344:	bf00      	nop
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Delay_Tick+0x54>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800034c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000350:	4293      	cmp	r3, r2
 8000352:	d9f8      	bls.n	8000346 <Delay_Tick+0x1e>
		__HAL_TIM_SET_COUNTER(&htim4,0);
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <Delay_Tick+0x54>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
	while(val > 0x00007fff){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000362:	d2ea      	bcs.n	800033a <Delay_Tick+0x12>
	}
	while(__HAL_TIM_GET_COUNTER(&htim4) < val);
 8000364:	bf00      	nop
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <Delay_Tick+0x54>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d8f9      	bhi.n	8000366 <Delay_Tick+0x3e>
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	2000009c 	.word	0x2000009c

08000380 <WaitForCross>:
	SetZero_B();
	SetPulse_CH(Value);
	Delay_Tick(Speed);
}

uint32_t WaitForCross(uint8_t num, uint8_t val){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <WaitForCross+0x70>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t ret_val = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]

	while(ADC_data[num] > val+ADC_data[3]/2){
 800039c:	e00f      	b.n	80003be <WaitForCross+0x3e>
		if (__HAL_TIM_GET_COUNTER(&htim4) > 0x7fff){
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <WaitForCross+0x70>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	d309      	bcc.n	80003be <WaitForCross+0x3e>
			ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <WaitForCross+0x70>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	4413      	add	r3, r2
 80003b4:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COUNTER(&htim4,0);
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <WaitForCross+0x70>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(ADC_data[num] > val+ADC_data[3]/2){
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <WaitForCross+0x74>)
 80003c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c6:	4619      	mov	r1, r3
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <WaitForCross+0x74>)
 80003cc:	88d2      	ldrh	r2, [r2, #6]
 80003ce:	0852      	lsrs	r2, r2, #1
 80003d0:	b292      	uxth	r2, r2
 80003d2:	4413      	add	r3, r2
 80003d4:	4299      	cmp	r1, r3
 80003d6:	dce2      	bgt.n	800039e <WaitForCross+0x1e>
		}
	}

	ret_val += __HAL_TIM_GET_COUNTER(&htim4);
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <WaitForCross+0x70>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	4413      	add	r3, r2
 80003e2:	60fb      	str	r3, [r7, #12]
	return ret_val;
 80003e4:	68fb      	ldr	r3, [r7, #12]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	2000009c 	.word	0x2000009c
 80003f4:	20000088 	.word	0x20000088

080003f8 <BEMF_SixStep>:

uint32_t BEMF_SixStep(uint16_t Value){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	80fb      	strh	r3, [r7, #6]
	uint32_t ticks = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
	// 1
	SetPulse_AH(Value);
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff12 	bl	8000234 <SetPulse_AH>
	SetZero_B();
 8000410:	f7ff feec 	bl	80001ec <SetZero_B>
	SetFloating_C();
 8000414:	f7ff ff76 	bl	8000304 <SetFloating_C>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 64-20);
	ticks = (WaitForCross(2,0))/2;
 8000418:	2100      	movs	r1, #0
 800041a:	2002      	movs	r0, #2
 800041c:	f7ff ffb0 	bl	8000380 <WaitForCross>
 8000420:	4603      	mov	r3, r0
 8000422:	085b      	lsrs	r3, r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
	data[ data_num-1] = 0;
 8000426:	4b39      	ldr	r3, [pc, #228]	; (800050c <BEMF_SixStep+0x114>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	4a38      	ldr	r2, [pc, #224]	; (8000510 <BEMF_SixStep+0x118>)
 800042e:	2100      	movs	r1, #0
 8000430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
	//2
	SetPulse_AH(Value);
 8000434:	88fb      	ldrh	r3, [r7, #6]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff fefb 	bl	8000234 <SetPulse_AH>
	SetFloating_B();
 800043e:	f7ff ff4f 	bl	80002e0 <SetFloating_B>
	SetZero_C();
 8000442:	f7ff fee5 	bl	8000210 <SetZero_C>
	Delay_Tick(ticks);
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f7ff ff6e 	bl	8000328 <Delay_Tick>
	data[ data_num-1] = 0;
 800044c:	4b2f      	ldr	r3, [pc, #188]	; (800050c <BEMF_SixStep+0x114>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a2f      	ldr	r2, [pc, #188]	; (8000510 <BEMF_SixStep+0x118>)
 8000454:	2100      	movs	r1, #0
 8000456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//3
	SetFloating_A();
 800045a:	f7ff ff2f 	bl	80002bc <SetFloating_A>
	SetPulse_BH(Value);
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fefc 	bl	8000260 <SetPulse_BH>
	SetZero_C();
 8000468:	f7ff fed2 	bl	8000210 <SetZero_C>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 64-20);
	ticks = (WaitForCross(0,0))/2;
 800046c:	2100      	movs	r1, #0
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff86 	bl	8000380 <WaitForCross>
 8000474:	4603      	mov	r3, r0
 8000476:	085b      	lsrs	r3, r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
	data[ data_num-1] = 0;
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <BEMF_SixStep+0x114>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a23      	ldr	r2, [pc, #140]	; (8000510 <BEMF_SixStep+0x118>)
 8000482:	2100      	movs	r1, #0
 8000484:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
	//4
	SetZero_A();
 8000488:	f7ff fe9e 	bl	80001c8 <SetZero_A>
	SetPulse_BH(Value);
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fee5 	bl	8000260 <SetPulse_BH>
	SetFloating_C();
 8000496:	f7ff ff35 	bl	8000304 <SetFloating_C>
	Delay_Tick(ticks);
 800049a:	68f8      	ldr	r0, [r7, #12]
 800049c:	f7ff ff44 	bl	8000328 <Delay_Tick>
	data[ data_num-1] = 0;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <BEMF_SixStep+0x114>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <BEMF_SixStep+0x118>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//5
	SetZero_A();
 80004ae:	f7ff fe8b 	bl	80001c8 <SetZero_A>
	SetFloating_B();
 80004b2:	f7ff ff15 	bl	80002e0 <SetFloating_B>
	SetPulse_CH(Value);
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff fee6 	bl	800028c <SetPulse_CH>
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 64-20);
	ticks = (WaitForCross(1,0))/2;
 80004c0:	2100      	movs	r1, #0
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ff5c 	bl	8000380 <WaitForCross>
 80004c8:	4603      	mov	r3, r0
 80004ca:	085b      	lsrs	r3, r3, #1
 80004cc:	60fb      	str	r3, [r7, #12]
	data[ data_num-1] = 0;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <BEMF_SixStep+0x114>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <BEMF_SixStep+0x118>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
	//6
	SetFloating_A();
 80004dc:	f7ff feee 	bl	80002bc <SetFloating_A>
	SetZero_B();
 80004e0:	f7ff fe84 	bl	80001ec <SetZero_B>
	SetPulse_CH(Value);
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fecf 	bl	800028c <SetPulse_CH>
	Delay_Tick(ticks);
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f7ff ff1a 	bl	8000328 <Delay_Tick>
	data[ data_num-1] = 0;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <BEMF_SixStep+0x114>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <BEMF_SixStep+0x118>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return ticks;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000094 	.word	0x20000094
 8000510:	20000388 	.word	0x20000388

08000514 <HAL_TIM_TriggerCallback>:

uint8_t test = 0;
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	test = __HAL_TIM_GET_COUNTER(&htim1);
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_TIM_TriggerCallback+0x48>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_TIM_TriggerCallback+0x4c>)
 8000526:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM1){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_TIM_TriggerCallback+0x50>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d10f      	bne.n	8000552 <HAL_TIM_TriggerCallback+0x3e>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	7f1b      	ldrb	r3, [r3, #28]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d10b      	bne.n	8000552 <HAL_TIM_TriggerCallback+0x3e>
			test = __HAL_TIM_GET_COUNTER(&htim1);
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_TIM_TriggerCallback+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <HAL_TIM_TriggerCallback+0x4c>)
 8000544:	701a      	strb	r2, [r3, #0]
			test = __HAL_TIM_GET_COUNTER(&htim1);
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_TIM_TriggerCallback+0x48>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <HAL_TIM_TriggerCallback+0x4c>)
 8000550:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20002388 	.word	0x20002388
 8000560:	20000096 	.word	0x20000096
 8000564:	40012c00 	.word	0x40012c00

08000568 <HAL_ADC_ConvCpltCallback>:
			if(ADC_data[Phase] < ADC_data[3]/2) return;
		}
	}
}
int cnt = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	// Collect data

	if((data_num < (4096-4)) && IsDMA && cnt == 7){
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	f640 72fb 	movw	r2, #4091	; 0xffb
 8000578:	4293      	cmp	r3, r2
 800057a:	d842      	bhi.n	8000602 <HAL_ADC_ConvCpltCallback+0x9a>
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <HAL_ADC_ConvCpltCallback+0x10c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d03e      	beq.n	8000602 <HAL_ADC_ConvCpltCallback+0x9a>
 8000584:	4b3c      	ldr	r3, [pc, #240]	; (8000678 <HAL_ADC_ConvCpltCallback+0x110>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b07      	cmp	r3, #7
 800058a:	d13a      	bne.n	8000602 <HAL_ADC_ConvCpltCallback+0x9a>

		data[data_num] = ADC_data[0];
 800058c:	4b38      	ldr	r3, [pc, #224]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b3a      	ldr	r3, [pc, #232]	; (800067c <HAL_ADC_ConvCpltCallback+0x114>)
 8000594:	8819      	ldrh	r1, [r3, #0]
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <HAL_ADC_ConvCpltCallback+0x118>)
 8000598:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data_num++;
 800059c:	4b34      	ldr	r3, [pc, #208]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b32      	ldr	r3, [pc, #200]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005a6:	801a      	strh	r2, [r3, #0]
		data[data_num] = ADC_data[1];
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <HAL_ADC_ConvCpltCallback+0x114>)
 80005b0:	8859      	ldrh	r1, [r3, #2]
 80005b2:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HAL_ADC_ConvCpltCallback+0x118>)
 80005b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data_num++;
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005c2:	801a      	strh	r2, [r3, #0]
		data[data_num] = ADC_data[2];
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b2c      	ldr	r3, [pc, #176]	; (800067c <HAL_ADC_ConvCpltCallback+0x114>)
 80005cc:	8899      	ldrh	r1, [r3, #4]
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <HAL_ADC_ConvCpltCallback+0x118>)
 80005d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data_num++;
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005de:	801a      	strh	r2, [r3, #0]
		data[data_num] = ADC_data[3];
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <HAL_ADC_ConvCpltCallback+0x114>)
 80005e8:	88d9      	ldrh	r1, [r3, #6]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <HAL_ADC_ConvCpltCallback+0x118>)
 80005ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		data_num++;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <HAL_ADC_ConvCpltCallback+0x108>)
 80005fa:	801a      	strh	r2, [r3, #0]
		cnt = 0;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_ADC_ConvCpltCallback+0x110>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	}
	if((tim_num < (64-4)) && IsDMA){
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b3b      	cmp	r3, #59	; 0x3b
 8000608:	d824      	bhi.n	8000654 <HAL_ADC_ConvCpltCallback+0xec>
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <HAL_ADC_ConvCpltCallback+0x10c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d020      	beq.n	8000654 <HAL_ADC_ConvCpltCallback+0xec>
		TIM_B[tim_num] = __HAL_TIM_GET_COUNTER(&htim3);
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <HAL_ADC_ConvCpltCallback+0x120>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	4611      	mov	r1, r2
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <HAL_ADC_ConvCpltCallback+0x124>)
 8000620:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		TIM_C[tim_num] = __HAL_TIM_GET_COUNTER(&htim1);
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_ADC_ConvCpltCallback+0x128>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000632:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		TIM_A[tim_num] = __HAL_TIM_GET_COUNTER(&htim2);
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_ADC_ConvCpltCallback+0x130>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <HAL_ADC_ConvCpltCallback+0x134>)
 8000644:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		tim_num++;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000652:	701a      	strb	r2, [r3, #0]
	}
	IsNewVal = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_ADC_ConvCpltCallback+0x138>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
	cnt ++;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <HAL_ADC_ConvCpltCallback+0x110>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <HAL_ADC_ConvCpltCallback+0x110>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000094 	.word	0x20000094
 8000674:	20000000 	.word	0x20000000
 8000678:	20000098 	.word	0x20000098
 800067c:	20000088 	.word	0x20000088
 8000680:	20000388 	.word	0x20000388
 8000684:	20000093 	.word	0x20000093
 8000688:	2000020c 	.word	0x2000020c
 800068c:	200023c8 	.word	0x200023c8
 8000690:	20002388 	.word	0x20002388
 8000694:	2000010c 	.word	0x2000010c
 8000698:	20002520 	.word	0x20002520
 800069c:	20002560 	.word	0x20002560
 80006a0:	20000097 	.word	0x20000097

080006a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_UART_RxCpltCallback+0x24>)
 80006b2:	f002 f921 	bl	80028f8 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	4904      	ldr	r1, [pc, #16]	; (80006cc <HAL_UART_RxCpltCallback+0x28>)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_UART_RxCpltCallback+0x2c>)
 80006bc:	f003 fe42 	bl	8004344 <HAL_UART_Receive_DMA>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010800 	.word	0x40010800
 80006cc:	20000090 	.word	0x20000090
 80006d0:	20000304 	.word	0x20000304

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b0a0      	sub	sp, #128	; 0x80
 80006d8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f001 f869 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f8c9 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fc69 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e6:	f000 fc39 	bl	8000f5c <MX_DMA_Init>
  MX_ADC1_Init();
 80006ea:	f000 f91b 	bl	8000924 <MX_ADC1_Init>
  MX_SPI1_Init();
 80006ee:	f000 f9ed 	bl	8000acc <MX_SPI1_Init>
  MX_TIM1_Init();
 80006f2:	f000 fa23 	bl	8000b3c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006f6:	f000 fb43 	bl	8000d80 <MX_TIM3_Init>
  MX_TIM2_Init();
 80006fa:	f000 facd 	bl	8000c98 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006fe:	f000 fc03 	bl	8000f08 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000702:	f000 fbb3 	bl	8000e6c <MX_TIM4_Init>
  MX_ADC2_Init();
 8000706:	f000 f977 	bl	80009f8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	484a      	ldr	r0, [pc, #296]	; (8000838 <main+0x164>)
 8000710:	f002 f8da 	bl	80028c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2104      	movs	r1, #4
 8000718:	4848      	ldr	r0, [pc, #288]	; (800083c <main+0x168>)
 800071a:	f002 f8d5 	bl	80028c8 <HAL_GPIO_WritePin>

  DRV_Init(hspi1);
 800071e:	4c48      	ldr	r4, [pc, #288]	; (8000840 <main+0x16c>)
 8000720:	4668      	mov	r0, sp
 8000722:	f104 0310 	add.w	r3, r4, #16
 8000726:	2248      	movs	r2, #72	; 0x48
 8000728:	4619      	mov	r1, r3
 800072a:	f004 f8a3 	bl	8004874 <memcpy>
 800072e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000732:	f7ff fd0b 	bl	800014c <DRV_Init>

  HAL_TIM_Base_Start(&htim4);
 8000736:	4843      	ldr	r0, [pc, #268]	; (8000844 <main+0x170>)
 8000738:	f002 fe54 	bl	80033e4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);		// LED
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4841      	ldr	r0, [pc, #260]	; (8000848 <main+0x174>)
 8000744:	f002 f8c0 	bl	80028c8 <HAL_GPIO_WritePin>

  StartPWM();
 8000748:	f7ff fd18 	bl	800017c <StartPWM>

  HAL_UART_Receive_DMA(&huart1, rx_buffer, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	493f      	ldr	r1, [pc, #252]	; (800084c <main+0x178>)
 8000750:	483f      	ldr	r0, [pc, #252]	; (8000850 <main+0x17c>)
 8000752:	f003 fdf7 	bl	8004344 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart1, tx_buffer, 3);
 8000756:	2203      	movs	r2, #3
 8000758:	493e      	ldr	r1, [pc, #248]	; (8000854 <main+0x180>)
 800075a:	483d      	ldr	r0, [pc, #244]	; (8000850 <main+0x17c>)
 800075c:	f003 fd86 	bl	800426c <HAL_UART_Transmit_DMA>
  HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f001 f887 	bl	8001874 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  uint16_t ValueArray[10] = {0x0002,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003};
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <main+0x184>)
 8000768:	f107 0418 	add.w	r4, r7, #24
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	682b      	ldr	r3, [r5, #0]
 8000774:	6023      	str	r3, [r4, #0]
  uint16_t SpeedArray[10] = {0xff00,0xf800,0xf000,0x8000,0x0fff,0x0ff0,0x0f00,0x0800,0x00ff,0x00f0};
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <main+0x188>)
 8000778:	1d3c      	adds	r4, r7, #4
 800077a:	461d      	mov	r5, r3
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	6023      	str	r3, [r4, #0]
  uint8_t Presc = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t Value = Presc;
 800078a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800078e:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint32_t Speed = 0x0007ffff;
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <main+0x18c>)
 8000792:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_Delay(3000);
 8000794:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000798:	f001 f86c 	bl	8001874 <HAL_Delay>

  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <main+0x164>)
 80007a2:	f002 f891 	bl	80028c8 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, ADC_data, 4);		// Po konwersji ADC, DMA zapisuje odczyty
 80007a6:	2204      	movs	r2, #4
 80007a8:	492e      	ldr	r1, [pc, #184]	; (8000864 <main+0x190>)
 80007aa:	482f      	ldr	r0, [pc, #188]	; (8000868 <main+0x194>)
 80007ac:	f001 f95c 	bl	8001a68 <HAL_ADC_Start_DMA>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <main+0x198>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);	// Pulse wyzwala ADC
 80007b8:	2108      	movs	r1, #8
 80007ba:	482c      	ldr	r0, [pc, #176]	; (800086c <main+0x198>)
 80007bc:	f002 fe9c 	bl	80034f8 <HAL_TIM_PWM_Start_IT>
*/
	//Speed = Speed - 0x0ff;
		  //Speed = SpeedArray[a];
		  //Value = ValueArray[a];
  //}
  IsDMA = 1;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <main+0x19c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1);
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <main+0x198>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2201      	movs	r2, #1
 80007cc:	63da      	str	r2, [r3, #60]	; 0x3c
uint8_t IsRunning = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint8_t Power = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (1)
  {
	  //HAL_Delay(1);
	  if(rx_buffer[0] == 0){
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <main+0x178>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d108      	bne.n	80007f4 <main+0x120>
		  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <main+0x164>)
 80007e8:	f002 f86e 	bl	80028c8 <HAL_GPIO_WritePin>
		  IsRunning = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007f2:	e7f2      	b.n	80007da <main+0x106>
	  }else {
		  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <main+0x164>)
 80007fa:	f002 f865 	bl	80028c8 <HAL_GPIO_WritePin>
		  if (!IsRunning){
			 // SixStep(0x000fffff, 16);
			 // SixStep(0x0007ffff, 16);
			 // SixStep(0x0000ffff, 16);
		  }
		  Power = rx_buffer[0];				// bufer w kazdej chwili moze zmienic sie
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <main+0x178>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if (Power < 8) Power = 8;			// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 8000806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800080a:	2b07      	cmp	r3, #7
 800080c:	d803      	bhi.n	8000816 <main+0x142>
 800080e:	2308      	movs	r3, #8
 8000810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000814:	e006      	b.n	8000824 <main+0x150>
		  else if (Power > 55) Power = 63;	// Zabezpieczenie by nie dac sygnalo krotszego niz obsluguje sterownik
 8000816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800081a:	2b37      	cmp	r3, #55	; 0x37
 800081c:	d902      	bls.n	8000824 <main+0x150>
 800081e:	233f      	movs	r3, #63	; 0x3f
 8000820:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  BEMF_SixStep(Power);
 8000824:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000828:	b29b      	uxth	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fde4 	bl	80003f8 <BEMF_SixStep>
		  IsRunning = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if(rx_buffer[0] == 0){
 8000836:	e7d0      	b.n	80007da <main+0x106>
 8000838:	40011400 	.word	0x40011400
 800083c:	40010c00 	.word	0x40010c00
 8000840:	200024c8 	.word	0x200024c8
 8000844:	2000009c 	.word	0x2000009c
 8000848:	40010800 	.word	0x40010800
 800084c:	20000090 	.word	0x20000090
 8000850:	20000304 	.word	0x20000304
 8000854:	20000004 	.word	0x20000004
 8000858:	080048b4 	.word	0x080048b4
 800085c:	080048c8 	.word	0x080048c8
 8000860:	0007ffff 	.word	0x0007ffff
 8000864:	20000088 	.word	0x20000088
 8000868:	20000290 	.word	0x20000290
 800086c:	20002388 	.word	0x20002388
 8000870:	20000000 	.word	0x20000000

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f801 	bl	800488a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2310      	movs	r3, #16
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008b8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f830 	bl	8002928 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008ce:	f000 fc05 	bl	80010dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fa9a 	bl	8002e28 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008fa:	f000 fbef 	bl	80010dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008fe:	2302      	movs	r3, #2
 8000900:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000906:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fc28 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000916:	f000 fbe1 	bl	80010dc <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <MX_ADC1_Init+0xd0>)
 8000938:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_ADC1_Init+0xcc>)
 800093c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000944:	2200      	movs	r2, #0
 8000946:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_ADC1_Init+0xcc>)
 800094a:	2200      	movs	r2, #0
 800094c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000950:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC1_Init+0xcc>)
 800095e:	2204      	movs	r2, #4
 8000960:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000964:	f000 ffa8 	bl	80018b8 <HAL_ADC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800096e:	f000 fbb5 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_ADC1_Init+0xcc>)
 8000984:	f001 f960 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fba5 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000996:	2302      	movs	r3, #2
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_ADC1_Init+0xcc>)
 80009a0:	f001 f952 	bl	8001c48 <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009aa:	f000 fb97 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009ae:	2303      	movs	r3, #3
 80009b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_ADC1_Init+0xcc>)
 80009bc:	f001 f944 	bl	8001c48 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009c6:	f000 fb89 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_ADC1_Init+0xcc>)
 80009d8:	f001 f936 	bl	8001c48 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009e2:	f000 fb7b 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000290 	.word	0x20000290
 80009f4:	40012400 	.word	0x40012400

080009f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a08:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <MX_ADC2_Init+0xd0>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a24:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 4;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a36:	4823      	ldr	r0, [pc, #140]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a38:	f000 ff3e 	bl	80018b8 <HAL_ADC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000a42:	f000 fb4b 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a58:	f001 f8f6 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fb3b 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a74:	f001 f8e8 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 fb2d 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a82:	2303      	movs	r3, #3
 8000a84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a86:	2303      	movs	r3, #3
 8000a88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000a90:	f001 f8da 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000a9a:	f000 fb1f 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_ADC2_Init+0xcc>)
 8000aac:	f001 f8cc 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8000ab6:	f000 fb11 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000dc 	.word	0x200000dc
 8000ac8:	40012800 	.word	0x40012800

08000acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <MX_SPI1_Init+0x6c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b02:	2218      	movs	r2, #24
 8000b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b1a:	220a      	movs	r2, #10
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000b20:	f002 fbd4 	bl	80032cc <HAL_SPI_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b2a:	f000 fad7 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200024c8 	.word	0x200024c8
 8000b38:	40013000 	.word	0x40013000

08000b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	; 0x58
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2220      	movs	r2, #32
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fe88 	bl	800488a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7a:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b7c:	4a45      	ldr	r2, [pc, #276]	; (8000c94 <MX_TIM1_Init+0x158>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PWM_PRESC;
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b82:	2213      	movs	r2, #19
 8000b84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b86:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b88:	2220      	movs	r2, #32
 8000b8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8000b8c:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b8e:	223f      	movs	r2, #63	; 0x3f
 8000b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba4:	483a      	ldr	r0, [pc, #232]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000ba6:	f002 fbf2 	bl	800338e <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000bb0:	f000 fa94 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000bc2:	f002 fedf 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 fa86 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bd0:	482f      	ldr	r0, [pc, #188]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000bd2:	f002 fc2a 	bl	800342a <HAL_TIM_PWM_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bdc:	f000 fa7e 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bec:	4619      	mov	r1, r3
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000bf0:	f003 fa48 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bfa:	f000 fa6f 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	2204      	movs	r2, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	481b      	ldr	r0, [pc, #108]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000c24:	f002 fde8 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000c2e:	f000 fa55 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4814      	ldr	r0, [pc, #80]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000c40:	f002 fdda 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000c4a:	f000 fa47 	bl	80010dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000c72:	f003 fa4b 	bl	800410c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000c7c:	f000 fa2e 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM1_Init+0x154>)
 8000c82:	f000 fb9f 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8000c86:	bf00      	nop
 8000c88:	3758      	adds	r7, #88	; 0x58
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20002388 	.word	0x20002388
 8000c94:	40012c00 	.word	0x40012c00

08000c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PWM_PRESC;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cd2:	2213      	movs	r2, #19
 8000cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cd8:	2220      	movs	r2, #32
 8000cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cde:	223f      	movs	r2, #63	; 0x3f
 8000ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cee:	4823      	ldr	r0, [pc, #140]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000cf0:	f002 fb4d 	bl	800338e <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000cfa:	f000 f9ef 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481c      	ldr	r0, [pc, #112]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000d0c:	f002 fe3a 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d16:	f000 f9e1 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000d1c:	f002 fb85 	bl	800342a <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d26:	f000 f9d9 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4619      	mov	r1, r3
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000d3a:	f003 f9a3 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d44:	f000 f9ca 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000d60:	f002 fd4a 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d6a:	f000 f9b7 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6e:	4803      	ldr	r0, [pc, #12]	; (8000d7c <MX_TIM2_Init+0xe4>)
 8000d70:	f000 fb28 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8000d74:	bf00      	nop
 8000d76:	3738      	adds	r7, #56	; 0x38
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20002520 	.word	0x20002520

08000d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000db2:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <MX_TIM3_Init+0xe8>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PWM_PRESC;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000db8:	2213      	movs	r2, #19
 8000dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dc4:	223f      	movs	r2, #63	; 0x3f
 8000dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd4:	4823      	ldr	r0, [pc, #140]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dd6:	f002 fada 	bl	800338e <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000de0:	f000 f97c 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4619      	mov	r1, r3
 8000df0:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000df2:	f002 fdc7 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000dfc:	f000 f96e 	bl	80010dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e02:	f002 fb12 	bl	800342a <HAL_TIM_PWM_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 f966 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e20:	f003 f930 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e2a:	f000 f957 	bl	80010dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e46:	f002 fcd7 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e50:	f000 f944 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e56:	f000 fab5 	bl	80013c4 <HAL_TIM_MspPostInit>

}
 8000e5a:	bf00      	nop
 8000e5c:	3738      	adds	r7, #56	; 0x38
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000020c 	.word	0x2000020c
 8000e68:	40000400 	.word	0x40000400

08000e6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <MX_TIM4_Init+0x98>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000eb0:	f002 fa6d 	bl	800338e <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000eba:	f000 f90f 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000ecc:	f002 fd5a 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f901 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_TIM4_Init+0x94>)
 8000ee8:	f003 f8cc 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ef2:	f000 f8f3 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000009c 	.word	0x2000009c
 8000f04:	40000800 	.word	0x40000800

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART1_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f40:	f003 f947 	bl	80041d2 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f000 f8c7 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000304 	.word	0x20000304
 8000f58:	40013800 	.word	0x40013800

08000f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_DMA_Init+0x58>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_DMA_Init+0x58>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_DMA_Init+0x58>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200b      	movs	r0, #11
 8000f80:	f001 f923 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f84:	200b      	movs	r0, #11
 8000f86:	f001 f93c 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200e      	movs	r0, #14
 8000f90:	f001 f91b 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f94:	200e      	movs	r0, #14
 8000f96:	f001 f934 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f001 f913 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f001 f92c 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a3d      	ldr	r2, [pc, #244]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a37      	ldr	r2, [pc, #220]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <MX_GPIO_Init+0x110>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <MX_GPIO_Init+0x110>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <MX_GPIO_Init+0x110>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENGATE_GPIO_Port, ENGATE_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2101      	movs	r1, #1
 8001018:	482c      	ldr	r0, [pc, #176]	; (80010cc <MX_GPIO_Init+0x114>)
 800101a:	f001 fc55 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_Pin|PWM_CL_Pin|LED_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f240 5104 	movw	r1, #1284	; 0x504
 8001024:	482a      	ldr	r0, [pc, #168]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001026:	f001 fc4f 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	212c      	movs	r1, #44	; 0x2c
 800102e:	4829      	ldr	r0, [pc, #164]	; (80010d4 <MX_GPIO_Init+0x11c>)
 8001030:	f001 fc4a 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENGATE_Pin */
  GPIO_InitStruct.Pin = ENGATE_Pin;
 8001034:	2301      	movs	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENGATE_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_GPIO_Init+0x114>)
 800104c:	f001 fae2 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8001050:	2302      	movs	r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <MX_GPIO_Init+0x114>)
 8001064:	f001 fad6 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_Pin PWM_CL_Pin LED_Pin */
  GPIO_InitStruct.Pin = INPUT_Pin|PWM_CL_Pin|LED_Pin;
 8001068:	f240 5304 	movw	r3, #1284	; 0x504
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001082:	f001 fac7 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PWM_AL_Pin PWM_BL_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|PWM_AL_Pin|PWM_BL_Pin;
 8001086:	232c      	movs	r3, #44	; 0x2c
 8001088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4619      	mov	r1, r3
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x11c>)
 800109e:	f001 fab9 	bl	8002614 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_GPIO_Init+0x120>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <MX_GPIO_Init+0x120>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	6053      	str	r3, [r2, #4]

}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	40010000 	.word	0x40010000

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_MspInit+0x5c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x5c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x60>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_MspInit+0x60>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <HAL_ADC_MspInit+0x10c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d14a      	bne.n	8001202 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <HAL_ADC_MspInit+0x110>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a3a      	ldr	r2, [pc, #232]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_ADC_MspInit+0x110>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a34      	ldr	r2, [pc, #208]	; (800125c <HAL_ADC_MspInit+0x110>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800119c:	231b      	movs	r3, #27
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4619      	mov	r1, r3
 80011aa:	482d      	ldr	r0, [pc, #180]	; (8001260 <HAL_ADC_MspInit+0x114>)
 80011ac:	f001 fa32 	bl	8002614 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_ADC_MspInit+0x11c>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011da:	2220      	movs	r2, #32
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011e6:	f001 f827 	bl	8002238 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80011f0:	f7ff ff74 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011f8:	621a      	str	r2, [r3, #32]
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_ADC_MspInit+0x118>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001200:	e026      	b.n	8001250 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_ADC_MspInit+0x120>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d121      	bne.n	8001250 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_ADC_MspInit+0x110>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_ADC_MspInit+0x110>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_ADC_MspInit+0x110>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_ADC_MspInit+0x110>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800123c:	231b      	movs	r3, #27
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_ADC_MspInit+0x114>)
 800124c:	f001 f9e2 	bl	8002614 <HAL_GPIO_Init>
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40012400 	.word	0x40012400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800
 8001264:	20000344 	.word	0x20000344
 8001268:	40020008 	.word	0x40020008
 800126c:	40012800 	.word	0x40012800

08001270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <HAL_SPI_MspInit+0x88>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d12f      	bne.n	80012f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 8001296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012d4:	f001 f99e 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80012d8:	2340      	movs	r3, #64	; 0x40
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012ec:	f001 f992 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 800131c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2019      	movs	r0, #25
 8001334:	f000 ff49 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001338:	2019      	movs	r0, #25
 800133a:	f000 ff62 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800133e:	e034      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d10c      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
}
 8001362:	e022      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_TIM_Base_MspInit+0xb8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10c      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	e010      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <HAL_TIM_Base_MspInit+0xbc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10b      	bne.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40000800 	.word	0x40000800

080013c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_TIM_MspPostInit+0x11c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d119      	bne.n	8001418 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH_Pin;
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2302      	movs	r3, #2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4619      	mov	r1, r3
 8001410:	4835      	ldr	r0, [pc, #212]	; (80014e8 <HAL_TIM_MspPostInit+0x124>)
 8001412:	f001 f8ff 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001416:	e05f      	b.n	80014d8 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001420:	d12b      	bne.n	800147a <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_AH_Pin;
 800143a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_AH_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4619      	mov	r1, r3
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <HAL_TIM_MspPostInit+0x124>)
 8001450:	f001 f8e0 	bl	8002614 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_TIM_MspPostInit+0x128>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_TIM_MspPostInit+0x128>)
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	6053      	str	r3, [r2, #4]
}
 8001478:	e02e      	b.n	80014d8 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <HAL_TIM_MspPostInit+0x12c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d129      	bne.n	80014d8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_TIM_MspPostInit+0x120>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_BH_Pin;
 800149c:	2310      	movs	r3, #16
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2302      	movs	r3, #2
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_BH_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <HAL_TIM_MspPostInit+0x130>)
 80014b0:	f001 f8b0 	bl	8002614 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_TIM_MspPostInit+0x128>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_TIM_MspPostInit+0x128>)
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	6053      	str	r3, [r2, #4]
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_UART_MspInit+0x140>)
 8001514:	4293      	cmp	r3, r2
 8001516:	f040 808a 	bne.w	800162e <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <HAL_UART_MspInit+0x144>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_UART_MspInit+0x144>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b45      	ldr	r3, [pc, #276]	; (800163c <HAL_UART_MspInit+0x144>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_UART_MspInit+0x144>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a41      	ldr	r2, [pc, #260]	; (800163c <HAL_UART_MspInit+0x144>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_UART_MspInit+0x144>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4838      	ldr	r0, [pc, #224]	; (8001640 <HAL_UART_MspInit+0x148>)
 800155e:	f001 f859 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4832      	ldr	r0, [pc, #200]	; (8001640 <HAL_UART_MspInit+0x148>)
 8001576:	f001 f84d 	bl	8002614 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_UART_MspInit+0x14c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <HAL_UART_MspInit+0x14c>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_UART_MspInit+0x150>)
 8001598:	4a2c      	ldr	r2, [pc, #176]	; (800164c <HAL_UART_MspInit+0x154>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_UART_MspInit+0x150>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015c8:	f000 fe36 	bl	8002238 <HAL_DMA_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80015d2:	f7ff fd83 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
 80015dc:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_UART_MspInit+0x150>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_MspInit+0x158>)
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_UART_MspInit+0x15c>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x158>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x158>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0x158>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x158>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x158>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_UART_MspInit+0x158>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x158>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <HAL_UART_MspInit+0x158>)
 8001614:	f000 fe10 	bl	8002238 <HAL_DMA_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800161e:	f7ff fd5d 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_UART_MspInit+0x158>)
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_UART_MspInit+0x158>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40013800 	.word	0x40013800
 800163c:	40021000 	.word	0x40021000
 8001640:	40010c00 	.word	0x40010c00
 8001644:	40010000 	.word	0x40010000
 8001648:	200002c0 	.word	0x200002c0
 800164c:	40020058 	.word	0x40020058
 8001650:	2000024c 	.word	0x2000024c
 8001654:	40020044 	.word	0x40020044

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <HardFault_Handler+0x4>

0800166a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <BusFault_Handler+0x4>

08001676 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <UsageFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f8ca 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Channel1_IRQHandler+0x10>)
 80016b2:	f000 fe7b 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000344 	.word	0x20000344

080016c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA1_Channel4_IRQHandler+0x10>)
 80016c6:	f000 fe71 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000024c 	.word	0x2000024c

080016d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA1_Channel5_IRQHandler+0x10>)
 80016da:	f000 fe67 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200002c0 	.word	0x200002c0

080016e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM1_UP_IRQHandler+0x10>)
 80016ee:	f001 ff7b 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20002388 	.word	0x20002388

080016fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SystemInit+0x5c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <SystemInit+0x5c>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <SystemInit+0x5c>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4911      	ldr	r1, [pc, #68]	; (8001758 <SystemInit+0x5c>)
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <SystemInit+0x60>)
 8001714:	4013      	ands	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <SystemInit+0x5c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <SystemInit+0x5c>)
 800171e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <SystemInit+0x5c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SystemInit+0x5c>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SystemInit+0x5c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <SystemInit+0x5c>)
 800173a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800173e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SystemInit+0x5c>)
 8001742:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001746:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SystemInit+0x64>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	609a      	str	r2, [r3, #8]
#endif 
 }
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	f8ff0000 	.word	0xf8ff0000
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001764:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001766:	e003      	b.n	8001770 <LoopCopyDataInit>

08001768 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800176a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800176c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800176e:	3104      	adds	r1, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001774:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001776:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001778:	d3f6      	bcc.n	8001768 <CopyDataInit>
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800177c:	e002      	b.n	8001784 <LoopFillZerobss>

0800177e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001780:	f842 3b04 	str.w	r3, [r2], #4

08001784 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001786:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001788:	d3f9      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800178a:	f7ff ffb7 	bl	80016fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f003 f84d 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001792:	f7fe ff9f 	bl	80006d4 <main>
  bx lr
 8001796:	4770      	bx	lr
  ldr r3, =_sidata
 8001798:	08004910 	.word	0x08004910
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017a0:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80017a4:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80017a8:	20002664 	.word	0x20002664

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x28>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x28>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 fcf7 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fc8c 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fd0f 	bl	800221e <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 fcd7 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000008 	.word	0x20000008
 8001834:	20000010 	.word	0x20000010
 8001838:	2000000c 	.word	0x2000000c

0800183c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x1c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_IncTick+0x20>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <HAL_IncTick+0x20>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000010 	.word	0x20000010
 800185c:	20002660 	.word	0x20002660

08001860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_GetTick+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20002660 	.word	0x20002660

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff fff0 	bl	8001860 <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_Delay+0x40>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffe0 	bl	8001860 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000010 	.word	0x20000010

080018b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0be      	b.n	8001a58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fc28 	bl	800114c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 faed 	bl	8001edc <ADC_ConversionStop_Disable>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f003 0310 	and.w	r3, r3, #16
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8099 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8095 	bne.w	8001a46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001938:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b1b      	ldrb	r3, [r3, #12]
 800193e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001940:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4313      	orrs	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d003      	beq.n	800195a <HAL_ADC_Init+0xa2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_Init+0xa8>
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	e000      	b.n	8001962 <HAL_ADC_Init+0xaa>
 8001960:	2300      	movs	r3, #0
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7d1b      	ldrb	r3, [r3, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d119      	bne.n	80019a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	3b01      	subs	r3, #1
 800197e:	035a      	lsls	r2, r3, #13
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_ADC_Init+0x1a8>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d4:	d003      	beq.n	80019de <HAL_ADC_Init+0x126>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_ADC_Init+0x1ac>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f023 0312 	bic.w	r3, r3, #18
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	ffe1f7fd 	.word	0xffe1f7fd
 8001a64:	ff1f0efe 	.word	0xff1f0efe

08001a68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a64      	ldr	r2, [pc, #400]	; (8001c10 <HAL_ADC_Start_DMA+0x1a8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d004      	beq.n	8001a8c <HAL_ADC_Start_DMA+0x24>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a63      	ldr	r2, [pc, #396]	; (8001c14 <HAL_ADC_Start_DMA+0x1ac>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d106      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x32>
 8001a8c:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_ADC_Start_DMA+0x1a8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 80b3 	bne.w	8001c00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x40>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e0ae      	b.n	8001c06 <HAL_ADC_Start_DMA+0x19e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f9c1 	bl	8001e38 <ADC_Enable>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 809a 	bne.w	8001bf6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_ADC_Start_DMA+0x1ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_Start_DMA+0x84>
 8001ae0:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_ADC_Start_DMA+0x1a8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d026      	beq.n	8001b54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b16:	e01d      	b.n	8001b54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <HAL_ADC_Start_DMA+0x1a8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_Start_DMA+0xd0>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_ADC_Start_DMA+0x1ac>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d10d      	bne.n	8001b54 <HAL_ADC_Start_DMA+0xec>
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_ADC_Start_DMA+0x1a8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f023 0206 	bic.w	r2, r3, #6
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_ADC_Start_DMA+0x1b0>)
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a24      	ldr	r2, [pc, #144]	; (8001c1c <HAL_ADC_Start_DMA+0x1b4>)
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_ADC_Start_DMA+0x1b8>)
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a18      	ldr	r0, [r3, #32]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	334c      	adds	r3, #76	; 0x4c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f000 fb95 	bl	80022ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bcc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bd0:	d108      	bne.n	8001be4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001be0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001be2:	e00f      	b.n	8001c04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bf2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bf4:	e006      	b.n	8001c04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001bfe:	e001      	b.n	8001c04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40012400 	.word	0x40012400
 8001c14:	40012800 	.word	0x40012800
 8001c18:	08001f51 	.word	0x08001f51
 8001c1c:	08001fcd 	.word	0x08001fcd
 8001c20:	08001fe9 	.word	0x08001fe9

08001c24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x20>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e0dc      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1da>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b06      	cmp	r3, #6
 8001c76:	d81c      	bhi.n	8001cb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b05      	subs	r3, #5
 8001c8a:	221f      	movs	r2, #31
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b05      	subs	r3, #5
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb0:	e03c      	b.n	8001d2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d81c      	bhi.n	8001cf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b23      	subs	r3, #35	; 0x23
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b23      	subs	r3, #35	; 0x23
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	e01b      	b.n	8001d2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b41      	subs	r3, #65	; 0x41
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b41      	subs	r3, #65	; 0x41
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d91c      	bls.n	8001d6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4019      	ands	r1, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6898      	ldr	r0, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	e019      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6919      	ldr	r1, [r3, #16]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	2207      	movs	r2, #7
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4019      	ands	r1, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6898      	ldr	r0, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d003      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d132      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_ADC_ConfigChannel+0x1e4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d125      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d126      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d11a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_ADC_ConfigChannel+0x1e8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_ADC_ConfigChannel+0x1ec>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	0c9a      	lsrs	r2, r3, #18
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df8:	e002      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f9      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x1b2>
 8001e06:	e007      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	40012400 	.word	0x40012400
 8001e30:	20000008 	.word	0x20000008
 8001e34:	431bde83 	.word	0x431bde83

08001e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d039      	beq.n	8001eca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <ADC_Enable+0x9c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <ADC_Enable+0xa0>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	0c9b      	lsrs	r3, r3, #18
 8001e72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e74:	e002      	b.n	8001e7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f9      	bne.n	8001e76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e82:	f7ff fced 	bl	8001860 <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e88:	e018      	b.n	8001ebc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e8a:	f7ff fce9 	bl	8001860 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d911      	bls.n	8001ebc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	f043 0210 	orr.w	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d1df      	bne.n	8001e8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	431bde83 	.word	0x431bde83

08001edc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d127      	bne.n	8001f46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f06:	f7ff fcab 	bl	8001860 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f0c:	e014      	b.n	8001f38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f0e:	f7ff fca7 	bl	8001860 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d90d      	bls.n	8001f38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f043 0210 	orr.w	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e007      	b.n	8001f48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d0e3      	beq.n	8001f0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d127      	bne.n	8001fba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f84:	d115      	bne.n	8001fb2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d111      	bne.n	8001fb2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7fe fad8 	bl	8000568 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fb8:	e004      	b.n	8001fc4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff fe22 	bl	8001c24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fe11 	bl	8001c36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <__NVIC_EnableIRQ+0x34>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff90 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2d 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff42 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff90 	bl	800210c <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5f 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff35 	bl	8002080 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e043      	b.n	80022d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_DMA_Init+0xa8>)
 8002256:	4413      	add	r3, r2
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <HAL_DMA_Init+0xac>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_DMA_Init+0xb0>)
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002282:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	bffdfff8 	.word	0xbffdfff8
 80022e4:	cccccccd 	.word	0xcccccccd
 80022e8:	40020000 	.word	0x40020000

080022ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_DMA_Start_IT+0x20>
 8002308:	2302      	movs	r3, #2
 800230a:	e04a      	b.n	80023a2 <HAL_DMA_Start_IT+0xb6>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800231a:	2b01      	cmp	r3, #1
 800231c:	d13a      	bne.n	8002394 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f938 	bl	80025b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 020e 	orr.w	r2, r2, #14
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e00f      	b.n	8002382 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 020a 	orr.w	r2, r2, #10
 8002380:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e005      	b.n	80023a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800239c:	2302      	movs	r3, #2
 800239e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2204      	movs	r2, #4
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d04f      	beq.n	8002474 <HAL_DMA_IRQHandler+0xc8>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d04a      	beq.n	8002474 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0204 	bic.w	r2, r2, #4
 80023fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a66      	ldr	r2, [pc, #408]	; (800259c <HAL_DMA_IRQHandler+0x1f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d029      	beq.n	800245a <HAL_DMA_IRQHandler+0xae>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_DMA_IRQHandler+0x1f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d022      	beq.n	8002456 <HAL_DMA_IRQHandler+0xaa>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01a      	beq.n	8002450 <HAL_DMA_IRQHandler+0xa4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a62      	ldr	r2, [pc, #392]	; (80025a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d012      	beq.n	800244a <HAL_DMA_IRQHandler+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a60      	ldr	r2, [pc, #384]	; (80025ac <HAL_DMA_IRQHandler+0x200>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x98>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <HAL_DMA_IRQHandler+0x204>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_DMA_IRQHandler+0x92>
 8002438:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243c:	e00e      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 800243e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002442:	e00b      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 8002444:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002448:	e008      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 800244a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244e:	e005      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 8002450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002454:	e002      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	e000      	b.n	800245c <HAL_DMA_IRQHandler+0xb0>
 800245a:	2304      	movs	r3, #4
 800245c:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_DMA_IRQHandler+0x208>)
 800245e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8094 	beq.w	8002592 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002472:	e08e      	b.n	8002592 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2202      	movs	r2, #2
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d056      	beq.n	8002532 <HAL_DMA_IRQHandler+0x186>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d051      	beq.n	8002532 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 020a 	bic.w	r2, r2, #10
 80024aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_DMA_IRQHandler+0x1f0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d029      	beq.n	8002512 <HAL_DMA_IRQHandler+0x166>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <HAL_DMA_IRQHandler+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <HAL_DMA_IRQHandler+0x162>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a35      	ldr	r2, [pc, #212]	; (80025a4 <HAL_DMA_IRQHandler+0x1f8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x15c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <HAL_DMA_IRQHandler+0x1fc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d012      	beq.n	8002502 <HAL_DMA_IRQHandler+0x156>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_DMA_IRQHandler+0x200>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00a      	beq.n	80024fc <HAL_DMA_IRQHandler+0x150>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <HAL_DMA_IRQHandler+0x204>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <HAL_DMA_IRQHandler+0x14a>
 80024f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024f4:	e00e      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 80024f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fa:	e00b      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 80024fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002500:	e008      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	e005      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	e002      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 800250e:	2320      	movs	r3, #32
 8002510:	e000      	b.n	8002514 <HAL_DMA_IRQHandler+0x168>
 8002512:	2302      	movs	r3, #2
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_DMA_IRQHandler+0x208>)
 8002516:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d034      	beq.n	8002592 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002530:	e02f      	b.n	8002592 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2208      	movs	r2, #8
 8002538:	409a      	lsls	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d028      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e8>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020e 	bic.w	r2, r2, #14
 800255a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
    }
  }
  return;
 8002592:	bf00      	nop
 8002594:	bf00      	nop
}
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40020008 	.word	0x40020008
 80025a0:	4002001c 	.word	0x4002001c
 80025a4:	40020030 	.word	0x40020030
 80025a8:	40020044 	.word	0x40020044
 80025ac:	40020058 	.word	0x40020058
 80025b0:	4002006c 	.word	0x4002006c
 80025b4:	40020000 	.word	0x40020000

080025b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d108      	bne.n	80025f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025f6:	e007      	b.n	8002608 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b08b      	sub	sp, #44	; 0x2c
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e127      	b.n	8002878 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002628:	2201      	movs	r2, #1
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	f040 8116 	bne.w	8002872 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b12      	cmp	r3, #18
 800264c:	d034      	beq.n	80026b8 <HAL_GPIO_Init+0xa4>
 800264e:	2b12      	cmp	r3, #18
 8002650:	d80d      	bhi.n	800266e <HAL_GPIO_Init+0x5a>
 8002652:	2b02      	cmp	r3, #2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x9a>
 8002656:	2b02      	cmp	r3, #2
 8002658:	d804      	bhi.n	8002664 <HAL_GPIO_Init+0x50>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d031      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
 800265e:	2b01      	cmp	r3, #1
 8002660:	d01c      	beq.n	800269c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002662:	e048      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002664:	2b03      	cmp	r3, #3
 8002666:	d043      	beq.n	80026f0 <HAL_GPIO_Init+0xdc>
 8002668:	2b11      	cmp	r3, #17
 800266a:	d01b      	beq.n	80026a4 <HAL_GPIO_Init+0x90>
          break;
 800266c:	e043      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800266e:	4a89      	ldr	r2, [pc, #548]	; (8002894 <HAL_GPIO_Init+0x280>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d026      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
 8002674:	4a87      	ldr	r2, [pc, #540]	; (8002894 <HAL_GPIO_Init+0x280>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d806      	bhi.n	8002688 <HAL_GPIO_Init+0x74>
 800267a:	4a87      	ldr	r2, [pc, #540]	; (8002898 <HAL_GPIO_Init+0x284>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d020      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
 8002680:	4a86      	ldr	r2, [pc, #536]	; (800289c <HAL_GPIO_Init+0x288>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
          break;
 8002686:	e036      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002688:	4a85      	ldr	r2, [pc, #532]	; (80028a0 <HAL_GPIO_Init+0x28c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
 800268e:	4a85      	ldr	r2, [pc, #532]	; (80028a4 <HAL_GPIO_Init+0x290>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d016      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
 8002694:	4a84      	ldr	r2, [pc, #528]	; (80028a8 <HAL_GPIO_Init+0x294>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0xae>
          break;
 800269a:	e02c      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	623b      	str	r3, [r7, #32]
          break;
 80026a2:	e028      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	3304      	adds	r3, #4
 80026aa:	623b      	str	r3, [r7, #32]
          break;
 80026ac:	e023      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	3308      	adds	r3, #8
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e01e      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	330c      	adds	r3, #12
 80026be:	623b      	str	r3, [r7, #32]
          break;
 80026c0:	e019      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ca:	2304      	movs	r3, #4
 80026cc:	623b      	str	r3, [r7, #32]
          break;
 80026ce:	e012      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	611a      	str	r2, [r3, #16]
          break;
 80026e2:	e008      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e4:	2308      	movs	r3, #8
 80026e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	615a      	str	r2, [r3, #20]
          break;
 80026ee:	e002      	b.n	80026f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2bff      	cmp	r3, #255	; 0xff
 80026fa:	d801      	bhi.n	8002700 <HAL_GPIO_Init+0xec>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	e001      	b.n	8002704 <HAL_GPIO_Init+0xf0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2bff      	cmp	r3, #255	; 0xff
 800270a:	d802      	bhi.n	8002712 <HAL_GPIO_Init+0xfe>
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x104>
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3b08      	subs	r3, #8
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	210f      	movs	r1, #15
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	401a      	ands	r2, r3
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	431a      	orrs	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8096 	beq.w	8002872 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002746:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_GPIO_Init+0x298>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_GPIO_Init+0x298>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6193      	str	r3, [r2, #24]
 8002752:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_GPIO_Init+0x298>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800275e:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_GPIO_Init+0x29c>)
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_GPIO_Init+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x19e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_GPIO_Init+0x2a4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x19a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_GPIO_Init+0x2a8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x196>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a48      	ldr	r2, [pc, #288]	; (80028c0 <HAL_GPIO_Init+0x2ac>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x192>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x1a0>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x1a0>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x1a0>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x1a0>
 80027b2:	2300      	movs	r3, #0
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c4:	493a      	ldr	r1, [pc, #232]	; (80028b0 <HAL_GPIO_Init+0x29c>)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4938      	ldr	r1, [pc, #224]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
 80027ea:	e006      	b.n	80027fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4933      	ldr	r1, [pc, #204]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	492e      	ldr	r1, [pc, #184]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	4929      	ldr	r1, [pc, #164]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800281e:	4013      	ands	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	4924      	ldr	r1, [pc, #144]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	491f      	ldr	r1, [pc, #124]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002846:	4013      	ands	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	491a      	ldr	r1, [pc, #104]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	43db      	mvns	r3, r3
 800286c:	4915      	ldr	r1, [pc, #84]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800286e:	4013      	ands	r3, r2
 8002870:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f aed0 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 8002888:	bf00      	nop
 800288a:	372c      	adds	r7, #44	; 0x2c
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	10210000 	.word	0x10210000
 8002898:	10110000 	.word	0x10110000
 800289c:	10120000 	.word	0x10120000
 80028a0:	10310000 	.word	0x10310000
 80028a4:	10320000 	.word	0x10320000
 80028a8:	10220000 	.word	0x10220000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40010800 	.word	0x40010800
 80028b8:	40010c00 	.word	0x40010c00
 80028bc:	40011000 	.word	0x40011000
 80028c0:	40011400 	.word	0x40011400
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002916:	e002      	b.n	800291e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002918:	887a      	ldrh	r2, [r7, #2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	611a      	str	r2, [r3, #16]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e26c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b04      	cmp	r3, #4
 8002952:	d00c      	beq.n	800296e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d112      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
 8002960:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296e:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d06c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x12c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d168      	bne.n	8002a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e246      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x76>
 8002990:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7f      	ldr	r2, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e02e      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a77      	ldr	r2, [pc, #476]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xbc>
 80029ca:	4b72      	ldr	r3, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe ff2c 	bl	8001860 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe ff28 	bl	8001860 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1fa      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe4>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe ff18 	bl	8001860 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe ff14 	bl	8001860 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1e6      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1ba      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fecd 	bl	8001860 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fec9 	bl	8001860 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e19b      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4927      	ldr	r1, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe feac 	bl	8001860 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fea8 	bl	8001860 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e17a      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03a      	beq.n	8002bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d019      	beq.n	8002b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fe fe8c 	bl	8001860 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fe88 	bl	8001860 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e15a      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f000 fada 	bl	8003124 <RCC_Delay>
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fe72 	bl	8001860 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7e:	e00f      	b.n	8002ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe fe6e 	bl	8001860 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e140      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	42420000 	.word	0x42420000
 8002b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	4b9e      	ldr	r3, [pc, #632]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e9      	bne.n	8002b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a6 	beq.w	8002d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b97      	ldr	r3, [pc, #604]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b94      	ldr	r3, [pc, #592]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a93      	ldr	r2, [pc, #588]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]
 8002bd6:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b8e      	ldr	r3, [pc, #568]	; (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d118      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a8a      	ldr	r2, [pc, #552]	; (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fe2f 	bl	8001860 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c06:	f7fe fe2b 	bl	8001860 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0fd      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x312>
 8002c2c:	4b7b      	ldr	r3, [pc, #492]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a7a      	ldr	r2, [pc, #488]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	e02d      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c42:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a75      	ldr	r2, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	f023 0304 	bic.w	r3, r3, #4
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x356>
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a6c      	ldr	r2, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a63      	ldr	r2, [pc, #396]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fddf 	bl	8001860 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fddb 	bl	8001860 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0ab      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x37e>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fdc9 	bl	8001860 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fdc5 	bl	8001860 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e095      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8081 	beq.w	8002e12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d061      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d146      	bne.n	8002db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x4fc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fd99 	bl	8001860 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe fd95 	bl	8001860 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e067      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	492d      	ldr	r1, [pc, #180]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a19      	ldr	r1, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	4927      	ldr	r1, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x4fc>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fd69 	bl	8001860 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fd65 	bl	8001860 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e037      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x46a>
 8002db0:	e02f      	b.n	8002e12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_OscConfig+0x4fc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fd52 	bl	8001860 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fd4e 	bl	8001860 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e020      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x498>
 8002dde:	e018      	b.n	8002e12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e013      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42420060 	.word	0x42420060

08002e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0d0      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d910      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b67      	ldr	r3, [pc, #412]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4965      	ldr	r1, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d040      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e073      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06b      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4936      	ldr	r1, [pc, #216]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fca2 	bl	8001860 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe fc9e 	bl	8001860 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e053      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 020c 	and.w	r2, r3, #12
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1eb      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d210      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4922      	ldr	r1, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	fa21 f303 	lsr.w	r3, r1, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fc00 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40022000 	.word	0x40022000
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	080048f0 	.word	0x080048f0
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b490      	push	{r4, r7}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003004:	1d3c      	adds	r4, r7, #4
 8003006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003026:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d002      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x46>
 800303a:	e02d      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800303e:	623b      	str	r3, [r7, #32]
      break;
 8003040:	e02d      	b.n	800309e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	0c9b      	lsrs	r3, r3, #18
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800304e:	4413      	add	r3, r2
 8003050:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003054:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c5b      	lsrs	r3, r3, #17
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800306e:	4413      	add	r3, r2
 8003070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003074:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800307a:	fb02 f203 	mul.w	r2, r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	e004      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	623b      	str	r3, [r7, #32]
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800309a:	623b      	str	r3, [r7, #32]
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	6a3b      	ldr	r3, [r7, #32]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc90      	pop	{r4, r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	080048dc 	.word	0x080048dc
 80030b0:	080048ec 	.word	0x080048ec
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	003d0900 	.word	0x003d0900

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000008 	.word	0x20000008

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	4601      	mov	r1, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004900 	.word	0x08004900

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffde 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003104:	4601      	mov	r1, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4a03      	ldr	r2, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08004900 	.word	0x08004900

08003124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCC_Delay+0x34>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <RCC_Delay+0x38>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003140:	bf00      	nop
  }
  while (Delay --);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <RCC_Delay+0x1c>
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000008 	.word	0x20000008
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fb4e 	bl	8001860 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	e008      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe fb4a 	bl	8001860 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e06d      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d027      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fb19 	bl	8001860 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fb15 	bl	8001860 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e036      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4917      	ldr	r1, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420440 	.word	0x42420440

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e053      	b.n	8003386 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fd ffb9 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003314:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	0c1a      	lsrs	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 0204 	and.w	r2, r2, #4
 8003364:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003374:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e01d      	b.n	80033dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fd ffa5 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 fbb5 	bl	8003b3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b06      	cmp	r3, #6
 8003404:	d007      	beq.n	8003416 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01d      	b.n	8003478 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f815 	bl	8003480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 fb67 	bl	8003b3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fdc8 	bl	800403c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_TIM_PWM_Start+0x60>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d107      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b0c      	cmp	r3, #12
 8003506:	d841      	bhi.n	800358c <HAL_TIM_PWM_Start_IT+0x94>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <HAL_TIM_PWM_Start_IT+0x18>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003545 	.word	0x08003545
 8003514:	0800358d 	.word	0x0800358d
 8003518:	0800358d 	.word	0x0800358d
 800351c:	0800358d 	.word	0x0800358d
 8003520:	08003557 	.word	0x08003557
 8003524:	0800358d 	.word	0x0800358d
 8003528:	0800358d 	.word	0x0800358d
 800352c:	0800358d 	.word	0x0800358d
 8003530:	08003569 	.word	0x08003569
 8003534:	0800358d 	.word	0x0800358d
 8003538:	0800358d 	.word	0x0800358d
 800353c:	0800358d 	.word	0x0800358d
 8003540:	0800357b 	.word	0x0800357b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0202 	orr.w	r2, r2, #2
 8003552:	60da      	str	r2, [r3, #12]
      break;
 8003554:	e01b      	b.n	800358e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0204 	orr.w	r2, r2, #4
 8003564:	60da      	str	r2, [r3, #12]
      break;
 8003566:	e012      	b.n	800358e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0208 	orr.w	r2, r2, #8
 8003576:	60da      	str	r2, [r3, #12]
      break;
 8003578:	e009      	b.n	800358e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0210 	orr.w	r2, r2, #16
 8003588:	60da      	str	r2, [r3, #12]
      break;
 800358a:	e000      	b.n	800358e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800358c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd50 	bl	800403c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_TIM_PWM_Start_IT+0xec>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0202 	mvn.w	r2, #2
 8003614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa73 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa66 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa75 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0204 	mvn.w	r2, #4
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa49 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa3c 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa4b 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0208 	mvn.w	r2, #8
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2204      	movs	r2, #4
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa1f 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa12 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa21 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b10      	cmp	r3, #16
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0210 	mvn.w	r2, #16
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2208      	movs	r2, #8
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9f5 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9e8 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f9f7 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10e      	bne.n	800376c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0201 	mvn.w	r2, #1
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f9c3 	bl	8003af2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d10e      	bne.n	8003798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d107      	bne.n	8003798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fd14 	bl	80041c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d10e      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d107      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fc fea8 	bl	8000514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d107      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0220 	mvn.w	r2, #32
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fcdf 	bl	80041ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800380e:	2302      	movs	r3, #2
 8003810:	e0b4      	b.n	800397c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	f200 809f 	bhi.w	8003968 <HAL_TIM_PWM_ConfigChannel+0x170>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003865 	.word	0x08003865
 8003834:	08003969 	.word	0x08003969
 8003838:	08003969 	.word	0x08003969
 800383c:	08003969 	.word	0x08003969
 8003840:	080038a5 	.word	0x080038a5
 8003844:	08003969 	.word	0x08003969
 8003848:	08003969 	.word	0x08003969
 800384c:	08003969 	.word	0x08003969
 8003850:	080038e7 	.word	0x080038e7
 8003854:	08003969 	.word	0x08003969
 8003858:	08003969 	.word	0x08003969
 800385c:	08003969 	.word	0x08003969
 8003860:	08003927 	.word	0x08003927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f9c8 	bl	8003c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
      break;
 80038a2:	e062      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa0e 	bl	8003ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]
      break;
 80038e4:	e041      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa57 	bl	8003da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0208 	orr.w	r2, r2, #8
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0204 	bic.w	r2, r2, #4
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      break;
 8003924:	e021      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 faa1 	bl	8003e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	61da      	str	r2, [r3, #28]
      break;
 8003966:	e000      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003968:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIM_ConfigClockSource+0x18>
 8003998:	2302      	movs	r3, #2
 800399a:	e0a6      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d067      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0x120>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d80b      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x6c>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d073      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d802      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x62>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d06f      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039e4:	e078      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d06c      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
 80039ea:	2b30      	cmp	r3, #48	; 0x30
 80039ec:	d06a      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039ee:	e073      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d00d      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x8c>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d804      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x7e>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d033      	beq.n	8003a64 <HAL_TIM_ConfigClockSource+0xe0>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d041      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a00:	e06a      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d066      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x152>
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d017      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a0e:	e063      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f000 faed 	bl	8003ffe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e04c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f000 fad6 	bl	8003ffe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a60:	609a      	str	r2, [r3, #8]
      break;
 8003a62:	e039      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f000 fa4d 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2150      	movs	r1, #80	; 0x50
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 faa4 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003a82:	e029      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 fa6b 	bl	8003f6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2160      	movs	r1, #96	; 0x60
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fa94 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e019      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 fa2d 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa84 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e009      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fa7b 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
	...

08003b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <TIM_Base_SetConfig+0xb8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <TIM_Base_SetConfig+0x30>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d007      	beq.n	8003b6c <TIM_Base_SetConfig+0x30>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <TIM_Base_SetConfig+0xbc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0x30>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <TIM_Base_SetConfig+0xc0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d108      	bne.n	8003b7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <TIM_Base_SetConfig+0xb8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_Base_SetConfig+0x62>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d007      	beq.n	8003b9e <TIM_Base_SetConfig+0x62>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <TIM_Base_SetConfig+0xbc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_Base_SetConfig+0x62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <TIM_Base_SetConfig+0xc0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <TIM_Base_SetConfig+0xb8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d103      	bne.n	8003be4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	615a      	str	r2, [r3, #20]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800

08003c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10c      	bne.n	8003c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0308 	bic.w	r3, r3, #8
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d111      	bne.n	8003ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0210 	bic.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <TIM_OC2_SetConfig+0xd0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <TIM_OC2_SetConfig+0xd0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40012c00 	.word	0x40012c00

08003da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <TIM_OC3_SetConfig+0xd0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <TIM_OC3_SetConfig+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00

08003e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	031b      	lsls	r3, r3, #12
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <TIM_OC4_SetConfig+0x98>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00

08003f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 0210 	bic.w	r2, r3, #16
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	031b      	lsls	r3, r3, #12
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f043 0307 	orr.w	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004018:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	431a      	orrs	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e032      	b.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004124:	2302      	movs	r3, #2
 8004126:	e03d      	b.n	80041a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e03f      	b.n	8004264 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7fd f97d 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2224      	movs	r2, #36	; 0x24
 8004202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004214:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa2e 	bl	8004678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800422a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800423a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b20      	cmp	r3, #32
 8004284:	d153      	bne.n	800432e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Transmit_DMA+0x26>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e04c      	b.n	8004330 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Transmit_DMA+0x38>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e045      	b.n	8004330 <HAL_UART_Transmit_DMA+0xc4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2221      	movs	r2, #33	; 0x21
 80042c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_UART_Transmit_DMA+0xcc>)
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_UART_Transmit_DMA+0xd0>)
 80042da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_UART_Transmit_DMA+0xd4>)
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2200      	movs	r2, #0
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3304      	adds	r3, #4
 8004300:	461a      	mov	r2, r3
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	f7fd fff2 	bl	80022ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004310:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004328:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	0800448d 	.word	0x0800448d
 800433c:	080044df 	.word	0x080044df
 8004340:	0800457f 	.word	0x0800457f

08004344 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b20      	cmp	r3, #32
 800435c:	d166      	bne.n	800442c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_UART_Receive_DMA+0x26>
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e05f      	b.n	800442e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Receive_DMA+0x38>
 8004378:	2302      	movs	r3, #2
 800437a:	e058      	b.n	800442e <HAL_UART_Receive_DMA+0xea>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2222      	movs	r2, #34	; 0x22
 800439a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	4a25      	ldr	r2, [pc, #148]	; (8004438 <HAL_UART_Receive_DMA+0xf4>)
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_UART_Receive_DMA+0xf8>)
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	4a23      	ldr	r2, [pc, #140]	; (8004440 <HAL_UART_Receive_DMA+0xfc>)
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	f7fd ff89 	bl	80022ec <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004406:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	080044fb 	.word	0x080044fb
 800443c:	08004563 	.word	0x08004563
 8004440:	0800457f 	.word	0x0800457f

08004444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044cc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044ce:	e002      	b.n	80044d6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ffb7 	bl	8004444 <HAL_UART_TxCpltCallback>
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff ffb2 	bl	8004456 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11e      	bne.n	8004554 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7fc f8a5 	bl	80006a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff79 	bl	8004468 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d108      	bne.n	80045c4 <UART_DMAError+0x46>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2200      	movs	r2, #0
 80045bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045be:	68b8      	ldr	r0, [r7, #8]
 80045c0:	f000 f827 	bl	8004612 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d108      	bne.n	80045f8 <UART_DMAError+0x7a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f000 f822 	bl	800463c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	f043 0210 	orr.w	r2, r3, #16
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004604:	68b8      	ldr	r0, [r7, #8]
 8004606:	f7ff ff38 	bl	800447a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004628:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004652:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
	...

08004678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046b2:	f023 030c 	bic.w	r3, r3, #12
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	430b      	orrs	r3, r1
 80046be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a52      	ldr	r2, [pc, #328]	; (8004824 <UART_SetConfig+0x1ac>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d14e      	bne.n	800477e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fd0c 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80046e4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009a      	lsls	r2, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <UART_SetConfig+0x1b0>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	0119      	lsls	r1, r3, #4
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f2f3 	udiv	r2, r2, r3
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <UART_SetConfig+0x1b0>)
 800471e:	fba3 0302 	umull	r0, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2064      	movs	r0, #100	; 0x64
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <UART_SetConfig+0x1b0>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4419      	add	r1, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fbb2 f2f3 	udiv	r2, r2, r3
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <UART_SetConfig+0x1b0>)
 8004756:	fba3 0302 	umull	r0, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2064      	movs	r0, #100	; 0x64
 800475e:	fb00 f303 	mul.w	r3, r0, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	3332      	adds	r3, #50	; 0x32
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <UART_SetConfig+0x1b0>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	440a      	add	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800477c:	e04d      	b.n	800481a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800477e:	f7fe fca9 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004782:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	4a23      	ldr	r2, [pc, #140]	; (8004828 <UART_SetConfig+0x1b0>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	0119      	lsls	r1, r3, #4
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009a      	lsls	r2, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <UART_SetConfig+0x1b0>)
 80047bc:	fba3 0302 	umull	r0, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2064      	movs	r0, #100	; 0x64
 80047c4:	fb00 f303 	mul.w	r3, r0, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	3332      	adds	r3, #50	; 0x32
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <UART_SetConfig+0x1b0>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047da:	4419      	add	r1, r3
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <UART_SetConfig+0x1b0>)
 80047f4:	fba3 0302 	umull	r0, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2064      	movs	r0, #100	; 0x64
 80047fc:	fb00 f303 	mul.w	r3, r0, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a08      	ldr	r2, [pc, #32]	; (8004828 <UART_SetConfig+0x1b0>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	440a      	add	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40013800 	.word	0x40013800
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	2500      	movs	r5, #0
 8004830:	4e0c      	ldr	r6, [pc, #48]	; (8004864 <__libc_init_array+0x38>)
 8004832:	4c0d      	ldr	r4, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004834:	1ba4      	subs	r4, r4, r6
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	42a5      	cmp	r5, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	f000 f82e 	bl	800489c <_init>
 8004840:	2500      	movs	r5, #0
 8004842:	4e0a      	ldr	r6, [pc, #40]	; (800486c <__libc_init_array+0x40>)
 8004844:	4c0a      	ldr	r4, [pc, #40]	; (8004870 <__libc_init_array+0x44>)
 8004846:	1ba4      	subs	r4, r4, r6
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	42a5      	cmp	r5, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004854:	4798      	blx	r3
 8004856:	3501      	adds	r5, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800485e:	4798      	blx	r3
 8004860:	3501      	adds	r5, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004908 	.word	0x08004908
 8004868:	08004908 	.word	0x08004908
 800486c:	08004908 	.word	0x08004908
 8004870:	0800490c 	.word	0x0800490c

08004874 <memcpy>:
 8004874:	b510      	push	{r4, lr}
 8004876:	1e43      	subs	r3, r0, #1
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	bd10      	pop	{r4, pc}
 8004880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	e7f7      	b.n	800487a <memcpy+0x6>

0800488a <memset>:
 800488a:	4603      	mov	r3, r0
 800488c:	4402      	add	r2, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	d100      	bne.n	8004894 <memset+0xa>
 8004892:	4770      	bx	lr
 8004894:	f803 1b01 	strb.w	r1, [r3], #1
 8004898:	e7f9      	b.n	800488e <memset+0x4>
	...

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
