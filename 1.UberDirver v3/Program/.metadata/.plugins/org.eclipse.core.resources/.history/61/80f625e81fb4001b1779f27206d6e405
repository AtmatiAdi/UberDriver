
KPro_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009314  08009314  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08009314  08009314  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009314  08009314  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800931c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000120  0800943c  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800943c  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e3d  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ce  00000000  00000000  00038f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  0003c560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  0003d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000216b5  00000000  00000000  0003e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b67  00000000  00000000  0005f975  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b4f5e  00000000  00000000  000714dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012643a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  001264b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009244 	.word	0x08009244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	08009244 	.word	0x08009244

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fae8 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8e6 	bl	80003a4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001d8:	f000 f876 	bl	80002c8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f8b2 	bl	8000344 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f008 fb78 	bl	80088d4 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(USB_RX_DIODE_GPIO_Port, USB_RX_DIODE_Pin);
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <main+0x3c>)
 80001ea:	f000 fe05 	bl	8000df8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(USB_TX_DIODE_GPIO_Port, USB_TX_DIODE_Pin);
 80001ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x3c>)
 80001f4:	f000 fe00 	bl	8000df8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f000 fb36 	bl	800086c <HAL_Delay>
	  HAL_GPIO_TogglePin(USB_RX_DIODE_GPIO_Port, USB_RX_DIODE_Pin);
 8000200:	e7f0      	b.n	80001e4 <main+0x1c>
 8000202:	bf00      	nop
 8000204:	48000c00 	.word	0x48000c00

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09e      	sub	sp, #120	; 0x78
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f009 f80c 	bl	8009234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	223c      	movs	r2, #60	; 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f008 fffe 	bl	8009234 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800023c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000240:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000258:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025e:	4618      	mov	r0, r3
 8000260:	f002 f8de 	bl	8002420 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f971 	bl	8000550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000280:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028a:	2101      	movs	r1, #1
 800028c:	4618      	mov	r0, r3
 800028e:	f002 ffcf 	bl	8003230 <HAL_RCC_ClockConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000298:	f000 f95a 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <SystemClock_Config+0xbc>)
 800029e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	4618      	mov	r0, r3
 80002ae:	f003 f9f7 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b8:	f000 f94a 	bl	8000550 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3778      	adds	r7, #120	; 0x78
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	00020001 	.word	0x00020001

080002c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_SPI2_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_SPI2_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_SPI2_Init+0x74>)
 80002d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_SPI2_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_SPI2_Init+0x74>)
 80002e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_SPI2_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_SPI2_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_SPI2_Init+0x74>)
 80002f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_SPI2_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_SPI2_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_SPI2_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_SPI2_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_SPI2_Init+0x74>)
 8000316:	2207      	movs	r2, #7
 8000318:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_SPI2_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_SPI2_Init+0x74>)
 8000322:	2208      	movs	r2, #8
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_SPI2_Init+0x74>)
 8000328:	f003 fb6a 	bl	8003a00 <HAL_SPI_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f90d 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200003b0 	.word	0x200003b0
 8000340:	40003800 	.word	0x40003800

08000344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_USART1_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <MX_USART1_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000350:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_USART1_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART1_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART1_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000388:	f003 fbe5 	bl	8003b56 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f8dd 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000414 	.word	0x20000414
 80003a0:	40013800 	.word	0x40013800

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08c      	sub	sp, #48	; 0x30
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ba:	4b5f      	ldr	r3, [pc, #380]	; (8000538 <MX_GPIO_Init+0x194>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a5e      	ldr	r2, [pc, #376]	; (8000538 <MX_GPIO_Init+0x194>)
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b5c      	ldr	r3, [pc, #368]	; (8000538 <MX_GPIO_Init+0x194>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ce:	61bb      	str	r3, [r7, #24]
 80003d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b59      	ldr	r3, [pc, #356]	; (8000538 <MX_GPIO_Init+0x194>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a58      	ldr	r2, [pc, #352]	; (8000538 <MX_GPIO_Init+0x194>)
 80003d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b56      	ldr	r3, [pc, #344]	; (8000538 <MX_GPIO_Init+0x194>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b53      	ldr	r3, [pc, #332]	; (8000538 <MX_GPIO_Init+0x194>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a52      	ldr	r2, [pc, #328]	; (8000538 <MX_GPIO_Init+0x194>)
 80003f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b50      	ldr	r3, [pc, #320]	; (8000538 <MX_GPIO_Init+0x194>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b4d      	ldr	r3, [pc, #308]	; (8000538 <MX_GPIO_Init+0x194>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a4c      	ldr	r2, [pc, #304]	; (8000538 <MX_GPIO_Init+0x194>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <MX_GPIO_Init+0x194>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b47      	ldr	r3, [pc, #284]	; (8000538 <MX_GPIO_Init+0x194>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a46      	ldr	r2, [pc, #280]	; (8000538 <MX_GPIO_Init+0x194>)
 8000420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b44      	ldr	r3, [pc, #272]	; (8000538 <MX_GPIO_Init+0x194>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000432:	4b41      	ldr	r3, [pc, #260]	; (8000538 <MX_GPIO_Init+0x194>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a40      	ldr	r2, [pc, #256]	; (8000538 <MX_GPIO_Init+0x194>)
 8000438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b3e      	ldr	r3, [pc, #248]	; (8000538 <MX_GPIO_Init+0x194>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG_D_Pin|SEG_B_Pin|SEG_4_Pin|SEG_A_Pin
 800044a:	2200      	movs	r2, #0
 800044c:	217c      	movs	r1, #124	; 0x7c
 800044e:	483b      	ldr	r0, [pc, #236]	; (800053c <MX_GPIO_Init+0x198>)
 8000450:	f000 fcba 	bl	8000dc8 <HAL_GPIO_WritePin>
                          |SEG_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(V_SEL_GPIO_Port, V_SEL_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4839      	ldr	r0, [pc, #228]	; (8000540 <MX_GPIO_Init+0x19c>)
 800045c:	f000 fcb4 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_5V_Pin|VOUT_EN_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2103      	movs	r1, #3
 8000464:	4837      	ldr	r0, [pc, #220]	; (8000544 <MX_GPIO_Init+0x1a0>)
 8000466:	f000 fcaf 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_E_Pin|SEG_G_Pin|SEG_F_Pin|SEG_H_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	210f      	movs	r1, #15
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fca9 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_TX_DIODE_Pin|USB_RX_DIODE_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7140 	mov.w	r1, #768	; 0x300
 800047c:	4832      	ldr	r0, [pc, #200]	; (8000548 <MX_GPIO_Init+0x1a4>)
 800047e:	f000 fca3 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_D_Pin SEG_B_Pin SEG_4_Pin SEG_A_Pin
                           SEG_C_Pin */
  GPIO_InitStruct.Pin = SEG_D_Pin|SEG_B_Pin|SEG_4_Pin|SEG_A_Pin
 8000482:	237c      	movs	r3, #124	; 0x7c
 8000484:	61fb      	str	r3, [r7, #28]
                          |SEG_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	4619      	mov	r1, r3
 8000498:	4828      	ldr	r0, [pc, #160]	; (800053c <MX_GPIO_Init+0x198>)
 800049a:	f000 fb1b 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : V_SEL_Pin */
  GPIO_InitStruct.Pin = V_SEL_Pin;
 800049e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(V_SEL_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	4619      	mov	r1, r3
 80004b6:	4822      	ldr	r0, [pc, #136]	; (8000540 <MX_GPIO_Init+0x19c>)
 80004b8:	f000 fb0c 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5V_Pin VOUT_EN_Pin */
  GPIO_InitStruct.Pin = LED_5V_Pin|VOUT_EN_Pin;
 80004bc:	2303      	movs	r3, #3
 80004be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004cc:	f107 031c 	add.w	r3, r7, #28
 80004d0:	4619      	mov	r1, r3
 80004d2:	481c      	ldr	r0, [pc, #112]	; (8000544 <MX_GPIO_Init+0x1a0>)
 80004d4:	f000 fafe 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_Pin SEG_G_Pin SEG_F_Pin SEG_H_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin|SEG_G_Pin|SEG_F_Pin|SEG_H_Pin;
 80004d8:	230f      	movs	r3, #15
 80004da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	4619      	mov	r1, r3
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 faef 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_Pin */
  GPIO_InitStruct.Pin = DET_Pin;
 80004f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DET_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	4619      	mov	r1, r3
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <MX_GPIO_Init+0x1a8>)
 800050c:	f000 fae2 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_TX_DIODE_Pin USB_RX_DIODE_Pin */
  GPIO_InitStruct.Pin = USB_TX_DIODE_Pin|USB_RX_DIODE_Pin;
 8000510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4619      	mov	r1, r3
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <MX_GPIO_Init+0x1a4>)
 800052a:	f000 fad3 	bl	8000ad4 <HAL_GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3730      	adds	r7, #48	; 0x30
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	48001000 	.word	0x48001000
 8000540:	48001400 	.word	0x48001400
 8000544:	48000800 	.word	0x48000800
 8000548:	48000c00 	.word	0x48000c00
 800054c:	48000400 	.word	0x48000400

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <HAL_SPI_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d128      	bne.n	800061c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_SPI_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800060c:	2305      	movs	r3, #5
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_SPI_MspInit+0x84>)
 8000618:	f000 fa5c 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40003800 	.word	0x40003800
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_UART_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d127      	bne.n	80006a2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_UART_MspInit+0x80>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <HAL_UART_MspInit+0x80>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_UART_MspInit+0x80>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_UART_MspInit+0x80>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_UART_MspInit+0x80>)
 8000670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_UART_MspInit+0x80>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000682:	2330      	movs	r3, #48	; 0x30
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000692:	2307      	movs	r3, #7
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_UART_MspInit+0x84>)
 800069e:	f000 fa19 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000800 	.word	0x48000800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f88e 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800071a:	f000 fc8b 	bl	8001034 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000960 	.word	0x20000960

08000728 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000784 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490e      	ldr	r1, [pc, #56]	; (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0b      	ldr	r4, [pc, #44]	; (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000776:	f7ff ffd7 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f008 fd37 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077e:	f7ff fd23 	bl	80001c8 <main>

08000782 <LoopForever>:

LoopForever:
    b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000784:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000790:	0800931c 	.word	0x0800931c
  ldr r2, =_sbss
 8000794:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000798:	20000c4c 	.word	0x20000c4c

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f94d 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fed0 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f965 	bl	8000aba <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f92d 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	20000498 	.word	0x20000498

08000854 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;  
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000498 	.word	0x20000498

0800086c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff ffee 	bl	8000854 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_Delay+0x40>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000892:	bf00      	nop
 8000894:	f7ff ffde 	bl	8000854 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e154      	b.n	8000d8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8146 	beq.w	8000d88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d00b      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	2b11      	cmp	r3, #17
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b12      	cmp	r3, #18
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	f003 0201 	and.w	r2, r3, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0xea>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d123      	bne.n	8000c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0203 	and.w	r2, r3, #3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80a0 	beq.w	8000d88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a57      	ldr	r2, [pc, #348]	; (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c60:	4a53      	ldr	r2, [pc, #332]	; (8000db0 <HAL_GPIO_Init+0x2dc>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c8a:	d019      	beq.n	8000cc0 <HAL_GPIO_Init+0x1ec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a49      	ldr	r2, [pc, #292]	; (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d013      	beq.n	8000cbc <HAL_GPIO_Init+0x1e8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a48      	ldr	r2, [pc, #288]	; (8000db8 <HAL_GPIO_Init+0x2e4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d00d      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a46      	ldr	r2, [pc, #280]	; (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_GPIO_Init+0x1dc>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e008      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e006      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e004      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd2:	4937      	ldr	r1, [pc, #220]	; (8000db0 <HAL_GPIO_Init+0x2dc>)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2e:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f47f aea3 	bne.w	8000ae4 <HAL_GPIO_Init+0x10>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	48000400 	.word	0x48000400
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43d9      	mvns	r1, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	400b      	ands	r3, r1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b08b      	sub	sp, #44	; 0x2c
 8000e30:	af06      	add	r7, sp, #24
 8000e32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0d0      	b.n	8000fe0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f007 fee0 	bl	8008c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fa15 	bl	8004294 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e04c      	b.n	8000f0a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3301      	adds	r3, #1
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3336      	adds	r3, #54	; 0x36
 8000eae:	4602      	mov	r2, r0
 8000eb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3338      	adds	r3, #56	; 0x38
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	333c      	adds	r3, #60	; 0x3c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3340      	adds	r3, #64	; 0x40
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	3301      	adds	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3ad      	bcc.n	8000e70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e044      	b.n	8000fa4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3b5      	bcc.n	8000f1a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	687e      	ldr	r6, [r7, #4]
 8000fb6:	466d      	mov	r5, sp
 8000fb8:	f106 0410 	add.w	r4, r6, #16
 8000fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	602b      	str	r3, [r5, #0]
 8000fc4:	1d33      	adds	r3, r6, #4
 8000fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f003 f97e 	bl	80042ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fe8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Start+0x16>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e016      	b.n	800102c <HAL_PCD_Start+0x44>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f92b 	bl	8004266 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001010:	2101      	movs	r1, #1
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f008 f8b2 	bl	800917c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f005 f903 	bl	8006228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f005 f8fc 	bl	800623e <USB_ReadInterrupts>
 8001046:	4603      	mov	r3, r0
 8001048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001050:	d102      	bne.n	8001058 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fb03 	bl	800165e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f8ee 	bl	800623e <USB_ReadInterrupts>
 8001062:	4603      	mov	r3, r0
 8001064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106c:	d112      	bne.n	8001094 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001080:	b292      	uxth	r2, r2
 8001082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f007 fe67 	bl	8008d5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800108c:	2100      	movs	r1, #0
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f8c7 	bl	8001222 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f005 f8d0 	bl	800623e <USB_ReadInterrupts>
 800109e:	4603      	mov	r3, r0
 80010a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010a8:	d10b      	bne.n	80010c2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010bc:	b292      	uxth	r2, r2
 80010be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 f8b9 	bl	800623e <USB_ReadInterrupts>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010d6:	d10b      	bne.n	80010f0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ea:	b292      	uxth	r2, r2
 80010ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 f8a2 	bl	800623e <USB_ReadInterrupts>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001104:	d126      	bne.n	8001154 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0204 	bic.w	r2, r2, #4
 8001118:	b292      	uxth	r2, r2
 800111a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	b292      	uxth	r2, r2
 8001132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f007 fe48 	bl	8008dcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800114e:	b292      	uxth	r2, r2
 8001150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f870 	bl	800623e <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001168:	d126      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0208 	orr.w	r2, r2, #8
 800117c:	b292      	uxth	r2, r2
 800117e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001194:	b292      	uxth	r2, r2
 8001196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0204 	orr.w	r2, r2, #4
 80011ac:	b292      	uxth	r2, r2
 80011ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f007 fdf0 	bl	8008d98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 f83e 	bl	800623e <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011cc:	d10e      	bne.n	80011ec <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011e0:	b292      	uxth	r2, r2
 80011e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f007 fda9 	bl	8008d3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 f824 	bl	800623e <USB_ReadInterrupts>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001200:	d10b      	bne.n	800121a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001214:	b292      	uxth	r2, r2
 8001216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_PCD_SetAddress+0x1a>
 8001238:	2302      	movs	r3, #2
 800123a:	e013      	b.n	8001264 <HAL_PCD_SetAddress+0x42>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f004 ffd3 	bl	8006200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4603      	mov	r3, r0
 800127c:	70fb      	strb	r3, [r7, #3]
 800127e:	460b      	mov	r3, r1
 8001280:	803b      	strh	r3, [r7, #0]
 8001282:	4613      	mov	r3, r2
 8001284:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800128a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0e      	bge.n	80012b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
 80012ae:	e00e      	b.n	80012ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0207 	and.w	r2, r3, #7
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012da:	883a      	ldrh	r2, [r7, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	78ba      	ldrb	r2, [r7, #2]
 80012e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d102      	bne.n	8001304 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_PCD_EP_Open+0xa6>
 800130e:	2302      	movs	r3, #2
 8001310:	e00e      	b.n	8001330 <HAL_PCD_EP_Open+0xc4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fff3 	bl	800430c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800132e:	7afb      	ldrb	r3, [r7, #11]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da0e      	bge.n	800136a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
 8001368:	e00e      	b.n	8001388 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	f003 0207 	and.w	r2, r3, #7
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_PCD_EP_Close+0x6a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e00e      	b.n	80013c0 <HAL_PCD_EP_Close+0x88>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fb19 	bl	80049e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	460b      	mov	r3, r1
 80013d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2200      	movs	r2, #0
 8001406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	b2da      	uxtb	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fccc 	bl	8004dc2 <USB_EPStartXfer>
 800142a:	e005      	b.n	8001438 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fcc5 	bl	8004dc2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0207 	and.w	r2, r3, #7
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001464:	681b      	ldr	r3, [r3, #0]
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2201      	movs	r2, #1
 80014bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fc71 	bl	8004dc2 <USB_EPStartXfer>
 80014e0:	e005      	b.n	80014ee <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6979      	ldr	r1, [r7, #20]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fc6a 	bl	8004dc2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0207 	and.w	r2, r3, #7
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	d901      	bls.n	8001516 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e03e      	b.n	8001594 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da0e      	bge.n	800153c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	705a      	strb	r2, [r3, #1]
 800153a:	e00c      	b.n	8001556 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_PCD_EP_SetStall+0x7e>
 8001572:	2302      	movs	r3, #2
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_SetStall+0x9c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fd3c 	bl	8006002 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f003 020f 	and.w	r2, r3, #15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d901      	bls.n	80015ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e040      	b.n	800163c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da0e      	bge.n	80015e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	705a      	strb	r2, [r3, #1]
 80015de:	e00e      	b.n	80015fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0207 	and.w	r2, r3, #7
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	b2da      	uxtb	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PCD_EP_ClrStall+0x82>
 800161a:	2302      	movs	r3, #2
 800161c:	e00e      	b.n	800163c <HAL_PCD_EP_ClrStall+0xa0>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fd39 	bl	80060a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b08e      	sub	sp, #56	; 0x38
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001666:	e2df      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001670:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800167e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8158 	bne.w	8001938 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d152      	bne.n	8001738 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800169e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a2:	81fb      	strh	r3, [r7, #14]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3328      	adds	r3, #40	; 0x28
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	3302      	adds	r3, #2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	441a      	add	r2, r3
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016f6:	2100      	movs	r1, #0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f007 fb06 	bl	8008d0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 828e 	beq.w	8001c28 <PCD_EP_ISR_Handler+0x5ca>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 8289 	bne.w	8001c28 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001736:	e277      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001748:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800174a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174e:	2b00      	cmp	r3, #0
 8001750:	d034      	beq.n	80017bc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	3306      	adds	r3, #6
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001790:	b29b      	uxth	r3, r3
 8001792:	f004 fda9 	bl	80062e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017a2:	4013      	ands	r3, r2
 80017a4:	823b      	strh	r3, [r7, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	8a3a      	ldrh	r2, [r7, #16]
 80017ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b0:	b292      	uxth	r2, r2
 80017b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f007 fa7b 	bl	8008cb0 <HAL_PCD_SetupStageCallback>
 80017ba:	e235      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f280 8231 	bge.w	8001c28 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017d2:	4013      	ands	r3, r2
 80017d4:	83bb      	strh	r3, [r7, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	8bba      	ldrh	r2, [r7, #28]
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	b292      	uxth	r2, r2
 80017e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	3306      	adds	r3, #6
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d019      	beq.n	800184c <PCD_EP_ISR_Handler+0x1ee>
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d015      	beq.n	800184c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	6959      	ldr	r1, [r3, #20]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001830:	b29b      	uxth	r3, r3
 8001832:	f004 fd59 	bl	80062e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	441a      	add	r2, r3
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f007 fa44 	bl	8008cd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d112      	bne.n	800189a <PCD_EP_ISR_Handler+0x23c>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800187e:	b29a      	uxth	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800188e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001892:	b29a      	uxth	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	801a      	strh	r2, [r3, #0]
 8001898:	e02f      	b.n	80018fa <PCD_EP_ISR_Handler+0x29c>
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b3e      	cmp	r3, #62	; 0x3e
 80018a0:	d813      	bhi.n	80018ca <PCD_EP_ISR_Handler+0x26c>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <PCD_EP_ISR_Handler+0x25e>
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	3301      	adds	r3, #1
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	b29b      	uxth	r3, r3
 80018c0:	029b      	lsls	r3, r3, #10
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	801a      	strh	r2, [r3, #0]
 80018c8:	e017      	b.n	80018fa <PCD_EP_ISR_Handler+0x29c>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <PCD_EP_ISR_Handler+0x286>
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	3b01      	subs	r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	029b      	lsls	r3, r3, #10
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190a:	827b      	strh	r3, [r7, #18]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001912:	827b      	strh	r3, [r7, #18]
 8001914:	8a7b      	ldrh	r3, [r7, #18]
 8001916:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800191a:	827b      	strh	r3, [r7, #18]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	8a7b      	ldrh	r3, [r7, #18]
 8001922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800192a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001932:	b29b      	uxth	r3, r3
 8001934:	8013      	strh	r3, [r2, #0]
 8001936:	e177      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800194a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800194e:	2b00      	cmp	r3, #0
 8001950:	f280 80ea 	bge.w	8001b28 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29a      	uxth	r2, r3
 8001966:	f640 738f 	movw	r3, #3983	; 0xf8f
 800196a:	4013      	ands	r3, r2
 800196c:	853b      	strh	r3, [r7, #40]	; 0x28
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800197e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001982:	b292      	uxth	r2, r2
 8001984:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001986:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d122      	bne.n	80019ea <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	3306      	adds	r3, #6
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019cc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80019ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8087 	beq.w	8001ae4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	6959      	ldr	r1, [r3, #20]
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	88da      	ldrh	r2, [r3, #6]
 80019e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019e4:	f004 fc80 	bl	80062e8 <USB_ReadPMA>
 80019e8:	e07c      	b.n	8001ae4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	78db      	ldrb	r3, [r3, #3]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d108      	bne.n	8001a04 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f4:	461a      	mov	r2, r3
 80019f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f923 	bl	8001c44 <HAL_PCD_EP_DB_Receive>
 80019fe:	4603      	mov	r3, r0
 8001a00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a02:	e06f      	b.n	8001ae4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	441a      	add	r2, r3
 8001a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d021      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	3302      	adds	r3, #2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a86:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02a      	beq.n	8001ae4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	6959      	ldr	r1, [r3, #20]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	891a      	ldrh	r2, [r3, #8]
 8001a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a9c:	f004 fc24 	bl	80062e8 <USB_ReadPMA>
 8001aa0:	e020      	b.n	8001ae4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3306      	adds	r3, #6
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001acc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	6959      	ldr	r1, [r3, #20]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	895a      	ldrh	r2, [r3, #10]
 8001ade:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ae0:	f004 fc02 	bl	80062e8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aea:	441a      	add	r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001af6:	441a      	add	r2, r3
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <PCD_EP_ISR_Handler+0x4b0>
 8001b04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d206      	bcs.n	8001b1c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f007 f8dd 	bl	8008cd4 <HAL_PCD_DataOutStageCallback>
 8001b1a:	e005      	b.n	8001b28 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 f94d 	bl	8004dc2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d07a      	beq.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b60:	843b      	strh	r3, [r7, #32]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	8c3b      	ldrh	r3, [r7, #32]
 8001b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	78db      	ldrb	r3, [r3, #3]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d108      	bne.n	8001b98 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d146      	bne.n	8001c1c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d141      	bne.n	8001c1c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	3302      	adds	r3, #2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	8bfb      	ldrh	r3, [r7, #30]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d906      	bls.n	8001bda <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	e002      	b.n	8001be0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f007 f88b 	bl	8008d0a <HAL_PCD_DataInStageCallback>
 8001bf4:	e018      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	8bfb      	ldrh	r3, [r7, #30]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	8bfb      	ldrh	r3, [r7, #30]
 8001c08:	441a      	add	r2, r3
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f8d4 	bl	8004dc2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001c1a:	e005      	b.n	8001c28 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f91b 	bl	8001e5e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f6ff ad17 	blt.w	8001668 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d07e      	beq.n	8001d5a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3302      	adds	r3, #2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	8b7b      	ldrh	r3, [r7, #26]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d306      	bcc.n	8001c9e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	8b7b      	ldrh	r3, [r7, #26]
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e002      	b.n	8001ca4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d123      	bne.n	8001cf4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc6:	833b      	strh	r3, [r7, #24]
 8001cc8:	8b3b      	ldrh	r3, [r7, #24]
 8001cca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cce:	833b      	strh	r3, [r7, #24]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	441a      	add	r2, r3
 8001cde:	8b3b      	ldrh	r3, [r7, #24]
 8001ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01f      	beq.n	8001d3e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	441a      	add	r2, r3
 8001d28:	8afb      	ldrh	r3, [r7, #22]
 8001d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d3e:	8b7b      	ldrh	r3, [r7, #26]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8087 	beq.w	8001e54 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	6959      	ldr	r1, [r3, #20]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	891a      	ldrh	r2, [r3, #8]
 8001d52:	8b7b      	ldrh	r3, [r7, #26]
 8001d54:	f004 fac8 	bl	80062e8 <USB_ReadPMA>
 8001d58:	e07c      	b.n	8001e54 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3306      	adds	r3, #6
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	8b7b      	ldrh	r3, [r7, #26]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d306      	bcc.n	8001d9c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	8b7b      	ldrh	r3, [r7, #26]
 8001d94:	1ad2      	subs	r2, r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	e002      	b.n	8001da2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d123      	bne.n	8001df2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc4:	83fb      	strh	r3, [r7, #30]
 8001dc6:	8bfb      	ldrh	r3, [r7, #30]
 8001dc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dcc:	83fb      	strh	r3, [r7, #30]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	441a      	add	r2, r3
 8001ddc:	8bfb      	ldrh	r3, [r7, #30]
 8001dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11f      	bne.n	8001e3c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	83bb      	strh	r3, [r7, #28]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e3c:	8b7b      	ldrh	r3, [r7, #26]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6959      	ldr	r1, [r3, #20]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	895a      	ldrh	r2, [r3, #10]
 8001e4e:	8b7b      	ldrh	r3, [r7, #26]
 8001e50:	f004 fa4a 	bl	80062e8 <USB_ReadPMA>
    }
  }

  return count;
 8001e54:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b092      	sub	sp, #72	; 0x48
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8132 	beq.w	80020dc <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d906      	bls.n	8001eba <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	e002      	b.n	8001ec0 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12c      	bne.n	8001f22 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f006 ff1b 	bl	8008d0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 822f 	beq.w	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	827b      	strh	r3, [r7, #18]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	441a      	add	r2, r3
 8001f0a:	8a7b      	ldrh	r3, [r7, #18]
 8001f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	8013      	strh	r3, [r2, #0]
 8001f20:	e20d      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01f      	beq.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 81e3 	bne.w	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f7e:	441a      	add	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f8a:	441a      	add	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d309      	bcc.n	8001fb0 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	1ad2      	subs	r2, r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	621a      	str	r2, [r3, #32]
 8001fae:	e014      	b.n	8001fda <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001fb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fc4:	e009      	b.n	8001fda <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d155      	bne.n	800208e <HAL_PCD_EP_DB_Transmit+0x230>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	011a      	lsls	r2, r3, #4
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4413      	add	r3, r2
 8002004:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	2b00      	cmp	r3, #0
 800200e:	d112      	bne.n	8002036 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800201a:	b29a      	uxth	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800202a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202e:	b29a      	uxth	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	e047      	b.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x268>
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	2b3e      	cmp	r3, #62	; 0x3e
 800203a:	d811      	bhi.n	8002060 <HAL_PCD_EP_DB_Transmit+0x202>
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3301      	adds	r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	b29b      	uxth	r3, r3
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	b29a      	uxth	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	e032      	b.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x268>
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <HAL_PCD_EP_DB_Transmit+0x218>
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	b29b      	uxth	r3, r3
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	b29b      	uxth	r3, r3
 800207e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002086:	b29a      	uxth	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	e01b      	b.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x268>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d117      	bne.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x268>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	4413      	add	r3, r2
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	011a      	lsls	r2, r3, #4
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	4413      	add	r3, r2
 80020b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	891a      	ldrh	r2, [r3, #8]
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f004 f8c2 	bl	800625e <USB_WritePMA>
 80020da:	e130      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	3306      	adds	r3, #6
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002104:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800210c:	429a      	cmp	r2, r3
 800210e:	d306      	bcc.n	800211e <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	e002      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12c      	bne.n	8002186 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f006 fde9 	bl	8008d0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80fd 	bne.w	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]
 8002184:	e0db      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11f      	bne.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 80b1 	bne.w	800233e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e2:	441a      	add	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ee:	441a      	add	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d309      	bcc.n	8002214 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	1ad2      	subs	r2, r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	e014      	b.n	800223e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800221c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002228:	e009      	b.n	800223e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d155      	bne.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x49a>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002260:	4413      	add	r3, r2
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	011a      	lsls	r2, r3, #4
 800226a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226c:	4413      	add	r3, r2
 800226e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002272:	643b      	str	r3, [r7, #64]	; 0x40
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	2b00      	cmp	r3, #0
 8002278:	d112      	bne.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x442>
 800227a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002284:	b29a      	uxth	r2, r3
 8002286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002298:	b29a      	uxth	r2, r3
 800229a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e044      	b.n	800232a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	2b3e      	cmp	r3, #62	; 0x3e
 80022a4:	d811      	bhi.n	80022ca <HAL_PCD_EP_DB_Transmit+0x46c>
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_PCD_EP_DB_Transmit+0x45e>
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	3301      	adds	r3, #1
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	b29b      	uxth	r3, r3
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e02f      	b.n	800232a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x482>
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	3b01      	subs	r3, #1
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	e018      	b.n	800232a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d114      	bne.n	800232a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	4413      	add	r3, r2
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	4413      	add	r3, r2
 800231c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	b29a      	uxth	r2, r3
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6959      	ldr	r1, [r3, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	895a      	ldrh	r2, [r3, #10]
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	b29b      	uxth	r3, r3
 800233a:	f003 ff90 	bl	800625e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002358:	823b      	strh	r3, [r7, #16]
 800235a:	8a3b      	ldrh	r3, [r7, #16]
 800235c:	f083 0310 	eor.w	r3, r3, #16
 8002360:	823b      	strh	r3, [r7, #16]
 8002362:	8a3b      	ldrh	r3, [r7, #16]
 8002364:	f083 0320 	eor.w	r3, r3, #32
 8002368:	823b      	strh	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	8a3b      	ldrh	r3, [r7, #16]
 800237a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800237e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238a:	b29b      	uxth	r3, r3
 800238c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3748      	adds	r7, #72	; 0x48
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	817b      	strh	r3, [r7, #10]
 80023a6:	4613      	mov	r3, r2
 80023a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e009      	b.n	80023e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023ce:	897a      	ldrh	r2, [r7, #10]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80023e2:	893b      	ldrh	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	80da      	strh	r2, [r3, #6]
 80023f6:	e00b      	b.n	8002410 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2201      	movs	r2, #1
 80023fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b29a      	uxth	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002426:	af00      	add	r7, sp, #0
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f000 bef4 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 816a 	beq.w	800271e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800244a:	4bb3      	ldr	r3, [pc, #716]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00c      	beq.n	8002470 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002456:	4bb0      	ldr	r3, [pc, #704]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d159      	bne.n	8002516 <HAL_RCC_OscConfig+0xf6>
 8002462:	4bad      	ldr	r3, [pc, #692]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246e:	d152      	bne.n	8002516 <HAL_RCC_OscConfig+0xf6>
 8002470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002474:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002484:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d102      	bne.n	80024a2 <HAL_RCC_OscConfig+0x82>
 800249c:	4b9e      	ldr	r3, [pc, #632]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0xae>
 80024a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024ca:	4b93      	ldr	r3, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024da:	fa92 f2a2 	rbit	r2, r2
 80024de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f042 0220 	orr.w	r2, r2, #32
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	f002 021f 	and.w	r2, r2, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 810c 	beq.w	800271c <HAL_RCC_OscConfig+0x2fc>
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8106 	bne.w	800271c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f000 be86 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x110>
 8002522:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7c      	ldr	r2, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e030      	b.n	8002592 <HAL_RCC_OscConfig+0x172>
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x134>
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a76      	ldr	r2, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b74      	ldr	r3, [pc, #464]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01e      	b.n	8002592 <HAL_RCC_OscConfig+0x172>
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x15a>
 8002560:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6c      	ldr	r2, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a69      	ldr	r2, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x172>
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a63      	ldr	r2, [pc, #396]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002592:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f023 020f 	bic.w	r2, r3, #15
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	495d      	ldr	r1, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d059      	beq.n	8002664 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe f950 	bl	8000854 <HAL_GetTick>
 80025b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ba:	f7fe f94b 	bl	8000854 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d902      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	f000 be29 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
 80025d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_OscConfig+0x1e2>
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x20e>
 8002602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002606:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800261e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002632:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002636:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800263a:	fa92 f2a2 	rbit	r2, r2
 800263e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002642:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ab      	beq.n	80025ba <HAL_RCC_OscConfig+0x19a>
 8002662:	e05c      	b.n	800271e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe f8f6 	bl	8000854 <HAL_GetTick>
 8002668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266e:	f7fe f8f1 	bl	8000854 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d902      	bls.n	8002684 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	f000 bdcf 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
 8002684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002688:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002698:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_OscConfig+0x296>
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x2c2>
 80026b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_RCC_OscConfig+0x2f8>)
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ee:	fa92 f2a2 	rbit	r2, r2
 80026f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 021f 	and.w	r2, r2, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ab      	bne.n	800266e <HAL_RCC_OscConfig+0x24e>
 8002716:	e002      	b.n	800271e <HAL_RCC_OscConfig+0x2fe>
 8002718:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 816f 	beq.w	8002a0c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800272e:	4bd0      	ldr	r3, [pc, #832]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800273a:	4bcd      	ldr	r3, [pc, #820]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d16c      	bne.n	8002820 <HAL_RCC_OscConfig+0x400>
 8002746:	4bca      	ldr	r3, [pc, #808]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d166      	bne.n	8002820 <HAL_RCC_OscConfig+0x400>
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002764:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0x362>
 800277c:	4bbc      	ldr	r3, [pc, #752]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e013      	b.n	80027aa <HAL_RCC_OscConfig+0x38a>
 8002782:	2302      	movs	r3, #2
 8002784:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800279a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027a6:	4bb2      	ldr	r3, [pc, #712]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2202      	movs	r2, #2
 80027ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027b4:	fa92 f2a2 	rbit	r2, r2
 80027b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027c0:	fab2 f282 	clz	r2, r2
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f002 021f 	and.w	r2, r2, #31
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_RCC_OscConfig+0x3cc>
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 bd1b 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4ba0      	ldr	r3, [pc, #640]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	21f8      	movs	r1, #248	; 0xf8
 80027fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002804:	fa91 f1a1 	rbit	r1, r1
 8002808:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800280c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002810:	fab1 f181 	clz	r1, r1
 8002814:	b2c9      	uxtb	r1, r1
 8002816:	408b      	lsls	r3, r1
 8002818:	4995      	ldr	r1, [pc, #596]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e0f5      	b.n	8002a0c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8085 	beq.w	8002936 <HAL_RCC_OscConfig+0x516>
 800282c:	2301      	movs	r3, #1
 800282e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800283e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800284c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	461a      	mov	r2, r3
 8002854:	2301      	movs	r3, #1
 8002856:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fd fffc 	bl	8000854 <HAL_GetTick>
 800285c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f7fd fff7 	bl	8000854 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f000 bcd5 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800288a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_OscConfig+0x488>
 80028a2:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	e013      	b.n	80028d0 <HAL_RCC_OscConfig+0x4b0>
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ba:	2302      	movs	r3, #2
 80028bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2202      	movs	r2, #2
 80028d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f002 021f 	and.w	r2, r2, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0af      	beq.n	8002862 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	21f8      	movs	r1, #248	; 0xf8
 8002912:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800291a:	fa91 f1a1 	rbit	r1, r1
 800291e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002922:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002926:	fab1 f181 	clz	r1, r1
 800292a:	b2c9      	uxtb	r1, r1
 800292c:	408b      	lsls	r3, r1
 800292e:	4950      	ldr	r1, [pc, #320]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e06a      	b.n	8002a0c <HAL_RCC_OscConfig+0x5ec>
 8002936:	2301      	movs	r3, #1
 8002938:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002948:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002956:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	461a      	mov	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fd ff77 	bl	8000854 <HAL_GetTick>
 8002966:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296c:	f7fd ff72 	bl	8000854 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d902      	bls.n	8002982 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	f000 bc50 	b.w	8003222 <HAL_RCC_OscConfig+0xe02>
 8002982:	2302      	movs	r3, #2
 8002984:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_OscConfig+0x592>
 80029ac:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	e013      	b.n	80029da <HAL_RCC_OscConfig+0x5ba>
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029c4:	2302      	movs	r3, #2
 80029c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x650>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2202      	movs	r2, #2
 80029dc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1af      	bne.n	800296c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80da 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d069      	beq.n	8002afa <HAL_RCC_OscConfig+0x6da>
 8002a26:	2301      	movs	r3, #1
 8002a28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x654>)
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fd ff00 	bl	8000854 <HAL_GetTick>
 8002a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a58:	e00e      	b.n	8002a78 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fd fefb 	bl	8000854 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d906      	bls.n	8002a78 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e3d9      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	10908120 	.word	0x10908120
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a8e:	2202      	movs	r2, #2
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ab8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4ba5      	ldr	r3, [pc, #660]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	6019      	str	r1, [r3, #0]
 8002ac6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f1a3 	rbit	r1, r3
 8002ad0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ad4:	6019      	str	r1, [r3, #0]
  return result;
 8002ad6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0b0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x63a>
 8002af8:	e06a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7b0>
 8002afa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fa93 f2a3 	rbit	r2, r3
 8002b0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b10:	601a      	str	r2, [r3, #0]
  return result;
 8002b12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x934>)
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7fd fe92 	bl	8000854 <HAL_GetTick>
 8002b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e009      	b.n	8002b4a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fd fe8d 	bl	8000854 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e36b      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8002b4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b66:	2202      	movs	r2, #2
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b7e:	2202      	movs	r2, #2
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f2a3 	rbit	r2, r3
 8002b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b92:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	6019      	str	r1, [r3, #0]
 8002b9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f1a3 	rbit	r1, r3
 8002ba8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bac:	6019      	str	r1, [r3, #0]
  return result;
 8002bae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1b2      	bne.n	8002b36 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8158 	beq.w	8002e90 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b57      	ldr	r3, [pc, #348]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a56      	ldr	r2, [pc, #344]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]
 8002bfe:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <HAL_RCC_OscConfig+0x938>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11a      	bne.n	8002c5a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c24:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <HAL_RCC_OscConfig+0x938>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x938>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c30:	f7fd fe10 	bl	8000854 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fd fe0b 	bl	8000854 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e2e9      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <HAL_RCC_OscConfig+0x938>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ef      	beq.n	8002c3a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x852>
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a39      	ldr	r2, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e02f      	b.n	8002cd2 <HAL_RCC_OscConfig+0x8b2>
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x876>
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002c8e:	f023 0304 	bic.w	r3, r3, #4
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	e01d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x8b2>
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x89a>
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x8b2>
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d06b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7fd fdba 	bl	8000854 <HAL_GetTick>
 8002ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fdb5 	bl	8000854 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e291      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8002cfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d02:	2202      	movs	r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d2c:	601a      	str	r2, [r3, #0]
  return result;
 8002d2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_OscConfig+0x93c>
 8002d48:	4b01      	ldr	r3, [pc, #4]	; (8002d50 <HAL_RCC_OscConfig+0x930>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x958>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	10908120 	.word	0x10908120
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d60:	2202      	movs	r2, #2
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4bbb      	ldr	r3, [pc, #748]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	6011      	str	r1, [r2, #0]
 8002d80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	fa92 f1a2 	rbit	r1, r2
 8002d8a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d8e:	6011      	str	r1, [r2, #0]
  return result;
 8002d90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d099      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x8c6>
 8002db2:	e063      	b.n	8002e7c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fd fd4e 	bl	8000854 <HAL_GetTick>
 8002db8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd fd49 	bl	8000854 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e225      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8002dd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dda:	2202      	movs	r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002df2:	2202      	movs	r2, #2
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e04:	601a      	str	r2, [r3, #0]
  return result;
 8002e06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_OscConfig+0xa06>
 8002e20:	4b90      	ldr	r3, [pc, #576]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	e00d      	b.n	8002e42 <HAL_RCC_OscConfig+0xa22>
 8002e26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	4b89      	ldr	r3, [pc, #548]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e46:	2102      	movs	r1, #2
 8002e48:	6011      	str	r1, [r2, #0]
 8002e4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fa92 f1a2 	rbit	r1, r2
 8002e54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e58:	6011      	str	r1, [r2, #0]
  return result;
 8002e5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f002 021f 	and.w	r2, r2, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1a0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4a76      	ldr	r2, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 81c2 	beq.w	8003220 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9c:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	f000 819c 	beq.w	80031e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f040 8114 	bne.w	80030de <HAL_RCC_OscConfig+0xcbe>
 8002eb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ece:	601a      	str	r2, [r3, #0]
  return result;
 8002ed0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ed4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd fcb2 	bl	8000854 <HAL_GetTick>
 8002ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef4:	e009      	b.n	8002f0a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fd fcad 	bl	8000854 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e18b      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8002f0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f22:	601a      	str	r2, [r3, #0]
  return result;
 8002f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_RCC_OscConfig+0xb24>
 8002f3e:	4b49      	ldr	r3, [pc, #292]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0xb5c>
 8002f44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f2a3 	rbit	r2, r3
 8002f58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	fa92 f1a2 	rbit	r1, r2
 8002f90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f94:	6011      	str	r1, [r2, #0]
  return result;
 8002f96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d19e      	bne.n	8002ef6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
 8002fd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fa93 f2a3 	rbit	r2, r3
 8002fe8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fec:	601a      	str	r2, [r3, #0]
  return result;
 8002fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ff2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ffe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	461a      	mov	r2, r3
 8003006:	2301      	movs	r3, #1
 8003008:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd fc23 	bl	8000854 <HAL_GetTick>
 800300e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003012:	e009      	b.n	8003028 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fd fc1e 	bl	8000854 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0fc      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8003028:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800302c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003040:	601a      	str	r2, [r3, #0]
  return result;
 8003042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003046:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_RCC_OscConfig+0xc48>
 800305c:	4b01      	ldr	r3, [pc, #4]	; (8003064 <HAL_RCC_OscConfig+0xc44>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e01e      	b.n	80030a0 <HAL_RCC_OscConfig+0xc80>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800306c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0xe0c>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fa92 f1a2 	rbit	r1, r2
 80030b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030b8:	6011      	str	r1, [r2, #0]
  return result;
 80030ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f042 0220 	orr.w	r2, r2, #32
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	f002 021f 	and.w	r2, r2, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d09b      	beq.n	8003014 <HAL_RCC_OscConfig+0xbf4>
 80030dc:	e0a0      	b.n	8003220 <HAL_RCC_OscConfig+0xe00>
 80030de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f6:	601a      	str	r2, [r3, #0]
  return result;
 80030f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003108:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fb9e 	bl	8000854 <HAL_GetTick>
 8003118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e009      	b.n	8003132 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fd fb99 	bl	8000854 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e077      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
 8003132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003150:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d102      	bne.n	800316c <HAL_RCC_OscConfig+0xd4c>
 8003166:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_RCC_OscConfig+0xe0c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	e01b      	b.n	80031a4 <HAL_RCC_OscConfig+0xd84>
 800316c:	f107 0320 	add.w	r3, r7, #32
 8003170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f107 0320 	add.w	r3, r7, #32
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_RCC_OscConfig+0xe0c>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f107 0210 	add.w	r2, r7, #16
 80031a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	f107 0210 	add.w	r2, r7, #16
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f107 020c 	add.w	r2, r7, #12
 80031bc:	6011      	str	r1, [r2, #0]
  return result;
 80031be:	f107 020c 	add.w	r2, r7, #12
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d19e      	bne.n	800311e <HAL_RCC_OscConfig+0xcfe>
 80031e0:	e01e      	b.n	8003220 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e018      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_RCC_OscConfig+0xe0c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	429a      	cmp	r2, r3
 8003208:	d108      	bne.n	800321c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800320a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800320e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b09e      	sub	sp, #120	; 0x78
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e162      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b90      	ldr	r3, [pc, #576]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d910      	bls.n	8003278 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b8d      	ldr	r3, [pc, #564]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 0207 	bic.w	r2, r3, #7
 800325e:	498b      	ldr	r1, [pc, #556]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e14a      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b82      	ldr	r3, [pc, #520]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	497f      	ldr	r1, [pc, #508]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80dc 	beq.w	800345c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d13c      	bne.n	8003326 <HAL_RCC_ClockConfig+0xf6>
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xa6>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	e00f      	b.n	80032f6 <HAL_RCC_ClockConfig+0xc6>
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
 80032e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e8:	663b      	str	r3, [r7, #96]	; 0x60
 80032ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80032fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d17b      	bne.n	800341a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0f3      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d13c      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x178>
 800332e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003332:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d102      	bne.n	8003358 <HAL_RCC_ClockConfig+0x128>
 8003352:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e00f      	b.n	8003378 <HAL_RCC_ClockConfig+0x148>
 8003358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
 8003366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
 800336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337c:	63ba      	str	r2, [r7, #56]	; 0x38
 800337e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d13a      	bne.n	800341a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b2      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
 80033a8:	2302      	movs	r3, #2
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1a0>
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e00d      	b.n	80033ec <HAL_RCC_ClockConfig+0x1bc>
 80033d0:	2302      	movs	r3, #2
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	2302      	movs	r3, #2
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2202      	movs	r2, #2
 80033ee:	61ba      	str	r2, [r7, #24]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	617a      	str	r2, [r7, #20]
  return result;
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	fab2 f282 	clz	r2, r2
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f042 0220 	orr.w	r2, r2, #32
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f002 021f 	and.w	r2, r2, #31
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f202 	lsl.w	r2, r1, r2
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e079      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	491a      	ldr	r1, [pc, #104]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fd fa12 	bl	8000854 <HAL_GetTick>
 8003430:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fd fa0e 	bl	8000854 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e061      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_RCC_ClockConfig+0x260>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d214      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e040      	b.n	800350e <HAL_RCC_ClockConfig+0x2de>
 800348c:	40022000 	.word	0x40022000
 8003490:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_ClockConfig+0x2e8>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	491a      	ldr	r1, [pc, #104]	; (8003518 <HAL_RCC_ClockConfig+0x2e8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x2e8>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4912      	ldr	r1, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034d2:	f000 f829 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034d6:	4601      	mov	r1, r0
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_RCC_ClockConfig+0x2e8>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e0:	22f0      	movs	r2, #240	; 0xf0
 80034e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	fa92 f2a2 	rbit	r2, r2
 80034ea:	60fa      	str	r2, [r7, #12]
  return result;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	fab2 f282 	clz	r2, r2
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	40d3      	lsrs	r3, r2
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_ClockConfig+0x2ec>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	fa21 f303 	lsr.w	r3, r1, r3
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_RCC_ClockConfig+0x2f0>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_ClockConfig+0x2f4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f960 	bl	80007cc <HAL_InitTick>
  
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3778      	adds	r7, #120	; 0x78
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	080092a0 	.word	0x080092a0
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b08b      	sub	sp, #44	; 0x2c
 800352c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d002      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x30>
 8003552:	2b08      	cmp	r3, #8
 8003554:	d003      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x36>
 8003556:	e03c      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800355a:	623b      	str	r3, [r7, #32]
      break;
 800355c:	e03c      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003564:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003568:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	607a      	str	r2, [r7, #4]
  return result;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	fab2 f282 	clz	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	40d3      	lsrs	r3, r2
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	220f      	movs	r2, #15
 800358c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	fa92 f2a2 	rbit	r2, r2
 8003594:	60fa      	str	r2, [r7, #12]
  return result;
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	fab2 f282 	clz	r2, r2
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	40d3      	lsrs	r3, r2
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035b0:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e004      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	623b      	str	r3, [r7, #32]
      break;
 80035d0:	e002      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80035d4:	623b      	str	r3, [r7, #32]
      break;
 80035d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	372c      	adds	r7, #44	; 0x2c
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	080092b8 	.word	0x080092b8
 80035f4:	080092c8 	.word	0x080092c8
 80035f8:	003d0900 	.word	0x003d0900
 80035fc:	007a1200 	.word	0x007a1200

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800361e:	f7ff ffef 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003622:	4601      	mov	r1, r0
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800362c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	fa92 f2a2 	rbit	r2, r2
 8003638:	603a      	str	r2, [r7, #0]
  return result;
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	fab2 f282 	clz	r2, r2
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	40d3      	lsrs	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	080092b0 	.word	0x080092b0

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003662:	f7ff ffcd 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003666:	4601      	mov	r1, r0
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003670:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003674:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	fa92 f2a2 	rbit	r2, r2
 800367c:	603a      	str	r2, [r7, #0]
  return result;
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	40d3      	lsrs	r3, r2
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_RCC_GetPCLK2Freq+0x40>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	080092b0 	.word	0x080092b0

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b092      	sub	sp, #72	; 0x48
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80d4 	beq.w	800386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c4:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	61d3      	str	r3, [r2, #28]
 80036dc:	4b48      	ldr	r3, [pc, #288]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b45      	ldr	r3, [pc, #276]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b42      	ldr	r3, [pc, #264]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a41      	ldr	r2, [pc, #260]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fd f8a5 	bl	8000854 <HAL_GetTick>
 800370a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fd f8a1 	bl	8000854 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b64      	cmp	r3, #100	; 0x64
 800371a:	d901      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e169      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8084 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003748:	429a      	cmp	r2, r3
 800374a:	d07c      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	461a      	mov	r2, r3
 8003776:	2301      	movs	r3, #1
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd f851 	bl	8000854 <HAL_GetTick>
 80037b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd f84d 	bl	8000854 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e113      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80037cc:	2302      	movs	r3, #2
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	2302      	movs	r3, #2
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	61fb      	str	r3, [r7, #28]
  return result;
 80037e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d108      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037fa:	4b01      	ldr	r3, [pc, #4]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	e00d      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	10908100 	.word	0x10908100
 800380c:	2302      	movs	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	4b78      	ldr	r3, [pc, #480]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2202      	movs	r2, #2
 800381e:	613a      	str	r2, [r7, #16]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	60fa      	str	r2, [r7, #12]
  return result;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0b7      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	496a      	ldr	r1, [pc, #424]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003858:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003878:	4b60      	ldr	r3, [pc, #384]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	495d      	ldr	r1, [pc, #372]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4956      	ldr	r1, [pc, #344]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b4:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	494e      	ldr	r1, [pc, #312]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f023 0210 	bic.w	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4947      	ldr	r1, [pc, #284]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038f0:	4b42      	ldr	r3, [pc, #264]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	493f      	ldr	r1, [pc, #252]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f023 0220 	bic.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	4930      	ldr	r1, [pc, #192]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4921      	ldr	r1, [pc, #132]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	4912      	ldr	r1, [pc, #72]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	490b      	ldr	r1, [pc, #44]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3748      	adds	r7, #72	; 0x48
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e09d      	b.n	8003b4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a22:	d009      	beq.n	8003a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fda8 	bl	80005a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a78:	d902      	bls.n	8003a80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	e002      	b.n	8003a86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a8e:	d007      	beq.n	8003aa0 <HAL_SPI_Init+0xa0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	ea42 0103 	orr.w	r1, r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 0204 	and.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e040      	b.n	8003bea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fc fd59 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2224      	movs	r2, #36	; 0x24
 8003b82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f82d 	bl	8003bf4 <UART_SetConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e022      	b.n	8003bea <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f9f3 	bl	8003f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa7a 	bl	80040dc <UART_CheckIdleState>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c22:	f023 030c 	bic.w	r3, r3, #12
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4aad      	ldr	r2, [pc, #692]	; (8003f24 <UART_SetConfig+0x330>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d121      	bne.n	8003cb8 <UART_SetConfig+0xc4>
 8003c74:	4bac      	ldr	r3, [pc, #688]	; (8003f28 <UART_SetConfig+0x334>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d817      	bhi.n	8003cb0 <UART_SetConfig+0xbc>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0x94>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003ca5 	.word	0x08003ca5
 8003c90:	08003cab 	.word	0x08003cab
 8003c94:	08003c9f 	.word	0x08003c9f
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e0b2      	b.n	8003e04 <UART_SetConfig+0x210>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e0af      	b.n	8003e04 <UART_SetConfig+0x210>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e0ac      	b.n	8003e04 <UART_SetConfig+0x210>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e0a9      	b.n	8003e04 <UART_SetConfig+0x210>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	bf00      	nop
 8003cb6:	e0a5      	b.n	8003e04 <UART_SetConfig+0x210>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a9b      	ldr	r2, [pc, #620]	; (8003f2c <UART_SetConfig+0x338>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d123      	bne.n	8003d0a <UART_SetConfig+0x116>
 8003cc2:	4b99      	ldr	r3, [pc, #612]	; (8003f28 <UART_SetConfig+0x334>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d012      	beq.n	8003cf6 <UART_SetConfig+0x102>
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d802      	bhi.n	8003cdc <UART_SetConfig+0xe8>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <UART_SetConfig+0xf6>
 8003cda:	e012      	b.n	8003d02 <UART_SetConfig+0x10e>
 8003cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce0:	d00c      	beq.n	8003cfc <UART_SetConfig+0x108>
 8003ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce6:	d003      	beq.n	8003cf0 <UART_SetConfig+0xfc>
 8003ce8:	e00b      	b.n	8003d02 <UART_SetConfig+0x10e>
 8003cea:	2300      	movs	r3, #0
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e089      	b.n	8003e04 <UART_SetConfig+0x210>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e086      	b.n	8003e04 <UART_SetConfig+0x210>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e083      	b.n	8003e04 <UART_SetConfig+0x210>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e080      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d02:	2310      	movs	r3, #16
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	bf00      	nop
 8003d08:	e07c      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a88      	ldr	r2, [pc, #544]	; (8003f30 <UART_SetConfig+0x33c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d123      	bne.n	8003d5c <UART_SetConfig+0x168>
 8003d14:	4b84      	ldr	r3, [pc, #528]	; (8003f28 <UART_SetConfig+0x334>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d20:	d012      	beq.n	8003d48 <UART_SetConfig+0x154>
 8003d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d26:	d802      	bhi.n	8003d2e <UART_SetConfig+0x13a>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <UART_SetConfig+0x148>
 8003d2c:	e012      	b.n	8003d54 <UART_SetConfig+0x160>
 8003d2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d32:	d00c      	beq.n	8003d4e <UART_SetConfig+0x15a>
 8003d34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d38:	d003      	beq.n	8003d42 <UART_SetConfig+0x14e>
 8003d3a:	e00b      	b.n	8003d54 <UART_SetConfig+0x160>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e060      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d42:	2302      	movs	r3, #2
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e05d      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e05a      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e057      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d54:	2310      	movs	r3, #16
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	bf00      	nop
 8003d5a:	e053      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a74      	ldr	r2, [pc, #464]	; (8003f34 <UART_SetConfig+0x340>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d123      	bne.n	8003dae <UART_SetConfig+0x1ba>
 8003d66:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <UART_SetConfig+0x334>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d012      	beq.n	8003d9a <UART_SetConfig+0x1a6>
 8003d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d78:	d802      	bhi.n	8003d80 <UART_SetConfig+0x18c>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <UART_SetConfig+0x19a>
 8003d7e:	e012      	b.n	8003da6 <UART_SetConfig+0x1b2>
 8003d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d84:	d00c      	beq.n	8003da0 <UART_SetConfig+0x1ac>
 8003d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d8a:	d003      	beq.n	8003d94 <UART_SetConfig+0x1a0>
 8003d8c:	e00b      	b.n	8003da6 <UART_SetConfig+0x1b2>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e037      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d94:	2302      	movs	r3, #2
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e034      	b.n	8003e04 <UART_SetConfig+0x210>
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e031      	b.n	8003e04 <UART_SetConfig+0x210>
 8003da0:	2308      	movs	r3, #8
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e02e      	b.n	8003e04 <UART_SetConfig+0x210>
 8003da6:	2310      	movs	r3, #16
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	bf00      	nop
 8003dac:	e02a      	b.n	8003e04 <UART_SetConfig+0x210>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a61      	ldr	r2, [pc, #388]	; (8003f38 <UART_SetConfig+0x344>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d123      	bne.n	8003e00 <UART_SetConfig+0x20c>
 8003db8:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <UART_SetConfig+0x334>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d012      	beq.n	8003dec <UART_SetConfig+0x1f8>
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dca:	d802      	bhi.n	8003dd2 <UART_SetConfig+0x1de>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <UART_SetConfig+0x1ec>
 8003dd0:	e012      	b.n	8003df8 <UART_SetConfig+0x204>
 8003dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dd6:	d00c      	beq.n	8003df2 <UART_SetConfig+0x1fe>
 8003dd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ddc:	d003      	beq.n	8003de6 <UART_SetConfig+0x1f2>
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x204>
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e00e      	b.n	8003e04 <UART_SetConfig+0x210>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e00b      	b.n	8003e04 <UART_SetConfig+0x210>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e008      	b.n	8003e04 <UART_SetConfig+0x210>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e005      	b.n	8003e04 <UART_SetConfig+0x210>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	bf00      	nop
 8003dfe:	e001      	b.n	8003e04 <UART_SetConfig+0x210>
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d15d      	bne.n	8003eca <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8003e0e:	7ffb      	ldrb	r3, [r7, #31]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d828      	bhi.n	8003e66 <UART_SetConfig+0x272>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x228>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff fbea 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8003e44:	61b8      	str	r0, [r7, #24]
        break;
 8003e46:	e013      	b.n	8003e70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7ff fc08 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8003e4c:	61b8      	str	r0, [r7, #24]
        break;
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <UART_SetConfig+0x348>)
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e00c      	b.n	8003e70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7ff fb67 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8003e5a:	61b8      	str	r0, [r7, #24]
        break;
 8003e5c:	e008      	b.n	8003e70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61bb      	str	r3, [r7, #24]
        break;
 8003e64:	e004      	b.n	8003e70 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8085 	beq.w	8003f82 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	005a      	lsls	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	441a      	add	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d916      	bls.n	8003ec4 <UART_SetConfig+0x2d0>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d212      	bcs.n	8003ec4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f023 030f 	bic.w	r3, r3, #15
 8003ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	89fa      	ldrh	r2, [r7, #14]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e05e      	b.n	8003f82 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77bb      	strb	r3, [r7, #30]
 8003ec8:	e05b      	b.n	8003f82 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d837      	bhi.n	8003f40 <UART_SetConfig+0x34c>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x2e4>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f41 	.word	0x08003f41
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f41 	.word	0x08003f41
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7ff fb8c 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61b8      	str	r0, [r7, #24]
        break;
 8003f02:	e022      	b.n	8003f4a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7ff fbaa 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e01e      	b.n	8003f4a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <UART_SetConfig+0x348>)
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e01b      	b.n	8003f4a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7ff fb09 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8003f16:	61b8      	str	r0, [r7, #24]
        break;
 8003f18:	e017      	b.n	8003f4a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e013      	b.n	8003f4a <UART_SetConfig+0x356>
 8003f22:	bf00      	nop
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40004800 	.word	0x40004800
 8003f34:	40004c00 	.word	0x40004c00
 8003f38:	40005000 	.word	0x40005000
 8003f3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	77bb      	strb	r3, [r7, #30]
        break;
 8003f48:	bf00      	nop
    }

    if (pclk != 0U)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085a      	lsrs	r2, r3, #1
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d908      	bls.n	8003f7e <UART_SetConfig+0x38a>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d204      	bcs.n	8003f7e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e001      	b.n	8003f82 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f8e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01a      	beq.n	80040ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004096:	d10a      	bne.n	80040ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fc fbb2 	bl	8000854 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10e      	bne.n	800411e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f82d 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e023      	b.n	8004166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b04      	cmp	r3, #4
 800412a:	d10e      	bne.n	800414a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800412c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f817 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e00d      	b.n	8004166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417e:	e05e      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d05a      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7fc fb64 	bl	8000854 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <UART_WaitOnFlagUntilTimeout+0x30>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11b      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e043      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02c      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f2:	d124      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800420c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e00f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d091      	beq.n	8004180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004276:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800427a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800429c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ca:	b084      	sub	sp, #16
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	f107 0014 	add.w	r0, r7, #20
 80042d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	b004      	add	sp, #16
 800430a:	4770      	bx	lr

0800430c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800430c:	b480      	push	{r7}
 800430e:	b09b      	sub	sp, #108	; 0x6c
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d81f      	bhi.n	800437e <USB_ActivateEndpoint+0x72>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <USB_ActivateEndpoint+0x38>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004355 	.word	0x08004355
 8004348:	08004371 	.word	0x08004371
 800434c:	08004387 	.word	0x08004387
 8004350:	08004363 	.word	0x08004363
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004354:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004360:	e012      	b.n	8004388 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004362:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004366:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800436a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800436e:	e00b      	b.n	8004388 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004370:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004378:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800437c:	e004      	b.n	8004388 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004384:	e000      	b.n	8004388 <USB_ActivateEndpoint+0x7c>
      break;
 8004386:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	441a      	add	r2, r3
 80043dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	7b1b      	ldrb	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f040 8149 	bne.w	8004690 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8084 	beq.w	8004510 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	88db      	ldrh	r3, [r3, #6]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	81fb      	strh	r3, [r7, #14]
 800444a:	89fb      	ldrh	r3, [r7, #14]
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01b      	beq.n	800448c <USB_ActivateEndpoint+0x180>
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	81bb      	strh	r3, [r7, #12]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	89bb      	ldrh	r3, [r7, #12]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	78db      	ldrb	r3, [r3, #3]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d020      	beq.n	80044d6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044aa:	813b      	strh	r3, [r7, #8]
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	f083 0320 	eor.w	r3, r3, #32
 80044b2:	813b      	strh	r3, [r7, #8]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	893b      	ldrh	r3, [r7, #8]
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
 80044d4:	e27f      	b.n	80049d6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	441a      	add	r2, r3
 80044f8:	897b      	ldrh	r3, [r7, #10]
 80044fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450a:	b29b      	uxth	r3, r3
 800450c:	8013      	strh	r3, [r2, #0]
 800450e:	e262      	b.n	80049d6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	4413      	add	r3, r2
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	011a      	lsls	r2, r3, #4
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	4413      	add	r3, r2
 800452e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	88db      	ldrh	r3, [r3, #6]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	4413      	add	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011a      	lsls	r2, r3, #4
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	4413      	add	r3, r2
 8004562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d112      	bne.n	8004596 <USB_ActivateEndpoint+0x28a>
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800457a:	b29a      	uxth	r2, r3
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458e:	b29a      	uxth	r2, r3
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	e02f      	b.n	80045f6 <USB_ActivateEndpoint+0x2ea>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b3e      	cmp	r3, #62	; 0x3e
 800459c:	d813      	bhi.n	80045c6 <USB_ActivateEndpoint+0x2ba>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	663b      	str	r3, [r7, #96]	; 0x60
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <USB_ActivateEndpoint+0x2ac>
 80045b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b4:	3301      	adds	r3, #1
 80045b6:	663b      	str	r3, [r7, #96]	; 0x60
 80045b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	029b      	lsls	r3, r3, #10
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e017      	b.n	80045f6 <USB_ActivateEndpoint+0x2ea>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	663b      	str	r3, [r7, #96]	; 0x60
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <USB_ActivateEndpoint+0x2d4>
 80045da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045dc:	3b01      	subs	r3, #1
 80045de:	663b      	str	r3, [r7, #96]	; 0x60
 80045e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	83fb      	strh	r3, [r7, #30]
 8004604:	8bfb      	ldrh	r3, [r7, #30]
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01b      	beq.n	8004646 <USB_ActivateEndpoint+0x33a>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	83bb      	strh	r3, [r7, #28]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	8bbb      	ldrh	r3, [r7, #28]
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	837b      	strh	r3, [r7, #26]
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004664:	837b      	strh	r3, [r7, #26]
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800466c:	837b      	strh	r3, [r7, #26]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	8b7b      	ldrh	r3, [r7, #26]
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
 800468e:	e1a2      	b.n	80049d6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	441a      	add	r2, r3
 80046b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046dc:	4413      	add	r3, r2
 80046de:	65bb      	str	r3, [r7, #88]	; 0x58
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ee:	657b      	str	r3, [r7, #84]	; 0x54
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	891b      	ldrh	r3, [r3, #8]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004710:	4413      	add	r3, r2
 8004712:	653b      	str	r3, [r7, #80]	; 0x50
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	011a      	lsls	r2, r3, #4
 800471a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471c:	4413      	add	r3, r2
 800471e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	895b      	ldrh	r3, [r3, #10]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f040 8091 	bne.w	8004860 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800474c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800474e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01b      	beq.n	800478e <USB_ActivateEndpoint+0x482>
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800477a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478a:	b29b      	uxth	r3, r3
 800478c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	873b      	strh	r3, [r7, #56]	; 0x38
 800479c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01b      	beq.n	80047de <USB_ActivateEndpoint+0x4d2>
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004804:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	867b      	strh	r3, [r7, #50]	; 0x32
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
 800485e:	e0ba      	b.n	80049d6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004870:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01d      	beq.n	80048b8 <USB_ActivateEndpoint+0x5ac>
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	441a      	add	r2, r3
 80048a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01d      	beq.n	8004910 <USB_ActivateEndpoint+0x604>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	78db      	ldrb	r3, [r3, #3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d024      	beq.n	8004962 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004932:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004936:	f083 0320 	eor.w	r3, r3, #32
 800493a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]
 8004960:	e01d      	b.n	800499e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80049d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049da:	4618      	mov	r0, r3
 80049dc:	376c      	adds	r7, #108	; 0x6c
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop

080049e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b08d      	sub	sp, #52	; 0x34
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	7b1b      	ldrb	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 808e 	bne.w	8004b18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d044      	beq.n	8004a8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	81bb      	strh	r3, [r7, #12]
 8004a12:	89bb      	ldrh	r3, [r7, #12]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01b      	beq.n	8004a54 <USB_DeactivateEndpoint+0x6c>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	817b      	strh	r3, [r7, #10]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	813b      	strh	r3, [r7, #8]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
 8004a8c:	e192      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	827b      	strh	r3, [r7, #18]
 8004a9c:	8a7b      	ldrh	r3, [r7, #18]
 8004a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <USB_DeactivateEndpoint+0xf6>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	823b      	strh	r3, [r7, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8a3b      	ldrh	r3, [r7, #16]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	81fb      	strh	r3, [r7, #14]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e14d      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 80a5 	bne.w	8004c6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	843b      	strh	r3, [r7, #32]
 8004b30:	8c3b      	ldrh	r3, [r7, #32]
 8004b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01b      	beq.n	8004b72 <USB_DeactivateEndpoint+0x18a>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	83fb      	strh	r3, [r7, #30]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	83bb      	strh	r3, [r7, #28]
 8004b80:	8bbb      	ldrh	r3, [r7, #28]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01b      	beq.n	8004bc2 <USB_DeactivateEndpoint+0x1da>
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	837b      	strh	r3, [r7, #26]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	8b7b      	ldrh	r3, [r7, #26]
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	833b      	strh	r3, [r7, #24]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	441a      	add	r2, r3
 8004be4:	8b3b      	ldrh	r3, [r7, #24]
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	82fb      	strh	r3, [r7, #22]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8afb      	ldrh	r3, [r7, #22]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	82bb      	strh	r3, [r7, #20]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8abb      	ldrh	r3, [r7, #20]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e0a3      	b.n	8004db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <USB_DeactivateEndpoint+0x2d4>
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <USB_DeactivateEndpoint+0x324>
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3734      	adds	r7, #52	; 0x34
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b0c4      	sub	sp, #272	; 0x110
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	6018      	str	r0, [r3, #0]
 8004dcc:	463b      	mov	r3, r7
 8004dce:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	f040 8557 	bne.w	800588a <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ddc:	463b      	mov	r3, r7
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d905      	bls.n	8004df8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004df6:	e004      	b.n	8004e02 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	7b1b      	ldrb	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d12c      	bne.n	8004e66 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	463b      	mov	r3, r7
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	88da      	ldrh	r2, [r3, #6]
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	1d38      	adds	r0, r7, #4
 8004e20:	6800      	ldr	r0, [r0, #0]
 8004e22:	f001 fa1c 	bl	800625e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	011a      	lsls	r2, r3, #4
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e4e:	f107 0310 	add.w	r3, r7, #16
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	f000 bcdd 	b.w	8005820 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	78db      	ldrb	r3, [r3, #3]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f040 8347 	bne.w	8005500 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	f240 82eb 	bls.w	800545a <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8159 	beq.w	80051a8 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ef6:	1d3b      	adds	r3, r7, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d164      	bne.n	8004fd0 <USB_EPStartXfer+0x20e>
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	4413      	add	r3, r2
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d112      	bne.n	8004f5e <USB_EPStartXfer+0x19c>
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e054      	b.n	8005008 <USB_EPStartXfer+0x246>
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f62:	2b3e      	cmp	r3, #62	; 0x3e
 8004f64:	d817      	bhi.n	8004f96 <USB_EPStartXfer+0x1d4>
 8004f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <USB_EPStartXfer+0x1c4>
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e038      	b.n	8005008 <USB_EPStartXfer+0x246>
 8004f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <USB_EPStartXfer+0x1f4>
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e01b      	b.n	8005008 <USB_EPStartXfer+0x246>
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d116      	bne.n	8005008 <USB_EPStartXfer+0x246>
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	4413      	add	r3, r2
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	011a      	lsls	r2, r3, #4
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005002:	b29a      	uxth	r2, r3
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	895b      	ldrh	r3, [r3, #10]
 800500e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6959      	ldr	r1, [r3, #20]
 8005018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501c:	b29b      	uxth	r3, r3
 800501e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005022:	1d38      	adds	r0, r7, #4
 8005024:	6800      	ldr	r0, [r0, #0]
 8005026:	f001 f91a 	bl	800625e <USB_WritePMA>
            ep->xfer_buff += len;
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005034:	441a      	add	r2, r3
 8005036:	463b      	mov	r3, r7
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d909      	bls.n	8005060 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	621a      	str	r2, [r3, #32]
 800505e:	e008      	b.n	8005072 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d164      	bne.n	8005146 <USB_EPStartXfer+0x384>
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	011a      	lsls	r2, r3, #4
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d112      	bne.n	80050d4 <USB_EPStartXfer+0x312>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e057      	b.n	8005184 <USB_EPStartXfer+0x3c2>
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	2b3e      	cmp	r3, #62	; 0x3e
 80050da:	d817      	bhi.n	800510c <USB_EPStartXfer+0x34a>
 80050dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <USB_EPStartXfer+0x33a>
 80050f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050f6:	3301      	adds	r3, #1
 80050f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005100:	b29b      	uxth	r3, r3
 8005102:	029b      	lsls	r3, r3, #10
 8005104:	b29a      	uxth	r2, r3
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e03b      	b.n	8005184 <USB_EPStartXfer+0x3c2>
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <USB_EPStartXfer+0x36a>
 8005122:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005126:	3b01      	subs	r3, #1
 8005128:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800512c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005130:	b29b      	uxth	r3, r3
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	b29b      	uxth	r3, r3
 8005136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513e:	b29a      	uxth	r2, r3
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	e01e      	b.n	8005184 <USB_EPStartXfer+0x3c2>
 8005146:	463b      	mov	r3, r7
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d119      	bne.n	8005184 <USB_EPStartXfer+0x3c2>
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	4413      	add	r3, r2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	011a      	lsls	r2, r3, #4
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	4413      	add	r3, r2
 8005174:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517e:	b29a      	uxth	r2, r3
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	891b      	ldrh	r3, [r3, #8]
 800518a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6959      	ldr	r1, [r3, #20]
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	b29b      	uxth	r3, r3
 800519a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800519e:	1d38      	adds	r0, r7, #4
 80051a0:	6800      	ldr	r0, [r0, #0]
 80051a2:	f001 f85c 	bl	800625e <USB_WritePMA>
 80051a6:	e33b      	b.n	8005820 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d164      	bne.n	800527c <USB_EPStartXfer+0x4ba>
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	4413      	add	r3, r2
 80051c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ca:	463b      	mov	r3, r7
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	011a      	lsls	r2, r3, #4
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
 80051dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d112      	bne.n	800520a <USB_EPStartXfer+0x448>
 80051e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005202:	b29a      	uxth	r2, r3
 8005204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e057      	b.n	80052ba <USB_EPStartXfer+0x4f8>
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	2b3e      	cmp	r3, #62	; 0x3e
 8005210:	d817      	bhi.n	8005242 <USB_EPStartXfer+0x480>
 8005212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <USB_EPStartXfer+0x470>
 8005228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522c:	3301      	adds	r3, #1
 800522e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29a      	uxth	r2, r3
 800523c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e03b      	b.n	80052ba <USB_EPStartXfer+0x4f8>
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800524c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <USB_EPStartXfer+0x4a0>
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525c:	3b01      	subs	r3, #1
 800525e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	b29b      	uxth	r3, r3
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005274:	b29a      	uxth	r2, r3
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e01e      	b.n	80052ba <USB_EPStartXfer+0x4f8>
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d119      	bne.n	80052ba <USB_EPStartXfer+0x4f8>
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529a:	4413      	add	r3, r2
 800529c:	657b      	str	r3, [r7, #84]	; 0x54
 800529e:	463b      	mov	r3, r7
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	011a      	lsls	r2, r3, #4
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ae:	653b      	str	r3, [r7, #80]	; 0x50
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	891b      	ldrh	r3, [r3, #8]
 80052c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052d4:	1d38      	adds	r0, r7, #4
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	f000 ffc1 	bl	800625e <USB_WritePMA>
            ep->xfer_buff += len;
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e6:	441a      	add	r2, r3
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d909      	bls.n	8005312 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	621a      	str	r2, [r3, #32]
 8005310:	e008      	b.n	8005324 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d164      	bne.n	80053fe <USB_EPStartXfer+0x63c>
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	4413      	add	r3, r2
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	011a      	lsls	r2, r3, #4
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	4413      	add	r3, r2
 8005358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d112      	bne.n	800538c <USB_EPStartXfer+0x5ca>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005370:	b29a      	uxth	r2, r3
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005384:	b29a      	uxth	r2, r3
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e054      	b.n	8005436 <USB_EPStartXfer+0x674>
 800538c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005390:	2b3e      	cmp	r3, #62	; 0x3e
 8005392:	d817      	bhi.n	80053c4 <USB_EPStartXfer+0x602>
 8005394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <USB_EPStartXfer+0x5f2>
 80053aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ae:	3301      	adds	r3, #1
 80053b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e038      	b.n	8005436 <USB_EPStartXfer+0x674>
 80053c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <USB_EPStartXfer+0x622>
 80053da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053de:	3b01      	subs	r3, #1
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	029b      	lsls	r3, r3, #10
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e01b      	b.n	8005436 <USB_EPStartXfer+0x674>
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d116      	bne.n	8005436 <USB_EPStartXfer+0x674>
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005410:	b29b      	uxth	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005416:	4413      	add	r3, r2
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	011a      	lsls	r2, r3, #4
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	4413      	add	r3, r2
 8005426:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800542a:	643b      	str	r3, [r7, #64]	; 0x40
 800542c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005430:	b29a      	uxth	r2, r3
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005436:	463b      	mov	r3, r7
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	895b      	ldrh	r3, [r3, #10]
 800543c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544a:	b29b      	uxth	r3, r3
 800544c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005450:	1d38      	adds	r0, r7, #4
 8005452:	6800      	ldr	r0, [r0, #0]
 8005454:	f000 ff03 	bl	800625e <USB_WritePMA>
 8005458:	e1e2      	b.n	8005820 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800545a:	463b      	mov	r3, r7
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	463b      	mov	r3, r7
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054a8:	1d3b      	adds	r3, r7, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	1d3b      	adds	r3, r7, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054bc:	4413      	add	r3, r2
 80054be:	663b      	str	r3, [r7, #96]	; 0x60
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011a      	lsls	r2, r3, #4
 80054c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	891b      	ldrh	r3, [r3, #8]
 80054e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6959      	ldr	r1, [r3, #20]
 80054ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054f6:	1d38      	adds	r0, r7, #4
 80054f8:	6800      	ldr	r0, [r0, #0]
 80054fa:	f000 feb0 	bl	800625e <USB_WritePMA>
 80054fe:	e18f      	b.n	8005820 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 808f 	beq.w	800563a <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	67bb      	str	r3, [r7, #120]	; 0x78
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d164      	bne.n	80055f6 <USB_EPStartXfer+0x834>
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	673b      	str	r3, [r7, #112]	; 0x70
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005540:	4413      	add	r3, r2
 8005542:	673b      	str	r3, [r7, #112]	; 0x70
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554e:	4413      	add	r3, r2
 8005550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d112      	bne.n	8005584 <USB_EPStartXfer+0x7c2>
 800555e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005568:	b29a      	uxth	r2, r3
 800556a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557c:	b29a      	uxth	r2, r3
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	801a      	strh	r2, [r3, #0]
 8005582:	e054      	b.n	800562e <USB_EPStartXfer+0x86c>
 8005584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005588:	2b3e      	cmp	r3, #62	; 0x3e
 800558a:	d817      	bhi.n	80055bc <USB_EPStartXfer+0x7fa>
 800558c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <USB_EPStartXfer+0x7ea>
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	e038      	b.n	800562e <USB_EPStartXfer+0x86c>
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <USB_EPStartXfer+0x81a>
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	e01b      	b.n	800562e <USB_EPStartXfer+0x86c>
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d116      	bne.n	800562e <USB_EPStartXfer+0x86c>
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560e:	4413      	add	r3, r2
 8005610:	67bb      	str	r3, [r7, #120]	; 0x78
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561c:	4413      	add	r3, r2
 800561e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005622:	677b      	str	r3, [r7, #116]	; 0x74
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005628:	b29a      	uxth	r2, r3
 800562a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800562e:	463b      	mov	r3, r7
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	895b      	ldrh	r3, [r3, #10]
 8005634:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005638:	e097      	b.n	800576a <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d168      	bne.n	8005716 <USB_EPStartXfer+0x954>
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800565c:	4413      	add	r3, r2
 800565e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800566e:	4413      	add	r3, r2
 8005670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005674:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d112      	bne.n	80056a4 <USB_EPStartXfer+0x8e2>
 800567e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005688:	b29a      	uxth	r2, r3
 800568a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569c:	b29a      	uxth	r2, r3
 800569e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e05d      	b.n	8005760 <USB_EPStartXfer+0x99e>
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a8:	2b3e      	cmp	r3, #62	; 0x3e
 80056aa:	d817      	bhi.n	80056dc <USB_EPStartXfer+0x91a>
 80056ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <USB_EPStartXfer+0x90a>
 80056c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056c6:	3301      	adds	r3, #1
 80056c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	e041      	b.n	8005760 <USB_EPStartXfer+0x99e>
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <USB_EPStartXfer+0x93a>
 80056f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056f6:	3b01      	subs	r3, #1
 80056f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29b      	uxth	r3, r3
 8005706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570e:	b29a      	uxth	r2, r3
 8005710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	e024      	b.n	8005760 <USB_EPStartXfer+0x99e>
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d11f      	bne.n	8005760 <USB_EPStartXfer+0x99e>
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005738:	4413      	add	r3, r2
 800573a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800574a:	4413      	add	r3, r2
 800574c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005758:	b29a      	uxth	r2, r3
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	891b      	ldrh	r3, [r3, #8]
 8005766:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6959      	ldr	r1, [r3, #20]
 8005770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005774:	b29b      	uxth	r3, r3
 8005776:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800577a:	1d38      	adds	r0, r7, #4
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f000 fd6e 	bl	800625e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d122      	bne.n	80057d2 <USB_EPStartXfer+0xa10>
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]
 80057d0:	e026      	b.n	8005820 <USB_EPStartXfer+0xa5e>
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d121      	bne.n	8005820 <USB_EPStartXfer+0xa5e>
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	463b      	mov	r3, r7
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f107 020e 	add.w	r2, r7, #14
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583e:	8013      	strh	r3, [r2, #0]
 8005840:	f107 030e 	add.w	r3, r7, #14
 8005844:	f107 020e 	add.w	r2, r7, #14
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	f082 0210 	eor.w	r2, r2, #16
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	f107 030e 	add.w	r3, r7, #14
 8005854:	f107 020e 	add.w	r2, r7, #14
 8005858:	8812      	ldrh	r2, [r2, #0]
 800585a:	f082 0220 	eor.w	r2, r2, #32
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	f107 030e 	add.w	r3, r7, #14
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
 8005888:	e3b5      	b.n	8005ff6 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	7b1b      	ldrb	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8090 	bne.w	80059b6 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d90e      	bls.n	80058c4 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	619a      	str	r2, [r3, #24]
 80058c2:	e008      	b.n	80058d6 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058ee:	4413      	add	r3, r2
 80058f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005900:	4413      	add	r3, r2
 8005902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800590a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <USB_EPStartXfer+0xb7e>
 8005912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800591e:	b29a      	uxth	r2, r3
 8005920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005936:	b29a      	uxth	r2, r3
 8005938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	e32c      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
 8005940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005944:	2b3e      	cmp	r3, #62	; 0x3e
 8005946:	d818      	bhi.n	800597a <USB_EPStartXfer+0xbb8>
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <USB_EPStartXfer+0xba6>
 800595e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005962:	3301      	adds	r3, #1
 8005964:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800596c:	b29b      	uxth	r3, r3
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e30f      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <USB_EPStartXfer+0xbd8>
 8005990:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005994:	3b01      	subs	r3, #1
 8005996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800599a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800599e:	b29b      	uxth	r3, r3
 80059a0:	029b      	lsls	r3, r3, #10
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e2f1      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	78db      	ldrb	r3, [r3, #3]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	f040 818f 	bne.w	8005ce0 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059c2:	463b      	mov	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d175      	bne.n	8005ab8 <USB_EPStartXfer+0xcf6>
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059e4:	4413      	add	r3, r2
 80059e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d116      	bne.n	8005a38 <USB_EPStartXfer+0xc76>
 8005a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	e065      	b.n	8005b04 <USB_EPStartXfer+0xd42>
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a40:	d81a      	bhi.n	8005a78 <USB_EPStartXfer+0xcb6>
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <USB_EPStartXfer+0xca4>
 8005a5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a60:	3301      	adds	r3, #1
 8005a62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e045      	b.n	8005b04 <USB_EPStartXfer+0xd42>
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <USB_EPStartXfer+0xcda>
 8005a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a96:	3b01      	subs	r3, #1
 8005a98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e025      	b.n	8005b04 <USB_EPStartXfer+0xd42>
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d120      	bne.n	8005b04 <USB_EPStartXfer+0xd42>
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ada:	4413      	add	r3, r2
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	011a      	lsls	r2, r3, #4
 8005ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d175      	bne.n	8005c02 <USB_EPStartXfer+0xe40>
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b2e:	4413      	add	r3, r2
 8005b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	011a      	lsls	r2, r3, #4
 8005b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d116      	bne.n	8005b82 <USB_EPStartXfer+0xdc0>
 8005b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e061      	b.n	8005c46 <USB_EPStartXfer+0xe84>
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8a:	d81a      	bhi.n	8005bc2 <USB_EPStartXfer+0xe00>
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <USB_EPStartXfer+0xdee>
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	3301      	adds	r3, #1
 8005bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e041      	b.n	8005c46 <USB_EPStartXfer+0xe84>
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <USB_EPStartXfer+0xe24>
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	3b01      	subs	r3, #1
 8005be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e021      	b.n	8005c46 <USB_EPStartXfer+0xe84>
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d11c      	bne.n	8005c46 <USB_EPStartXfer+0xe84>
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	011a      	lsls	r2, r3, #4
 8005c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c2e:	4413      	add	r3, r2
 8005c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 81a4 	beq.w	8005f9a <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <USB_EPStartXfer+0xebc>
 8005c72:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f040 8187 	bne.w	8005f9a <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c8c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 8180 	bne.w	8005f9a <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e15c      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78db      	ldrb	r3, [r3, #3]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	f040 8155 	bne.w	8005f96 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d90e      	bls.n	8005d1a <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	619a      	str	r2, [r3, #24]
 8005d18:	e008      	b.n	8005d2c <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d16f      	bne.n	8005e16 <USB_EPStartXfer+0x1054>
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d4e:	4413      	add	r3, r2
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <USB_EPStartXfer+0xfde>
 8005d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e05f      	b.n	8005e60 <USB_EPStartXfer+0x109e>
 8005da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da4:	2b3e      	cmp	r3, #62	; 0x3e
 8005da6:	d818      	bhi.n	8005dda <USB_EPStartXfer+0x1018>
 8005da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <USB_EPStartXfer+0x1006>
 8005dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e042      	b.n	8005e60 <USB_EPStartXfer+0x109e>
 8005dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <USB_EPStartXfer+0x1038>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	3b01      	subs	r3, #1
 8005df6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e024      	b.n	8005e60 <USB_EPStartXfer+0x109e>
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d11f      	bne.n	8005e60 <USB_EPStartXfer+0x109e>
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	4413      	add	r3, r2
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	011a      	lsls	r2, r3, #4
 8005e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e68:	463b      	mov	r3, r7
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d16f      	bne.n	8005f52 <USB_EPStartXfer+0x1190>
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e7a:	1d3b      	adds	r3, r7, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	011a      	lsls	r2, r3, #4
 8005e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d116      	bne.n	8005edc <USB_EPStartXfer+0x111a>
 8005eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	e05e      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee2:	d818      	bhi.n	8005f16 <USB_EPStartXfer+0x1154>
 8005ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <USB_EPStartXfer+0x1142>
 8005efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efe:	3301      	adds	r3, #1
 8005f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e041      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <USB_EPStartXfer+0x1174>
 8005f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f30:	3b01      	subs	r3, #1
 8005f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e023      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11e      	bne.n	8005f9a <USB_EPStartXfer+0x11d8>
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e001      	b.n	8005f9a <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e02e      	b.n	8005ff8 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fc0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fcc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	81bb      	strh	r3, [r7, #12]
 800602c:	89bb      	ldrh	r3, [r7, #12]
 800602e:	f083 0310 	eor.w	r3, r3, #16
 8006032:	81bb      	strh	r3, [r7, #12]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	89bb      	ldrh	r3, [r7, #12]
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]
 8006054:	e01f      	b.n	8006096 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606c:	81fb      	strh	r3, [r7, #14]
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006074:	81fb      	strh	r3, [r7, #14]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	7b1b      	ldrb	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 809d 	bne.w	80061f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d04c      	beq.n	800615a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	823b      	strh	r3, [r7, #16]
 80060ce:	8a3b      	ldrh	r3, [r7, #16]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01b      	beq.n	8006110 <USB_EPClearStall+0x6c>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	81fb      	strh	r3, [r7, #14]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	89fb      	ldrh	r3, [r7, #14]
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	78db      	ldrb	r3, [r3, #3]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d06c      	beq.n	80061f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	81bb      	strh	r3, [r7, #12]
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	f083 0320 	eor.w	r3, r3, #32
 8006136:	81bb      	strh	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	89bb      	ldrh	r3, [r7, #12]
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
 8006158:	e04b      	b.n	80061f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	82fb      	strh	r3, [r7, #22]
 8006168:	8afb      	ldrh	r3, [r7, #22]
 800616a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <USB_EPClearStall+0x106>
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006188:	82bb      	strh	r3, [r7, #20]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	8abb      	ldrh	r3, [r7, #20]
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c0:	827b      	strh	r3, [r7, #18]
 80061c2:	8a7b      	ldrh	r3, [r7, #18]
 80061c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061c8:	827b      	strh	r3, [r7, #18]
 80061ca:	8a7b      	ldrh	r3, [r7, #18]
 80061cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d0:	827b      	strh	r3, [r7, #18]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	8a7b      	ldrh	r3, [r7, #18]
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2280      	movs	r2, #128	; 0x80
 8006216:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800624c:	b29b      	uxth	r3, r3
 800624e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006250:	68fb      	ldr	r3, [r7, #12]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800625e:	b480      	push	{r7}
 8006260:	b08d      	sub	sp, #52	; 0x34
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4611      	mov	r1, r2
 800626a:	461a      	mov	r2, r3
 800626c:	460b      	mov	r3, r1
 800626e:	80fb      	strh	r3, [r7, #6]
 8006270:	4613      	mov	r3, r2
 8006272:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006274:	88bb      	ldrh	r3, [r7, #4]
 8006276:	3301      	adds	r3, #1
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	005a      	lsls	r2, r3, #1
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006296:	e01e      	b.n	80062d6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	3301      	adds	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	3302      	adds	r3, #2
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	3302      	adds	r3, #2
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	3301      	adds	r3, #1
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	3b01      	subs	r3, #1
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1dd      	bne.n	8006298 <USB_WritePMA+0x3a>
  }
}
 80062dc:	bf00      	nop
 80062de:	3734      	adds	r7, #52	; 0x34
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b08b      	sub	sp, #44	; 0x2c
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	460b      	mov	r3, r1
 80062f8:	80fb      	strh	r3, [r7, #6]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062fe:	88bb      	ldrh	r3, [r7, #4]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	005a      	lsls	r2, r3, #1
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	e01b      	b.n	800635a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	3302      	adds	r3, #2
 800632e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	3301      	adds	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	3302      	adds	r3, #2
 8006352:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	3b01      	subs	r3, #1
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e0      	bne.n	8006322 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006360:	88bb      	ldrh	r3, [r7, #4]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	701a      	strb	r2, [r3, #0]
  }
}
 800637c:	bf00      	nop
 800637e:	372c      	adds	r7, #44	; 0x2c
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7c1b      	ldrb	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d115      	bne.n	80063c8 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800639c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a0:	2202      	movs	r2, #2
 80063a2:	2101      	movs	r1, #1
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 fd8a 	bl	8008ebe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80063b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b6:	2202      	movs	r2, #2
 80063b8:	2181      	movs	r1, #129	; 0x81
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f002 fd7f 	bl	8008ebe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80063c6:	e012      	b.n	80063ee <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80063c8:	2340      	movs	r3, #64	; 0x40
 80063ca:	2202      	movs	r2, #2
 80063cc:	2101      	movs	r1, #1
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 fd75 	bl	8008ebe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	2202      	movs	r2, #2
 80063e0:	2181      	movs	r1, #129	; 0x81
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f002 fd6b 	bl	8008ebe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80063ee:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80063f2:	f002 feab 	bl	800914c <USBD_static_malloc>
 80063f6:	4602      	mov	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006408:	2302      	movs	r3, #2
 800640a:	e003      	b.n	8006414 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f9da 	bl	80067c6 <MSC_BOT_Init>

  return USBD_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006428:	2101      	movs	r1, #1
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fd6d 	bl	8008f0a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006438:	2181      	movs	r1, #129	; 0x81
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f002 fd65 	bl	8008f0a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa07 	bl	800685a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fe83 	bl	8009168 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006484:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04d      	beq.n	8006536 <USBD_MSC_Setup+0xc2>
 800649a:	2b20      	cmp	r3, #32
 800649c:	f040 8113 	bne.w	80066c6 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2bfe      	cmp	r3, #254	; 0xfe
 80064a6:	d002      	beq.n	80064ae <USBD_MSC_Setup+0x3a>
 80064a8:	2bff      	cmp	r3, #255	; 0xff
 80064aa:	d024      	beq.n	80064f6 <USBD_MSC_Setup+0x82>
 80064ac:	e03b      	b.n	8006526 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	885b      	ldrh	r3, [r3, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d118      	bne.n	80064e8 <USBD_MSC_Setup+0x74>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	88db      	ldrh	r3, [r3, #6]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d114      	bne.n	80064e8 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da0f      	bge.n	80064e8 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	4798      	blx	r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	461a      	mov	r2, r3
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2201      	movs	r2, #1
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f002 f991 	bl	8008808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064e6:	e025      	b.n	8006534 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f002 f921 	bl	8008732 <USBD_CtlError>
            ret = USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	75fb      	strb	r3, [r7, #23]
          break;
 80064f4:	e01e      	b.n	8006534 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	885b      	ldrh	r3, [r3, #2]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <USBD_MSC_Setup+0xa4>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	88db      	ldrh	r3, [r3, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800650c:	2b00      	cmp	r3, #0
 800650e:	db03      	blt.n	8006518 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f988 	bl	8006826 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006516:	e00d      	b.n	8006534 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 f909 	bl	8008732 <USBD_CtlError>
            ret = USBD_FAIL;
 8006520:	2302      	movs	r3, #2
 8006522:	75fb      	strb	r3, [r7, #23]
          break;
 8006524:	e006      	b.n	8006534 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 f902 	bl	8008732 <USBD_CtlError>
          ret = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	75fb      	strb	r3, [r7, #23]
          break;
 8006532:	bf00      	nop
      }
      break;
 8006534:	e0ce      	b.n	80066d4 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	2b0b      	cmp	r3, #11
 800653c:	f200 80bb 	bhi.w	80066b6 <USBD_MSC_Setup+0x242>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <USBD_MSC_Setup+0xd4>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006579 	.word	0x08006579
 800654c:	080065ef 	.word	0x080065ef
 8006550:	080066b7 	.word	0x080066b7
 8006554:	080066b7 	.word	0x080066b7
 8006558:	080066b7 	.word	0x080066b7
 800655c:	080066b7 	.word	0x080066b7
 8006560:	080066b7 	.word	0x080066b7
 8006564:	080066b7 	.word	0x080066b7
 8006568:	080066b7 	.word	0x080066b7
 800656c:	080066b7 	.word	0x080066b7
 8006570:	080065a1 	.word	0x080065a1
 8006574:	080065c9 	.word	0x080065c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657e:	2b03      	cmp	r3, #3
 8006580:	d107      	bne.n	8006592 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006582:	f107 030e 	add.w	r3, r7, #14
 8006586:	2202      	movs	r2, #2
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 f93c 	bl	8008808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006590:	e098      	b.n	80066c4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f002 f8cc 	bl	8008732 <USBD_CtlError>
            ret = USBD_FAIL;
 800659a:	2302      	movs	r3, #2
 800659c:	75fb      	strb	r3, [r7, #23]
          break;
 800659e:	e091      	b.n	80066c4 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d107      	bne.n	80065ba <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2201      	movs	r2, #1
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 f928 	bl	8008808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065b8:	e084      	b.n	80066c4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f002 f8b8 	bl	8008732 <USBD_CtlError>
            ret = USBD_FAIL;
 80065c2:	2302      	movs	r3, #2
 80065c4:	75fb      	strb	r3, [r7, #23]
          break;
 80065c6:	e07d      	b.n	80066c4 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d106      	bne.n	80065e0 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065de:	e071      	b.n	80066c4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f002 f8a5 	bl	8008732 <USBD_CtlError>
            ret = USBD_FAIL;
 80065e8:	2302      	movs	r3, #2
 80065ea:	75fb      	strb	r3, [r7, #23]
          break;
 80065ec:	e06a      	b.n	80066c4 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	889b      	ldrh	r3, [r3, #4]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f002 fca6 	bl	8008f48 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	889b      	ldrh	r3, [r3, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f002 fc80 	bl	8008f0a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	889b      	ldrh	r3, [r3, #4]
 800660e:	b25b      	sxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	da23      	bge.n	800665c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	889b      	ldrh	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f003 020f 	and.w	r2, r3, #15
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	3318      	adds	r3, #24
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663c:	2202      	movs	r2, #2
 800663e:	2181      	movs	r1, #129	; 0x81
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f002 fc3c 	bl	8008ebe <USBD_LL_OpenEP>
 8006646:	e005      	b.n	8006654 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	2202      	movs	r2, #2
 800664c:	2181      	movs	r1, #129	; 0x81
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 fc35 	bl	8008ebe <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	62da      	str	r2, [r3, #44]	; 0x2c
 800665a:	e024      	b.n	80066a6 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	889b      	ldrh	r3, [r3, #4]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	7c1b      	ldrb	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d107      	bne.n	8006692 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006686:	2202      	movs	r2, #2
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 fc17 	bl	8008ebe <USBD_LL_OpenEP>
 8006690:	e005      	b.n	800669e <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	2202      	movs	r2, #2
 8006696:	2101      	movs	r1, #1
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 fc10 	bl	8008ebe <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	889b      	ldrh	r3, [r3, #4]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa52 	bl	8006b58 <MSC_BOT_CplClrFeature>
          break;
 80066b4:	e006      	b.n	80066c4 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f002 f83a 	bl	8008732 <USBD_CtlError>
          ret = USBD_FAIL;
 80066be:	2302      	movs	r3, #2
 80066c0:	75fb      	strb	r3, [r7, #23]
          break;
 80066c2:	bf00      	nop
      }
      break;
 80066c4:	e006      	b.n	80066d4 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f002 f832 	bl	8008732 <USBD_CtlError>
      ret = USBD_FAIL;
 80066ce:	2302      	movs	r3, #2
 80066d0:	75fb      	strb	r3, [r7, #23]
      break;
 80066d2:	bf00      	nop
  }

  return ret;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop

080066e0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8c3 	bl	800687c <MSC_BOT_DataIn>

  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8e4 	bl	80068de <MSC_BOT_DataOut>

  return USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	20000044 	.word	0x20000044

08006740 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800674e:	4b03      	ldr	r3, [pc, #12]	; (800675c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000064 	.word	0x20000064

08006760 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800676e:	4b03      	ldr	r3, [pc, #12]	; (800677c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000084 	.word	0x20000084

08006780 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	220a      	movs	r2, #10
 800678c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	200000a4 	.word	0x200000a4

080067a0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2000      	movs	r0, #0
 80067fc:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f002 fba1 	bl	8008f48 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006806:	2181      	movs	r1, #129	; 0x81
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 fb9d 	bl	8008f48 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006814:	231f      	movs	r3, #31
 8006816:	2101      	movs	r1, #1
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f002 fc61 	bl	80090e0 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006834:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006848:	231f      	movs	r3, #31
 800684a:	2101      	movs	r1, #1
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 fc47 	bl	80090e0 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	721a      	strb	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	7a1b      	ldrb	r3, [r3, #8]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d004      	beq.n	80068a2 <MSC_BOT_DataIn+0x26>
 8006898:	2b02      	cmp	r3, #2
 800689a:	db19      	blt.n	80068d0 <MSC_BOT_DataIn+0x54>
 800689c:	2b04      	cmp	r3, #4
 800689e:	dc17      	bgt.n	80068d0 <MSC_BOT_DataIn+0x54>
 80068a0:	e011      	b.n	80068c6 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80068ae:	461a      	mov	r2, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f979 	bl	8006ba8 <SCSI_ProcessCmd>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da0b      	bge.n	80068d4 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80068bc:	2101      	movs	r1, #1
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f8f0 	bl	8006aa4 <MSC_BOT_SendCSW>
      }
      break;
 80068c4:	e006      	b.n	80068d4 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f8eb 	bl	8006aa4 <MSC_BOT_SendCSW>
      break;
 80068ce:	e002      	b.n	80068d6 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <MSC_BOT_DataIn+0x5a>
      break;
 80068d4:	bf00      	nop
  }
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	7a1b      	ldrb	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <MSC_BOT_DataOut+0x22>
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d004      	beq.n	8006908 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80068fe:	e015      	b.n	800692c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f817 	bl	8006934 <MSC_BOT_CBW_Decode>
      break;
 8006906:	e011      	b.n	800692c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006914:	461a      	mov	r2, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f946 	bl	8006ba8 <SCSI_ProcessCmd>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	da03      	bge.n	800692a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006922:	2101      	movs	r1, #1
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8bd 	bl	8006aa4 <MSC_BOT_SendCSW>
      break;
 800692a:	bf00      	nop
  }
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006942:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800695c:	2101      	movs	r1, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 fbe1 	bl	8009126 <USBD_LL_GetRxDataSize>
 8006964:	4603      	mov	r3, r0
 8006966:	2b1f      	cmp	r3, #31
 8006968:	d114      	bne.n	8006994 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006970:	4a32      	ldr	r2, [pc, #200]	; (8006a3c <MSC_BOT_CBW_Decode+0x108>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10e      	bne.n	8006994 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800697c:	2b01      	cmp	r3, #1
 800697e:	d809      	bhi.n	8006994 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006990:	2b10      	cmp	r3, #16
 8006992:	d90e      	bls.n	80069b2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800699a:	2320      	movs	r3, #32
 800699c:	2205      	movs	r2, #5
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc4b 	bl	800723a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2202      	movs	r2, #2
 80069a8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8a6 	bl	8006afc <MSC_BOT_Abort>
 80069b0:	e041      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80069be:	461a      	mov	r2, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8f1 	bl	8006ba8 <SCSI_ProcessCmd>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da0c      	bge.n	80069e6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	7a1b      	ldrb	r3, [r3, #8]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d104      	bne.n	80069de <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80069d4:	2101      	movs	r1, #1
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f864 	bl	8006aa4 <MSC_BOT_SendCSW>
 80069dc:	e02b      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f88c 	bl	8006afc <MSC_BOT_Abort>
 80069e4:	e027      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	7a1b      	ldrb	r3, [r3, #8]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d022      	beq.n	8006a34 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d01e      	beq.n	8006a34 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d01a      	beq.n	8006a34 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	895b      	ldrh	r3, [r3, #10]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f103 010c 	add.w	r1, r3, #12
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	895b      	ldrh	r3, [r3, #10]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f814 	bl	8006a40 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006a18:	e00d      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	895b      	ldrh	r3, [r3, #10]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006a22:	2100      	movs	r1, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f83d 	bl	8006aa4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006a2a:	e004      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f865 	bl	8006afc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006a32:	e000      	b.n	8006a36 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006a34:	bf00      	nop
    }
  }
}
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	43425355 	.word	0x43425355

08006a40 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d204      	bcs.n	8006a6c <MSC_BOT_SendData+0x2c>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	e000      	b.n	8006a6e <MSC_BOT_SendData+0x2e>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	1ad2      	subs	r2, r2, r3
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006a8e:	8a7b      	ldrh	r3, [r7, #18]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	2181      	movs	r1, #129	; 0x81
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f002 fb00 	bl	800909a <USBD_LL_Transmit>
}
 8006a9a:	bf00      	nop
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <MSC_BOT_SendCSW+0x54>)
 8006abc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006ad4:	230d      	movs	r3, #13
 8006ad6:	2181      	movs	r1, #129	; 0x81
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 fade 	bl	800909a <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006ae4:	231f      	movs	r3, #31
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f002 faf9 	bl	80090e0 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	53425355 	.word	0x53425355

08006afc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006b28:	2101      	movs	r1, #1
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fa2b 	bl	8008f86 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b30:	2181      	movs	r1, #129	; 0x81
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 fa27 	bl	8008f86 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	7a5b      	ldrb	r3, [r3, #9]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d107      	bne.n	8006b50 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006b46:	231f      	movs	r3, #31
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f002 fac8 	bl	80090e0 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7a5b      	ldrb	r3, [r3, #9]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d107      	bne.n	8006b84 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006b74:	2181      	movs	r1, #129	; 0x81
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 fa05 	bl	8008f86 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	725a      	strb	r2, [r3, #9]
 8006b82:	e00d      	b.n	8006ba0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da08      	bge.n	8006b9e <MSC_BOT_CplClrFeature+0x46>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	7a5b      	ldrb	r3, [r3, #9]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d004      	beq.n	8006b9e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006b94:	2101      	movs	r1, #1
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ff84 	bl	8006aa4 <MSC_BOT_SendCSW>
 8006b9c:	e000      	b.n	8006ba0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006b9e:	bf00      	nop
  }
}
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b5a      	cmp	r3, #90	; 0x5a
 8006bbc:	f200 810e 	bhi.w	8006ddc <SCSI_ProcessCmd+0x234>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <SCSI_ProcessCmd+0x20>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006d35 	.word	0x08006d35
 8006bcc:	08006ddd 	.word	0x08006ddd
 8006bd0:	08006ddd 	.word	0x08006ddd
 8006bd4:	08006d43 	.word	0x08006d43
 8006bd8:	08006ddd 	.word	0x08006ddd
 8006bdc:	08006ddd 	.word	0x08006ddd
 8006be0:	08006ddd 	.word	0x08006ddd
 8006be4:	08006ddd 	.word	0x08006ddd
 8006be8:	08006ddd 	.word	0x08006ddd
 8006bec:	08006ddd 	.word	0x08006ddd
 8006bf0:	08006ddd 	.word	0x08006ddd
 8006bf4:	08006ddd 	.word	0x08006ddd
 8006bf8:	08006ddd 	.word	0x08006ddd
 8006bfc:	08006ddd 	.word	0x08006ddd
 8006c00:	08006ddd 	.word	0x08006ddd
 8006c04:	08006ddd 	.word	0x08006ddd
 8006c08:	08006ddd 	.word	0x08006ddd
 8006c0c:	08006ddd 	.word	0x08006ddd
 8006c10:	08006d51 	.word	0x08006d51
 8006c14:	08006ddd 	.word	0x08006ddd
 8006c18:	08006ddd 	.word	0x08006ddd
 8006c1c:	08006ddd 	.word	0x08006ddd
 8006c20:	08006ddd 	.word	0x08006ddd
 8006c24:	08006ddd 	.word	0x08006ddd
 8006c28:	08006ddd 	.word	0x08006ddd
 8006c2c:	08006ddd 	.word	0x08006ddd
 8006c30:	08006d7b 	.word	0x08006d7b
 8006c34:	08006d5f 	.word	0x08006d5f
 8006c38:	08006ddd 	.word	0x08006ddd
 8006c3c:	08006ddd 	.word	0x08006ddd
 8006c40:	08006d6d 	.word	0x08006d6d
 8006c44:	08006ddd 	.word	0x08006ddd
 8006c48:	08006ddd 	.word	0x08006ddd
 8006c4c:	08006ddd 	.word	0x08006ddd
 8006c50:	08006ddd 	.word	0x08006ddd
 8006c54:	08006d97 	.word	0x08006d97
 8006c58:	08006ddd 	.word	0x08006ddd
 8006c5c:	08006da5 	.word	0x08006da5
 8006c60:	08006ddd 	.word	0x08006ddd
 8006c64:	08006ddd 	.word	0x08006ddd
 8006c68:	08006db3 	.word	0x08006db3
 8006c6c:	08006ddd 	.word	0x08006ddd
 8006c70:	08006dc1 	.word	0x08006dc1
 8006c74:	08006ddd 	.word	0x08006ddd
 8006c78:	08006ddd 	.word	0x08006ddd
 8006c7c:	08006ddd 	.word	0x08006ddd
 8006c80:	08006ddd 	.word	0x08006ddd
 8006c84:	08006dcf 	.word	0x08006dcf
 8006c88:	08006ddd 	.word	0x08006ddd
 8006c8c:	08006ddd 	.word	0x08006ddd
 8006c90:	08006ddd 	.word	0x08006ddd
 8006c94:	08006ddd 	.word	0x08006ddd
 8006c98:	08006ddd 	.word	0x08006ddd
 8006c9c:	08006ddd 	.word	0x08006ddd
 8006ca0:	08006ddd 	.word	0x08006ddd
 8006ca4:	08006ddd 	.word	0x08006ddd
 8006ca8:	08006ddd 	.word	0x08006ddd
 8006cac:	08006ddd 	.word	0x08006ddd
 8006cb0:	08006ddd 	.word	0x08006ddd
 8006cb4:	08006ddd 	.word	0x08006ddd
 8006cb8:	08006ddd 	.word	0x08006ddd
 8006cbc:	08006ddd 	.word	0x08006ddd
 8006cc0:	08006ddd 	.word	0x08006ddd
 8006cc4:	08006ddd 	.word	0x08006ddd
 8006cc8:	08006ddd 	.word	0x08006ddd
 8006ccc:	08006ddd 	.word	0x08006ddd
 8006cd0:	08006ddd 	.word	0x08006ddd
 8006cd4:	08006ddd 	.word	0x08006ddd
 8006cd8:	08006ddd 	.word	0x08006ddd
 8006cdc:	08006ddd 	.word	0x08006ddd
 8006ce0:	08006ddd 	.word	0x08006ddd
 8006ce4:	08006ddd 	.word	0x08006ddd
 8006ce8:	08006ddd 	.word	0x08006ddd
 8006cec:	08006ddd 	.word	0x08006ddd
 8006cf0:	08006ddd 	.word	0x08006ddd
 8006cf4:	08006ddd 	.word	0x08006ddd
 8006cf8:	08006ddd 	.word	0x08006ddd
 8006cfc:	08006ddd 	.word	0x08006ddd
 8006d00:	08006ddd 	.word	0x08006ddd
 8006d04:	08006ddd 	.word	0x08006ddd
 8006d08:	08006ddd 	.word	0x08006ddd
 8006d0c:	08006ddd 	.word	0x08006ddd
 8006d10:	08006ddd 	.word	0x08006ddd
 8006d14:	08006ddd 	.word	0x08006ddd
 8006d18:	08006ddd 	.word	0x08006ddd
 8006d1c:	08006ddd 	.word	0x08006ddd
 8006d20:	08006ddd 	.word	0x08006ddd
 8006d24:	08006ddd 	.word	0x08006ddd
 8006d28:	08006ddd 	.word	0x08006ddd
 8006d2c:	08006ddd 	.word	0x08006ddd
 8006d30:	08006d89 	.word	0x08006d89
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f85c 	bl	8006df8 <SCSI_TestUnitReady>
      break;
 8006d40:	e055      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fa0b 	bl	8007164 <SCSI_RequestSense>
      break;
 8006d4e:	e04e      	b.n	8006dee <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f888 	bl	8006e6c <SCSI_Inquiry>
      break;
 8006d5c:	e047      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 faa2 	bl	80072ae <SCSI_StartStopUnit>
      break;
 8006d6a:	e040      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4619      	mov	r1, r3
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fa9b 	bl	80072ae <SCSI_StartStopUnit>
      break;
 8006d78:	e039      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f99f 	bl	80070c4 <SCSI_ModeSense6>
      break;
 8006d86:	e032      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f9c0 	bl	8007114 <SCSI_ModeSense10>
      break;
 8006d94:	e02b      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f92c 	bl	8006ffa <SCSI_ReadFormatCapacity>
      break;
 8006da2:	e024      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4619      	mov	r1, r3
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f8be 	bl	8006f2c <SCSI_ReadCapacity10>
      break;
 8006db0:	e01d      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	4619      	mov	r1, r3
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fa8d 	bl	80072d8 <SCSI_Read10>
      break;
 8006dbe:	e016      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fb12 	bl	80073f0 <SCSI_Write10>
      break;
 8006dcc:	e00f      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fbbb 	bl	8007550 <SCSI_Verify10>
      break;
 8006dda:	e008      	b.n	8006dee <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006ddc:	7af9      	ldrb	r1, [r7, #11]
 8006dde:	2320      	movs	r3, #32
 8006de0:	2205      	movs	r2, #5
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fa29 	bl	800723a <SCSI_SenseCode>
      return -1;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e000      	b.n	8006df0 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	460b      	mov	r3, r1
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006e1e:	2320      	movs	r3, #32
 8006e20:	2205      	movs	r2, #5
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fa09 	bl	800723a <SCSI_SenseCode>

    return -1;
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2c:	e019      	b.n	8006e62 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	7afa      	ldrb	r2, [r7, #11]
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e42:	7af9      	ldrb	r1, [r7, #11]
 8006e44:	233a      	movs	r3, #58	; 0x3a
 8006e46:	2202      	movs	r2, #2
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f9f6 	bl	800723a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2205      	movs	r2, #5
 8006e52:	721a      	strb	r2, [r3, #8]

    return -1;
 8006e54:	f04f 33ff 	mov.w	r3, #4294967295
 8006e58:	e003      	b.n	8006e62 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	815a      	strh	r2, [r3, #10]

  return 0;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	; 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	460b      	mov	r3, r1
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3301      	adds	r3, #1
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d014      	beq.n	8006eba <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006e90:	2307      	movs	r3, #7
 8006e92:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	8bfa      	ldrh	r2, [r7, #30]
 8006e98:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e9a:	e00a      	b.n	8006eb2 <SCSI_Inquiry+0x46>
    {
      len--;
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006ea2:	8bfa      	ldrh	r2, [r7, #30]
 8006ea4:	8bfb      	ldrh	r3, [r7, #30]
 8006ea6:	4920      	ldr	r1, [pc, #128]	; (8006f28 <SCSI_Inquiry+0xbc>)
 8006ea8:	5c89      	ldrb	r1, [r1, r2]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	460a      	mov	r2, r1
 8006eb0:	731a      	strb	r2, [r3, #12]
    while (len)
 8006eb2:	8bfb      	ldrh	r3, [r7, #30]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f1      	bne.n	8006e9c <SCSI_Inquiry+0x30>
 8006eb8:	e02e      	b.n	8006f18 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec0:	69d9      	ldr	r1, [r3, #28]
 8006ec2:	7afa      	ldrb	r2, [r7, #11]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3305      	adds	r3, #5
 8006eda:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8bfa      	ldrh	r2, [r7, #30]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d303      	bcc.n	8006ef2 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	8bfa      	ldrh	r2, [r7, #30]
 8006ef6:	815a      	strh	r2, [r3, #10]

    while (len)
 8006ef8:	e00b      	b.n	8006f12 <SCSI_Inquiry+0xa6>
    {
      len--;
 8006efa:	8bfb      	ldrh	r3, [r7, #30]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006f00:	8bfb      	ldrh	r3, [r7, #30]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	441a      	add	r2, r3
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	7811      	ldrb	r1, [r2, #0]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	460a      	mov	r2, r1
 8006f10:	731a      	strb	r2, [r3, #12]
    while (len)
 8006f12:	8bfb      	ldrh	r3, [r7, #30]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f0      	bne.n	8006efa <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3724      	adds	r7, #36	; 0x24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	080092d8 	.word	0x080092d8

08006f2c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8006f56:	7af8      	ldrb	r0, [r7, #11]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f60:	7af9      	ldrb	r1, [r7, #11]
 8006f62:	233a      	movs	r3, #58	; 0x3a
 8006f64:	2202      	movs	r2, #2
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f967 	bl	800723a <SCSI_SenseCode>
    return -1;
 8006f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f70:	e03f      	b.n	8006ff2 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006fb8:	161b      	asrs	r3, r3, #24
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006fc6:	141b      	asrs	r3, r3, #16
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006fd4:	0a1b      	lsrs	r3, r3, #8
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2208      	movs	r2, #8
 8006fee:	815a      	strh	r2, [r3, #10]
    return 0;
 8006ff0:	2300      	movs	r3, #0
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b088      	sub	sp, #32
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	460b      	mov	r3, r1
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007010:	2300      	movs	r3, #0
 8007012:	83fb      	strh	r3, [r7, #30]
 8007014:	e007      	b.n	8007026 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007016:	8bfb      	ldrh	r3, [r7, #30]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4413      	add	r3, r2
 800701c:	2200      	movs	r2, #0
 800701e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007020:	8bfb      	ldrh	r3, [r7, #30]
 8007022:	3301      	adds	r3, #1
 8007024:	83fb      	strh	r3, [r7, #30]
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	2b0b      	cmp	r3, #11
 800702a:	d9f4      	bls.n	8007016 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f107 0216 	add.w	r2, r7, #22
 8007038:	f107 0110 	add.w	r1, r7, #16
 800703c:	7af8      	ldrb	r0, [r7, #11]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007046:	7af9      	ldrb	r1, [r7, #11]
 8007048:	233a      	movs	r3, #58	; 0x3a
 800704a:	2202      	movs	r2, #2
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f8f4 	bl	800723a <SCSI_SenseCode>
    return -1;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	e030      	b.n	80070ba <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2208      	movs	r2, #8
 800705c:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3b01      	subs	r3, #1
 8007062:	0e1b      	lsrs	r3, r3, #24
 8007064:	b2da      	uxtb	r2, r3
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3b01      	subs	r3, #1
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	b2da      	uxtb	r2, r3
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3b01      	subs	r3, #1
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	b2da      	uxtb	r2, r3
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2202      	movs	r2, #2
 8007092:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007094:	8afb      	ldrh	r3, [r7, #22]
 8007096:	141b      	asrs	r3, r3, #16
 8007098:	b2da      	uxtb	r2, r3
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80070aa:	8afb      	ldrh	r3, [r7, #22]
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	220c      	movs	r2, #12
 80070b6:	815a      	strh	r2, [r3, #10]
    return 0;
 80070b8:	2300      	movs	r3, #0
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	460b      	mov	r3, r1
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d8:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80070da:	2308      	movs	r3, #8
 80070dc:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	8afa      	ldrh	r2, [r7, #22]
 80070e2:	815a      	strh	r2, [r3, #10]

  while (len)
 80070e4:	e00a      	b.n	80070fc <SCSI_ModeSense6+0x38>
  {
    len--;
 80070e6:	8afb      	ldrh	r3, [r7, #22]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80070ec:	8afa      	ldrh	r2, [r7, #22]
 80070ee:	8afb      	ldrh	r3, [r7, #22]
 80070f0:	4907      	ldr	r1, [pc, #28]	; (8007110 <SCSI_ModeSense6+0x4c>)
 80070f2:	5c89      	ldrb	r1, [r1, r2]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4413      	add	r3, r2
 80070f8:	460a      	mov	r2, r1
 80070fa:	731a      	strb	r2, [r3, #12]
  while (len)
 80070fc:	8afb      	ldrh	r3, [r7, #22]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f1      	bne.n	80070e6 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	080092e0 	.word	0x080092e0

08007114 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	460b      	mov	r3, r1
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007122:	2308      	movs	r3, #8
 8007124:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	8afa      	ldrh	r2, [r7, #22]
 8007132:	815a      	strh	r2, [r3, #10]

  while (len)
 8007134:	e00a      	b.n	800714c <SCSI_ModeSense10+0x38>
  {
    len--;
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	3b01      	subs	r3, #1
 800713a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800713c:	8afa      	ldrh	r2, [r7, #22]
 800713e:	8afb      	ldrh	r3, [r7, #22]
 8007140:	4907      	ldr	r1, [pc, #28]	; (8007160 <SCSI_ModeSense10+0x4c>)
 8007142:	5c89      	ldrb	r1, [r1, r2]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	460a      	mov	r2, r1
 800714a:	731a      	strb	r2, [r3, #12]
  while (len)
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f1      	bne.n	8007136 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	080092e8 	.word	0x080092e8

08007164 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	460b      	mov	r3, r1
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]
 800717e:	e007      	b.n	8007190 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4413      	add	r3, r2
 8007186:	2200      	movs	r2, #0
 8007188:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	3301      	adds	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b11      	cmp	r3, #17
 8007194:	d9f4      	bls.n	8007180 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2270      	movs	r2, #112	; 0x70
 800719a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	220c      	movs	r2, #12
 80071a0:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d02e      	beq.n	8007210 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	3347      	adds	r3, #71	; 0x47
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4413      	add	r3, r2
 80071c0:	791a      	ldrb	r2, [r3, #4]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	3347      	adds	r3, #71	; 0x47
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4413      	add	r3, r2
 80071d4:	7a5a      	ldrb	r2, [r3, #9]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	3347      	adds	r3, #71	; 0x47
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	4413      	add	r3, r2
 80071e8:	7a1a      	ldrb	r2, [r3, #8]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80071f4:	3301      	adds	r3, #1
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007204:	2b04      	cmp	r3, #4
 8007206:	d103      	bne.n	8007210 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2212      	movs	r2, #18
 8007214:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b12      	cmp	r3, #18
 800721e:	d805      	bhi.n	800722c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b29a      	uxth	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	461a      	mov	r2, r3
 8007248:	4603      	mov	r3, r0
 800724a:	70fb      	strb	r3, [r7, #3]
 800724c:	460b      	mov	r3, r1
 800724e:	70bb      	strb	r3, [r7, #2]
 8007250:	4613      	mov	r3, r2
 8007252:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	3347      	adds	r3, #71	; 0x47
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	78ba      	ldrb	r2, [r7, #2]
 800726c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	3347      	adds	r3, #71	; 0x47
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4413      	add	r3, r2
 800727c:	2200      	movs	r2, #0
 800727e:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007286:	3301      	adds	r3, #1
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007296:	2b04      	cmp	r3, #4
 8007298:	d103      	bne.n	80072a2 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	460b      	mov	r3, r1
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	815a      	strh	r2, [r3, #10]
  return 0;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	460b      	mov	r3, r1
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ec:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	7a1b      	ldrb	r3, [r3, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d16e      	bne.n	80073d4 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	db0a      	blt.n	8007318 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007308:	2320      	movs	r3, #32
 800730a:	2205      	movs	r2, #5
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff ff94 	bl	800723a <SCSI_SenseCode>
      return -1;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	e067      	b.n	80073e8 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	7afa      	ldrb	r2, [r7, #11]
 8007322:	4610      	mov	r0, r2
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800732c:	7af9      	ldrb	r1, [r7, #11]
 800732e:	233a      	movs	r3, #58	; 0x3a
 8007330:	2202      	movs	r2, #2
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff ff81 	bl	800723a <SCSI_SenseCode>
      return -1;
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	e054      	b.n	80073e8 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3302      	adds	r3, #2
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3303      	adds	r3, #3
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800734e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007358:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	3205      	adds	r2, #5
 800735e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007360:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3307      	adds	r3, #7
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	3208      	adds	r2, #8
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	431a      	orrs	r2, r3
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800738a:	7af9      	ldrb	r1, [r7, #11]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f912 	bl	80075b6 <SCSI_CheckAddressRange>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	da02      	bge.n	800739e <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007398:	f04f 33ff 	mov.w	r3, #4294967295
 800739c:	e024      	b.n	80073e8 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2202      	movs	r2, #2
 80073a2:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073b0:	6979      	ldr	r1, [r7, #20]
 80073b2:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80073b6:	fb01 f303 	mul.w	r3, r1, r3
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d00a      	beq.n	80073d4 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80073c4:	2320      	movs	r3, #32
 80073c6:	2205      	movs	r2, #5
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff ff36 	bl	800723a <SCSI_SenseCode>
      return -1;
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295
 80073d2:	e009      	b.n	80073e8 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073da:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f90a 	bl	80075fa <SCSI_ProcessRead>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	460b      	mov	r3, r1
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	7a1b      	ldrb	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f040 8096 	bne.w	800753c <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007416:	b25b      	sxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	da0a      	bge.n	8007432 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007422:	2320      	movs	r3, #32
 8007424:	2205      	movs	r2, #5
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff ff07 	bl	800723a <SCSI_SenseCode>
      return -1;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	e08a      	b.n	8007548 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	7afa      	ldrb	r2, [r7, #11]
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007446:	7af9      	ldrb	r1, [r7, #11]
 8007448:	233a      	movs	r3, #58	; 0x3a
 800744a:	2202      	movs	r2, #2
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff fef4 	bl	800723a <SCSI_SenseCode>
      return -1;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	e077      	b.n	8007548 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	7afa      	ldrb	r2, [r7, #11]
 8007462:	4610      	mov	r0, r2
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800746c:	7af9      	ldrb	r1, [r7, #11]
 800746e:	2327      	movs	r3, #39	; 0x27
 8007470:	2202      	movs	r2, #2
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fee1 	bl	800723a <SCSI_SenseCode>
      return -1;
 8007478:	f04f 33ff 	mov.w	r3, #4294967295
 800747c:	e064      	b.n	8007548 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3302      	adds	r3, #2
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3303      	adds	r3, #3
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800748e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007498:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	3205      	adds	r2, #5
 800749e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80074a0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3307      	adds	r3, #7
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	3208      	adds	r2, #8
 80074b4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80074b6:	431a      	orrs	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074ca:	7af9      	ldrb	r1, [r7, #11]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f872 	bl	80075b6 <SCSI_CheckAddressRange>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da02      	bge.n	80074de <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	e034      	b.n	8007548 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d00a      	beq.n	8007512 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007502:	2320      	movs	r3, #32
 8007504:	2205      	movs	r2, #5
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fe97 	bl	800723a <SCSI_SenseCode>
      return -1;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	e01a      	b.n	8007548 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	bf28      	it	cs
 800751a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800751e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2201      	movs	r2, #1
 8007524:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f103 020c 	add.w	r2, r3, #12
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	b29b      	uxth	r3, r3
 8007530:	2101      	movs	r1, #1
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 fdd4 	bl	80090e0 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007538:	2300      	movs	r3, #0
 800753a:	e005      	b.n	8007548 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	4619      	mov	r1, r3
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f8ce 	bl	80076e2 <SCSI_ProcessWrite>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	460b      	mov	r3, r1
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3301      	adds	r3, #1
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007574:	7af9      	ldrb	r1, [r7, #11]
 8007576:	2324      	movs	r3, #36	; 0x24
 8007578:	2205      	movs	r2, #5
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fe5d 	bl	800723a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007580:	f04f 33ff 	mov.w	r3, #4294967295
 8007584:	e013      	b.n	80075ae <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007592:	7af9      	ldrb	r1, [r7, #11]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f80e 	bl	80075b6 <SCSI_CheckAddressRange>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	da02      	bge.n	80075a6 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	e003      	b.n	80075ae <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	815a      	strh	r2, [r3, #10]
  return 0;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	460b      	mov	r3, r1
 80075c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	441a      	add	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80075da:	429a      	cmp	r2, r3
 80075dc:	d908      	bls.n	80075f0 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80075de:	7af9      	ldrb	r1, [r7, #11]
 80075e0:	2321      	movs	r3, #33	; 0x21
 80075e2:	2205      	movs	r2, #5
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff fe28 	bl	800723a <SCSI_SenseCode>
    return -1;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	e000      	b.n	80075f2 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80075fa:	b590      	push	{r4, r7, lr}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800761a:	fb02 f303 	mul.w	r3, r2, r3
 800761e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007626:	bf28      	it	cs
 8007628:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800762c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007634:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007648:	4618      	mov	r0, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007650:	b29b      	uxth	r3, r3
 8007652:	78f8      	ldrb	r0, [r7, #3]
 8007654:	47a0      	blx	r4
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	da08      	bge.n	800766e <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800765c:	78f9      	ldrb	r1, [r7, #3]
 800765e:	2311      	movs	r3, #17
 8007660:	2204      	movs	r2, #4
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff fde9 	bl	800723a <SCSI_SenseCode>
    return -1;
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	e035      	b.n	80076da <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f103 020c 	add.w	r2, r3, #12
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	b29b      	uxth	r3, r3
 8007678:	2181      	movs	r1, #129	; 0x81
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fd0d 	bl	800909a <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800768c:	4619      	mov	r1, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	fbb3 f3f1 	udiv	r3, r3, r1
 8007694:	441a      	add	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076a8:	4619      	mov	r1, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80076b0:	1ad2      	subs	r2, r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2203      	movs	r2, #3
 80076d6:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd90      	pop	{r4, r7, pc}

080076e2 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80076e2:	b590      	push	{r4, r7, lr}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770e:	bf28      	it	cs
 8007710:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007714:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771c:	695c      	ldr	r4, [r3, #20]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f103 010c 	add.w	r1, r3, #12
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007730:	4618      	mov	r0, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007738:	b29b      	uxth	r3, r3
 800773a:	78f8      	ldrb	r0, [r7, #3]
 800773c:	47a0      	blx	r4
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	da08      	bge.n	8007756 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007744:	78f9      	ldrb	r1, [r7, #3]
 8007746:	2303      	movs	r3, #3
 8007748:	2204      	movs	r2, #4
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fd75 	bl	800723a <SCSI_SenseCode>

    return -1;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	e045      	b.n	80077e2 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007762:	4619      	mov	r1, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	fbb3 f3f1 	udiv	r3, r3, r1
 800776a:	441a      	add	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	fbb3 f3f1 	udiv	r3, r3, r1
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff f97a 	bl	8006aa4 <MSC_BOT_SendCSW>
 80077b0:	e016      	b.n	80077e0 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c6:	bf28      	it	cs
 80077c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80077cc:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f103 020c 	add.w	r2, r3, #12
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2101      	movs	r1, #1
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fc80 	bl	80090e0 <USBD_LL_PrepareReceive>
  }

  return 0;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd90      	pop	{r4, r7, pc}

080077ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	e01a      	b.n	8007838 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	79fa      	ldrb	r2, [r7, #7]
 800782e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fad9 	bl	8008de8 <USBD_LL_Init>

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e001      	b.n	8007866 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007862:	2302      	movs	r3, #2
 8007864:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fb03 	bl	8008e88 <USBD_LL_Start>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078ae:	2302      	movs	r3, #2
 80078b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	4611      	mov	r1, r2
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	78fa      	ldrb	r2, [r7, #3]
 80078f6:	4611      	mov	r1, r2
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3

  return USBD_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fecd 	bl	80086b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	2b01      	cmp	r3, #1
 8007940:	d00c      	beq.n	800795c <USBD_LL_SetupStage+0x56>
 8007942:	2b01      	cmp	r3, #1
 8007944:	d302      	bcc.n	800794c <USBD_LL_SetupStage+0x46>
 8007946:	2b02      	cmp	r3, #2
 8007948:	d010      	beq.n	800796c <USBD_LL_SetupStage+0x66>
 800794a:	e017      	b.n	800797c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9cd 	bl	8007cf4 <USBD_StdDevReq>
      break;
 800795a:	e01a      	b.n	8007992 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fa2f 	bl	8007dc8 <USBD_StdItfReq>
      break;
 800796a:	e012      	b.n	8007992 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa6d 	bl	8007e54 <USBD_StdEPReq>
      break;
 800797a:	e00a      	b.n	8007992 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007982:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fafb 	bl	8008f86 <USBD_LL_StallEP>
      break;
 8007990:	bf00      	nop
  }

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	460b      	mov	r3, r1
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d14b      	bne.n	8007a48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d134      	bne.n	8007a2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d919      	bls.n	8007a02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d203      	bcs.n	80079f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	e002      	b.n	80079f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 ff32 	bl	8008864 <USBD_CtlContinueRx>
 8007a00:	e038      	b.n	8007a74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d105      	bne.n	8007a24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 ff2f 	bl	8008888 <USBD_CtlSendStatus>
 8007a2a:	e023      	b.n	8007a74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d11e      	bne.n	8007a74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 faa0 	bl	8008f86 <USBD_LL_StallEP>
 8007a46:	e015      	b.n	8007a74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00d      	beq.n	8007a70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d108      	bne.n	8007a70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	7afa      	ldrb	r2, [r7, #11]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
 8007a6e:	e001      	b.n	8007a74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	e000      	b.n	8007a76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	460b      	mov	r3, r1
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d17f      	bne.n	8007b92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3314      	adds	r3, #20
 8007a96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d15c      	bne.n	8007b5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d915      	bls.n	8007ada <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 feba 	bl	8008840 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007acc:	2300      	movs	r3, #0
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 fb04 	bl	80090e0 <USBD_LL_PrepareReceive>
 8007ad8:	e04e      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	6912      	ldr	r2, [r2, #16]
 8007ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ae6:	fb02 f201 	mul.w	r2, r2, r1
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11c      	bne.n	8007b2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d316      	bcc.n	8007b2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d20f      	bcs.n	8007b2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fe96 	bl	8008840 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f001 fadc 	bl	80090e0 <USBD_LL_PrepareReceive>
 8007b28:	e026      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d105      	bne.n	8007b4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f001 fa19 	bl	8008f86 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 feaa 	bl	80088ae <USBD_CtlReceiveStatus>
 8007b5a:	e00d      	b.n	8007b78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d004      	beq.n	8007b70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f001 fa07 	bl	8008f86 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d11d      	bne.n	8007bbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fe82 	bl	800788c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b90:	e015      	b.n	8007bbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00d      	beq.n	8007bba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d108      	bne.n	8007bba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	7afa      	ldrb	r2, [r7, #11]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	4798      	blx	r3
 8007bb8:	e001      	b.n	8007bbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e000      	b.n	8007bc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 f971 	bl	8008ebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 f963 	bl	8008ebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6852      	ldr	r2, [r2, #4]
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d105      	bne.n	8007cb2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d10b      	bne.n	8007cea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d004      	beq.n	8007d18 <USBD_StdDevReq+0x24>
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d002      	beq.n	8007d18 <USBD_StdDevReq+0x24>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <USBD_StdDevReq+0x34>
 8007d16:	e04c      	b.n	8007db2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
      break;
 8007d26:	e049      	b.n	8007dbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	785b      	ldrb	r3, [r3, #1]
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	d83a      	bhi.n	8007da6 <USBD_StdDevReq+0xb2>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <USBD_StdDevReq+0x44>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d89 	.word	0x08007d89
 8007d3c:	08007d9d 	.word	0x08007d9d
 8007d40:	08007da7 	.word	0x08007da7
 8007d44:	08007d93 	.word	0x08007d93
 8007d48:	08007da7 	.word	0x08007da7
 8007d4c:	08007d6b 	.word	0x08007d6b
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007da7 	.word	0x08007da7
 8007d58:	08007d7f 	.word	0x08007d7f
 8007d5c:	08007d75 	.word	0x08007d75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f9d4 	bl	8008110 <USBD_GetDescriptor>
          break;
 8007d68:	e022      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fb37 	bl	80083e0 <USBD_SetAddress>
          break;
 8007d72:	e01d      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fb74 	bl	8008464 <USBD_SetConfig>
          break;
 8007d7c:	e018      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fbfd 	bl	8008580 <USBD_GetConfig>
          break;
 8007d86:	e013      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc2c 	bl	80085e8 <USBD_GetStatus>
          break;
 8007d90:	e00e      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc5a 	bl	800864e <USBD_SetFeature>
          break;
 8007d9a:	e009      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc69 	bl	8008676 <USBD_ClrFeature>
          break;
 8007da4:	e004      	b.n	8007db0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fcc2 	bl	8008732 <USBD_CtlError>
          break;
 8007dae:	bf00      	nop
      }
      break;
 8007db0:	e004      	b.n	8007dbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fcbc 	bl	8008732 <USBD_CtlError>
      break;
 8007dba:	bf00      	nop
  }

  return ret;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop

08007dc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d003      	beq.n	8007dea <USBD_StdItfReq+0x22>
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d001      	beq.n	8007dea <USBD_StdItfReq+0x22>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12a      	bne.n	8007e40 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d81d      	bhi.n	8007e32 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	889b      	ldrh	r3, [r3, #4]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d813      	bhi.n	8007e28 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d110      	bne.n	8007e3c <USBD_StdItfReq+0x74>
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fd31 	bl	8008888 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e26:	e009      	b.n	8007e3c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fc81 	bl	8008732 <USBD_CtlError>
          break;
 8007e30:	e004      	b.n	8007e3c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc7c 	bl	8008732 <USBD_CtlError>
          break;
 8007e3a:	e000      	b.n	8007e3e <USBD_StdItfReq+0x76>
          break;
 8007e3c:	bf00      	nop
      }
      break;
 8007e3e:	e004      	b.n	8007e4a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc75 	bl	8008732 <USBD_CtlError>
      break;
 8007e48:	bf00      	nop
  }

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	889b      	ldrh	r3, [r3, #4]
 8007e66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d004      	beq.n	8007e7e <USBD_StdEPReq+0x2a>
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d002      	beq.n	8007e7e <USBD_StdEPReq+0x2a>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <USBD_StdEPReq+0x3a>
 8007e7c:	e13d      	b.n	80080fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
      break;
 8007e8c:	e13a      	b.n	8008104 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d10a      	bne.n	8007eb0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	e12a      	b.n	8008106 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d03e      	beq.n	8007f36 <USBD_StdEPReq+0xe2>
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0x6e>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d070      	beq.n	8007fa2 <USBD_StdEPReq+0x14e>
 8007ec0:	e115      	b.n	80080ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d002      	beq.n	8007ed2 <USBD_StdEPReq+0x7e>
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d015      	beq.n	8007efc <USBD_StdEPReq+0xa8>
 8007ed0:	e02b      	b.n	8007f2a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <USBD_StdEPReq+0x9e>
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b80      	cmp	r3, #128	; 0x80
 8007edc:	d009      	beq.n	8007ef2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f84f 	bl	8008f86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ee8:	2180      	movs	r1, #128	; 0x80
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 f84b 	bl	8008f86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ef0:	e020      	b.n	8007f34 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fc1c 	bl	8008732 <USBD_CtlError>
              break;
 8007efa:	e01b      	b.n	8007f34 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10e      	bne.n	8007f22 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <USBD_StdEPReq+0xce>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d008      	beq.n	8007f22 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	88db      	ldrh	r3, [r3, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f832 	bl	8008f86 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fcb0 	bl	8008888 <USBD_CtlSendStatus>

              break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc00 	bl	8008732 <USBD_CtlError>
              break;
 8007f32:	bf00      	nop
          }
          break;
 8007f34:	e0e0      	b.n	80080f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d002      	beq.n	8007f46 <USBD_StdEPReq+0xf2>
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d015      	beq.n	8007f70 <USBD_StdEPReq+0x11c>
 8007f44:	e026      	b.n	8007f94 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <USBD_StdEPReq+0x112>
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d009      	beq.n	8007f66 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 f815 	bl	8008f86 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 f811 	bl	8008f86 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f64:	e01c      	b.n	8007fa0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fbe2 	bl	8008732 <USBD_CtlError>
              break;
 8007f6e:	e017      	b.n	8007fa0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d112      	bne.n	8007f9e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f81c 	bl	8008fc4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc7b 	bl	8008888 <USBD_CtlSendStatus>
              }
              break;
 8007f92:	e004      	b.n	8007f9e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fbcb 	bl	8008732 <USBD_CtlError>
              break;
 8007f9c:	e000      	b.n	8007fa0 <USBD_StdEPReq+0x14c>
              break;
 8007f9e:	bf00      	nop
          }
          break;
 8007fa0:	e0aa      	b.n	80080f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d002      	beq.n	8007fb2 <USBD_StdEPReq+0x15e>
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d032      	beq.n	8008016 <USBD_StdEPReq+0x1c2>
 8007fb0:	e097      	b.n	80080e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <USBD_StdEPReq+0x174>
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d004      	beq.n	8007fc8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fbb6 	bl	8008732 <USBD_CtlError>
                break;
 8007fc6:	e091      	b.n	80080ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da0b      	bge.n	8007fe8 <USBD_StdEPReq+0x194>
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	3310      	adds	r3, #16
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	e00b      	b.n	8008000 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3304      	adds	r3, #4
 8008000:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2202      	movs	r2, #2
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fbfa 	bl	8008808 <USBD_CtlSendData>
              break;
 8008014:	e06a      	b.n	80080ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da11      	bge.n	8008042 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3318      	adds	r3, #24
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d117      	bne.n	8008068 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb79 	bl	8008732 <USBD_CtlError>
                  break;
 8008040:	e054      	b.n	80080ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb66 	bl	8008732 <USBD_CtlError>
                  break;
 8008066:	e041      	b.n	80080ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	da0b      	bge.n	8008088 <USBD_StdEPReq+0x234>
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	3310      	adds	r3, #16
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	3304      	adds	r3, #4
 8008086:	e00b      	b.n	80080a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800808e:	4613      	mov	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4413      	add	r3, r2
 800809e:	3304      	adds	r3, #4
 80080a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <USBD_StdEPReq+0x25a>
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d103      	bne.n	80080b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e00e      	b.n	80080d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 ffa1 	bl	8009002 <USBD_LL_IsStallEP>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e002      	b.n	80080d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2202      	movs	r2, #2
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fb94 	bl	8008808 <USBD_CtlSendData>
              break;
 80080e0:	e004      	b.n	80080ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fb24 	bl	8008732 <USBD_CtlError>
              break;
 80080ea:	bf00      	nop
          }
          break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb1e 	bl	8008732 <USBD_CtlError>
          break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e004      	b.n	8008104 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb18 	bl	8008732 <USBD_CtlError>
      break;
 8008102:	bf00      	nop
  }

  return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	0a1b      	lsrs	r3, r3, #8
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	2b06      	cmp	r3, #6
 8008132:	f200 8128 	bhi.w	8008386 <USBD_GetDescriptor+0x276>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_GetDescriptor+0x2c>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008159 	.word	0x08008159
 8008140:	08008171 	.word	0x08008171
 8008144:	080081b1 	.word	0x080081b1
 8008148:	08008387 	.word	0x08008387
 800814c:	08008387 	.word	0x08008387
 8008150:	08008327 	.word	0x08008327
 8008154:	08008353 	.word	0x08008353
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
      break;
 800816e:	e112      	b.n	8008396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7c1b      	ldrb	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10d      	bne.n	8008194 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	f107 0208 	add.w	r2, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	2202      	movs	r2, #2
 8008190:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008192:	e100      	b.n	8008396 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f107 0208 	add.w	r2, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]
      break;
 80081ae:	e0f2      	b.n	8008396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	f200 80ac 	bhi.w	8008314 <USBD_GetDescriptor+0x204>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBD_GetDescriptor+0xb4>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081dd 	.word	0x080081dd
 80081c8:	08008211 	.word	0x08008211
 80081cc:	08008245 	.word	0x08008245
 80081d0:	08008279 	.word	0x08008279
 80081d4:	080082ad 	.word	0x080082ad
 80081d8:	080082e1 	.word	0x080082e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7c12      	ldrb	r2, [r2, #16]
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fe:	e091      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa95 	bl	8008732 <USBD_CtlError>
            err++;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	3301      	adds	r3, #1
 800820c:	72fb      	strb	r3, [r7, #11]
          break;
 800820e:	e089      	b.n	8008324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008232:	e077      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa7b 	bl	8008732 <USBD_CtlError>
            err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
          break;
 8008242:	e06f      	b.n	8008324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	7c12      	ldrb	r2, [r2, #16]
 800825c:	f107 0108 	add.w	r1, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008266:	e05d      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa61 	bl	8008732 <USBD_CtlError>
            err++;
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	3301      	adds	r3, #1
 8008274:	72fb      	strb	r3, [r7, #11]
          break;
 8008276:	e055      	b.n	8008324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7c12      	ldrb	r2, [r2, #16]
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
 8008298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829a:	e043      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa47 	bl	8008732 <USBD_CtlError>
            err++;
 80082a4:	7afb      	ldrb	r3, [r7, #11]
 80082a6:	3301      	adds	r3, #1
 80082a8:	72fb      	strb	r3, [r7, #11]
          break;
 80082aa:	e03b      	b.n	8008324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	7c12      	ldrb	r2, [r2, #16]
 80082c4:	f107 0108 	add.w	r1, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ce:	e029      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa2d 	bl	8008732 <USBD_CtlError>
            err++;
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	3301      	adds	r3, #1
 80082dc:	72fb      	strb	r3, [r7, #11]
          break;
 80082de:	e021      	b.n	8008324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e00f      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa13 	bl	8008732 <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e007      	b.n	8008324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa0b 	bl	8008732 <USBD_CtlError>
          err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008322:	e038      	b.n	8008396 <USBD_GetDescriptor+0x286>
 8008324:	e037      	b.n	8008396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7c1b      	ldrb	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	f107 0208 	add.w	r2, r7, #8
 800833a:	4610      	mov	r0, r2
 800833c:	4798      	blx	r3
 800833e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008340:	e029      	b.n	8008396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f9f4 	bl	8008732 <USBD_CtlError>
        err++;
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	3301      	adds	r3, #1
 800834e:	72fb      	strb	r3, [r7, #11]
      break;
 8008350:	e021      	b.n	8008396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f107 0208 	add.w	r2, r7, #8
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
 800836a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	2207      	movs	r2, #7
 8008372:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008374:	e00f      	b.n	8008396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f9da 	bl	8008732 <USBD_CtlError>
        err++;
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	3301      	adds	r3, #1
 8008382:	72fb      	strb	r3, [r7, #11]
      break;
 8008384:	e007      	b.n	8008396 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9d2 	bl	8008732 <USBD_CtlError>
      err++;
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	3301      	adds	r3, #1
 8008392:	72fb      	strb	r3, [r7, #11]
      break;
 8008394:	bf00      	nop
  }

  if (err != 0U)
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11c      	bne.n	80083d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800839c:	893b      	ldrh	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d011      	beq.n	80083c6 <USBD_GetDescriptor+0x2b6>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	88db      	ldrh	r3, [r3, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	88da      	ldrh	r2, [r3, #6]
 80083ae:	893b      	ldrh	r3, [r7, #8]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	bf28      	it	cs
 80083b4:	4613      	movcs	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083ba:	893b      	ldrh	r3, [r7, #8]
 80083bc:	461a      	mov	r2, r3
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa21 	bl	8008808 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa5a 	bl	8008888 <USBD_CtlSendStatus>
 80083d4:	e000      	b.n	80083d8 <USBD_GetDescriptor+0x2c8>
    return;
 80083d6:	bf00      	nop
    }
  }
}
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop

080083e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	889b      	ldrh	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d130      	bne.n	8008454 <USBD_SetAddress+0x74>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88db      	ldrh	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d12c      	bne.n	8008454 <USBD_SetAddress+0x74>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008400:	d828      	bhi.n	8008454 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008414:	2b03      	cmp	r3, #3
 8008416:	d104      	bne.n	8008422 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f989 	bl	8008732 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	e01c      	b.n	800845c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7bfa      	ldrb	r2, [r7, #15]
 8008426:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fe14 	bl	800905c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fa27 	bl	8008888 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008448:	e008      	b.n	800845c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008452:	e003      	b.n	800845c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f96b 	bl	8008732 <USBD_CtlError>
  }
}
 800845c:	bf00      	nop
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	885b      	ldrh	r3, [r3, #2]
 8008472:	b2da      	uxtb	r2, r3
 8008474:	4b41      	ldr	r3, [pc, #260]	; (800857c <USBD_SetConfig+0x118>)
 8008476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008478:	4b40      	ldr	r3, [pc, #256]	; (800857c <USBD_SetConfig+0x118>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d904      	bls.n	800848a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f955 	bl	8008732 <USBD_CtlError>
 8008488:	e075      	b.n	8008576 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	2b02      	cmp	r3, #2
 8008492:	d002      	beq.n	800849a <USBD_SetConfig+0x36>
 8008494:	2b03      	cmp	r3, #3
 8008496:	d023      	beq.n	80084e0 <USBD_SetConfig+0x7c>
 8008498:	e062      	b.n	8008560 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800849a:	4b38      	ldr	r3, [pc, #224]	; (800857c <USBD_SetConfig+0x118>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80084a2:	4b36      	ldr	r3, [pc, #216]	; (800857c <USBD_SetConfig+0x118>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2203      	movs	r2, #3
 80084b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084b4:	4b31      	ldr	r3, [pc, #196]	; (800857c <USBD_SetConfig+0x118>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff f9f1 	bl	80078a2 <USBD_SetClassConfig>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d104      	bne.n	80084d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f932 	bl	8008732 <USBD_CtlError>
            return;
 80084ce:	e052      	b.n	8008576 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9d9 	bl	8008888 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084d6:	e04e      	b.n	8008576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f9d5 	bl	8008888 <USBD_CtlSendStatus>
        break;
 80084de:	e04a      	b.n	8008576 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80084e0:	4b26      	ldr	r3, [pc, #152]	; (800857c <USBD_SetConfig+0x118>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d112      	bne.n	800850e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80084f0:	4b22      	ldr	r3, [pc, #136]	; (800857c <USBD_SetConfig+0x118>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80084fa:	4b20      	ldr	r3, [pc, #128]	; (800857c <USBD_SetConfig+0x118>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff f9ed 	bl	80078e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9be 	bl	8008888 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800850c:	e033      	b.n	8008576 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800850e:	4b1b      	ldr	r3, [pc, #108]	; (800857c <USBD_SetConfig+0x118>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	429a      	cmp	r2, r3
 800851a:	d01d      	beq.n	8008558 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff f9db 	bl	80078e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <USBD_SetConfig+0x118>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008534:	4b11      	ldr	r3, [pc, #68]	; (800857c <USBD_SetConfig+0x118>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff f9b1 	bl	80078a2 <USBD_SetClassConfig>
 8008540:	4603      	mov	r3, r0
 8008542:	2b02      	cmp	r3, #2
 8008544:	d104      	bne.n	8008550 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f8f2 	bl	8008732 <USBD_CtlError>
            return;
 800854e:	e012      	b.n	8008576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f999 	bl	8008888 <USBD_CtlSendStatus>
        break;
 8008556:	e00e      	b.n	8008576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f995 	bl	8008888 <USBD_CtlSendStatus>
        break;
 800855e:	e00a      	b.n	8008576 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8e5 	bl	8008732 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008568:	4b04      	ldr	r3, [pc, #16]	; (800857c <USBD_SetConfig+0x118>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff f9b6 	bl	80078e0 <USBD_ClrClassConfig>
        break;
 8008574:	bf00      	nop
    }
  }
}
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2000013c 	.word	0x2000013c

08008580 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	88db      	ldrh	r3, [r3, #6]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d004      	beq.n	800859c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f8cc 	bl	8008732 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800859a:	e021      	b.n	80085e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	db17      	blt.n	80085d6 <USBD_GetConfig+0x56>
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	dd02      	ble.n	80085b0 <USBD_GetConfig+0x30>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d00b      	beq.n	80085c6 <USBD_GetConfig+0x46>
 80085ae:	e012      	b.n	80085d6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3308      	adds	r3, #8
 80085ba:	2201      	movs	r2, #1
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f922 	bl	8008808 <USBD_CtlSendData>
        break;
 80085c4:	e00c      	b.n	80085e0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3304      	adds	r3, #4
 80085ca:	2201      	movs	r2, #1
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f91a 	bl	8008808 <USBD_CtlSendData>
        break;
 80085d4:	e004      	b.n	80085e0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8aa 	bl	8008732 <USBD_CtlError>
        break;
 80085de:	bf00      	nop
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d81e      	bhi.n	800863c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d004      	beq.n	8008610 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f892 	bl	8008732 <USBD_CtlError>
        break;
 800860e:	e01a      	b.n	8008646 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f043 0202 	orr.w	r2, r3, #2
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	330c      	adds	r3, #12
 8008630:	2202      	movs	r2, #2
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f8e7 	bl	8008808 <USBD_CtlSendData>
      break;
 800863a:	e004      	b.n	8008646 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f877 	bl	8008732 <USBD_CtlError>
      break;
 8008644:	bf00      	nop
  }
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	885b      	ldrh	r3, [r3, #2]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d106      	bne.n	800866e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f90d 	bl	8008888 <USBD_CtlSendStatus>
  }
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008686:	3b01      	subs	r3, #1
 8008688:	2b02      	cmp	r3, #2
 800868a:	d80b      	bhi.n	80086a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	885b      	ldrh	r3, [r3, #2]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d10c      	bne.n	80086ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8f3 	bl	8008888 <USBD_CtlSendStatus>
      }
      break;
 80086a2:	e004      	b.n	80086ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f843 	bl	8008732 <USBD_CtlError>
      break;
 80086ac:	e000      	b.n	80086b0 <USBD_ClrFeature+0x3a>
      break;
 80086ae:	bf00      	nop
  }
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781a      	ldrb	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	785a      	ldrb	r2, [r3, #1]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	3302      	adds	r3, #2
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3303      	adds	r3, #3
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	3304      	adds	r3, #4
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	3305      	adds	r3, #5
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	b29b      	uxth	r3, r3
 8008702:	4413      	add	r3, r2
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	3306      	adds	r3, #6
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	b29a      	uxth	r2, r3
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	3307      	adds	r3, #7
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	b29b      	uxth	r3, r3
 800871e:	4413      	add	r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	80da      	strh	r2, [r3, #6]

}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800873c:	2180      	movs	r1, #128	; 0x80
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc21 	bl	8008f86 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc1d 	bl	8008f86 <USBD_LL_StallEP>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d032      	beq.n	80087d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f834 	bl	80087d8 <USBD_GetLen>
 8008770:	4603      	mov	r3, r0
 8008772:	3301      	adds	r3, #1
 8008774:	b29b      	uxth	r3, r3
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	75fa      	strb	r2, [r7, #23]
 8008784:	461a      	mov	r2, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4413      	add	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	75fa      	strb	r2, [r7, #23]
 8008796:	461a      	mov	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4413      	add	r3, r2
 800879c:	2203      	movs	r2, #3
 800879e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087a0:	e012      	b.n	80087c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	60fa      	str	r2, [r7, #12]
 80087a8:	7dfa      	ldrb	r2, [r7, #23]
 80087aa:	1c51      	adds	r1, r2, #1
 80087ac:	75f9      	strb	r1, [r7, #23]
 80087ae:	4611      	mov	r1, r2
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	440a      	add	r2, r1
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	75fa      	strb	r2, [r7, #23]
 80087be:	461a      	mov	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4413      	add	r3, r2
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e8      	bne.n	80087a2 <USBD_GetString+0x4e>
    }
  }
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80087e4:	e005      	b.n	80087f2 <USBD_GetLen+0x1a>
  {
    len++;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	3301      	adds	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3301      	adds	r3, #1
 80087f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f5      	bne.n	80087e6 <USBD_GetLen+0xe>
  }

  return len;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2202      	movs	r2, #2
 800881a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fc32 	bl	800909a <USBD_LL_Transmit>

  return USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4613      	mov	r3, r2
 800884c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	2100      	movs	r1, #0
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fc20 	bl	800909a <USBD_LL_Transmit>

  return USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	2100      	movs	r1, #0
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fc31 	bl	80090e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2204      	movs	r2, #4
 8008894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008898:	2300      	movs	r3, #0
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fbfb 	bl	800909a <USBD_LL_Transmit>

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2205      	movs	r2, #5
 80088ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088be:	2300      	movs	r3, #0
 80088c0:	2200      	movs	r2, #0
 80088c2:	2100      	movs	r1, #0
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fc0b 	bl	80090e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088d8:	2200      	movs	r2, #0
 80088da:	4912      	ldr	r1, [pc, #72]	; (8008924 <MX_USB_DEVICE_Init+0x50>)
 80088dc:	4812      	ldr	r0, [pc, #72]	; (8008928 <MX_USB_DEVICE_Init+0x54>)
 80088de:	f7fe ff84 	bl	80077ea <USBD_Init>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088e8:	f7f7 fe32 	bl	8000550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80088ec:	490f      	ldr	r1, [pc, #60]	; (800892c <MX_USB_DEVICE_Init+0x58>)
 80088ee:	480e      	ldr	r0, [pc, #56]	; (8008928 <MX_USB_DEVICE_Init+0x54>)
 80088f0:	f7fe ffa6 	bl	8007840 <USBD_RegisterClass>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088fa:	f7f7 fe29 	bl	8000550 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80088fe:	490c      	ldr	r1, [pc, #48]	; (8008930 <MX_USB_DEVICE_Init+0x5c>)
 8008900:	4809      	ldr	r0, [pc, #36]	; (8008928 <MX_USB_DEVICE_Init+0x54>)
 8008902:	f7fd ff4d 	bl	80067a0 <USBD_MSC_RegisterStorage>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800890c:	f7f7 fe20 	bl	8000550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008910:	4805      	ldr	r0, [pc, #20]	; (8008928 <MX_USB_DEVICE_Init+0x54>)
 8008912:	f7fe ffaf 	bl	8007874 <USBD_Start>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800891c:	f7f7 fe18 	bl	8000550 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008920:	bf00      	nop
 8008922:	bd80      	pop	{r7, pc}
 8008924:	200000b0 	.word	0x200000b0
 8008928:	2000049c 	.word	0x2000049c
 800892c:	2000000c 	.word	0x2000000c
 8008930:	20000100 	.word	0x20000100

08008934 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2212      	movs	r2, #18
 8008944:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008946:	4b03      	ldr	r3, [pc, #12]	; (8008954 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	200000cc 	.word	0x200000cc

08008958 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2204      	movs	r2, #4
 8008968:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	; (8008978 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	200000e0 	.word	0x200000e0

0800897c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d105      	bne.n	800899a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4907      	ldr	r1, [pc, #28]	; (80089b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008992:	4808      	ldr	r0, [pc, #32]	; (80089b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008994:	f7ff fede 	bl	8008754 <USBD_GetString>
 8008998:	e004      	b.n	80089a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4904      	ldr	r1, [pc, #16]	; (80089b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800899e:	4805      	ldr	r0, [pc, #20]	; (80089b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089a0:	f7ff fed8 	bl	8008754 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000760 	.word	0x20000760
 80089b4:	0800925c 	.word	0x0800925c

080089b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	4904      	ldr	r1, [pc, #16]	; (80089d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089c8:	4804      	ldr	r0, [pc, #16]	; (80089dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089ca:	f7ff fec3 	bl	8008754 <USBD_GetString>
  return USBD_StrDesc;
 80089ce:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000760 	.word	0x20000760
 80089dc:	08009270 	.word	0x08009270

080089e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	221a      	movs	r2, #26
 80089f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089f2:	f000 f843 	bl	8008a7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089f6:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200000e4 	.word	0x200000e4

08008a04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d105      	bne.n	8008a22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4907      	ldr	r1, [pc, #28]	; (8008a38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a1a:	4808      	ldr	r0, [pc, #32]	; (8008a3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a1c:	f7ff fe9a 	bl	8008754 <USBD_GetString>
 8008a20:	e004      	b.n	8008a2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4904      	ldr	r1, [pc, #16]	; (8008a38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a26:	4805      	ldr	r0, [pc, #20]	; (8008a3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a28:	f7ff fe94 	bl	8008754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a2c:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000760 	.word	0x20000760
 8008a3c:	08009284 	.word	0x08009284

08008a40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d105      	bne.n	8008a5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4907      	ldr	r1, [pc, #28]	; (8008a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a56:	4808      	ldr	r0, [pc, #32]	; (8008a78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a58:	f7ff fe7c 	bl	8008754 <USBD_GetString>
 8008a5c:	e004      	b.n	8008a68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4904      	ldr	r1, [pc, #16]	; (8008a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a62:	4805      	ldr	r0, [pc, #20]	; (8008a78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a64:	f7ff fe76 	bl	8008754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000760 	.word	0x20000760
 8008a78:	08009290 	.word	0x08009290

08008a7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a82:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <Get_SerialNum+0x44>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a88:	4b0e      	ldr	r3, [pc, #56]	; (8008ac4 <Get_SerialNum+0x48>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <Get_SerialNum+0x4c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008aa2:	2208      	movs	r2, #8
 8008aa4:	4909      	ldr	r1, [pc, #36]	; (8008acc <Get_SerialNum+0x50>)
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f814 	bl	8008ad4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008aac:	2204      	movs	r2, #4
 8008aae:	4908      	ldr	r1, [pc, #32]	; (8008ad0 <Get_SerialNum+0x54>)
 8008ab0:	68b8      	ldr	r0, [r7, #8]
 8008ab2:	f000 f80f 	bl	8008ad4 <IntToUnicode>
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	1ffff7ac 	.word	0x1ffff7ac
 8008ac4:	1ffff7b0 	.word	0x1ffff7b0
 8008ac8:	1ffff7b4 	.word	0x1ffff7b4
 8008acc:	200000e6 	.word	0x200000e6
 8008ad0:	200000f6 	.word	0x200000f6

08008ad4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	75fb      	strb	r3, [r7, #23]
 8008aea:	e027      	b.n	8008b3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	0f1b      	lsrs	r3, r3, #28
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d80b      	bhi.n	8008b0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	0f1b      	lsrs	r3, r3, #28
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	4619      	mov	r1, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	440b      	add	r3, r1
 8008b04:	3230      	adds	r2, #48	; 0x30
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	701a      	strb	r2, [r3, #0]
 8008b0a:	e00a      	b.n	8008b22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	0f1b      	lsrs	r3, r3, #28
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	4619      	mov	r1, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	440b      	add	r3, r1
 8008b1c:	3237      	adds	r2, #55	; 0x37
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
 8008b3c:	7dfa      	ldrb	r2, [r7, #23]
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d3d3      	bcc.n	8008aec <IntToUnicode+0x18>
  }
}
 8008b44:	bf00      	nop
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8008b5a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b7c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008b86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b9e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008bd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b085      	sub	sp, #20
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8008bfa:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008c0c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	; 0x28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	605a      	str	r2, [r3, #4]
 8008c2a:	609a      	str	r2, [r3, #8]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <HAL_PCD_MspInit+0x90>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d131      	bne.n	8008c9e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c44:	6153      	str	r3, [r2, #20]
 8008c46:	4b19      	ldr	r3, [pc, #100]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c60:	2303      	movs	r3, #3
 8008c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008c64:	230e      	movs	r3, #14
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c72:	f7f7 ff2f 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	4a0c      	ldr	r2, [pc, #48]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c80:	61d3      	str	r3, [r2, #28]
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <HAL_PCD_MspInit+0x94>)
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	2014      	movs	r0, #20
 8008c94:	f7f7 fee7 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008c98:	2014      	movs	r0, #20
 8008c9a:	f7f7 ff00 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	3728      	adds	r7, #40	; 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40005c00 	.word	0x40005c00
 8008cac:	40021000 	.word	0x40021000

08008cb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe fe1d 	bl	8007906 <USBD_LL_SetupStage>
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	440b      	add	r3, r1
 8008cf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7fe fe4d 	bl	800799c <USBD_LL_DataOutStage>
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	440b      	add	r3, r1
 8008d2a:	333c      	adds	r3, #60	; 0x3c
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	4619      	mov	r1, r3
 8008d32:	f7fe fea4 	bl	8007a7e <USBD_LL_DataInStage>
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe ffb7 	bl	8007cc0 <USBD_LL_SOF>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d62:	2301      	movs	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d001      	beq.n	8008d72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d6e:	f7f7 fbef 	bl	8000550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d78:	7bfa      	ldrb	r2, [r7, #15]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe ff64 	bl	8007c4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe ff1d 	bl	8007bc8 <USBD_LL_Reset>
}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe ff5f 	bl	8007c6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <HAL_PCD_SuspendCallback+0x30>)
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	4a03      	ldr	r2, [pc, #12]	; (8008dc8 <HAL_PCD_SuspendCallback+0x30>)
 8008dba:	f043 0306 	orr.w	r3, r3, #6
 8008dbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed00 	.word	0xe000ed00

08008dcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe ff5a 	bl	8007c94 <USBD_LL_Resume>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008df0:	4a23      	ldr	r2, [pc, #140]	; (8008e80 <USBD_LL_Init+0x98>)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <USBD_LL_Init+0x98>)
 8008dfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e00:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e02:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <USBD_LL_Init+0x9c>)
 8008e04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e06:	4b1e      	ldr	r3, [pc, #120]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e08:	2208      	movs	r2, #8
 8008e0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e0c:	4b1c      	ldr	r3, [pc, #112]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e0e:	2202      	movs	r2, #2
 8008e10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e12:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e14:	2202      	movs	r2, #2
 8008e16:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e18:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e1e:	4b18      	ldr	r3, [pc, #96]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e24:	4816      	ldr	r0, [pc, #88]	; (8008e80 <USBD_LL_Init+0x98>)
 8008e26:	f7f8 f801 	bl	8000e2c <HAL_PCD_Init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e30:	f7f7 fb8e 	bl	8000550 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e3a:	2318      	movs	r3, #24
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2100      	movs	r1, #0
 8008e40:	f7f9 faaa 	bl	8002398 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e4a:	2358      	movs	r3, #88	; 0x58
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	f7f9 faa2 	bl	8002398 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e5a:	2398      	movs	r3, #152	; 0x98
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2181      	movs	r1, #129	; 0x81
 8008e60:	f7f9 fa9a 	bl	8002398 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e6a:	23d8      	movs	r3, #216	; 0xd8
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2101      	movs	r1, #1
 8008e70:	f7f9 fa92 	bl	8002398 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20000960 	.word	0x20000960
 8008e84:	40005c00 	.word	0x40005c00

08008e88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f8 f8a2 	bl	8000fe8 <HAL_PCD_Start>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f972 	bl	8009194 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	70fb      	strb	r3, [r7, #3]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70bb      	strb	r3, [r7, #2]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ee6:	78bb      	ldrb	r3, [r7, #2]
 8008ee8:	883a      	ldrh	r2, [r7, #0]
 8008eea:	78f9      	ldrb	r1, [r7, #3]
 8008eec:	f7f8 f9be 	bl	800126c <HAL_PCD_EP_Open>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f94c 	bl	8009194 <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f8 fa05 	bl	8001338 <HAL_PCD_EP_Close>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f92d 	bl	8009194 <USBD_Get_USB_Status>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f8 fb6c 	bl	8001644 <HAL_PCD_EP_Flush>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f90e 	bl	8009194 <USBD_Get_USB_Status>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7f8 faa7 	bl	80014f8 <HAL_PCD_EP_SetStall>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f8ef 	bl	8009194 <USBD_Get_USB_Status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7f8 fada 	bl	800159c <HAL_PCD_EP_ClrStall>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f8d0 	bl	8009194 <USBD_Get_USB_Status>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009014:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da0c      	bge.n	8009038 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	68f9      	ldr	r1, [r7, #12]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	440b      	add	r3, r1
 8009032:	3302      	adds	r3, #2
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	e00b      	b.n	8009050 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	440b      	add	r3, r1
 800904a:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800904e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f7f8 f8d1 	bl	8001222 <HAL_PCD_SetAddress>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f884 	bl	8009194 <USBD_Get_USB_Status>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009090:	7bbb      	ldrb	r3, [r7, #14]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	461a      	mov	r2, r3
 80090a6:	460b      	mov	r3, r1
 80090a8:	72fb      	strb	r3, [r7, #11]
 80090aa:	4613      	mov	r3, r2
 80090ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090bc:	893b      	ldrh	r3, [r7, #8]
 80090be:	7af9      	ldrb	r1, [r7, #11]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	f7f8 f9d6 	bl	8001472 <HAL_PCD_EP_Transmit>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f861 	bl	8009194 <USBD_Get_USB_Status>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	461a      	mov	r2, r3
 80090ec:	460b      	mov	r3, r1
 80090ee:	72fb      	strb	r3, [r7, #11]
 80090f0:	4613      	mov	r3, r2
 80090f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009102:	893b      	ldrh	r3, [r7, #8]
 8009104:	7af9      	ldrb	r1, [r7, #11]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	f7f8 f95e 	bl	80013c8 <HAL_PCD_EP_Receive>
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f83e 	bl	8009194 <USBD_Get_USB_Status>
 8009118:	4603      	mov	r3, r0
 800911a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800911c:	7dbb      	ldrb	r3, [r7, #22]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7f8 f980 	bl	8001442 <HAL_PCD_EP_GetRxCount>
 8009142:	4603      	mov	r3, r0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <USBD_static_malloc+0x18>)
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20000140 	.word	0x20000140

08009168 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]

}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d817      	bhi.n	80091d8 <USBD_Get_USB_Status+0x44>
 80091a8:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <USBD_Get_USB_Status+0x1c>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	080091c7 	.word	0x080091c7
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091d3 	.word	0x080091d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
    break;
 80091c4:	e00b      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ca:	e008      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091cc:	2301      	movs	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	e005      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091d2:	2302      	movs	r3, #2
 80091d4:	73fb      	strb	r3, [r7, #15]
    break;
 80091d6:	e002      	b.n	80091de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091d8:	2302      	movs	r3, #2
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	bf00      	nop
  }
  return usb_status;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4e0d      	ldr	r6, [pc, #52]	; (8009224 <__libc_init_array+0x38>)
 80091f0:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f2:	1ba4      	subs	r4, r4, r6
 80091f4:	10a4      	asrs	r4, r4, #2
 80091f6:	2500      	movs	r5, #0
 80091f8:	42a5      	cmp	r5, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	4e0b      	ldr	r6, [pc, #44]	; (800922c <__libc_init_array+0x40>)
 80091fe:	4c0c      	ldr	r4, [pc, #48]	; (8009230 <__libc_init_array+0x44>)
 8009200:	f000 f820 	bl	8009244 <_init>
 8009204:	1ba4      	subs	r4, r4, r6
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	2500      	movs	r5, #0
 800920a:	42a5      	cmp	r5, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009214:	4798      	blx	r3
 8009216:	3501      	adds	r5, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800921e:	4798      	blx	r3
 8009220:	3501      	adds	r5, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	08009314 	.word	0x08009314
 8009228:	08009314 	.word	0x08009314
 800922c:	08009314 	.word	0x08009314
 8009230:	08009318 	.word	0x08009318

08009234 <memset>:
 8009234:	4402      	add	r2, r0
 8009236:	4603      	mov	r3, r0
 8009238:	4293      	cmp	r3, r2
 800923a:	d100      	bne.n	800923e <memset+0xa>
 800923c:	4770      	bx	lr
 800923e:	f803 1b01 	strb.w	r1, [r3], #1
 8009242:	e7f9      	b.n	8009238 <memset+0x4>

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
