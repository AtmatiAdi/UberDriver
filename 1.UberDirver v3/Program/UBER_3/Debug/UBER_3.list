
UBER_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dcc  08005dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd4  08005dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000000c  08005de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005de8  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018491  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002685  00000000  00000000  000384cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  0003ab58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231a8  00000000  00000000  0003da50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011dee  00000000  00000000  00060bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2e8a  00000000  00000000  000729e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069cc  00000000  00000000  001658ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005d74 	.word	0x08005d74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005d74 	.word	0x08005d74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 f871 	bl	8001602 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f817 	bl	8000552 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fc04 	bl	8000d30 <MX_GPIO_Init>
  MX_OPAMP1_Init();
 8000528:	f000 f994 	bl	8000854 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 800052c:	f000 f86e 	bl	800060c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000530:	f000 f8e4 	bl	80006fc <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000534:	f000 f948 	bl	80007c8 <MX_FDCAN1_Init>
  MX_OPAMP2_Init();
 8000538:	f000 f9b8 	bl	80008ac <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800053c:	f000 f9e2 	bl	8000904 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8000540:	f000 fa0c 	bl	800095c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000544:	f000 fa48 	bl	80009d8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000548:	f000 faf6 	bl	8000b38 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800054c:	f000 fba4 	bl	8000c98 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x38>

08000552 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b0a8      	sub	sp, #160	; 0xa0
 8000556:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000558:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800055c:	2238      	movs	r2, #56	; 0x38
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f005 fbff 	bl	8005d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f005 fbf1 	bl	8005d64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000586:	f002 febf 	bl	8003308 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000592:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 ff64 	bl	8003470 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80005ae:	f000 fc41 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b6:	2301      	movs	r3, #1
 80005b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fa67 	bl	8003aa0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005d8:	f000 fc2c 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80005dc:	f249 0301 	movw	r3, #36865	; 0x9001
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80005ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fc6f 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000600:	f000 fc18 	bl	8000e34 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	37a0      	adds	r7, #160	; 0xa0
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fb9d 	bl	8005d64 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800062c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000654:	2204      	movs	r2, #4
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000666:	2201      	movs	r2, #1
 8000668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xe8>)
 8000696:	f001 f9fb 	bl	8001a90 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a0:	f000 fbc8 	bl	8000e34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_ADC1_Init+0xe8>)
 80006b0:	f002 f812 	bl	80026d8 <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ba:	f000 fbbb 	bl	8000e34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_ADC1_Init+0xec>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2306      	movs	r3, #6
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	; 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_ADC1_Init+0xe8>)
 80006dc:	f001 fb98 	bl	8001e10 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006e6:	f000 fba5 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000198 	.word	0x20000198
 80006f8:	0c900008 	.word	0x0c900008

080006fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fb2b 	bl	8005d64 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <MX_ADC2_Init+0xc4>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC2_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000736:	2204      	movs	r2, #4
 8000738:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000748:	2201      	movs	r2, #1
 800074a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ADC2_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ADC2_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_ADC2_Init+0xc0>)
 8000778:	f001 f98a 	bl	8001a90 <HAL_ADC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 fb57 	bl	8000e34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC2_Init+0xc8>)
 8000788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	; 0x7f
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC2_Init+0xc0>)
 80007a4:	f001 fb34 	bl	8001e10 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ae:	f000 fb41 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000b4 	.word	0x200000b4
 80007c0:	50000100 	.word	0x50000100
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <MX_FDCAN1_Init+0x88>)
 80007d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_FDCAN1_Init+0x84>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000804:	2202      	movs	r2, #2
 8000806:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_FDCAN1_Init+0x84>)
 800080a:	2202      	movs	r2, #2
 800080c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000810:	2201      	movs	r2, #1
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000816:	2201      	movs	r2, #1
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_FDCAN1_Init+0x84>)
 800081c:	2201      	movs	r2, #1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000822:	2201      	movs	r2, #1
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_FDCAN1_Init+0x84>)
 800082e:	2200      	movs	r2, #0
 8000830:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_FDCAN1_Init+0x84>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_FDCAN1_Init+0x84>)
 800083a:	f002 f935 	bl	8002aa8 <HAL_FDCAN_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000844:	f000 faf6 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000290 	.word	0x20000290
 8000850:	40006400 	.word	0x40006400

08000854 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_OPAMP1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000866:	2240      	movs	r2, #64	; 0x40
 8000868:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 800087e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_OPAMP1_Init+0x50>)
 8000892:	f002 fc69 	bl	8003168 <HAL_OPAMP_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 faca 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000015c 	.word	0x2000015c
 80008a8:	40010300 	.word	0x40010300

080008ac <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_OPAMP2_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008c4:	2208      	movs	r2, #8
 80008c6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_OPAMP2_Init+0x50>)
 80008ea:	f002 fc3d 	bl	8003168 <HAL_OPAMP_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_OPAMP2_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 fa9e 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000002c 	.word	0x2000002c
 8000900:	40010304 	.word	0x40010304

08000904 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_OPAMP3_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_OPAMP3_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO1;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_OPAMP3_Init+0x50>)
 800091c:	2204      	movs	r2, #4
 800091e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_OPAMP3_Init+0x50>)
 800092e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_OPAMP3_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_OPAMP3_Init+0x50>)
 8000942:	f002 fc11 	bl	8003168 <HAL_OPAMP_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 fa72 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000120 	.word	0x20000120
 8000958:	40010308 	.word	0x40010308

0800095c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_SPI1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000976:	f44f 7240 	mov.w	r2, #768	; 0x300
 800097a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI1_Init+0x74>)
 800098a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009bc:	f003 fcd8 	bl	8004370 <HAL_SPI_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 fa35 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000340 	.word	0x20000340
 80009d4:	40013000 	.word	0x40013000

080009d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b098      	sub	sp, #96	; 0x60
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2234      	movs	r2, #52	; 0x34
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 f9ad 	bl	8005d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a0c:	4a49      	ldr	r2, [pc, #292]	; (8000b34 <MX_TIM1_Init+0x15c>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a36:	483e      	ldr	r0, [pc, #248]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a38:	f003 fd45 	bl	80044c6 <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a42:	f000 f9f7 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	4619      	mov	r1, r3
 8000a58:	4835      	ldr	r0, [pc, #212]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a5a:	f004 fa6d 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a64:	f000 f9e6 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4828      	ldr	r0, [pc, #160]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000a8e:	f003 fd71 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a98:	f000 f9cc 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000aaa:	f003 fd63 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000ab4:	f000 f9be 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000abc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000ac6:	f003 fd55 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ad0:	f000 f9b0 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000b12:	f004 faa7 	bl	8005064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000b1c:	f000 f98a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM1_Init+0x158>)
 8000b22:	f000 fbe5 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3760      	adds	r7, #96	; 0x60
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200002f4 	.word	0x200002f4
 8000b34:	40012c00 	.word	0x40012c00

08000b38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b098      	sub	sp, #96	; 0x60
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2234      	movs	r2, #52	; 0x34
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f005 f8fd 	bl	8005d64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b6c:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <MX_TIM8_Init+0x15c>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b70:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b7c:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b96:	483e      	ldr	r0, [pc, #248]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000b98:	f003 fc95 	bl	80044c6 <HAL_TIM_PWM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 f947 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4835      	ldr	r0, [pc, #212]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000bba:	f004 f9bd 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000bc4:	f000 f936 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	; 0x60
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	4828      	ldr	r0, [pc, #160]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000bee:	f003 fcc1 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bf8:	f000 f91c 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c04:	2204      	movs	r2, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4821      	ldr	r0, [pc, #132]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000c0a:	f003 fcb3 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 8000c14:	f000 f90e 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c20:	2208      	movs	r2, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	481a      	ldr	r0, [pc, #104]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000c26:	f003 fca5 	bl	8004574 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8000c30:	f000 f900 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000c72:	f004 f9f7 	bl	8005064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8000c7c:	f000 f8da 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM8_Init+0x158>)
 8000c82:	f000 fb35 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 8000c86:	bf00      	nop
 8000c88:	3760      	adds	r7, #96	; 0x60
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000068 	.word	0x20000068
 8000c94:	40013400 	.word	0x40013400

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ce2:	f004 fa71 	bl	80051c8 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f8a2 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cf4:	f004 ff2d 	bl	8005b52 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 f899 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d06:	f004 ff62 	bl	8005bce <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f000 f890 	bl	8000e34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d16:	f004 fee3 	bl	8005ae0 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f888 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000204 	.word	0x20000204
 8000d2c:	40013800 	.word	0x40013800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_GPIO_Init+0xf4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENGATE_1_Pin|ENGATE_2_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000dc4:	4818      	ldr	r0, [pc, #96]	; (8000e28 <MX_GPIO_Init+0xf8>)
 8000dc6:	f002 f9b7 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENGATE_1_Pin ENGATE_2_Pin */
  GPIO_InitStruct.Pin = ENGATE_1_Pin|ENGATE_2_Pin;
 8000dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	; (8000e28 <MX_GPIO_Init+0xf8>)
 8000de4:	f002 f826 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_1_Pin */
  GPIO_InitStruct.Pin = NFAULT_1_Pin;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NFAULT_1_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0xfc>)
 8000dfc:	f002 f81a 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_2_Pin */
  GPIO_InitStruct.Pin = NFAULT_2_Pin;
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NFAULT_2_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <MX_GPIO_Init+0x100>)
 8000e16:	f002 f80d 	bl	8002e34 <HAL_GPIO_Init>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	48001400 	.word	0x48001400
 8000e30:	48001800 	.word	0x48001800

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6613      	str	r3, [r2, #96]	; 0x60
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7a:	f002 fae9 	bl	8003450 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d15f      	bne.n	8000f6e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a55      	ldr	r2, [pc, #340]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000eb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eb8:	4b54      	ldr	r3, [pc, #336]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec0:	4b53      	ldr	r3, [pc, #332]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b50      	ldr	r3, [pc, #320]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed8:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	4a40      	ldr	r2, [pc, #256]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PA2     ------> ADC1_IN3
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f20:	2301      	movs	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f24:	2303      	movs	r3, #3
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4838      	ldr	r0, [pc, #224]	; (8001014 <HAL_ADC_MspInit+0x188>)
 8000f34:	f001 ff7e 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 ff71 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	482c      	ldr	r0, [pc, #176]	; (8001018 <HAL_ADC_MspInit+0x18c>)
 8000f68:	f001 ff64 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f6c:	e04a      	b.n	8001004 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a2a      	ldr	r2, [pc, #168]	; (800101c <HAL_ADC_MspInit+0x190>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d145      	bne.n	8001004 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000f80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_ADC_MspInit+0x180>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_ADC_MspInit+0x184>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000fd2:	2341      	movs	r3, #65	; 0x41
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f001 ff24 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fec:	2310      	movs	r3, #16
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <HAL_ADC_MspInit+0x194>)
 8001000:	f001 ff18 	bl	8002e34 <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000028 	.word	0x20000028
 8001010:	40021000 	.word	0x40021000
 8001014:	48001400 	.word	0x48001400
 8001018:	48000400 	.word	0x48000400
 800101c:	50000100 	.word	0x50000100
 8001020:	48000800 	.word	0x48000800

08001024 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_FDCAN_MspInit+0x80>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d129      	bne.n	800109a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 800104c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_FDCAN_MspInit+0x84>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001076:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001088:	2309      	movs	r3, #9
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f001 fecd 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40006400 	.word	0x40006400
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3a      	ldr	r2, [pc, #232]	; (80011b4 <HAL_OPAMP_MspInit+0x108>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d119      	bne.n	8001102 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010e6:	230a      	movs	r3, #10
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f001 fe9a 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001100:	e054      	b.n	80011ac <HAL_OPAMP_MspInit+0x100>
  else if(hopamp->Instance==OPAMP2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <HAL_OPAMP_MspInit+0x110>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d131      	bne.n	8001170 <HAL_OPAMP_MspInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800113c:	2320      	movs	r3, #32
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f001 fe6f 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001156:	2301      	movs	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4815      	ldr	r0, [pc, #84]	; (80011c0 <HAL_OPAMP_MspInit+0x114>)
 800116a:	f001 fe63 	bl	8002e34 <HAL_GPIO_Init>
}
 800116e:	e01d      	b.n	80011ac <HAL_OPAMP_MspInit+0x100>
  else if(hopamp->Instance==OPAMP3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_OPAMP_MspInit+0x118>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d118      	bne.n	80011ac <HAL_OPAMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_OPAMP_MspInit+0x10c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13;
 8001192:	f242 0306 	movw	r3, #8198	; 0x2006
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <HAL_OPAMP_MspInit+0x114>)
 80011a8:	f001 fe44 	bl	8002e34 <HAL_GPIO_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3730      	adds	r7, #48	; 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010300 	.word	0x40010300
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010304 	.word	0x40010304
 80011c0:	48000400 	.word	0x48000400
 80011c4:	40010308 	.word	0x40010308

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a25      	ldr	r2, [pc, #148]	; (800127c <HAL_SPI_MspInit+0xb4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d144      	bne.n	8001274 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	6613      	str	r3, [r2, #96]	; 0x60
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_SPI_MspInit+0xb8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001242:	2305      	movs	r3, #5
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f001 fdf0 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001254:	2318      	movs	r3, #24
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001264:	2305      	movs	r3, #5
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_SPI_MspInit+0xbc>)
 8001270:	f001 fde0 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013000 	.word	0x40013000
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400

08001288 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10c      	bne.n	80012b4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012b2:	e010      	b.n	80012d6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <HAL_TIM_PWM_MspInit+0x64>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10b      	bne.n	80012d6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_TIM_PWM_MspInit+0x60>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40012c00 	.word	0x40012c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40013400 	.word	0x40013400

080012f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a5f      	ldr	r2, [pc, #380]	; (800148c <HAL_TIM_MspPostInit+0x19c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d169      	bne.n	80013e6 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a5e      	ldr	r2, [pc, #376]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800135a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800136c:	2304      	movs	r3, #4
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4847      	ldr	r0, [pc, #284]	; (8001494 <HAL_TIM_MspPostInit+0x1a4>)
 8001378:	f001 fd5c 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800137c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800138e:	2306      	movs	r3, #6
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	483f      	ldr	r0, [pc, #252]	; (8001498 <HAL_TIM_MspPostInit+0x1a8>)
 800139a:	f001 fd4b 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80013b0:	2304      	movs	r3, #4
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4837      	ldr	r0, [pc, #220]	; (8001498 <HAL_TIM_MspPostInit+0x1a8>)
 80013bc:	f001 fd3a 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80013c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f001 fd28 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80013e4:	e04e      	b.n	8001484 <HAL_TIM_MspPostInit+0x194>
  else if(htim->Instance==TIM8)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <HAL_TIM_MspPostInit+0x1ac>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d149      	bne.n	8001484 <HAL_TIM_MspPostInit+0x194>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_TIM_MspPostInit+0x1a0>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11;
 8001420:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001432:	2304      	movs	r3, #4
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4815      	ldr	r0, [pc, #84]	; (8001494 <HAL_TIM_MspPostInit+0x1a4>)
 800143e:	f001 fcf9 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001442:	2320      	movs	r3, #32
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001452:	2303      	movs	r3, #3
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	480e      	ldr	r0, [pc, #56]	; (8001498 <HAL_TIM_MspPostInit+0x1a8>)
 800145e:	f001 fce9 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001474:	230a      	movs	r3, #10
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_TIM_MspPostInit+0x1a8>)
 8001480:	f001 fcd8 	bl	8002e34 <HAL_GPIO_Init>
}
 8001484:	bf00      	nop
 8001486:	3730      	adds	r7, #48	; 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40021000 	.word	0x40021000
 8001494:	48000800 	.word	0x48000800
 8001498:	48000400 	.word	0x48000400
 800149c:	40013400 	.word	0x40013400

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_UART_MspInit+0x7c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d127      	bne.n	8001512 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6613      	str	r3, [r2, #96]	; 0x60
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001502:	2307      	movs	r3, #7
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0x84>)
 800150e:	f001 fc91 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40013800 	.word	0x40013800
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f894 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SystemInit+0x28>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <SystemInit+0x28>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SystemInit+0x28>)
 800159a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159e:	609a      	str	r2, [r3, #8]
#endif
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <LoopForever+0x6>)
  ldr r1, =_edata
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <LoopForever+0xe>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015cc:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <LoopForever+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015da:	f7ff ffd3 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f004 fb9d 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015e2:	f7fe ff99 	bl	8000518 <main>

080015e6 <LoopForever>:

LoopForever:
    b LoopForever
 80015e6:	e7fe      	b.n	80015e6 <LoopForever>
  ldr   r0, =_estack
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015f4:	08005ddc 	.word	0x08005ddc
  ldr r2, =_sbss
 80015f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015fc:	200003a8 	.word	0x200003a8

08001600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_2_IRQHandler>

08001602 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f001 fa19 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f80e 	bl	8001634 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e001      	b.n	8001628 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001624:	f7ff fc0e 	bl	8000e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001628:	79fb      	ldrb	r3, [r7, #7]

}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_InitTick+0x68>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d022      	beq.n	800168e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_InitTick+0x6c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_InitTick+0x68>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001654:	fbb1 f3f3 	udiv	r3, r1, r3
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fa16 	bl	8002a8e <HAL_SYSTICK_Config>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10f      	bne.n	8001688 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d809      	bhi.n	8001682 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166e:	2200      	movs	r2, #0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	f001 f9f0 	bl	8002a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0x70>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e007      	b.n	8001692 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e004      	b.n	8001692 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e001      	b.n	8001692 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x1c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x20>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_IncTick+0x1c>)
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	200003a4 	.word	0x200003a4
 80016c8:	20000008 	.word	0x20000008

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200003a4 	.word	0x200003a4

080016e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3360      	adds	r3, #96	; 0x60
 800175e:	461a      	mov	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <LL_ADC_SetOffset+0x44>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	4313      	orrs	r3, r2
 800177c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	03fff000 	.word	0x03fff000

08001794 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3360      	adds	r3, #96	; 0x60
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3360      	adds	r3, #96	; 0x60
 80017d0:	461a      	mov	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ea:	bf00      	nop
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b087      	sub	sp, #28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3360      	adds	r3, #96	; 0x60
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	461a      	mov	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3330      	adds	r3, #48	; 0x30
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	211f      	movs	r1, #31
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 011f 	and.w	r1, r3, #31
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3314      	adds	r3, #20
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0e5b      	lsrs	r3, r3, #25
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0d1b      	lsrs	r3, r3, #20
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2107      	movs	r1, #7
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	0d1b      	lsrs	r3, r3, #20
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0318 	and.w	r3, r3, #24
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <LL_ADC_SetChannelSingleDiff+0x44>)
 800195c:	40d9      	lsrs	r1, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	400b      	ands	r3, r1
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0007ffff 	.word	0x0007ffff

08001980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6093      	str	r3, [r2, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <LL_ADC_IsEnabled+0x18>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <LL_ADC_IsEnabled+0x1a>
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1ad      	b.n	8001e06 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff f9e7 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff67 	bl	80019a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff4d 	bl	8001980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff82 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d113      	bne.n	8001b1e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff66 	bl	80019cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b00:	4b9e      	ldr	r3, [pc, #632]	; (8001d7c <HAL_ADC_Init+0x2ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	4a9e      	ldr	r2, [pc, #632]	; (8001d80 <HAL_ADC_Init+0x2f0>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b10:	e002      	b.n	8001b18 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff66 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff77 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001b54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8148 	bne.w	8001df4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8144 	bne.w	8001df4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b74:	f043 0202 	orr.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff4b 	bl	8001a1c <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d141      	bne.n	8001c10 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_Init+0x110>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_ADC_Init+0x2f4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_ADC_Init+0x130>
 8001ba0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ba4:	f7ff ff3a 	bl	8001a1c <LL_ADC_IsEnabled>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	4876      	ldr	r0, [pc, #472]	; (8001d84 <HAL_ADC_Init+0x2f4>)
 8001bac:	f7ff ff36 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e012      	b.n	8001be6 <HAL_ADC_Init+0x156>
 8001bc0:	4871      	ldr	r0, [pc, #452]	; (8001d88 <HAL_ADC_Init+0x2f8>)
 8001bc2:	f7ff ff2b 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4870      	ldr	r0, [pc, #448]	; (8001d8c <HAL_ADC_Init+0x2fc>)
 8001bca:	f7ff ff27 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	431c      	orrs	r4, r3
 8001bd2:	486f      	ldr	r0, [pc, #444]	; (8001d90 <HAL_ADC_Init+0x300>)
 8001bd4:	f7ff ff22 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Init+0x16e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <HAL_ADC_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x172>
 8001bfe:	4a65      	ldr	r2, [pc, #404]	; (8001d94 <HAL_ADC_Init+0x304>)
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_Init+0x174>
 8001c02:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_ADC_Init+0x308>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff fd6a 	bl	80016e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7f5b      	ldrb	r3, [r3, #29]
 8001c14:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c20:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c26:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	045b      	lsls	r3, r3, #17
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_ADC_Init+0x30c>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fed3 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001c9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fee0 	bl	8001a68 <LL_ADC_INJ_IsConversionOngoing>
 8001ca8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d17f      	bne.n	8001db0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d17c      	bne.n	8001db0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d017      	beq.n	8001d18 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6911      	ldr	r1, [r2, #16]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d16:	e013      	b.n	8001d40 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12a      	bne.n	8001da0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	611a      	str	r2, [r3, #16]
 8001d7a:	e019      	b.n	8001db0 <HAL_ADC_Init+0x320>
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	053e2d63 	.word	0x053e2d63
 8001d84:	50000100 	.word	0x50000100
 8001d88:	50000400 	.word	0x50000400
 8001d8c:	50000500 	.word	0x50000500
 8001d90:	50000600 	.word	0x50000600
 8001d94:	50000300 	.word	0x50000300
 8001d98:	50000700 	.word	0x50000700
 8001d9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10c      	bne.n	8001dd2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f023 010f 	bic.w	r1, r3, #15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e007      	b.n	8001de2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 020f 	bic.w	r2, r2, #15
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001df2:	e007      	b.n	8001e04 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop

08001e10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0b6      	sub	sp, #216	; 0xd8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x24>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f000 bc12 	b.w	8002658 <HAL_ADC_ConfigChannel+0x848>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fdfe 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 83f2 	bne.w	8002632 <HAL_ADC_ConfigChannel+0x822>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f7ff fd14 	bl	8001888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fdec 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001e6a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fdf8 	bl	8001a68 <LL_ADC_INJ_IsConversionOngoing>
 8001e78:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 81d9 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 81d4 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e98:	d10f      	bne.n	8001eba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7ff fd1b 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fcd5 	bl	8001862 <LL_ADC_SetSamplingTimeCommonConfig>
 8001eb8:	e00e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f7ff fd0a 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fcc5 	bl	8001862 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d022      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f0a:	f7ff fc1f 	bl	800174c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f7ff fc6b 	bl	80017f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6919      	ldr	r1, [r3, #16]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7f1b      	ldrb	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x126>
 8001f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x128>
 8001f36:	2300      	movs	r3, #0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fc77 	bl	800182c <LL_ADC_SetOffsetSaturation>
 8001f3e:	e17b      	b.n	8002238 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fc24 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x15c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc19 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	e01e      	b.n	8001faa <HAL_ADC_ConfigChannel+0x19a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fc0e 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	e018      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x1e4>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fbdd 	bl	80017c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2101      	movs	r1, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fbc1 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x222>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fbb6 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	e01e      	b.n	8002070 <HAL_ADC_ConfigChannel+0x260>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fbab 	bl	8001794 <LL_ADC_GetOffsetChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x278>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	e018      	b.n	80020ba <HAL_ADC_ConfigChannel+0x2aa>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800209c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e004      	b.n	80020ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80020b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fb7a 	bl	80017c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2102      	movs	r1, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fb5e 	bl	8001794 <LL_ADC_GetOffsetChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x2e8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2102      	movs	r1, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fb53 	bl	8001794 <LL_ADC_GetOffsetChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 021f 	and.w	r2, r3, #31
 80020f6:	e01e      	b.n	8002136 <HAL_ADC_ConfigChannel+0x326>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2102      	movs	r1, #2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fb48 	bl	8001794 <LL_ADC_GetOffsetChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800211a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800211e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800212a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_ConfigChannel+0x33e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	e016      	b.n	800217c <HAL_ADC_ConfigChannel+0x36c>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e004      	b.n	800217c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fb19 	bl	80017c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2103      	movs	r1, #3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fafd 	bl	8001794 <LL_ADC_GetOffsetChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x3aa>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2103      	movs	r1, #3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff faf2 	bl	8001794 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	e017      	b.n	80021ea <HAL_ADC_ConfigChannel+0x3da>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2103      	movs	r1, #3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fae7 	bl	8001794 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e003      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x3f2>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	e011      	b.n	8002226 <HAL_ADC_ConfigChannel+0x416>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002212:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	429a      	cmp	r2, r3
 8002228:	d106      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	2103      	movs	r1, #3
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fac4 	bl	80017c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fbed 	bl	8001a1c <LL_ADC_IsEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 813d 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	461a      	mov	r2, r3
 8002258:	f7ff fb6e 	bl	8001938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4aa2      	ldr	r2, [pc, #648]	; (80024ec <HAL_ADC_ConfigChannel+0x6dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	f040 812e 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x480>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	3301      	adds	r3, #1
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2b09      	cmp	r3, #9
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e019      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x4b4>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800229e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80022a8:	2320      	movs	r3, #32
 80022aa:	e003      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80022ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	bf94      	ite	ls
 80022be:	2301      	movls	r3, #1
 80022c0:	2300      	movhi	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d079      	beq.n	80023bc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x4d4>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e2:	e015      	b.n	8002310 <HAL_ADC_ConfigChannel+0x500>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x520>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x550>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800234c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x576>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	051b      	lsls	r3, r3, #20
 8002384:	e018      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x5a8>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e003      	b.n	80023aa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80023a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	430b      	orrs	r3, r1
 80023ba:	e07e      	b.n	80024ba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x5c8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	3301      	adds	r3, #1
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d6:	e015      	b.n	8002404 <HAL_ADC_ConfigChannel+0x5f4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e003      	b.n	80023fc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	069b      	lsls	r3, r3, #26
 8002400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x614>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	e017      	b.n	8002454 <HAL_ADC_ConfigChannel+0x644>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	61fb      	str	r3, [r7, #28]
  return result;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x670>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	3b1e      	subs	r3, #30
 8002478:	051b      	lsls	r3, r3, #20
 800247a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800247e:	e01b      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x6a8>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	613b      	str	r3, [r7, #16]
  return result;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f003 021f 	and.w	r2, r3, #31
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	3b1e      	subs	r3, #30
 80024b2:	051b      	lsls	r3, r3, #20
 80024b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b8:	430b      	orrs	r3, r1
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	4619      	mov	r1, r3
 80024c0:	f7ff fa0e 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_ADC_ConfigChannel+0x6e0>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80bd 	beq.w	800264c <HAL_ADC_ConfigChannel+0x83c>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x6d6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_ADC_ConfigChannel+0x6e4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x6ec>
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <HAL_ADC_ConfigChannel+0x6e8>)
 80024e8:	e009      	b.n	80024fe <HAL_ADC_ConfigChannel+0x6ee>
 80024ea:	bf00      	nop
 80024ec:	407f0000 	.word	0x407f0000
 80024f0:	80080000 	.word	0x80080000
 80024f4:	50000100 	.word	0x50000100
 80024f8:	50000300 	.word	0x50000300
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_ADC_ConfigChannel+0x850>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f916 	bl	8001730 <LL_ADC_GetCommonPathInternalCh>
 8002504:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_ADC_ConfigChannel+0x854>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADC_ConfigChannel+0x70c>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a54      	ldr	r2, [pc, #336]	; (8002668 <HAL_ADC_ConfigChannel+0x858>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d139      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x780>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800251c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d133      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002530:	d005      	beq.n	800253e <HAL_ADC_ConfigChannel+0x72e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_ADC_ConfigChannel+0x85c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	f040 8084 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x836>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002546:	d004      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x742>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_ADC_ConfigChannel+0x860>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x746>
 8002552:	4a48      	ldr	r2, [pc, #288]	; (8002674 <HAL_ADC_ConfigChannel+0x864>)
 8002554:	e000      	b.n	8002558 <HAL_ADC_ConfigChannel+0x748>
 8002556:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_ADC_ConfigChannel+0x850>)
 8002558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7ff f8d1 	bl	800170a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002568:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_ADC_ConfigChannel+0x868>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	4a43      	ldr	r2, [pc, #268]	; (800267c <HAL_ADC_ConfigChannel+0x86c>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099a      	lsrs	r2, r3, #6
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_ConfigChannel+0x778>
          {
            wait_loop_index--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b01      	subs	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x772>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258e:	e05a      	b.n	8002646 <HAL_ADC_ConfigChannel+0x836>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_ADC_ConfigChannel+0x870>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d125      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x7d6>
 800259a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x7d6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a31      	ldr	r2, [pc, #196]	; (8002670 <HAL_ADC_ConfigChannel+0x860>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d104      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x7aa>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a33      	ldr	r2, [pc, #204]	; (8002684 <HAL_ADC_ConfigChannel+0x874>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d047      	beq.n	800264a <HAL_ADC_ConfigChannel+0x83a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x7be>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_ADC_ConfigChannel+0x860>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x7c2>
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_ADC_ConfigChannel+0x864>)
 80025d0:	e000      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x7c4>
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_ADC_ConfigChannel+0x850>)
 80025d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7ff f893 	bl	800170a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e4:	e031      	b.n	800264a <HAL_ADC_ConfigChannel+0x83a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_ADC_ConfigChannel+0x878>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d12d      	bne.n	800264c <HAL_ADC_ConfigChannel+0x83c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d127      	bne.n	800264c <HAL_ADC_ConfigChannel+0x83c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_ADC_ConfigChannel+0x860>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260e:	d004      	beq.n	800261a <HAL_ADC_ConfigChannel+0x80a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_ADC_ConfigChannel+0x860>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x80e>
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_ADC_ConfigChannel+0x864>)
 800261c:	e000      	b.n	8002620 <HAL_ADC_ConfigChannel+0x810>
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_ADC_ConfigChannel+0x850>)
 8002620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7ff f86d 	bl	800170a <LL_ADC_SetCommonPathInternalCh>
 8002630:	e00c      	b.n	800264c <HAL_ADC_ConfigChannel+0x83c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	f043 0220 	orr.w	r2, r3, #32
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002644:	e002      	b.n	800264c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_ADC_ConfigChannel+0x83c>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002654:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002658:	4618      	mov	r0, r3
 800265a:	37d8      	adds	r7, #216	; 0xd8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	50000700 	.word	0x50000700
 8002664:	c3210000 	.word	0xc3210000
 8002668:	90c00010 	.word	0x90c00010
 800266c:	50000600 	.word	0x50000600
 8002670:	50000100 	.word	0x50000100
 8002674:	50000300 	.word	0x50000300
 8002678:	20000000 	.word	0x20000000
 800267c:	053e2d63 	.word	0x053e2d63
 8002680:	c7520000 	.word	0xc7520000
 8002684:	50000500 	.word	0x50000500
 8002688:	cb840000 	.word	0xcb840000

0800268c <LL_ADC_IsEnabled>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <LL_ADC_IsEnabled+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_IsEnabled+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d101      	bne.n	80026ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b0a1      	sub	sp, #132	; 0x84
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0e3      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002706:	d102      	bne.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e009      	b.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	e001      	b.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0be      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffb5 	bl	80026b2 <LL_ADC_REG_IsConversionOngoing>
 8002748:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ffaf 	bl	80026b2 <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80a0 	bne.w	800289c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 809c 	bne.w	800289c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276c:	d004      	beq.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002778:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800277a:	e000      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800277c:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800277e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d04b      	beq.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279a:	035b      	lsls	r3, r3, #13
 800279c:	430b      	orrs	r3, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ac:	d004      	beq.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10f      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80027b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027bc:	f7ff ff66 	bl	800268c <LL_ADC_IsEnabled>
 80027c0:	4604      	mov	r4, r0
 80027c2:	4841      	ldr	r0, [pc, #260]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80027c4:	f7ff ff62 	bl	800268c <LL_ADC_IsEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4323      	orrs	r3, r4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e012      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80027d8:	483c      	ldr	r0, [pc, #240]	; (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80027da:	f7ff ff57 	bl	800268c <LL_ADC_IsEnabled>
 80027de:	4604      	mov	r4, r0
 80027e0:	483b      	ldr	r0, [pc, #236]	; (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027e2:	f7ff ff53 	bl	800268c <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	431c      	orrs	r4, r3
 80027ea:	483c      	ldr	r0, [pc, #240]	; (80028dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027ec:	f7ff ff4e 	bl	800268c <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4323      	orrs	r3, r4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d056      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6811      	ldr	r1, [r2, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
 8002816:	430a      	orrs	r2, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800281e:	e047      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d004      	beq.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10f      	bne.n	8002860 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002840:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002844:	f7ff ff22 	bl	800268c <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	481f      	ldr	r0, [pc, #124]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800284c:	f7ff ff1e 	bl	800268c <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	4323      	orrs	r3, r4
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e012      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002860:	481a      	ldr	r0, [pc, #104]	; (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002862:	f7ff ff13 	bl	800268c <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4819      	ldr	r0, [pc, #100]	; (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800286a:	f7ff ff0f 	bl	800268c <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	431c      	orrs	r4, r3
 8002872:	481a      	ldr	r0, [pc, #104]	; (80028dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002874:	f7ff ff0a 	bl	800268c <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002892:	f023 030f 	bic.w	r3, r3, #15
 8002896:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002898:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800289a:	e009      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028ae:	e000      	b.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3784      	adds	r7, #132	; 0x84
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	50000100 	.word	0x50000100
 80028cc:	50000400 	.word	0x50000400
 80028d0:	50000500 	.word	0x50000500
 80028d4:	50000300 	.word	0x50000300
 80028d8:	50000700 	.word	0x50000700
 80028dc:	50000600 	.word	0x50000600

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff47 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff5e 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff90 	bl	8002998 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5f 	bl	8002944 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffb2 	bl	8002a00 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e147      	b.n	8002d4a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe faa8 	bl	8001024 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae4:	f7fe fdf2 	bl	80016cc <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aea:	e012      	b.n	8002b12 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002aec:	f7fe fdee 	bl	80016cc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d90b      	bls.n	8002b12 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e11b      	b.n	8002d4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d0e5      	beq.n	8002aec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b30:	f7fe fdcc 	bl	80016cc <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b36:	e012      	b.n	8002b5e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b38:	f7fe fdc8 	bl	80016cc <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b0a      	cmp	r3, #10
 8002b44:	d90b      	bls.n	8002b5e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0f5      	b.n	8002d4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0e5      	beq.n	8002b38 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0202 	orr.w	r2, r2, #2
 8002b7a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a74      	ldr	r2, [pc, #464]	; (8002d54 <HAL_FDCAN_Init+0x2ac>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d103      	bne.n	8002b8e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b86:	4a74      	ldr	r2, [pc, #464]	; (8002d58 <HAL_FDCAN_Init+0x2b0>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7c1b      	ldrb	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e007      	b.n	8002bb8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7c5b      	ldrb	r3, [r3, #17]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d108      	bne.n	8002bd2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bce:	619a      	str	r2, [r3, #24]
 8002bd0:	e007      	b.n	8002be2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002be0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7c9b      	ldrb	r3, [r3, #18]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e007      	b.n	8002c0c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c0a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002c30:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0210 	bic.w	r2, r2, #16
 8002c40:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d108      	bne.n	8002c5c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0204 	orr.w	r2, r2, #4
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	e02c      	b.n	8002cb6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d028      	beq.n	8002cb6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c7a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0210 	orr.w	r2, r2, #16
 8002c8a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d110      	bne.n	8002cb6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	e007      	b.n	8002cb6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0220 	orr.w	r2, r2, #32
 8002cb4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cc6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cde:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ce0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cea:	d115      	bne.n	8002d18 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cfa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	3b01      	subs	r3, #1
 8002d02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d04:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f814 	bl	8002d5c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40006400 	.word	0x40006400
 8002d58:	40006500 	.word	0x40006500

08002d5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002d66:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d103      	bne.n	8002d7a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002d78:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002d8a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	061a      	lsls	r2, r3, #24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e005      	b.n	8002e0e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3f3      	bcc.n	8002e02 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	4000a400 	.word	0x4000a400
 8002e2c:	40006800 	.word	0x40006800
 8002e30:	40006c00 	.word	0x40006c00

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e42:	e15a      	b.n	80030fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 814c 	beq.w	80030f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d00b      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d130      	bne.n	8002ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 0201 	and.w	r2, r3, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0xea>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d123      	bne.n	8002f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	6939      	ldr	r1, [r7, #16]
 8002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80a6 	beq.w	80030f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa8:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_GPIO_Init+0x2e4>)
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	4a5a      	ldr	r2, [pc, #360]	; (8003118 <HAL_GPIO_Init+0x2e4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_GPIO_Init+0x2e4>)
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc0:	4a56      	ldr	r2, [pc, #344]	; (800311c <HAL_GPIO_Init+0x2e8>)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fea:	d01f      	beq.n	800302c <HAL_GPIO_Init+0x1f8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <HAL_GPIO_Init+0x2ec>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d019      	beq.n	8003028 <HAL_GPIO_Init+0x1f4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_GPIO_Init+0x2f0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_GPIO_Init+0x1f0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4a      	ldr	r2, [pc, #296]	; (8003128 <HAL_GPIO_Init+0x2f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00d      	beq.n	8003020 <HAL_GPIO_Init+0x1ec>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a49      	ldr	r2, [pc, #292]	; (800312c <HAL_GPIO_Init+0x2f8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x1e8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a48      	ldr	r2, [pc, #288]	; (8003130 <HAL_GPIO_Init+0x2fc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_GPIO_Init+0x1e4>
 8003014:	2305      	movs	r3, #5
 8003016:	e00a      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 8003018:	2306      	movs	r3, #6
 800301a:	e008      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 800301c:	2304      	movs	r3, #4
 800301e:	e006      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 8003020:	2303      	movs	r3, #3
 8003022:	e004      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 8003024:	2302      	movs	r3, #2
 8003026:	e002      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_GPIO_Init+0x1fa>
 800302c:	2300      	movs	r3, #0
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	f002 0203 	and.w	r2, r2, #3
 8003034:	0092      	lsls	r2, r2, #2
 8003036:	4093      	lsls	r3, r2
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800303e:	4937      	ldr	r1, [pc, #220]	; (800311c <HAL_GPIO_Init+0x2e8>)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_GPIO_Init+0x300>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003070:	4a30      	ldr	r2, [pc, #192]	; (8003134 <HAL_GPIO_Init+0x300>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <HAL_GPIO_Init+0x300>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800309a:	4a26      	ldr	r2, [pc, #152]	; (8003134 <HAL_GPIO_Init+0x300>)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_GPIO_Init+0x300>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_GPIO_Init+0x300>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HAL_GPIO_Init+0x300>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_GPIO_Init+0x300>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	3301      	adds	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f ae9d 	bne.w	8002e44 <HAL_GPIO_Init+0x10>
  }
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	40010000 	.word	0x40010000
 8003120:	48000400 	.word	0x48000400
 8003124:	48000800 	.word	0x48000800
 8003128:	48000c00 	.word	0x48000c00
 800312c:	48001000 	.word	0x48001000
 8003130:	48001400 	.word	0x48001400
 8003134:	40010400 	.word	0x40010400

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003154:	e002      	b.n	800315c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0bb      	b.n	80032f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d101      	bne.n	800318e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0b3      	b.n	80032f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d101      	bne.n	800319e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0ab      	b.n	80032f6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <HAL_OPAMP_Init+0x198>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	4a57      	ldr	r2, [pc, #348]	; (8003300 <HAL_OPAMP_Init+0x198>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6613      	str	r3, [r2, #96]	; 0x60
 80031aa:	4b55      	ldr	r3, [pc, #340]	; (8003300 <HAL_OPAMP_Init+0x198>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd ff6e 	bl	80010ac <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d003      	beq.n	80031e0 <HAL_OPAMP_Init+0x78>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b60      	cmp	r3, #96	; 0x60
 80031de:	d133      	bne.n	8003248 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0110 	bic.w	r1, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_OPAMP_Init+0x19c>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6851      	ldr	r1, [r2, #4]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	430a      	orrs	r2, r1
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	7d09      	ldrb	r1, [r1, #20]
 8003214:	2901      	cmp	r1, #1
 8003216:	d102      	bne.n	800321e <HAL_OPAMP_Init+0xb6>
 8003218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321c:	e000      	b.n	8003220 <HAL_OPAMP_Init+0xb8>
 800321e:	2100      	movs	r1, #0
 8003220:	4311      	orrs	r1, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003232:	04d2      	lsls	r2, r2, #19
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800323a:	0612      	lsls	r2, r2, #24
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	430b      	orrs	r3, r1
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e035      	b.n	80032b4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0110 	bic.w	r1, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_OPAMP_Init+0x19c>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6851      	ldr	r1, [r2, #4]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6912      	ldr	r2, [r2, #16]
 800327c:	430a      	orrs	r2, r1
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	7d09      	ldrb	r1, [r1, #20]
 8003282:	2901      	cmp	r1, #1
 8003284:	d102      	bne.n	800328c <HAL_OPAMP_Init+0x124>
 8003286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800328a:	e000      	b.n	800328e <HAL_OPAMP_Init+0x126>
 800328c:	2100      	movs	r1, #0
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a0:	04d2      	lsls	r2, r2, #19
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a8:	0612      	lsls	r2, r2, #24
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db10      	blt.n	80032e0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	e0003e11 	.word	0xe0003e11

08003308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d141      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d131      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332a:	4a46      	ldr	r2, [pc, #280]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800333c:	4a41      	ldr	r2, [pc, #260]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003342:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003344:	4b40      	ldr	r3, [pc, #256]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2232      	movs	r2, #50	; 0x32
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	4a3f      	ldr	r2, [pc, #252]	; (800344c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	0c9b      	lsrs	r3, r3, #18
 8003356:	3301      	adds	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335a:	e002      	b.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3b01      	subs	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d102      	bne.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f2      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d158      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e057      	b.n	8003438 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003388:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338e:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003398:	e04d      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a0:	d141      	bne.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d131      	bne.n	8003414 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2232      	movs	r2, #50	; 0x32
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	0c9b      	lsrs	r3, r3, #18
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e6:	e002      	b.n	80033ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d102      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f2      	bne.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d112      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e011      	b.n	8003438 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003424:	e007      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003434:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40007000 	.word	0x40007000
 8003448:	20000000 	.word	0x20000000
 800344c:	431bde83 	.word	0x431bde83

08003450 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800345a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345e:	6093      	str	r3, [r2, #8]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40007000 	.word	0x40007000

08003470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e308      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d075      	beq.n	800357a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4ba3      	ldr	r3, [pc, #652]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003498:	4ba0      	ldr	r3, [pc, #640]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0x3e>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_OscConfig+0x44>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4b99      	ldr	r3, [pc, #612]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d05b      	beq.n	8003578 <HAL_RCC_OscConfig+0x108>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d157      	bne.n	8003578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e2e3      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x74>
 80034d6:	4b91      	ldr	r3, [pc, #580]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a90      	ldr	r2, [pc, #576]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x98>
 80034ee:	4b8b      	ldr	r3, [pc, #556]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a8a      	ldr	r2, [pc, #552]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a87      	ldr	r2, [pc, #540]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 8003508:	4b84      	ldr	r3, [pc, #528]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a83      	ldr	r2, [pc, #524]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe f8d0 	bl	80016cc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe f8cc 	bl	80016cc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e2a8      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0xc0>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe f8bc 	bl	80016cc <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe f8b8 	bl	80016cc <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e294      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356a:	4b6c      	ldr	r3, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0xe8>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d075      	beq.n	8003672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003586:	4b65      	ldr	r3, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003590:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_OscConfig+0x136>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_OscConfig+0x13c>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d11f      	bne.n	80035ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ac:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x154>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e267      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	4952      	ldr	r1, [pc, #328]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035d8:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x2b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe f829 	bl	8001634 <HAL_InitTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d043      	beq.n	8003670 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e253      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d023      	beq.n	800363c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a48      	ldr	r2, [pc, #288]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe f864 	bl	80016cc <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe f860 	bl	80016cc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e23c      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361a:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
 800363a:	e01a      	b.n	8003672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f840 	bl	80016cc <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe f83c 	bl	80016cc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e218      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x1e0>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d03c      	beq.n	80036f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	4a23      	ldr	r2, [pc, #140]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe f819 	bl	80016cc <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe f815 	bl	80016cc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1f1      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ef      	beq.n	800369e <HAL_RCC_OscConfig+0x22e>
 80036be:	e01b      	b.n	80036f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fffc 	bl	80016cc <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fd fff8 	bl	80016cc <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1d4      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ef      	bne.n	80036d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80ab 	beq.w	800385c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCC_OscConfig+0x2ac>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x2b4>
 8003716:	2301      	movs	r3, #1
 8003718:	e005      	b.n	8003726 <HAL_RCC_OscConfig+0x2b6>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	20000004 	.word	0x20000004
 8003724:	2300      	movs	r3, #0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	4baf      	ldr	r3, [pc, #700]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	4aae      	ldr	r2, [pc, #696]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	; 0x58
 8003736:	4bac      	ldr	r3, [pc, #688]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4ba9      	ldr	r3, [pc, #676]	; (80039ec <HAL_RCC_OscConfig+0x57c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003752:	4ba6      	ldr	r3, [pc, #664]	; (80039ec <HAL_RCC_OscConfig+0x57c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4aa5      	ldr	r2, [pc, #660]	; (80039ec <HAL_RCC_OscConfig+0x57c>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fd ffb5 	bl	80016cc <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7fd ffb1 	bl	80016cc <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e18d      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	4b9c      	ldr	r3, [pc, #624]	; (80039ec <HAL_RCC_OscConfig+0x57c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_RCC_OscConfig+0x32e>
 800378c:	4b96      	ldr	r3, [pc, #600]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	4a95      	ldr	r2, [pc, #596]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800379c:	e024      	b.n	80037e8 <HAL_RCC_OscConfig+0x378>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d110      	bne.n	80037c8 <HAL_RCC_OscConfig+0x358>
 80037a6:	4b90      	ldr	r3, [pc, #576]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	4a8e      	ldr	r2, [pc, #568]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b6:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	4a8a      	ldr	r2, [pc, #552]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c6:	e00f      	b.n	80037e8 <HAL_RCC_OscConfig+0x378>
 80037c8:	4b87      	ldr	r3, [pc, #540]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a86      	ldr	r2, [pc, #536]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d8:	4b83      	ldr	r3, [pc, #524]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a82      	ldr	r2, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d016      	beq.n	800381e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd ff6c 	bl	80016cc <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd ff68 	bl	80016cc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e142      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ed      	beq.n	80037f8 <HAL_RCC_OscConfig+0x388>
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd ff55 	bl	80016cc <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd ff51 	bl	80016cc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e12b      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ed      	bne.n	8003826 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003850:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a64      	ldr	r2, [pc, #400]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d03c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003870:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd ff24 	bl	80016cc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003888:	f7fd ff20 	bl	80016cc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0fc      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800389c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ef      	beq.n	8003888 <HAL_RCC_OscConfig+0x418>
 80038a8:	e01b      	b.n	80038e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80038ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fd ff07 	bl	80016cc <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038c2:	f7fd ff03 	bl	80016cc <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0df      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038d4:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ef      	bne.n	80038c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80d3 	beq.w	8003a92 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ec:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	f000 808d 	beq.w	8003a14 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d15a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a38      	ldr	r2, [pc, #224]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fd fedd 	bl	80016cc <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fd fed9 	bl	80016cc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0b5      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_OscConfig+0x580>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6a11      	ldr	r1, [r2, #32]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003944:	3a01      	subs	r2, #1
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800394e:	0212      	lsls	r2, r2, #8
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800396e:	06d2      	lsls	r2, r2, #27
 8003970:	430a      	orrs	r2, r1
 8003972:	491d      	ldr	r1, [pc, #116]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd fe9c 	bl	80016cc <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd fe98 	bl	80016cc <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e074      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x528>
 80039b6:	e06c      	b.n	8003a92 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd fe74 	bl	80016cc <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e6:	e00e      	b.n	8003a06 <HAL_RCC_OscConfig+0x596>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fd fe6a 	bl	80016cc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e046      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCC_OscConfig+0x62c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x584>
 8003a12:	e03e      	b.n	8003a92 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e039      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x62c>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d12c      	bne.n	8003a8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d123      	bne.n	8003a8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d11b      	bne.n	8003a8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d113      	bne.n	8003a8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e11e      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b91      	ldr	r3, [pc, #580]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d910      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 020f 	bic.w	r2, r3, #15
 8003ace:	498c      	ldr	r1, [pc, #560]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e106      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d073      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d129      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afc:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0f4      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b0c:	f000 f99e 	bl	8003e4c <RCC_GetSysClockFreqFromPLLSource>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a7c      	ldr	r2, [pc, #496]	; (8003d08 <HAL_RCC_ClockConfig+0x268>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d93f      	bls.n	8003b9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d033      	beq.n	8003b9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12f      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b3a:	4b72      	ldr	r3, [pc, #456]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e024      	b.n	8003b9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0c6      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b68:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0be      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b78:	f000 f8ce 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4a61      	ldr	r2, [pc, #388]	; (8003d08 <HAL_RCC_ClockConfig+0x268>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d909      	bls.n	8003b9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b86:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8e:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4957      	ldr	r1, [pc, #348]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bac:	f7fd fd8e 	bl	80016cc <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fd fd8a 	bl	80016cc <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e095      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d023      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c0c:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1c:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4936      	ldr	r1, [pc, #216]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d105      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c36:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d21d      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 020f 	bic.w	r2, r3, #15
 8003c58:	4929      	ldr	r1, [pc, #164]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c60:	f7fd fd34 	bl	80016cc <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fd fd30 	bl	80016cc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03b      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCC_ClockConfig+0x260>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1ed      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4917      	ldr	r1, [pc, #92]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490f      	ldr	r1, [pc, #60]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cca:	f000 f825 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_RCC_ClockConfig+0x264>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_RCC_ClockConfig+0x26c>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x270>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x274>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fca0 	bl	8001634 <HAL_InitTick>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	04c4b400 	.word	0x04c4b400
 8003d0c:	08005d9c 	.word	0x08005d9c
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d2a:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	e047      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d3c:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	e03e      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d136      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3301      	adds	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d10c      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	68d2      	ldr	r2, [r2, #12]
 8003d78:	0a12      	lsrs	r2, r2, #8
 8003d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	617b      	str	r3, [r7, #20]
      break;
 8003d84:	e00c      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	0a12      	lsrs	r2, r2, #8
 8003d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
      break;
 8003d9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0e5b      	lsrs	r3, r3, #25
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	3301      	adds	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e001      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003dc0:	693b      	ldr	r3, [r7, #16]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	007a1200 	.word	0x007a1200

08003ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000000 	.word	0x20000000

08003df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003df8:	f7ff fff0 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e0a:	5cd3      	ldrb	r3, [r2, r3]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08005dac 	.word	0x08005dac

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e24:	f7ff ffda 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8003e28:	4601      	mov	r1, r0
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0adb      	lsrs	r3, r3, #11
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08005dac 	.word	0x08005dac

08003e4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d10c      	bne.n	8003e8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e70:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7a:	68d2      	ldr	r2, [r2, #12]
 8003e7c:	0a12      	lsrs	r2, r2, #8
 8003e7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
    break;
 8003e88:	e00c      	b.n	8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e8a:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	0a12      	lsrs	r2, r2, #8
 8003e98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
    break;
 8003ea2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0e5b      	lsrs	r3, r3, #25
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ebe:	687b      	ldr	r3, [r7, #4]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	007a1200 	.word	0x007a1200
 8003ed4:	00f42400 	.word	0x00f42400

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8098 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58
 8003f12:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a39      	ldr	r2, [pc, #228]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd fbcd 	bl	80016cc <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f34:	e009      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fd fbc9 	bl	80016cc <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	74fb      	strb	r3, [r7, #19]
        break;
 8003f48:	e005      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f4a:	4b30      	ldr	r3, [pc, #192]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ef      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d159      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d019      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f78:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f94:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fa4:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fb89 	bl	80016cc <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fbc:	e00b      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd fb85 	bl	80016cc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d902      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ec      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	4903      	ldr	r1, [pc, #12]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004000:	e008      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	74bb      	strb	r3, [r7, #18]
 8004006:	e005      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004008:	40021000 	.word	0x40021000
 800400c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004014:	7c7b      	ldrb	r3, [r7, #17]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d105      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	4aae      	ldr	r2, [pc, #696]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004024:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004032:	4ba9      	ldr	r3, [pc, #676]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f023 0203 	bic.w	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	49a5      	ldr	r1, [pc, #660]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004054:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 020c 	bic.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	499d      	ldr	r1, [pc, #628]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004076:	4b98      	ldr	r3, [pc, #608]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4994      	ldr	r1, [pc, #592]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004098:	4b8f      	ldr	r3, [pc, #572]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	498c      	ldr	r1, [pc, #560]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ba:	4b87      	ldr	r3, [pc, #540]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4983      	ldr	r1, [pc, #524]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040dc:	4b7e      	ldr	r3, [pc, #504]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	497b      	ldr	r1, [pc, #492]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	4972      	ldr	r1, [pc, #456]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004120:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	496a      	ldr	r1, [pc, #424]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	4961      	ldr	r1, [pc, #388]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004164:	4b5c      	ldr	r3, [pc, #368]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	4959      	ldr	r1, [pc, #356]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4950      	ldr	r1, [pc, #320]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d015      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a8:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4948      	ldr	r1, [pc, #288]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d015      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	493a      	ldr	r1, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	492c      	ldr	r1, [pc, #176]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004236:	d105      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800423e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004242:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d015      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	491e      	ldr	r1, [pc, #120]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426e:	d105      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d015      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	4910      	ldr	r1, [pc, #64]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a6:	d105      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d018      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	4902      	ldr	r1, [pc, #8]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80042d8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e4:	d105      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e6:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4a20      	ldr	r2, [pc, #128]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	4917      	ldr	r1, [pc, #92]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d105      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	4909      	ldr	r1, [pc, #36]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004354:	d105      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800435c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004360:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004362:	7cbb      	ldrb	r3, [r7, #18]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e09d      	b.n	80044be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d009      	beq.n	80043a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
 800439a:	e005      	b.n	80043a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fc ff00 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043e8:	d902      	bls.n	80043f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e002      	b.n	80043f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043fe:	d007      	beq.n	8004410 <HAL_SPI_Init+0xa0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	ea42 0103 	orr.w	r1, r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	f003 0204 	and.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e049      	b.n	800456c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fc fecb 	bl	8001288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f000 f945 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800458a:	2302      	movs	r3, #2
 800458c:	e0fd      	b.n	800478a <HAL_TIM_PWM_ConfigChannel+0x216>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b14      	cmp	r3, #20
 800459a:	f200 80f0 	bhi.w	800477e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	0800477f 	.word	0x0800477f
 80045ac:	0800477f 	.word	0x0800477f
 80045b0:	0800477f 	.word	0x0800477f
 80045b4:	08004639 	.word	0x08004639
 80045b8:	0800477f 	.word	0x0800477f
 80045bc:	0800477f 	.word	0x0800477f
 80045c0:	0800477f 	.word	0x0800477f
 80045c4:	0800467b 	.word	0x0800467b
 80045c8:	0800477f 	.word	0x0800477f
 80045cc:	0800477f 	.word	0x0800477f
 80045d0:	0800477f 	.word	0x0800477f
 80045d4:	080046bb 	.word	0x080046bb
 80045d8:	0800477f 	.word	0x0800477f
 80045dc:	0800477f 	.word	0x0800477f
 80045e0:	0800477f 	.word	0x0800477f
 80045e4:	080046fd 	.word	0x080046fd
 80045e8:	0800477f 	.word	0x0800477f
 80045ec:	0800477f 	.word	0x0800477f
 80045f0:	0800477f 	.word	0x0800477f
 80045f4:	0800473d 	.word	0x0800473d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f970 	bl	80048e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6999      	ldr	r1, [r3, #24]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	619a      	str	r2, [r3, #24]
      break;
 8004636:	e0a3      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f9ea 	bl	8004a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	619a      	str	r2, [r3, #24]
      break;
 8004678:	e082      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fa5d 	bl	8004b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0208 	orr.w	r2, r2, #8
 8004694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0204 	bic.w	r2, r2, #4
 80046a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69d9      	ldr	r1, [r3, #28]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	61da      	str	r2, [r3, #28]
      break;
 80046b8:	e062      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 facf 	bl	8004c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	61da      	str	r2, [r3, #28]
      break;
 80046fa:	e041      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb42 	bl	8004d8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800473a:	e021      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb8c 	bl	8004e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800477c:	e000      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800477e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a46      	ldr	r2, [pc, #280]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d017      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d013      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <TIM_Base_SetConfig+0x134>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a41      	ldr	r2, [pc, #260]	; (80048cc <TIM_Base_SetConfig+0x138>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a40      	ldr	r2, [pc, #256]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0x48>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a3f      	ldr	r2, [pc, #252]	; (80048d4 <TIM_Base_SetConfig+0x140>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d108      	bne.n	80047ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d023      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fc:	d01f      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <TIM_Base_SetConfig+0x130>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2f      	ldr	r2, [pc, #188]	; (80048c8 <TIM_Base_SetConfig+0x134>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2e      	ldr	r2, [pc, #184]	; (80048cc <TIM_Base_SetConfig+0x138>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2d      	ldr	r2, [pc, #180]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <TIM_Base_SetConfig+0x144>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x148>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x14c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0xaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <TIM_Base_SetConfig+0x140>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <TIM_Base_SetConfig+0x110>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00f      	beq.n	80048a4 <TIM_Base_SetConfig+0x110>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <TIM_Base_SetConfig+0x144>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00b      	beq.n	80048a4 <TIM_Base_SetConfig+0x110>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <TIM_Base_SetConfig+0x148>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_Base_SetConfig+0x110>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <TIM_Base_SetConfig+0x14c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_Base_SetConfig+0x110>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <TIM_Base_SetConfig+0x140>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d103      	bne.n	80048ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	615a      	str	r2, [r3, #20]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40013400 	.word	0x40013400
 80048d4:	40015000 	.word	0x40015000
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800

080048e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f023 0302 	bic.w	r3, r3, #2
 8004930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <TIM_OC1_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_OC1_SetConfig+0x88>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <TIM_OC1_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00f      	beq.n	800496c <TIM_OC1_SetConfig+0x88>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <TIM_OC1_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_OC1_SetConfig+0x88>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <TIM_OC1_SetConfig+0x128>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_OC1_SetConfig+0x88>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <TIM_OC1_SetConfig+0x12c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC1_SetConfig+0x88>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a2b      	ldr	r2, [pc, #172]	; (8004a14 <TIM_OC1_SetConfig+0x130>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10c      	bne.n	8004986 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0308 	bic.w	r3, r3, #8
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <TIM_OC1_SetConfig+0x11c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_OC1_SetConfig+0xd2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <TIM_OC1_SetConfig+0x120>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_OC1_SetConfig+0xd2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <TIM_OC1_SetConfig+0x124>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_OC1_SetConfig+0xd2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1a      	ldr	r2, [pc, #104]	; (8004a0c <TIM_OC1_SetConfig+0x128>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_OC1_SetConfig+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <TIM_OC1_SetConfig+0x12c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC1_SetConfig+0xd2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <TIM_OC1_SetConfig+0x130>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	40015000 	.word	0x40015000

08004a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0320 	bic.w	r3, r3, #32
 8004a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	; (8004b28 <TIM_OC2_SetConfig+0x110>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC2_SetConfig+0x74>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <TIM_OC2_SetConfig+0x114>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC2_SetConfig+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <TIM_OC2_SetConfig+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10d      	bne.n	8004aa8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <TIM_OC2_SetConfig+0x110>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xc0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <TIM_OC2_SetConfig+0x114>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xc0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <TIM_OC2_SetConfig+0x11c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xc0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <TIM_OC2_SetConfig+0x120>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xc0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <TIM_OC2_SetConfig+0x124>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC2_SetConfig+0xc0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <TIM_OC2_SetConfig+0x118>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d113      	bne.n	8004b00 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40015000 	.word	0x40015000
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800

08004b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2b      	ldr	r2, [pc, #172]	; (8004c4c <TIM_OC3_SetConfig+0x10c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x72>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <TIM_OC3_SetConfig+0x110>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x72>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <TIM_OC3_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <TIM_OC3_SetConfig+0x10c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_OC3_SetConfig+0xbe>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <TIM_OC3_SetConfig+0x110>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_OC3_SetConfig+0xbe>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <TIM_OC3_SetConfig+0x118>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_OC3_SetConfig+0xbe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <TIM_OC3_SetConfig+0x11c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_OC3_SetConfig+0xbe>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <TIM_OC3_SetConfig+0x120>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0xbe>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <TIM_OC3_SetConfig+0x114>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d113      	bne.n	8004c26 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40015000 	.word	0x40015000
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <TIM_OC4_SetConfig+0x110>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x74>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <TIM_OC4_SetConfig+0x114>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x74>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_OC4_SetConfig+0x118>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10d      	bne.n	8004cf4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <TIM_OC4_SetConfig+0x110>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <TIM_OC4_SetConfig+0xc0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <TIM_OC4_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_OC4_SetConfig+0xc0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <TIM_OC4_SetConfig+0x11c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC4_SetConfig+0xc0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC4_SetConfig+0x120>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC4_SetConfig+0xc0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC4_SetConfig+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC4_SetConfig+0xc0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <TIM_OC4_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d113      	bne.n	8004d4c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40015000 	.word	0x40015000
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <TIM_OC5_SetConfig+0xbc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <TIM_OC5_SetConfig+0x82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <TIM_OC5_SetConfig+0xc0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_OC5_SetConfig+0x82>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <TIM_OC5_SetConfig+0xc4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_OC5_SetConfig+0x82>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <TIM_OC5_SetConfig+0xc8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC5_SetConfig+0x82>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <TIM_OC5_SetConfig+0xcc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC5_SetConfig+0x82>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <TIM_OC5_SetConfig+0xd0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d109      	bne.n	8004e22 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	621a      	str	r2, [r3, #32]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800
 8004e5c:	40015000 	.word	0x40015000

08004e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	051b      	lsls	r3, r3, #20
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <TIM_OC6_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <TIM_OC6_SetConfig+0xc4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x84>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <TIM_OC6_SetConfig+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x84>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <TIM_OC6_SetConfig+0xcc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x84>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <TIM_OC6_SetConfig+0xd0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC6_SetConfig+0x84>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC6_SetConfig+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800
 8004f34:	40015000 	.word	0x40015000

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e074      	b.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a34      	ldr	r2, [pc, #208]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a33      	ldr	r2, [pc, #204]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a31      	ldr	r2, [pc, #196]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d01d      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a11      	ldr	r2, [pc, #68]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10c      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40015000 	.word	0x40015000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40014000 	.word	0x40014000

08005064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e096      	b.n	80051ae <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	; (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2d      	ldr	r2, [pc, #180]	; (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d106      	bne.n	8005126 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a24      	ldr	r2, [pc, #144]	; (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d12b      	bne.n	800519c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	051b      	lsls	r3, r3, #20
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d106      	bne.n	800519c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40015000 	.word	0x40015000

080051c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e042      	b.n	8005260 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc f957 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f82c 	bl	8005268 <UART_SetConfig>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e022      	b.n	8005260 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 faf2 	bl	800580c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fb79 	bl	8005950 <UART_CheckIdleState>
 800525e:	4603      	mov	r3, r0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800526c:	b088      	sub	sp, #32
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4313      	orrs	r3, r2
 800528c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	4313      	orrs	r3, r2
 8005296:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4bb1      	ldr	r3, [pc, #708]	; (8005564 <UART_SetConfig+0x2fc>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4aa6      	ldr	r2, [pc, #664]	; (8005568 <UART_SetConfig+0x300>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	f023 010f 	bic.w	r1, r3, #15
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a97      	ldr	r2, [pc, #604]	; (800556c <UART_SetConfig+0x304>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d121      	bne.n	8005358 <UART_SetConfig+0xf0>
 8005314:	4b96      	ldr	r3, [pc, #600]	; (8005570 <UART_SetConfig+0x308>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b03      	cmp	r3, #3
 8005320:	d816      	bhi.n	8005350 <UART_SetConfig+0xe8>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0xc0>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	08005339 	.word	0x08005339
 800532c:	08005345 	.word	0x08005345
 8005330:	0800533f 	.word	0x0800533f
 8005334:	0800534b 	.word	0x0800534b
 8005338:	2301      	movs	r3, #1
 800533a:	76fb      	strb	r3, [r7, #27]
 800533c:	e0e8      	b.n	8005510 <UART_SetConfig+0x2a8>
 800533e:	2302      	movs	r3, #2
 8005340:	76fb      	strb	r3, [r7, #27]
 8005342:	e0e5      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005344:	2304      	movs	r3, #4
 8005346:	76fb      	strb	r3, [r7, #27]
 8005348:	e0e2      	b.n	8005510 <UART_SetConfig+0x2a8>
 800534a:	2308      	movs	r3, #8
 800534c:	76fb      	strb	r3, [r7, #27]
 800534e:	e0df      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005350:	2310      	movs	r3, #16
 8005352:	76fb      	strb	r3, [r7, #27]
 8005354:	bf00      	nop
 8005356:	e0db      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a85      	ldr	r2, [pc, #532]	; (8005574 <UART_SetConfig+0x30c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d134      	bne.n	80053cc <UART_SetConfig+0x164>
 8005362:	4b83      	ldr	r3, [pc, #524]	; (8005570 <UART_SetConfig+0x308>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b0c      	cmp	r3, #12
 800536e:	d829      	bhi.n	80053c4 <UART_SetConfig+0x15c>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x110>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053ad 	.word	0x080053ad
 800537c:	080053c5 	.word	0x080053c5
 8005380:	080053c5 	.word	0x080053c5
 8005384:	080053c5 	.word	0x080053c5
 8005388:	080053b9 	.word	0x080053b9
 800538c:	080053c5 	.word	0x080053c5
 8005390:	080053c5 	.word	0x080053c5
 8005394:	080053c5 	.word	0x080053c5
 8005398:	080053b3 	.word	0x080053b3
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053c5 	.word	0x080053c5
 80053a8:	080053bf 	.word	0x080053bf
 80053ac:	2300      	movs	r3, #0
 80053ae:	76fb      	strb	r3, [r7, #27]
 80053b0:	e0ae      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053b2:	2302      	movs	r3, #2
 80053b4:	76fb      	strb	r3, [r7, #27]
 80053b6:	e0ab      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053b8:	2304      	movs	r3, #4
 80053ba:	76fb      	strb	r3, [r7, #27]
 80053bc:	e0a8      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053be:	2308      	movs	r3, #8
 80053c0:	76fb      	strb	r3, [r7, #27]
 80053c2:	e0a5      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053c4:	2310      	movs	r3, #16
 80053c6:	76fb      	strb	r3, [r7, #27]
 80053c8:	bf00      	nop
 80053ca:	e0a1      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a69      	ldr	r2, [pc, #420]	; (8005578 <UART_SetConfig+0x310>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d120      	bne.n	8005418 <UART_SetConfig+0x1b0>
 80053d6:	4b66      	ldr	r3, [pc, #408]	; (8005570 <UART_SetConfig+0x308>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d00f      	beq.n	8005404 <UART_SetConfig+0x19c>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d802      	bhi.n	80053ee <UART_SetConfig+0x186>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <UART_SetConfig+0x190>
 80053ec:	e010      	b.n	8005410 <UART_SetConfig+0x1a8>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d005      	beq.n	80053fe <UART_SetConfig+0x196>
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	d009      	beq.n	800540a <UART_SetConfig+0x1a2>
 80053f6:	e00b      	b.n	8005410 <UART_SetConfig+0x1a8>
 80053f8:	2300      	movs	r3, #0
 80053fa:	76fb      	strb	r3, [r7, #27]
 80053fc:	e088      	b.n	8005510 <UART_SetConfig+0x2a8>
 80053fe:	2302      	movs	r3, #2
 8005400:	76fb      	strb	r3, [r7, #27]
 8005402:	e085      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005404:	2304      	movs	r3, #4
 8005406:	76fb      	strb	r3, [r7, #27]
 8005408:	e082      	b.n	8005510 <UART_SetConfig+0x2a8>
 800540a:	2308      	movs	r3, #8
 800540c:	76fb      	strb	r3, [r7, #27]
 800540e:	e07f      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005410:	2310      	movs	r3, #16
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	bf00      	nop
 8005416:	e07b      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a57      	ldr	r2, [pc, #348]	; (800557c <UART_SetConfig+0x314>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d120      	bne.n	8005464 <UART_SetConfig+0x1fc>
 8005422:	4b53      	ldr	r3, [pc, #332]	; (8005570 <UART_SetConfig+0x308>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d00f      	beq.n	8005450 <UART_SetConfig+0x1e8>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d802      	bhi.n	800543a <UART_SetConfig+0x1d2>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <UART_SetConfig+0x1dc>
 8005438:	e010      	b.n	800545c <UART_SetConfig+0x1f4>
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d005      	beq.n	800544a <UART_SetConfig+0x1e2>
 800543e:	2bc0      	cmp	r3, #192	; 0xc0
 8005440:	d009      	beq.n	8005456 <UART_SetConfig+0x1ee>
 8005442:	e00b      	b.n	800545c <UART_SetConfig+0x1f4>
 8005444:	2300      	movs	r3, #0
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	e062      	b.n	8005510 <UART_SetConfig+0x2a8>
 800544a:	2302      	movs	r3, #2
 800544c:	76fb      	strb	r3, [r7, #27]
 800544e:	e05f      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005450:	2304      	movs	r3, #4
 8005452:	76fb      	strb	r3, [r7, #27]
 8005454:	e05c      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005456:	2308      	movs	r3, #8
 8005458:	76fb      	strb	r3, [r7, #27]
 800545a:	e059      	b.n	8005510 <UART_SetConfig+0x2a8>
 800545c:	2310      	movs	r3, #16
 800545e:	76fb      	strb	r3, [r7, #27]
 8005460:	bf00      	nop
 8005462:	e055      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a45      	ldr	r2, [pc, #276]	; (8005580 <UART_SetConfig+0x318>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d124      	bne.n	80054b8 <UART_SetConfig+0x250>
 800546e:	4b40      	ldr	r3, [pc, #256]	; (8005570 <UART_SetConfig+0x308>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547c:	d012      	beq.n	80054a4 <UART_SetConfig+0x23c>
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	d802      	bhi.n	800548a <UART_SetConfig+0x222>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <UART_SetConfig+0x230>
 8005488:	e012      	b.n	80054b0 <UART_SetConfig+0x248>
 800548a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548e:	d006      	beq.n	800549e <UART_SetConfig+0x236>
 8005490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005494:	d009      	beq.n	80054aa <UART_SetConfig+0x242>
 8005496:	e00b      	b.n	80054b0 <UART_SetConfig+0x248>
 8005498:	2300      	movs	r3, #0
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e038      	b.n	8005510 <UART_SetConfig+0x2a8>
 800549e:	2302      	movs	r3, #2
 80054a0:	76fb      	strb	r3, [r7, #27]
 80054a2:	e035      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054a4:	2304      	movs	r3, #4
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e032      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054aa:	2308      	movs	r3, #8
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e02f      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054b0:	2310      	movs	r3, #16
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	bf00      	nop
 80054b6:	e02b      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <UART_SetConfig+0x300>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d124      	bne.n	800550c <UART_SetConfig+0x2a4>
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <UART_SetConfig+0x308>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d012      	beq.n	80054f8 <UART_SetConfig+0x290>
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	d802      	bhi.n	80054de <UART_SetConfig+0x276>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <UART_SetConfig+0x284>
 80054dc:	e012      	b.n	8005504 <UART_SetConfig+0x29c>
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d006      	beq.n	80054f2 <UART_SetConfig+0x28a>
 80054e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0x296>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x29c>
 80054ec:	2300      	movs	r3, #0
 80054ee:	76fb      	strb	r3, [r7, #27]
 80054f0:	e00e      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054f2:	2302      	movs	r3, #2
 80054f4:	76fb      	strb	r3, [r7, #27]
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054f8:	2304      	movs	r3, #4
 80054fa:	76fb      	strb	r3, [r7, #27]
 80054fc:	e008      	b.n	8005510 <UART_SetConfig+0x2a8>
 80054fe:	2308      	movs	r3, #8
 8005500:	76fb      	strb	r3, [r7, #27]
 8005502:	e005      	b.n	8005510 <UART_SetConfig+0x2a8>
 8005504:	2310      	movs	r3, #16
 8005506:	76fb      	strb	r3, [r7, #27]
 8005508:	bf00      	nop
 800550a:	e001      	b.n	8005510 <UART_SetConfig+0x2a8>
 800550c:	2310      	movs	r3, #16
 800550e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a14      	ldr	r2, [pc, #80]	; (8005568 <UART_SetConfig+0x300>)
 8005516:	4293      	cmp	r3, r2
 8005518:	f040 80a1 	bne.w	800565e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800551c:	7efb      	ldrb	r3, [r7, #27]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d836      	bhi.n	8005590 <UART_SetConfig+0x328>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x2c0>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005591 	.word	0x08005591
 8005530:	08005555 	.word	0x08005555
 8005534:	08005591 	.word	0x08005591
 8005538:	0800555b 	.word	0x0800555b
 800553c:	08005591 	.word	0x08005591
 8005540:	08005591 	.word	0x08005591
 8005544:	08005591 	.word	0x08005591
 8005548:	08005589 	.word	0x08005589
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fe fc52 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 8005550:	6178      	str	r0, [r7, #20]
        break;
 8005552:	e022      	b.n	800559a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <UART_SetConfig+0x31c>)
 8005556:	617b      	str	r3, [r7, #20]
        break;
 8005558:	e01f      	b.n	800559a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe fbdd 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 800555e:	6178      	str	r0, [r7, #20]
        break;
 8005560:	e01b      	b.n	800559a <UART_SetConfig+0x332>
 8005562:	bf00      	nop
 8005564:	cfff69f3 	.word	0xcfff69f3
 8005568:	40008000 	.word	0x40008000
 800556c:	40013800 	.word	0x40013800
 8005570:	40021000 	.word	0x40021000
 8005574:	40004400 	.word	0x40004400
 8005578:	40004800 	.word	0x40004800
 800557c:	40004c00 	.word	0x40004c00
 8005580:	40005000 	.word	0x40005000
 8005584:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558c:	617b      	str	r3, [r7, #20]
        break;
 800558e:	e004      	b.n	800559a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	76bb      	strb	r3, [r7, #26]
        break;
 8005598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 811d 	beq.w	80057dc <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	4a97      	ldr	r2, [pc, #604]	; (8005804 <UART_SetConfig+0x59c>)
 80055a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ac:	461a      	mov	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d305      	bcc.n	80055d2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d902      	bls.n	80055d8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	76bb      	strb	r3, [r7, #26]
 80055d6:	e101      	b.n	80057dc <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4618      	mov	r0, r3
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	4a87      	ldr	r2, [pc, #540]	; (8005804 <UART_SetConfig+0x59c>)
 80055e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f04f 0400 	mov.w	r4, #0
 80055f0:	461a      	mov	r2, r3
 80055f2:	4623      	mov	r3, r4
 80055f4:	f7fa fe10 	bl	8000218 <__aeabi_uldivmod>
 80055f8:	4603      	mov	r3, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4619      	mov	r1, r3
 80055fe:	4622      	mov	r2, r4
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0214      	lsls	r4, r2, #8
 800560a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800560e:	020b      	lsls	r3, r1, #8
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	0852      	lsrs	r2, r2, #1
 8005616:	4611      	mov	r1, r2
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	eb13 0b01 	adds.w	fp, r3, r1
 8005620:	eb44 0c02 	adc.w	ip, r4, r2
 8005624:	4658      	mov	r0, fp
 8005626:	4661      	mov	r1, ip
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	461a      	mov	r2, r3
 8005632:	4623      	mov	r3, r4
 8005634:	f7fa fdf0 	bl	8000218 <__aeabi_uldivmod>
 8005638:	4603      	mov	r3, r0
 800563a:	460c      	mov	r4, r1
 800563c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005644:	d308      	bcc.n	8005658 <UART_SetConfig+0x3f0>
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564c:	d204      	bcs.n	8005658 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e0c1      	b.n	80057dc <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	76bb      	strb	r3, [r7, #26]
 800565c:	e0be      	b.n	80057dc <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d164      	bne.n	8005732 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005668:	7efb      	ldrb	r3, [r7, #27]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d827      	bhi.n	80056be <UART_SetConfig+0x456>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0x40c>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005699 	.word	0x08005699
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056bf 	.word	0x080056bf
 8005684:	080056af 	.word	0x080056af
 8005688:	080056bf 	.word	0x080056bf
 800568c:	080056bf 	.word	0x080056bf
 8005690:	080056bf 	.word	0x080056bf
 8005694:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005698:	f7fe fbac 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 800569c:	6178      	str	r0, [r7, #20]
        break;
 800569e:	e013      	b.n	80056c8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fbbe 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 80056a4:	6178      	str	r0, [r7, #20]
        break;
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b57      	ldr	r3, [pc, #348]	; (8005808 <UART_SetConfig+0x5a0>)
 80056aa:	617b      	str	r3, [r7, #20]
        break;
 80056ac:	e00c      	b.n	80056c8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fb33 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 80056b2:	6178      	str	r0, [r7, #20]
        break;
 80056b4:	e008      	b.n	80056c8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ba:	617b      	str	r3, [r7, #20]
        break;
 80056bc:	e004      	b.n	80056c8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	76bb      	strb	r3, [r7, #26]
        break;
 80056c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8086 	beq.w	80057dc <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	4a4b      	ldr	r2, [pc, #300]	; (8005804 <UART_SetConfig+0x59c>)
 80056d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056da:	461a      	mov	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e2:	005a      	lsls	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	441a      	add	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d916      	bls.n	800572c <UART_SetConfig+0x4c4>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d212      	bcs.n	800572c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f023 030f 	bic.w	r3, r3, #15
 800570e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	b29a      	uxth	r2, r3
 800571c:	89fb      	ldrh	r3, [r7, #14]
 800571e:	4313      	orrs	r3, r2
 8005720:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	89fa      	ldrh	r2, [r7, #14]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	e057      	b.n	80057dc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	76bb      	strb	r3, [r7, #26]
 8005730:	e054      	b.n	80057dc <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005732:	7efb      	ldrb	r3, [r7, #27]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d828      	bhi.n	800578a <UART_SetConfig+0x522>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <UART_SetConfig+0x4d8>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	0800578b 	.word	0x0800578b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800578b 	.word	0x0800578b
 8005758:	0800578b 	.word	0x0800578b
 800575c:	0800578b 	.word	0x0800578b
 8005760:	08005783 	.word	0x08005783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fe fb46 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 8005768:	6178      	str	r0, [r7, #20]
        break;
 800576a:	e013      	b.n	8005794 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fe fb58 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8005770:	6178      	str	r0, [r7, #20]
        break;
 8005772:	e00f      	b.n	8005794 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b24      	ldr	r3, [pc, #144]	; (8005808 <UART_SetConfig+0x5a0>)
 8005776:	617b      	str	r3, [r7, #20]
        break;
 8005778:	e00c      	b.n	8005794 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fe facd 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 800577e:	6178      	str	r0, [r7, #20]
        break;
 8005780:	e008      	b.n	8005794 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005786:	617b      	str	r3, [r7, #20]
        break;
 8005788:	e004      	b.n	8005794 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	76bb      	strb	r3, [r7, #26]
        break;
 8005792:	bf00      	nop
    }

    if (pclk != 0U)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d020      	beq.n	80057dc <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	4a19      	ldr	r2, [pc, #100]	; (8005804 <UART_SetConfig+0x59c>)
 80057a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a4:	461a      	mov	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	441a      	add	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d908      	bls.n	80057d8 <UART_SetConfig+0x570>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d204      	bcs.n	80057d8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	e001      	b.n	80057dc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80057f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005804:	08005db4 	.word	0x08005db4
 8005808:	00f42400 	.word	0x00f42400

0800580c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01a      	beq.n	8005922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590a:	d10a      	bne.n	8005922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
  }
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af02      	add	r7, sp, #8
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005960:	f7fb feb4 	bl	80016cc <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b08      	cmp	r3, #8
 8005972:	d10e      	bne.n	8005992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f82c 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e022      	b.n	80059d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b04      	cmp	r3, #4
 800599e:	d10e      	bne.n	80059be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f816 	bl	80059e0 <UART_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e00c      	b.n	80059d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f0:	e062      	b.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d05e      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fb fe67 	bl	80016cc <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11d      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a1e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e045      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02e      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a68:	d126      	bne.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a82:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e00f      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d08d      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e027      	b.n	8005b46 <HAL_UARTEx_DisableFifoMode+0x66>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2224      	movs	r2, #36	; 0x24
 8005b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e02d      	b.n	8005bc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2224      	movs	r2, #36	; 0x24
 8005b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f850 	bl	8005c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e02d      	b.n	8005c42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2224      	movs	r2, #36	; 0x24
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f812 	bl	8005c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c54:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <UARTEx_SetNbDataToProcess+0xc8>)
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c62:	4a2d      	ldr	r2, [pc, #180]	; (8005d18 <UARTEx_SetNbDataToProcess+0xcc>)
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c88:	e03d      	b.n	8005d06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c8e:	2308      	movs	r3, #8
 8005c90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0e5b      	lsrs	r3, r3, #25
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	0f5b      	lsrs	r3, r3, #29
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb2:	7fbb      	ldrb	r3, [r7, #30]
 8005cb4:	7f3a      	ldrb	r2, [r7, #28]
 8005cb6:	f107 0120 	add.w	r1, r7, #32
 8005cba:	440a      	add	r2, r1
 8005cbc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cc4:	7f3a      	ldrb	r2, [r7, #28]
 8005cc6:	f107 0120 	add.w	r1, r7, #32
 8005cca:	440a      	add	r2, r1
 8005ccc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	7f7a      	ldrb	r2, [r7, #29]
 8005ce0:	f107 0120 	add.w	r1, r7, #32
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cee:	7f7a      	ldrb	r2, [r7, #29]
 8005cf0:	f107 0120 	add.w	r1, r7, #32
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d06:	bf00      	nop
 8005d08:	3724      	adds	r7, #36	; 0x24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	08005d8c 	.word	0x08005d8c
 8005d18:	08005d94 	.word	0x08005d94

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4e0d      	ldr	r6, [pc, #52]	; (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	; (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1ba4      	subs	r4, r4, r6
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2500      	movs	r5, #0
 8005d28:	42a5      	cmp	r5, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4e0b      	ldr	r6, [pc, #44]	; (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	; (8005d60 <__libc_init_array+0x44>)
 8005d30:	f000 f820 	bl	8005d74 <_init>
 8005d34:	1ba4      	subs	r4, r4, r6
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2500      	movs	r5, #0
 8005d3a:	42a5      	cmp	r5, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d44:	4798      	blx	r3
 8005d46:	3501      	adds	r5, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d4e:	4798      	blx	r3
 8005d50:	3501      	adds	r5, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	08005dd4 	.word	0x08005dd4
 8005d58:	08005dd4 	.word	0x08005dd4
 8005d5c:	08005dd4 	.word	0x08005dd4
 8005d60:	08005dd8 	.word	0x08005dd8

08005d64 <memset>:
 8005d64:	4402      	add	r2, r0
 8005d66:	4603      	mov	r3, r0
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d100      	bne.n	8005d6e <memset+0xa>
 8005d6c:	4770      	bx	lr
 8005d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d72:	e7f9      	b.n	8005d68 <memset+0x4>

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
